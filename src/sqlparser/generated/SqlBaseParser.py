# Generated from /media/NVMe/Projects/SQL-AI/python-sql-parser/src/sqlparser/grammar/SqlBase.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,297,3018,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        1,0,1,0,5,0,277,8,0,10,0,12,0,280,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,
        2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,3,
        7,304,8,7,1,7,1,7,1,7,3,7,309,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,317,
        8,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,325,8,7,10,7,12,7,328,9,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
        7,347,8,7,1,7,1,7,3,7,351,8,7,1,7,1,7,1,7,1,7,3,7,357,8,7,1,7,3,
        7,360,8,7,1,7,3,7,363,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,371,8,7,1,
        7,3,7,374,8,7,1,7,1,7,3,7,378,8,7,1,7,3,7,381,8,7,1,7,1,7,1,7,1,
        7,1,7,1,7,3,7,389,8,7,1,7,1,7,1,7,3,7,394,8,7,1,7,3,7,397,8,7,1,
        7,1,7,1,7,1,7,1,7,3,7,404,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,3,7,416,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,425,8,7,10,7,12,
        7,428,9,7,1,7,3,7,431,8,7,1,7,3,7,434,8,7,1,7,1,7,1,7,1,7,1,7,3,
        7,441,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,452,8,7,10,7,12,
        7,455,9,7,1,7,1,7,1,7,1,7,1,7,3,7,462,8,7,1,7,1,7,1,7,3,7,467,8,
        7,1,7,3,7,470,8,7,1,7,1,7,1,7,1,7,3,7,476,8,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,3,7,487,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,551,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
        7,560,8,7,1,7,1,7,3,7,564,8,7,1,7,1,7,1,7,1,7,3,7,570,8,7,1,7,1,
        7,3,7,574,8,7,1,7,1,7,1,7,3,7,579,8,7,1,7,1,7,1,7,1,7,3,7,585,8,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,597,8,7,1,7,1,7,1,
        7,1,7,1,7,1,7,3,7,605,8,7,1,7,1,7,1,7,1,7,3,7,611,8,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,624,8,7,1,7,4,7,627,8,7,11,
        7,12,7,628,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,3,7,645,8,7,1,7,1,7,1,7,5,7,650,8,7,10,7,12,7,653,9,7,1,7,3,7,
        656,8,7,1,7,1,7,1,7,1,7,3,7,662,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,3,7,677,8,7,1,7,1,7,3,7,681,8,7,1,7,1,7,
        1,7,1,7,3,7,687,8,7,1,7,1,7,1,7,1,7,3,7,693,8,7,1,7,3,7,696,8,7,
        1,7,3,7,699,8,7,1,7,1,7,1,7,1,7,3,7,705,8,7,1,7,1,7,3,7,709,8,7,
        1,7,1,7,1,7,1,7,1,7,1,7,5,7,717,8,7,10,7,12,7,720,9,7,1,7,1,7,1,
        7,1,7,1,7,1,7,3,7,728,8,7,1,7,3,7,731,8,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,3,7,740,8,7,1,7,1,7,1,7,3,7,745,8,7,1,7,1,7,1,7,1,7,3,7,751,
        8,7,1,7,1,7,1,7,1,7,1,7,3,7,758,8,7,1,7,3,7,761,8,7,1,7,1,7,1,7,
        1,7,3,7,767,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,776,8,7,10,7,12,
        7,779,9,7,3,7,781,8,7,1,7,1,7,3,7,785,8,7,1,7,1,7,1,7,3,7,790,8,
        7,1,7,1,7,1,7,3,7,795,8,7,1,7,1,7,1,7,1,7,1,7,3,7,802,8,7,1,7,3,
        7,805,8,7,1,7,3,7,808,8,7,1,7,1,7,1,7,1,7,1,7,3,7,815,8,7,1,7,1,
        7,1,7,3,7,820,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,829,8,7,1,7,1,
        7,1,7,1,7,1,7,1,7,3,7,837,8,7,1,7,1,7,1,7,1,7,3,7,843,8,7,1,7,3,
        7,846,8,7,1,7,3,7,849,8,7,1,7,1,7,1,7,1,7,3,7,855,8,7,1,7,1,7,3,
        7,859,8,7,1,7,1,7,3,7,863,8,7,1,7,1,7,3,7,867,8,7,3,7,869,8,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,877,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,885,
        8,7,1,7,1,7,1,7,1,7,3,7,891,8,7,1,7,1,7,1,7,1,7,3,7,897,8,7,1,7,
        3,7,900,8,7,1,7,1,7,3,7,904,8,7,1,7,3,7,907,8,7,1,7,1,7,3,7,911,
        8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,5,7,934,8,7,10,7,12,7,937,9,7,3,7,939,8,
        7,1,7,1,7,3,7,943,8,7,1,7,1,7,1,7,1,7,3,7,949,8,7,1,7,3,7,952,8,
        7,1,7,3,7,955,8,7,1,7,1,7,1,7,1,7,3,7,961,8,7,1,7,1,7,1,7,1,7,1,
        7,1,7,3,7,969,8,7,1,7,1,7,1,7,3,7,974,8,7,1,7,1,7,1,7,1,7,3,7,980,
        8,7,1,7,1,7,1,7,1,7,3,7,986,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        5,7,996,8,7,10,7,12,7,999,9,7,3,7,1001,8,7,1,7,1,7,1,7,5,7,1006,
        8,7,10,7,12,7,1009,9,7,1,7,1,7,5,7,1013,8,7,10,7,12,7,1016,9,7,1,
        7,1,7,1,7,5,7,1021,8,7,10,7,12,7,1024,9,7,3,7,1026,8,7,1,8,1,8,1,
        8,1,8,1,8,1,8,3,8,1034,8,8,1,8,1,8,3,8,1038,8,8,1,8,1,8,1,8,1,8,
        1,8,3,8,1045,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,1161,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,
        1169,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1177,8,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,3,8,1186,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1196,
        8,8,1,9,1,9,3,9,1200,8,9,1,9,3,9,1203,8,9,1,9,1,9,1,9,1,9,3,9,1209,
        8,9,1,9,1,9,1,10,1,10,3,10,1215,8,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,3,11,1227,8,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,3,12,1239,8,12,1,12,1,12,1,12,3,12,1244,8,
        12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,3,15,1253,8,15,1,15,1,15,1,
        15,1,16,1,16,1,16,3,16,1261,8,16,1,16,1,16,1,16,1,16,1,16,3,16,1268,
        8,16,3,16,1270,8,16,1,16,1,16,1,16,3,16,1275,8,16,1,16,1,16,3,16,
        1279,8,16,1,16,1,16,1,16,3,16,1284,8,16,1,16,1,16,1,16,3,16,1289,
        8,16,1,16,1,16,1,16,3,16,1294,8,16,1,16,3,16,1297,8,16,1,16,1,16,
        1,16,3,16,1302,8,16,1,16,1,16,3,16,1306,8,16,1,16,1,16,1,16,3,16,
        1311,8,16,3,16,1313,8,16,1,17,1,17,3,17,1317,8,17,1,18,1,18,1,18,
        1,18,1,18,5,18,1324,8,18,10,18,12,18,1327,9,18,1,18,1,18,1,19,1,
        19,1,19,3,19,1334,8,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,3,21,1343,
        8,21,1,22,1,22,1,22,5,22,1348,8,22,10,22,12,22,1351,9,22,1,23,1,
        23,1,23,1,23,5,23,1357,8,23,10,23,12,23,1360,9,23,1,24,1,24,3,24,
        1364,8,24,1,24,3,24,1367,8,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,1386,8,26,
        10,26,12,26,1389,9,26,1,27,1,27,1,27,1,27,5,27,1395,8,27,10,27,12,
        27,1398,9,27,1,27,1,27,1,28,1,28,3,28,1404,8,28,1,28,3,28,1407,8,
        28,1,29,1,29,1,29,5,29,1412,8,29,10,29,12,29,1415,9,29,1,29,3,29,
        1418,8,29,1,30,1,30,1,30,1,30,3,30,1424,8,30,1,31,1,31,1,31,1,31,
        5,31,1430,8,31,10,31,12,31,1433,9,31,1,31,1,31,1,32,1,32,1,32,1,
        32,5,32,1441,8,32,10,32,12,32,1444,9,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,33,3,33,1454,8,33,1,34,1,34,1,34,1,34,1,34,3,34,1461,
        8,34,1,35,1,35,1,35,1,35,3,35,1467,8,35,1,36,1,36,1,36,1,37,1,37,
        1,37,1,37,1,37,1,37,4,37,1478,8,37,11,37,12,37,1479,1,37,1,37,1,
        37,1,37,1,37,3,37,1487,8,37,1,37,1,37,1,37,1,37,1,37,3,37,1494,8,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1506,8,
        37,1,37,1,37,1,37,1,37,5,37,1512,8,37,10,37,12,37,1515,9,37,1,37,
        5,37,1518,8,37,10,37,12,37,1521,9,37,3,37,1523,8,37,1,38,1,38,1,
        38,1,38,1,38,5,38,1530,8,38,10,38,12,38,1533,9,38,3,38,1535,8,38,
        1,38,1,38,1,38,1,38,1,38,5,38,1542,8,38,10,38,12,38,1545,9,38,3,
        38,1547,8,38,1,38,1,38,1,38,1,38,1,38,5,38,1554,8,38,10,38,12,38,
        1557,9,38,3,38,1559,8,38,1,38,1,38,1,38,1,38,1,38,5,38,1566,8,38,
        10,38,12,38,1569,9,38,3,38,1571,8,38,1,38,3,38,1574,8,38,1,38,1,
        38,1,38,3,38,1579,8,38,3,38,1581,8,38,1,39,1,39,1,39,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,3,40,1593,8,40,1,40,1,40,1,40,1,40,1,40,3,
        40,1600,8,40,1,40,1,40,1,40,1,40,1,40,3,40,1607,8,40,1,40,5,40,1610,
        8,40,10,40,12,40,1613,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,3,41,1624,8,41,1,42,1,42,3,42,1628,8,42,1,42,1,42,3,42,1632,
        8,42,1,43,1,43,4,43,1636,8,43,11,43,12,43,1637,1,44,1,44,3,44,1642,
        8,44,1,44,1,44,1,44,1,44,5,44,1648,8,44,10,44,12,44,1651,9,44,1,
        44,3,44,1654,8,44,1,44,3,44,1657,8,44,1,44,3,44,1660,8,44,1,44,3,
        44,1663,8,44,1,44,1,44,3,44,1667,8,44,1,45,1,45,3,45,1671,8,45,1,
        45,3,45,1674,8,45,1,45,1,45,3,45,1678,8,45,1,45,5,45,1681,8,45,10,
        45,12,45,1684,9,45,1,45,3,45,1687,8,45,1,45,3,45,1690,8,45,1,45,
        3,45,1693,8,45,1,45,3,45,1696,8,45,3,45,1698,8,45,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1710,8,46,1,46,3,46,1713,
        8,46,1,46,1,46,3,46,1717,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,3,46,1727,8,46,1,46,1,46,3,46,1731,8,46,3,46,1733,8,46,1,46,
        3,46,1736,8,46,1,46,1,46,3,46,1740,8,46,1,47,1,47,5,47,1744,8,47,
        10,47,12,47,1747,9,47,1,47,3,47,1750,8,47,1,47,1,47,1,48,1,48,1,
        48,1,49,1,49,1,49,1,49,3,49,1761,8,49,1,49,1,49,1,49,1,50,1,50,1,
        50,1,50,1,50,3,50,1771,8,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,3,51,1783,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,5,52,1796,8,52,10,52,12,52,1799,9,52,1,52,1,52,
        3,52,1803,8,52,1,53,1,53,1,53,5,53,1808,8,53,10,53,12,53,1811,9,
        53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,
        57,3,57,1826,8,57,1,57,5,57,1829,8,57,10,57,12,57,1832,9,57,1,57,
        1,57,1,58,1,58,1,58,1,58,1,58,1,58,5,58,1842,8,58,10,58,12,58,1845,
        9,58,1,58,1,58,3,58,1849,8,58,1,59,1,59,1,59,1,59,5,59,1855,8,59,
        10,59,12,59,1858,9,59,1,59,5,59,1861,8,59,10,59,12,59,1864,9,59,
        1,59,3,59,1867,8,59,1,60,1,60,1,60,1,60,1,60,5,60,1874,8,60,10,60,
        12,60,1877,9,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        5,60,1889,8,60,10,60,12,60,1892,9,60,1,60,1,60,3,60,1896,8,60,1,
        60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,1906,8,60,10,60,12,60,
        1909,9,60,1,60,1,60,3,60,1913,8,60,1,61,1,61,1,61,1,61,5,61,1919,
        8,61,10,61,12,61,1922,9,61,3,61,1924,8,61,1,61,1,61,3,61,1928,8,
        61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,1940,8,
        62,10,62,12,62,1943,9,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,
        5,63,1953,8,63,10,63,12,63,1956,9,63,1,63,1,63,3,63,1960,8,63,1,
        64,1,64,3,64,1964,8,64,1,64,3,64,1967,8,64,1,65,1,65,1,65,3,65,1972,
        8,65,1,65,1,65,1,65,1,65,1,65,5,65,1979,8,65,10,65,12,65,1982,9,
        65,3,65,1984,8,65,1,65,1,65,1,65,3,65,1989,8,65,1,65,1,65,1,65,5,
        65,1994,8,65,10,65,12,65,1997,9,65,3,65,1999,8,65,1,66,1,66,1,67,
        1,67,5,67,2005,8,67,10,67,12,67,2008,9,67,1,68,1,68,1,68,1,68,3,
        68,2014,8,68,1,68,1,68,1,68,1,68,1,68,3,68,2021,8,68,1,69,3,69,2024,
        8,69,1,69,1,69,1,69,3,69,2029,8,69,1,69,3,69,2032,8,69,1,69,1,69,
        1,69,3,69,2037,8,69,1,69,1,69,3,69,2041,8,69,1,69,3,69,2044,8,69,
        1,69,3,69,2047,8,69,1,70,1,70,1,70,1,70,3,70,2053,8,70,1,71,1,71,
        1,71,3,71,2058,8,71,1,71,1,71,1,72,3,72,2063,8,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        3,72,2081,8,72,3,72,2083,8,72,1,72,3,72,2086,8,72,1,73,1,73,1,73,
        1,73,1,74,1,74,1,74,5,74,2095,8,74,10,74,12,74,2098,9,74,1,75,1,
        75,1,75,1,75,5,75,2104,8,75,10,75,12,75,2107,9,75,1,75,1,75,1,76,
        1,76,3,76,2113,8,76,1,77,1,77,1,77,1,77,5,77,2119,8,77,10,77,12,
        77,2122,9,77,1,77,1,77,1,78,1,78,3,78,2128,8,78,1,79,1,79,3,79,2132,
        8,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,2140,8,79,1,79,1,79,1,79,
        1,79,1,79,1,79,3,79,2148,8,79,1,79,1,79,1,79,1,79,3,79,2154,8,79,
        1,80,1,80,1,80,1,80,5,80,2160,8,80,10,80,12,80,2163,9,80,1,80,1,
        80,1,81,1,81,1,81,1,81,1,81,5,81,2172,8,81,10,81,12,81,2175,9,81,
        3,81,2177,8,81,1,81,1,81,1,81,1,82,3,82,2183,8,82,1,82,1,82,3,82,
        2187,8,82,3,82,2189,8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,
        2198,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,
        2210,8,83,3,83,2212,8,83,1,83,1,83,1,83,1,83,1,83,3,83,2219,8,83,
        1,83,1,83,1,83,1,83,1,83,3,83,2226,8,83,1,83,1,83,1,83,1,83,3,83,
        2232,8,83,1,83,1,83,1,83,1,83,3,83,2238,8,83,3,83,2240,8,83,1,84,
        1,84,1,84,5,84,2245,8,84,10,84,12,84,2248,9,84,1,85,1,85,1,85,5,
        85,2253,8,85,10,85,12,85,2256,9,85,1,86,1,86,1,86,3,86,2261,8,86,
        1,86,1,86,1,87,1,87,1,87,3,87,2268,8,87,1,87,1,87,1,88,1,88,3,88,
        2274,8,88,1,88,1,88,3,88,2278,8,88,3,88,2280,8,88,1,89,1,89,1,89,
        5,89,2285,8,89,10,89,12,89,2288,9,89,1,90,1,90,1,90,1,90,5,90,2294,
        8,90,10,90,12,90,2297,9,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,
        91,5,91,2307,8,91,10,91,12,91,2310,9,91,1,91,1,91,3,91,2314,8,91,
        1,92,1,92,3,92,2318,8,92,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,3,94,2332,8,94,3,94,2334,8,94,1,94,1,94,1,94,
        1,94,1,94,1,94,5,94,2342,8,94,10,94,12,94,2345,9,94,1,95,3,95,2348,
        8,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2356,8,95,1,95,1,95,1,95,
        1,95,1,95,5,95,2363,8,95,10,95,12,95,2366,9,95,1,95,1,95,1,95,3,
        95,2371,8,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2379,8,95,1,95,1,
        95,1,95,3,95,2384,8,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,5,
        95,2394,8,95,10,95,12,95,2397,9,95,1,95,1,95,3,95,2401,8,95,1,95,
        3,95,2404,8,95,1,95,1,95,1,95,1,95,3,95,2410,8,95,1,95,1,95,3,95,
        2414,8,95,1,95,1,95,1,95,3,95,2419,8,95,1,95,1,95,1,95,3,95,2424,
        8,95,1,95,1,95,1,95,3,95,2429,8,95,1,96,1,96,1,96,1,96,3,96,2435,
        8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,2456,8,96,10,96,12,96,2459,
        9,96,1,97,1,97,1,97,1,97,4,97,2465,8,97,11,97,12,97,2466,1,97,1,
        97,3,97,2471,8,97,1,97,1,97,1,97,1,97,1,97,4,97,2478,8,97,11,97,
        12,97,2479,1,97,1,97,3,97,2484,8,97,1,97,1,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,5,97,2500,8,97,10,97,12,
        97,2503,9,97,3,97,2505,8,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,2513,
        8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,2522,8,97,1,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,1,97,4,97,2543,8,97,11,97,12,97,2544,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,2556,8,97,1,97,1,97,1,97,5,
        97,2561,8,97,10,97,12,97,2564,9,97,3,97,2566,8,97,1,97,1,97,1,97,
        1,97,1,97,1,97,1,97,3,97,2575,8,97,1,97,1,97,3,97,2579,8,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,4,97,2589,8,97,11,97,12,97,2590,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,2616,8,97,
        1,97,1,97,1,97,1,97,1,97,3,97,2623,8,97,1,97,3,97,2626,8,97,1,97,
        1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,
        2641,8,97,1,97,1,97,3,97,2645,8,97,1,97,1,97,1,97,1,97,1,97,1,97,
        1,97,1,97,5,97,2655,8,97,10,97,12,97,2658,9,97,1,98,1,98,1,98,1,
        98,1,98,1,98,1,98,1,98,4,98,2668,8,98,11,98,12,98,2669,3,98,2672,
        8,98,1,99,1,99,1,100,1,100,1,101,1,101,1,102,1,102,1,103,1,103,1,
        103,3,103,2685,8,103,1,104,1,104,3,104,2689,8,104,1,105,1,105,1,
        105,4,105,2694,8,105,11,105,12,105,2695,1,106,1,106,1,106,3,106,
        2701,8,106,1,107,1,107,1,107,1,107,1,107,1,108,3,108,2709,8,108,
        1,108,1,108,3,108,2713,8,108,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,3,109,2722,8,109,1,110,1,110,1,110,3,110,2727,8,110,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,3,111,2744,8,111,1,111,1,111,3,111,2748,8,111,
        1,111,1,111,1,111,1,111,1,111,5,111,2755,8,111,10,111,12,111,2758,
        9,111,1,111,3,111,2761,8,111,3,111,2763,8,111,1,112,1,112,1,112,
        5,112,2768,8,112,10,112,12,112,2771,9,112,1,113,1,113,1,113,1,113,
        3,113,2777,8,113,1,113,3,113,2780,8,113,1,113,3,113,2783,8,113,1,
        114,1,114,1,114,5,114,2788,8,114,10,114,12,114,2791,9,114,1,115,
        1,115,1,115,1,115,3,115,2797,8,115,1,115,3,115,2800,8,115,1,116,
        1,116,1,116,5,116,2805,8,116,10,116,12,116,2808,9,116,1,117,1,117,
        1,117,1,117,1,117,3,117,2815,8,117,1,117,3,117,2818,8,117,1,118,
        1,118,1,118,1,118,1,118,1,119,1,119,1,119,1,119,5,119,2829,8,119,
        10,119,12,119,2832,9,119,1,120,1,120,1,120,1,120,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,5,121,2849,8,121,
        10,121,12,121,2852,9,121,1,121,1,121,1,121,1,121,1,121,5,121,2859,
        8,121,10,121,12,121,2862,9,121,3,121,2864,8,121,1,121,1,121,1,121,
        1,121,1,121,5,121,2871,8,121,10,121,12,121,2874,9,121,3,121,2876,
        8,121,3,121,2878,8,121,1,121,3,121,2881,8,121,1,121,3,121,2884,8,
        121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,3,122,2902,8,122,1,123,1,123,
        1,123,1,123,1,123,1,123,1,123,3,123,2911,8,123,1,124,1,124,1,124,
        5,124,2916,8,124,10,124,12,124,2919,9,124,1,125,1,125,1,125,1,125,
        3,125,2925,8,125,1,126,1,126,1,126,5,126,2930,8,126,10,126,12,126,
        2933,9,126,1,127,1,127,1,127,1,128,1,128,4,128,2940,8,128,11,128,
        12,128,2941,1,128,3,128,2945,8,128,1,129,1,129,1,129,3,129,2950,
        8,129,1,130,1,130,1,130,1,130,1,130,1,130,3,130,2958,8,130,1,131,
        1,131,1,132,1,132,3,132,2964,8,132,1,132,1,132,1,132,3,132,2969,
        8,132,1,132,1,132,1,132,3,132,2974,8,132,1,132,1,132,3,132,2978,
        8,132,1,132,1,132,3,132,2982,8,132,1,132,1,132,3,132,2986,8,132,
        1,132,1,132,3,132,2990,8,132,1,132,1,132,3,132,2994,8,132,1,132,
        1,132,3,132,2998,8,132,1,132,3,132,3001,8,132,1,133,1,133,1,133,
        1,133,1,133,1,133,1,133,3,133,3010,8,133,1,134,1,134,1,135,1,135,
        1,136,1,136,1,136,5,935,997,1007,1014,1022,4,80,188,192,194,137,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
        254,256,258,260,262,264,266,268,270,272,0,42,2,0,65,65,180,180,2,
        0,32,32,194,194,2,0,63,63,150,150,2,0,100,100,113,113,1,0,43,44,
        2,0,227,227,257,257,2,0,15,15,35,35,5,0,40,40,52,52,86,86,99,99,
        141,141,1,0,69,70,2,0,86,86,99,99,2,0,154,154,283,283,2,0,12,12,
        135,135,3,0,62,62,149,149,204,204,4,0,81,81,120,120,213,213,247,
        247,3,0,81,81,213,213,247,247,2,0,23,23,69,69,2,0,94,94,127,127,
        2,0,14,14,74,74,2,0,287,287,289,289,3,0,14,14,19,19,217,217,3,0,
        89,89,241,241,249,249,2,0,272,273,278,278,1,0,274,277,2,0,272,273,
        281,281,2,0,57,57,59,59,1,0,225,226,2,0,4,4,100,100,2,0,4,4,96,96,
        3,0,27,27,130,130,236,236,1,0,264,271,1,0,272,282,4,0,17,17,113,
        113,153,153,161,161,2,0,89,89,241,241,1,0,272,273,2,0,75,75,170,
        170,2,0,162,162,218,218,2,0,95,95,177,177,1,0,288,289,2,0,76,76,
        212,212,51,0,12,13,15,16,20,21,23,24,26,26,28,32,35,35,37,40,42,
        42,44,50,52,52,55,56,61,63,65,73,75,76,80,80,82,88,91,91,93,95,98,
        99,102,104,107,107,110,112,114,115,117,119,121,121,124,124,126,129,
        132,145,148,150,152,152,155,156,159,160,163,163,165,166,168,177,
        179,187,189,195,197,204,208,210,212,212,214,216,218,226,228,232,
        235,235,237,242,244,246,250,253,256,258,261,261,277,277,15,0,18,
        18,54,54,81,81,101,101,116,116,120,120,125,125,131,131,151,151,157,
        157,196,196,207,207,213,213,247,247,255,255,17,0,12,17,19,53,55,
        80,82,100,102,115,117,119,121,124,126,130,132,150,152,156,158,195,
        197,206,208,212,214,246,248,254,256,263,277,277,3490,0,274,1,0,0,
        0,2,283,1,0,0,0,4,286,1,0,0,0,6,289,1,0,0,0,8,292,1,0,0,0,10,295,
        1,0,0,0,12,298,1,0,0,0,14,1025,1,0,0,0,16,1195,1,0,0,0,18,1197,1,
        0,0,0,20,1214,1,0,0,0,22,1220,1,0,0,0,24,1232,1,0,0,0,26,1245,1,
        0,0,0,28,1248,1,0,0,0,30,1252,1,0,0,0,32,1312,1,0,0,0,34,1314,1,
        0,0,0,36,1318,1,0,0,0,38,1330,1,0,0,0,40,1335,1,0,0,0,42,1342,1,
        0,0,0,44,1344,1,0,0,0,46,1352,1,0,0,0,48,1361,1,0,0,0,50,1372,1,
        0,0,0,52,1387,1,0,0,0,54,1390,1,0,0,0,56,1401,1,0,0,0,58,1417,1,
        0,0,0,60,1423,1,0,0,0,62,1425,1,0,0,0,64,1436,1,0,0,0,66,1453,1,
        0,0,0,68,1460,1,0,0,0,70,1462,1,0,0,0,72,1468,1,0,0,0,74,1522,1,
        0,0,0,76,1534,1,0,0,0,78,1582,1,0,0,0,80,1585,1,0,0,0,82,1623,1,
        0,0,0,84,1625,1,0,0,0,86,1633,1,0,0,0,88,1666,1,0,0,0,90,1697,1,
        0,0,0,92,1709,1,0,0,0,94,1741,1,0,0,0,96,1753,1,0,0,0,98,1756,1,
        0,0,0,100,1765,1,0,0,0,102,1782,1,0,0,0,104,1802,1,0,0,0,106,1804,
        1,0,0,0,108,1812,1,0,0,0,110,1816,1,0,0,0,112,1819,1,0,0,0,114,1822,
        1,0,0,0,116,1848,1,0,0,0,118,1850,1,0,0,0,120,1912,1,0,0,0,122,1927,
        1,0,0,0,124,1929,1,0,0,0,126,1959,1,0,0,0,128,1961,1,0,0,0,130,1968,
        1,0,0,0,132,2000,1,0,0,0,134,2002,1,0,0,0,136,2020,1,0,0,0,138,2046,
        1,0,0,0,140,2052,1,0,0,0,142,2054,1,0,0,0,144,2085,1,0,0,0,146,2087,
        1,0,0,0,148,2091,1,0,0,0,150,2099,1,0,0,0,152,2110,1,0,0,0,154,2114,
        1,0,0,0,156,2125,1,0,0,0,158,2153,1,0,0,0,160,2155,1,0,0,0,162,2166,
        1,0,0,0,164,2188,1,0,0,0,166,2239,1,0,0,0,168,2241,1,0,0,0,170,2249,
        1,0,0,0,172,2260,1,0,0,0,174,2267,1,0,0,0,176,2271,1,0,0,0,178,2281,
        1,0,0,0,180,2289,1,0,0,0,182,2313,1,0,0,0,184,2317,1,0,0,0,186,2319,
        1,0,0,0,188,2333,1,0,0,0,190,2428,1,0,0,0,192,2434,1,0,0,0,194,2644,
        1,0,0,0,196,2671,1,0,0,0,198,2673,1,0,0,0,200,2675,1,0,0,0,202,2677,
        1,0,0,0,204,2679,1,0,0,0,206,2681,1,0,0,0,208,2686,1,0,0,0,210,2693,
        1,0,0,0,212,2697,1,0,0,0,214,2702,1,0,0,0,216,2712,1,0,0,0,218,2721,
        1,0,0,0,220,2726,1,0,0,0,222,2762,1,0,0,0,224,2764,1,0,0,0,226,2772,
        1,0,0,0,228,2784,1,0,0,0,230,2792,1,0,0,0,232,2801,1,0,0,0,234,2809,
        1,0,0,0,236,2819,1,0,0,0,238,2824,1,0,0,0,240,2833,1,0,0,0,242,2883,
        1,0,0,0,244,2901,1,0,0,0,246,2910,1,0,0,0,248,2912,1,0,0,0,250,2924,
        1,0,0,0,252,2926,1,0,0,0,254,2934,1,0,0,0,256,2944,1,0,0,0,258,2949,
        1,0,0,0,260,2957,1,0,0,0,262,2959,1,0,0,0,264,3000,1,0,0,0,266,3009,
        1,0,0,0,268,3011,1,0,0,0,270,3013,1,0,0,0,272,3015,1,0,0,0,274,278,
        3,14,7,0,275,277,5,1,0,0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,
        1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,278,1,0,0,0,281,282,
        5,0,0,1,282,1,1,0,0,0,283,284,3,176,88,0,284,285,5,0,0,1,285,3,1,
        0,0,0,286,287,3,172,86,0,287,288,5,0,0,1,288,5,1,0,0,0,289,290,3,
        170,85,0,290,291,5,0,0,1,291,7,1,0,0,0,292,293,3,174,87,0,293,294,
        5,0,0,1,294,9,1,0,0,0,295,296,3,222,111,0,296,297,5,0,0,1,297,11,
        1,0,0,0,298,299,3,228,114,0,299,300,5,0,0,1,300,13,1,0,0,0,301,1026,
        3,30,15,0,302,304,3,46,23,0,303,302,1,0,0,0,303,304,1,0,0,0,304,
        305,1,0,0,0,305,1026,3,74,37,0,306,308,5,253,0,0,307,309,5,149,0,
        0,308,307,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,1026,3,170,
        85,0,311,312,5,53,0,0,312,316,3,40,20,0,313,314,5,110,0,0,314,315,
        5,153,0,0,315,317,5,83,0,0,316,313,1,0,0,0,316,317,1,0,0,0,317,318,
        1,0,0,0,318,326,3,170,85,0,319,325,3,28,14,0,320,325,3,26,13,0,321,
        322,5,262,0,0,322,323,7,0,0,0,323,325,3,54,27,0,324,319,1,0,0,0,
        324,320,1,0,0,0,324,321,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,
        326,327,1,0,0,0,327,1026,1,0,0,0,328,326,1,0,0,0,329,330,5,15,0,
        0,330,331,3,40,20,0,331,332,3,170,85,0,332,333,5,212,0,0,333,334,
        7,0,0,0,334,335,3,54,27,0,335,1026,1,0,0,0,336,337,5,15,0,0,337,
        338,3,40,20,0,338,339,3,170,85,0,339,340,5,212,0,0,340,341,3,26,
        13,0,341,1026,1,0,0,0,342,343,5,76,0,0,343,346,3,40,20,0,344,345,
        5,110,0,0,345,347,5,83,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,348,
        1,0,0,0,348,350,3,170,85,0,349,351,7,1,0,0,350,349,1,0,0,0,350,351,
        1,0,0,0,351,1026,1,0,0,0,352,353,5,215,0,0,353,356,7,2,0,0,354,355,
        7,3,0,0,355,357,3,170,85,0,356,354,1,0,0,0,356,357,1,0,0,0,357,362,
        1,0,0,0,358,360,5,132,0,0,359,358,1,0,0,0,359,360,1,0,0,0,360,361,
        1,0,0,0,361,363,5,283,0,0,362,359,1,0,0,0,362,363,1,0,0,0,363,1026,
        1,0,0,0,364,365,4,7,0,0,365,370,3,18,9,0,366,367,5,2,0,0,367,368,
        3,228,114,0,368,369,5,3,0,0,369,371,1,0,0,0,370,366,1,0,0,0,370,
        371,1,0,0,0,371,373,1,0,0,0,372,374,3,50,25,0,373,372,1,0,0,0,373,
        374,1,0,0,0,374,375,1,0,0,0,375,380,3,52,26,0,376,378,5,22,0,0,377,
        376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,381,3,30,15,0,380,
        377,1,0,0,0,380,381,1,0,0,0,381,1026,1,0,0,0,382,383,4,7,1,0,383,
        388,3,18,9,0,384,385,5,2,0,0,385,386,3,228,114,0,386,387,5,3,0,0,
        387,389,1,0,0,0,388,384,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,
        390,391,3,50,25,0,391,396,3,52,26,0,392,394,5,22,0,0,393,392,1,0,
        0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,397,3,30,15,0,396,393,1,
        0,0,0,396,397,1,0,0,0,397,1026,1,0,0,0,398,403,3,18,9,0,399,400,
        5,2,0,0,400,401,3,228,114,0,401,402,5,3,0,0,402,404,1,0,0,0,403,
        399,1,0,0,0,403,404,1,0,0,0,404,426,1,0,0,0,405,425,3,28,14,0,406,
        407,5,171,0,0,407,408,5,30,0,0,408,409,5,2,0,0,409,410,3,228,114,
        0,410,411,5,3,0,0,411,416,1,0,0,0,412,413,5,171,0,0,413,414,5,30,
        0,0,414,416,3,146,73,0,415,406,1,0,0,0,415,412,1,0,0,0,416,425,1,
        0,0,0,417,425,3,22,11,0,418,425,3,24,12,0,419,425,3,166,83,0,420,
        425,3,66,33,0,421,425,3,26,13,0,422,423,5,230,0,0,423,425,3,54,27,
        0,424,405,1,0,0,0,424,415,1,0,0,0,424,417,1,0,0,0,424,418,1,0,0,
        0,424,419,1,0,0,0,424,420,1,0,0,0,424,421,1,0,0,0,424,422,1,0,0,
        0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,433,1,0,0,
        0,428,426,1,0,0,0,429,431,5,22,0,0,430,429,1,0,0,0,430,431,1,0,0,
        0,431,432,1,0,0,0,432,434,3,30,15,0,433,430,1,0,0,0,433,434,1,0,
        0,0,434,1026,1,0,0,0,435,436,5,53,0,0,436,440,5,227,0,0,437,438,
        5,110,0,0,438,439,5,153,0,0,439,441,5,83,0,0,440,437,1,0,0,0,440,
        441,1,0,0,0,441,442,1,0,0,0,442,443,3,172,86,0,443,444,5,132,0,0,
        444,453,3,172,86,0,445,452,3,50,25,0,446,452,3,166,83,0,447,452,
        3,66,33,0,448,452,3,26,13,0,449,450,5,230,0,0,450,452,3,54,27,0,
        451,445,1,0,0,0,451,446,1,0,0,0,451,447,1,0,0,0,451,448,1,0,0,0,
        451,449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,
        454,1026,1,0,0,0,455,453,1,0,0,0,456,461,3,20,10,0,457,458,5,2,0,
        0,458,459,3,228,114,0,459,460,5,3,0,0,460,462,1,0,0,0,461,457,1,
        0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,3,50,25,0,464,469,
        3,52,26,0,465,467,5,22,0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,
        1,0,0,0,468,470,3,30,15,0,469,466,1,0,0,0,469,470,1,0,0,0,470,1026,
        1,0,0,0,471,472,5,16,0,0,472,473,5,227,0,0,473,475,3,170,85,0,474,
        476,3,36,18,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,
        478,5,49,0,0,478,486,5,221,0,0,479,487,3,258,129,0,480,481,5,96,
        0,0,481,482,5,44,0,0,482,487,3,148,74,0,483,484,5,96,0,0,484,485,
        5,14,0,0,485,487,5,44,0,0,486,479,1,0,0,0,486,480,1,0,0,0,486,483,
        1,0,0,0,486,487,1,0,0,0,487,1026,1,0,0,0,488,489,5,15,0,0,489,490,
        5,227,0,0,490,491,3,170,85,0,491,492,5,12,0,0,492,493,7,4,0,0,493,
        494,3,224,112,0,494,1026,1,0,0,0,495,496,5,15,0,0,496,497,5,227,
        0,0,497,498,3,170,85,0,498,499,5,12,0,0,499,500,7,4,0,0,500,501,
        5,2,0,0,501,502,3,224,112,0,502,503,5,3,0,0,503,1026,1,0,0,0,504,
        505,5,15,0,0,505,506,5,227,0,0,506,507,3,170,85,0,507,508,5,190,
        0,0,508,509,5,43,0,0,509,510,3,170,85,0,510,511,5,234,0,0,511,512,
        3,254,127,0,512,1026,1,0,0,0,513,514,5,15,0,0,514,515,5,227,0,0,
        515,516,3,170,85,0,516,517,5,76,0,0,517,518,7,4,0,0,518,519,5,2,
        0,0,519,520,3,168,84,0,520,521,5,3,0,0,521,1026,1,0,0,0,522,523,
        5,15,0,0,523,524,5,227,0,0,524,525,3,170,85,0,525,526,5,76,0,0,526,
        527,7,4,0,0,527,528,3,168,84,0,528,1026,1,0,0,0,529,530,5,15,0,0,
        530,531,7,5,0,0,531,532,3,170,85,0,532,533,5,190,0,0,533,534,5,234,
        0,0,534,535,3,170,85,0,535,1026,1,0,0,0,536,537,5,15,0,0,537,538,
        7,5,0,0,538,539,3,170,85,0,539,540,5,212,0,0,540,541,5,230,0,0,541,
        542,3,54,27,0,542,1026,1,0,0,0,543,544,5,15,0,0,544,545,7,5,0,0,
        545,546,3,170,85,0,546,547,5,251,0,0,547,550,5,230,0,0,548,549,5,
        110,0,0,549,551,5,83,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,552,
        1,0,0,0,552,553,3,54,27,0,553,1026,1,0,0,0,554,555,5,15,0,0,555,
        556,5,227,0,0,556,557,3,170,85,0,557,559,7,6,0,0,558,560,5,43,0,
        0,559,558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,563,3,170,
        85,0,562,564,3,266,133,0,563,562,1,0,0,0,563,564,1,0,0,0,564,1026,
        1,0,0,0,565,566,5,15,0,0,566,567,5,227,0,0,567,569,3,170,85,0,568,
        570,3,36,18,0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,571,
        573,5,35,0,0,572,574,5,43,0,0,573,572,1,0,0,0,573,574,1,0,0,0,574,
        575,1,0,0,0,575,576,3,170,85,0,576,578,3,230,115,0,577,579,3,220,
        110,0,578,577,1,0,0,0,578,579,1,0,0,0,579,1026,1,0,0,0,580,581,5,
        15,0,0,581,582,5,227,0,0,582,584,3,170,85,0,583,585,3,36,18,0,584,
        583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,587,5,192,0,0,587,
        588,5,44,0,0,588,589,5,2,0,0,589,590,3,224,112,0,590,591,5,3,0,0,
        591,1026,1,0,0,0,592,593,5,15,0,0,593,594,5,227,0,0,594,596,3,170,
        85,0,595,597,3,36,18,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,
        0,0,0,598,599,5,212,0,0,599,600,5,209,0,0,600,604,5,283,0,0,601,
        602,5,262,0,0,602,603,5,210,0,0,603,605,3,54,27,0,604,601,1,0,0,
        0,604,605,1,0,0,0,605,1026,1,0,0,0,606,607,5,15,0,0,607,608,5,227,
        0,0,608,610,3,170,85,0,609,611,3,36,18,0,610,609,1,0,0,0,610,611,
        1,0,0,0,611,612,1,0,0,0,612,613,5,212,0,0,613,614,5,210,0,0,614,
        615,3,54,27,0,615,1026,1,0,0,0,616,617,5,15,0,0,617,618,7,5,0,0,
        618,619,3,170,85,0,619,623,5,12,0,0,620,621,5,110,0,0,621,622,5,
        153,0,0,622,624,5,83,0,0,623,620,1,0,0,0,623,624,1,0,0,0,624,626,
        1,0,0,0,625,627,3,34,17,0,626,625,1,0,0,0,627,628,1,0,0,0,628,626,
        1,0,0,0,628,629,1,0,0,0,629,1026,1,0,0,0,630,631,5,15,0,0,631,632,
        5,227,0,0,632,633,3,170,85,0,633,634,3,36,18,0,634,635,5,190,0,0,
        635,636,5,234,0,0,636,637,3,36,18,0,637,1026,1,0,0,0,638,639,5,15,
        0,0,639,640,7,5,0,0,640,641,3,170,85,0,641,644,5,76,0,0,642,643,
        5,110,0,0,643,645,5,83,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,646,
        1,0,0,0,646,651,3,36,18,0,647,648,5,4,0,0,648,650,3,36,18,0,649,
        647,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,
        655,1,0,0,0,653,651,1,0,0,0,654,656,5,181,0,0,655,654,1,0,0,0,655,
        656,1,0,0,0,656,1026,1,0,0,0,657,658,5,15,0,0,658,659,5,227,0,0,
        659,661,3,170,85,0,660,662,3,36,18,0,661,660,1,0,0,0,661,662,1,0,
        0,0,662,663,1,0,0,0,663,664,5,212,0,0,664,665,3,26,13,0,665,1026,
        1,0,0,0,666,667,5,15,0,0,667,668,5,227,0,0,668,669,3,170,85,0,669,
        670,5,186,0,0,670,671,5,172,0,0,671,1026,1,0,0,0,672,673,5,76,0,
        0,673,676,5,227,0,0,674,675,5,110,0,0,675,677,5,83,0,0,676,674,1,
        0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,680,3,170,85,0,679,681,
        5,181,0,0,680,679,1,0,0,0,680,681,1,0,0,0,681,1026,1,0,0,0,682,683,
        5,76,0,0,683,686,5,257,0,0,684,685,5,110,0,0,685,687,5,83,0,0,686,
        684,1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,1026,3,170,85,0,
        689,692,5,53,0,0,690,691,5,161,0,0,691,693,5,192,0,0,692,690,1,0,
        0,0,692,693,1,0,0,0,693,698,1,0,0,0,694,696,5,104,0,0,695,694,1,
        0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,699,5,231,0,0,698,695,
        1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,704,5,257,0,0,701,702,
        5,110,0,0,702,703,5,153,0,0,703,705,5,83,0,0,704,701,1,0,0,0,704,
        705,1,0,0,0,705,706,1,0,0,0,706,708,3,170,85,0,707,709,3,154,77,
        0,708,707,1,0,0,0,708,709,1,0,0,0,709,718,1,0,0,0,710,717,3,28,14,
        0,711,712,5,171,0,0,712,713,5,157,0,0,713,717,3,146,73,0,714,715,
        5,230,0,0,715,717,3,54,27,0,716,710,1,0,0,0,716,711,1,0,0,0,716,
        714,1,0,0,0,717,720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,
        721,1,0,0,0,720,718,1,0,0,0,721,722,5,22,0,0,722,723,3,30,15,0,723,
        1026,1,0,0,0,724,727,5,53,0,0,725,726,5,161,0,0,726,728,5,192,0,
        0,727,725,1,0,0,0,727,728,1,0,0,0,728,730,1,0,0,0,729,731,5,104,
        0,0,730,729,1,0,0,0,730,731,1,0,0,0,731,732,1,0,0,0,732,733,5,231,
        0,0,733,734,5,257,0,0,734,739,3,172,86,0,735,736,5,2,0,0,736,737,
        3,228,114,0,737,738,5,3,0,0,738,740,1,0,0,0,739,735,1,0,0,0,739,
        740,1,0,0,0,740,741,1,0,0,0,741,744,3,50,25,0,742,743,5,160,0,0,
        743,745,3,54,27,0,744,742,1,0,0,0,744,745,1,0,0,0,745,1026,1,0,0,
        0,746,747,5,15,0,0,747,748,5,257,0,0,748,750,3,170,85,0,749,751,
        5,22,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,753,
        3,30,15,0,753,1026,1,0,0,0,754,757,5,53,0,0,755,756,5,161,0,0,756,
        758,5,192,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,
        761,5,231,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,
        766,5,102,0,0,763,764,5,110,0,0,764,765,5,153,0,0,765,767,5,83,0,
        0,766,763,1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,769,3,170,
        85,0,769,770,5,22,0,0,770,780,5,283,0,0,771,772,5,255,0,0,772,777,
        3,72,36,0,773,774,5,4,0,0,774,776,3,72,36,0,775,773,1,0,0,0,776,
        779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,781,1,0,0,0,779,
        777,1,0,0,0,780,771,1,0,0,0,780,781,1,0,0,0,781,1026,1,0,0,0,782,
        784,5,76,0,0,783,785,5,231,0,0,784,783,1,0,0,0,784,785,1,0,0,0,785,
        786,1,0,0,0,786,789,5,102,0,0,787,788,5,110,0,0,788,790,5,83,0,0,
        789,787,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,1026,3,170,85,
        0,792,794,5,84,0,0,793,795,7,7,0,0,794,793,1,0,0,0,794,795,1,0,0,
        0,795,796,1,0,0,0,796,1026,3,14,7,0,797,798,5,215,0,0,798,801,5,
        228,0,0,799,800,7,3,0,0,800,802,3,170,85,0,801,799,1,0,0,0,801,802,
        1,0,0,0,802,807,1,0,0,0,803,805,5,132,0,0,804,803,1,0,0,0,804,805,
        1,0,0,0,805,806,1,0,0,0,806,808,5,283,0,0,807,804,1,0,0,0,807,808,
        1,0,0,0,808,1026,1,0,0,0,809,810,5,215,0,0,810,811,5,227,0,0,811,
        814,5,86,0,0,812,813,7,3,0,0,813,815,3,170,85,0,814,812,1,0,0,0,
        814,815,1,0,0,0,815,816,1,0,0,0,816,817,5,132,0,0,817,819,5,283,
        0,0,818,820,3,36,18,0,819,818,1,0,0,0,819,820,1,0,0,0,820,1026,1,
        0,0,0,821,822,5,215,0,0,822,823,5,230,0,0,823,828,3,170,85,0,824,
        825,5,2,0,0,825,826,3,58,29,0,826,827,5,3,0,0,827,829,1,0,0,0,828,
        824,1,0,0,0,828,829,1,0,0,0,829,1026,1,0,0,0,830,831,5,215,0,0,831,
        832,5,44,0,0,832,833,7,3,0,0,833,836,3,170,85,0,834,835,7,3,0,0,
        835,837,3,170,85,0,836,834,1,0,0,0,836,837,1,0,0,0,837,1026,1,0,
        0,0,838,839,5,215,0,0,839,842,5,258,0,0,840,841,7,3,0,0,841,843,
        3,170,85,0,842,840,1,0,0,0,842,843,1,0,0,0,843,848,1,0,0,0,844,846,
        5,132,0,0,845,844,1,0,0,0,845,846,1,0,0,0,846,847,1,0,0,0,847,849,
        5,283,0,0,848,845,1,0,0,0,848,849,1,0,0,0,849,1026,1,0,0,0,850,851,
        5,215,0,0,851,852,5,172,0,0,852,854,3,170,85,0,853,855,3,36,18,0,
        854,853,1,0,0,0,854,855,1,0,0,0,855,1026,1,0,0,0,856,858,5,215,0,
        0,857,859,3,258,129,0,858,857,1,0,0,0,858,859,1,0,0,0,859,860,1,
        0,0,0,860,868,5,103,0,0,861,863,5,132,0,0,862,861,1,0,0,0,862,863,
        1,0,0,0,863,866,1,0,0,0,864,867,3,170,85,0,865,867,5,283,0,0,866,
        864,1,0,0,0,866,865,1,0,0,0,867,869,1,0,0,0,868,862,1,0,0,0,868,
        869,1,0,0,0,869,1026,1,0,0,0,870,871,5,215,0,0,871,872,5,53,0,0,
        872,873,5,227,0,0,873,876,3,170,85,0,874,875,5,22,0,0,875,877,5,
        209,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,1026,1,0,0,0,878,879,
        5,215,0,0,879,880,5,56,0,0,880,1026,5,149,0,0,881,882,7,8,0,0,882,
        884,5,102,0,0,883,885,5,86,0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,
        886,1,0,0,0,886,1026,3,42,21,0,887,888,7,8,0,0,888,890,3,40,20,0,
        889,891,5,86,0,0,890,889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,
        892,893,3,170,85,0,893,1026,1,0,0,0,894,896,7,8,0,0,895,897,5,227,
        0,0,896,895,1,0,0,0,896,897,1,0,0,0,897,899,1,0,0,0,898,900,7,9,
        0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,903,3,170,
        85,0,902,904,3,36,18,0,903,902,1,0,0,0,903,904,1,0,0,0,904,906,1,
        0,0,0,905,907,3,44,22,0,906,905,1,0,0,0,906,907,1,0,0,0,907,1026,
        1,0,0,0,908,910,7,8,0,0,909,911,5,182,0,0,910,909,1,0,0,0,910,911,
        1,0,0,0,911,912,1,0,0,0,912,1026,3,30,15,0,913,914,5,45,0,0,914,
        915,5,157,0,0,915,916,3,40,20,0,916,917,3,170,85,0,917,918,5,123,
        0,0,918,919,7,10,0,0,919,1026,1,0,0,0,920,921,5,45,0,0,921,922,5,
        157,0,0,922,923,5,227,0,0,923,924,3,170,85,0,924,925,5,123,0,0,925,
        926,7,10,0,0,926,1026,1,0,0,0,927,928,5,189,0,0,928,929,5,227,0,
        0,929,1026,3,170,85,0,930,938,5,189,0,0,931,939,5,283,0,0,932,934,
        9,0,0,0,933,932,1,0,0,0,934,937,1,0,0,0,935,936,1,0,0,0,935,933,
        1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,938,931,1,0,0,0,938,935,
        1,0,0,0,939,1026,1,0,0,0,940,942,5,31,0,0,941,943,5,129,0,0,942,
        941,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,945,5,227,0,0,945,
        948,3,170,85,0,946,947,5,160,0,0,947,949,3,54,27,0,948,946,1,0,0,
        0,948,949,1,0,0,0,949,954,1,0,0,0,950,952,5,22,0,0,951,950,1,0,0,
        0,951,952,1,0,0,0,952,953,1,0,0,0,953,955,3,30,15,0,954,951,1,0,
        0,0,954,955,1,0,0,0,955,1026,1,0,0,0,956,957,5,246,0,0,957,960,5,
        227,0,0,958,959,5,110,0,0,959,961,5,83,0,0,960,958,1,0,0,0,960,961,
        1,0,0,0,961,962,1,0,0,0,962,1026,3,170,85,0,963,964,5,37,0,0,964,
        1026,5,31,0,0,965,966,5,136,0,0,966,968,5,61,0,0,967,969,5,137,0,
        0,968,967,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,0,970,971,5,117,
        0,0,971,973,5,283,0,0,972,974,5,169,0,0,973,972,1,0,0,0,973,974,
        1,0,0,0,974,975,1,0,0,0,975,976,5,122,0,0,976,977,5,227,0,0,977,
        979,3,170,85,0,978,980,3,36,18,0,979,978,1,0,0,0,979,980,1,0,0,0,
        980,1026,1,0,0,0,981,982,5,242,0,0,982,983,5,227,0,0,983,985,3,170,
        85,0,984,986,3,36,18,0,985,984,1,0,0,0,985,986,1,0,0,0,986,1026,
        1,0,0,0,987,988,5,148,0,0,988,989,5,191,0,0,989,990,5,227,0,0,990,
        1026,3,170,85,0,991,992,7,11,0,0,992,1000,3,258,129,0,993,1001,5,
        283,0,0,994,996,9,0,0,0,995,994,1,0,0,0,996,999,1,0,0,0,997,998,
        1,0,0,0,997,995,1,0,0,0,998,1001,1,0,0,0,999,997,1,0,0,0,1000,993,
        1,0,0,0,1000,997,1,0,0,0,1001,1026,1,0,0,0,1002,1003,5,212,0,0,1003,
        1007,5,198,0,0,1004,1006,9,0,0,0,1005,1004,1,0,0,0,1006,1009,1,0,
        0,0,1007,1008,1,0,0,0,1007,1005,1,0,0,0,1008,1026,1,0,0,0,1009,1007,
        1,0,0,0,1010,1014,5,212,0,0,1011,1013,9,0,0,0,1012,1011,1,0,0,0,
        1013,1016,1,0,0,0,1014,1015,1,0,0,0,1014,1012,1,0,0,0,1015,1026,
        1,0,0,0,1016,1014,1,0,0,0,1017,1026,5,193,0,0,1018,1022,3,16,8,0,
        1019,1021,9,0,0,0,1020,1019,1,0,0,0,1021,1024,1,0,0,0,1022,1023,
        1,0,0,0,1022,1020,1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,0,1025,
        301,1,0,0,0,1025,303,1,0,0,0,1025,306,1,0,0,0,1025,311,1,0,0,0,1025,
        329,1,0,0,0,1025,336,1,0,0,0,1025,342,1,0,0,0,1025,352,1,0,0,0,1025,
        364,1,0,0,0,1025,382,1,0,0,0,1025,398,1,0,0,0,1025,435,1,0,0,0,1025,
        456,1,0,0,0,1025,471,1,0,0,0,1025,488,1,0,0,0,1025,495,1,0,0,0,1025,
        504,1,0,0,0,1025,513,1,0,0,0,1025,522,1,0,0,0,1025,529,1,0,0,0,1025,
        536,1,0,0,0,1025,543,1,0,0,0,1025,554,1,0,0,0,1025,565,1,0,0,0,1025,
        580,1,0,0,0,1025,592,1,0,0,0,1025,606,1,0,0,0,1025,616,1,0,0,0,1025,
        630,1,0,0,0,1025,638,1,0,0,0,1025,657,1,0,0,0,1025,666,1,0,0,0,1025,
        672,1,0,0,0,1025,682,1,0,0,0,1025,689,1,0,0,0,1025,724,1,0,0,0,1025,
        746,1,0,0,0,1025,754,1,0,0,0,1025,782,1,0,0,0,1025,792,1,0,0,0,1025,
        797,1,0,0,0,1025,809,1,0,0,0,1025,821,1,0,0,0,1025,830,1,0,0,0,1025,
        838,1,0,0,0,1025,850,1,0,0,0,1025,856,1,0,0,0,1025,870,1,0,0,0,1025,
        878,1,0,0,0,1025,881,1,0,0,0,1025,887,1,0,0,0,1025,894,1,0,0,0,1025,
        908,1,0,0,0,1025,913,1,0,0,0,1025,920,1,0,0,0,1025,927,1,0,0,0,1025,
        930,1,0,0,0,1025,940,1,0,0,0,1025,956,1,0,0,0,1025,963,1,0,0,0,1025,
        965,1,0,0,0,1025,981,1,0,0,0,1025,987,1,0,0,0,1025,991,1,0,0,0,1025,
        1002,1,0,0,0,1025,1010,1,0,0,0,1025,1017,1,0,0,0,1025,1018,1,0,0,
        0,1026,15,1,0,0,0,1027,1028,5,53,0,0,1028,1196,5,198,0,0,1029,1030,
        5,76,0,0,1030,1196,5,198,0,0,1031,1033,5,105,0,0,1032,1034,5,198,
        0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1196,1,0,0,0,1035,1037,
        5,195,0,0,1036,1038,5,198,0,0,1037,1036,1,0,0,0,1037,1038,1,0,0,
        0,1038,1196,1,0,0,0,1039,1040,5,215,0,0,1040,1196,5,105,0,0,1041,
        1042,5,215,0,0,1042,1044,5,198,0,0,1043,1045,5,105,0,0,1044,1043,
        1,0,0,0,1044,1045,1,0,0,0,1045,1196,1,0,0,0,1046,1047,5,215,0,0,
        1047,1196,5,179,0,0,1048,1049,5,215,0,0,1049,1196,5,199,0,0,1050,
        1051,5,215,0,0,1051,1052,5,56,0,0,1052,1196,5,199,0,0,1053,1054,
        5,85,0,0,1054,1196,5,227,0,0,1055,1056,5,112,0,0,1056,1196,5,227,
        0,0,1057,1058,5,215,0,0,1058,1196,5,48,0,0,1059,1060,5,215,0,0,1060,
        1061,5,53,0,0,1061,1196,5,227,0,0,1062,1063,5,215,0,0,1063,1196,
        5,238,0,0,1064,1065,5,215,0,0,1065,1196,5,115,0,0,1066,1067,5,215,
        0,0,1067,1196,5,140,0,0,1068,1069,5,53,0,0,1069,1196,5,114,0,0,1070,
        1071,5,76,0,0,1071,1196,5,114,0,0,1072,1073,5,15,0,0,1073,1196,5,
        114,0,0,1074,1075,5,139,0,0,1075,1196,5,227,0,0,1076,1077,5,139,
        0,0,1077,1196,5,62,0,0,1078,1079,5,250,0,0,1079,1196,5,227,0,0,1080,
        1081,5,250,0,0,1081,1196,5,62,0,0,1082,1083,5,53,0,0,1083,1084,5,
        231,0,0,1084,1196,5,142,0,0,1085,1086,5,76,0,0,1086,1087,5,231,0,
        0,1087,1196,5,142,0,0,1088,1089,5,15,0,0,1089,1090,5,227,0,0,1090,
        1091,3,172,86,0,1091,1092,5,153,0,0,1092,1093,5,39,0,0,1093,1196,
        1,0,0,0,1094,1095,5,15,0,0,1095,1096,5,227,0,0,1096,1097,3,172,86,
        0,1097,1098,5,39,0,0,1098,1099,5,30,0,0,1099,1196,1,0,0,0,1100,1101,
        5,15,0,0,1101,1102,5,227,0,0,1102,1103,3,172,86,0,1103,1104,5,153,
        0,0,1104,1105,5,219,0,0,1105,1196,1,0,0,0,1106,1107,5,15,0,0,1107,
        1108,5,227,0,0,1108,1109,3,172,86,0,1109,1110,5,216,0,0,1110,1111,
        5,30,0,0,1111,1196,1,0,0,0,1112,1113,5,15,0,0,1113,1114,5,227,0,
        0,1114,1115,3,172,86,0,1115,1116,5,153,0,0,1116,1117,5,216,0,0,1117,
        1196,1,0,0,0,1118,1119,5,15,0,0,1119,1120,5,227,0,0,1120,1121,3,
        172,86,0,1121,1122,5,153,0,0,1122,1123,5,222,0,0,1123,1124,5,22,
        0,0,1124,1125,5,72,0,0,1125,1196,1,0,0,0,1126,1127,5,15,0,0,1127,
        1128,5,227,0,0,1128,1129,3,172,86,0,1129,1130,5,212,0,0,1130,1131,
        5,216,0,0,1131,1132,5,138,0,0,1132,1196,1,0,0,0,1133,1134,5,15,0,
        0,1134,1135,5,227,0,0,1135,1136,3,172,86,0,1136,1137,5,82,0,0,1137,
        1138,5,170,0,0,1138,1196,1,0,0,0,1139,1140,5,15,0,0,1140,1141,5,
        227,0,0,1141,1142,3,172,86,0,1142,1143,5,20,0,0,1143,1144,5,170,
        0,0,1144,1196,1,0,0,0,1145,1146,5,15,0,0,1146,1147,5,227,0,0,1147,
        1148,3,172,86,0,1148,1149,5,244,0,0,1149,1150,5,170,0,0,1150,1196,
        1,0,0,0,1151,1152,5,15,0,0,1152,1153,5,227,0,0,1153,1154,3,172,86,
        0,1154,1155,5,235,0,0,1155,1196,1,0,0,0,1156,1157,5,15,0,0,1157,
        1158,5,227,0,0,1158,1160,3,172,86,0,1159,1161,3,36,18,0,1160,1159,
        1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,0,0,0,1162,1163,5,47,0,0,1163,
        1196,1,0,0,0,1164,1165,5,15,0,0,1165,1166,5,227,0,0,1166,1168,3,
        172,86,0,1167,1169,3,36,18,0,1168,1167,1,0,0,0,1168,1169,1,0,0,0,
        1169,1170,1,0,0,0,1170,1171,5,50,0,0,1171,1196,1,0,0,0,1172,1173,
        5,15,0,0,1173,1174,5,227,0,0,1174,1176,3,172,86,0,1175,1177,3,36,
        18,0,1176,1175,1,0,0,0,1176,1177,1,0,0,0,1177,1178,1,0,0,0,1178,
        1179,5,212,0,0,1179,1180,5,93,0,0,1180,1196,1,0,0,0,1181,1182,5,
        15,0,0,1182,1183,5,227,0,0,1183,1185,3,172,86,0,1184,1186,3,36,18,
        0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1188,
        5,192,0,0,1188,1189,5,44,0,0,1189,1196,1,0,0,0,1190,1191,5,220,0,
        0,1191,1196,5,237,0,0,1192,1196,5,46,0,0,1193,1196,5,200,0,0,1194,
        1196,5,71,0,0,1195,1027,1,0,0,0,1195,1029,1,0,0,0,1195,1031,1,0,
        0,0,1195,1035,1,0,0,0,1195,1039,1,0,0,0,1195,1041,1,0,0,0,1195,1046,
        1,0,0,0,1195,1048,1,0,0,0,1195,1050,1,0,0,0,1195,1053,1,0,0,0,1195,
        1055,1,0,0,0,1195,1057,1,0,0,0,1195,1059,1,0,0,0,1195,1062,1,0,0,
        0,1195,1064,1,0,0,0,1195,1066,1,0,0,0,1195,1068,1,0,0,0,1195,1070,
        1,0,0,0,1195,1072,1,0,0,0,1195,1074,1,0,0,0,1195,1076,1,0,0,0,1195,
        1078,1,0,0,0,1195,1080,1,0,0,0,1195,1082,1,0,0,0,1195,1085,1,0,0,
        0,1195,1088,1,0,0,0,1195,1094,1,0,0,0,1195,1100,1,0,0,0,1195,1106,
        1,0,0,0,1195,1112,1,0,0,0,1195,1118,1,0,0,0,1195,1126,1,0,0,0,1195,
        1133,1,0,0,0,1195,1139,1,0,0,0,1195,1145,1,0,0,0,1195,1151,1,0,0,
        0,1195,1156,1,0,0,0,1195,1164,1,0,0,0,1195,1172,1,0,0,0,1195,1181,
        1,0,0,0,1195,1190,1,0,0,0,1195,1192,1,0,0,0,1195,1193,1,0,0,0,1195,
        1194,1,0,0,0,1196,17,1,0,0,0,1197,1199,5,53,0,0,1198,1200,5,231,
        0,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,1202,1,0,0,0,1201,1203,
        5,87,0,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,1204,1,0,0,0,1204,
        1208,5,227,0,0,1205,1206,5,110,0,0,1206,1207,5,153,0,0,1207,1209,
        5,83,0,0,1208,1205,1,0,0,0,1208,1209,1,0,0,0,1209,1210,1,0,0,0,1210,
        1211,3,170,85,0,1211,19,1,0,0,0,1212,1213,5,53,0,0,1213,1215,5,161,
        0,0,1214,1212,1,0,0,0,1214,1215,1,0,0,0,1215,1216,1,0,0,0,1216,1217,
        5,192,0,0,1217,1218,5,227,0,0,1218,1219,3,170,85,0,1219,21,1,0,0,
        0,1220,1221,5,39,0,0,1221,1222,5,30,0,0,1222,1226,3,146,73,0,1223,
        1224,5,219,0,0,1224,1225,5,30,0,0,1225,1227,3,150,75,0,1226,1223,
        1,0,0,0,1226,1227,1,0,0,0,1227,1228,1,0,0,0,1228,1229,5,122,0,0,
        1229,1230,5,287,0,0,1230,1231,5,29,0,0,1231,23,1,0,0,0,1232,1233,
        5,216,0,0,1233,1234,5,30,0,0,1234,1235,3,146,73,0,1235,1238,5,157,
        0,0,1236,1239,3,62,31,0,1237,1239,3,64,32,0,1238,1236,1,0,0,0,1238,
        1237,1,0,0,0,1239,1243,1,0,0,0,1240,1241,5,222,0,0,1241,1242,5,22,
        0,0,1242,1244,5,72,0,0,1243,1240,1,0,0,0,1243,1244,1,0,0,0,1244,
        25,1,0,0,0,1245,1246,5,138,0,0,1246,1247,5,283,0,0,1247,27,1,0,0,
        0,1248,1249,5,45,0,0,1249,1250,5,283,0,0,1250,29,1,0,0,0,1251,1253,
        3,46,23,0,1252,1251,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,
        1254,1255,3,80,40,0,1255,1256,3,76,38,0,1256,31,1,0,0,0,1257,1258,
        5,119,0,0,1258,1260,5,169,0,0,1259,1261,5,227,0,0,1260,1259,1,0,
        0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,1262,1269,3,170,85,0,1263,
        1267,3,36,18,0,1264,1265,5,110,0,0,1265,1266,5,153,0,0,1266,1268,
        5,83,0,0,1267,1264,1,0,0,0,1267,1268,1,0,0,0,1268,1270,1,0,0,0,1269,
        1263,1,0,0,0,1269,1270,1,0,0,0,1270,1313,1,0,0,0,1271,1272,5,119,
        0,0,1272,1274,5,122,0,0,1273,1275,5,227,0,0,1274,1273,1,0,0,0,1274,
        1275,1,0,0,0,1275,1276,1,0,0,0,1276,1278,3,170,85,0,1277,1279,3,
        36,18,0,1278,1277,1,0,0,0,1278,1279,1,0,0,0,1279,1283,1,0,0,0,1280,
        1281,5,110,0,0,1281,1282,5,153,0,0,1282,1284,5,83,0,0,1283,1280,
        1,0,0,0,1283,1284,1,0,0,0,1284,1313,1,0,0,0,1285,1286,5,119,0,0,
        1286,1288,5,169,0,0,1287,1289,5,137,0,0,1288,1287,1,0,0,0,1288,1289,
        1,0,0,0,1289,1290,1,0,0,0,1290,1291,5,73,0,0,1291,1293,5,283,0,0,
        1292,1294,3,166,83,0,1293,1292,1,0,0,0,1293,1294,1,0,0,0,1294,1296,
        1,0,0,0,1295,1297,3,66,33,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,
        1297,1313,1,0,0,0,1298,1299,5,119,0,0,1299,1301,5,169,0,0,1300,1302,
        5,137,0,0,1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,
        1303,1305,5,73,0,0,1304,1306,5,283,0,0,1305,1304,1,0,0,0,1305,1306,
        1,0,0,0,1306,1307,1,0,0,0,1307,1310,3,50,25,0,1308,1309,5,160,0,
        0,1309,1311,3,54,27,0,1310,1308,1,0,0,0,1310,1311,1,0,0,0,1311,1313,
        1,0,0,0,1312,1257,1,0,0,0,1312,1271,1,0,0,0,1312,1285,1,0,0,0,1312,
        1298,1,0,0,0,1313,33,1,0,0,0,1314,1316,3,36,18,0,1315,1317,3,26,
        13,0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,35,1,0,0,0,1318,1319,
        5,170,0,0,1319,1320,5,2,0,0,1320,1325,3,38,19,0,1321,1322,5,4,0,
        0,1322,1324,3,38,19,0,1323,1321,1,0,0,0,1324,1327,1,0,0,0,1325,1323,
        1,0,0,0,1325,1326,1,0,0,0,1326,1328,1,0,0,0,1327,1325,1,0,0,0,1328,
        1329,5,3,0,0,1329,37,1,0,0,0,1330,1333,3,258,129,0,1331,1332,5,264,
        0,0,1332,1334,3,196,98,0,1333,1331,1,0,0,0,1333,1334,1,0,0,0,1334,
        39,1,0,0,0,1335,1336,7,12,0,0,1336,41,1,0,0,0,1337,1343,3,252,126,
        0,1338,1343,5,283,0,0,1339,1343,3,198,99,0,1340,1343,3,200,100,0,
        1341,1343,3,202,101,0,1342,1337,1,0,0,0,1342,1338,1,0,0,0,1342,1339,
        1,0,0,0,1342,1340,1,0,0,0,1342,1341,1,0,0,0,1343,43,1,0,0,0,1344,
        1349,3,258,129,0,1345,1346,5,5,0,0,1346,1348,3,258,129,0,1347,1345,
        1,0,0,0,1348,1351,1,0,0,0,1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,
        45,1,0,0,0,1351,1349,1,0,0,0,1352,1353,5,262,0,0,1353,1358,3,48,
        24,0,1354,1355,5,4,0,0,1355,1357,3,48,24,0,1356,1354,1,0,0,0,1357,
        1360,1,0,0,0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,47,1,0,0,0,
        1360,1358,1,0,0,0,1361,1363,3,254,127,0,1362,1364,3,146,73,0,1363,
        1362,1,0,0,0,1363,1364,1,0,0,0,1364,1366,1,0,0,0,1365,1367,5,22,
        0,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,1368,1369,
        5,2,0,0,1369,1370,3,30,15,0,1370,1371,5,3,0,0,1371,49,1,0,0,0,1372,
        1373,5,255,0,0,1373,1374,3,170,85,0,1374,51,1,0,0,0,1375,1376,5,
        160,0,0,1376,1386,3,54,27,0,1377,1378,5,171,0,0,1378,1379,5,30,0,
        0,1379,1386,3,180,90,0,1380,1386,3,22,11,0,1381,1386,3,26,13,0,1382,
        1386,3,28,14,0,1383,1384,5,230,0,0,1384,1386,3,54,27,0,1385,1375,
        1,0,0,0,1385,1377,1,0,0,0,1385,1380,1,0,0,0,1385,1381,1,0,0,0,1385,
        1382,1,0,0,0,1385,1383,1,0,0,0,1386,1389,1,0,0,0,1387,1385,1,0,0,
        0,1387,1388,1,0,0,0,1388,53,1,0,0,0,1389,1387,1,0,0,0,1390,1391,
        5,2,0,0,1391,1396,3,56,28,0,1392,1393,5,4,0,0,1393,1395,3,56,28,
        0,1394,1392,1,0,0,0,1395,1398,1,0,0,0,1396,1394,1,0,0,0,1396,1397,
        1,0,0,0,1397,1399,1,0,0,0,1398,1396,1,0,0,0,1399,1400,5,3,0,0,1400,
        55,1,0,0,0,1401,1406,3,58,29,0,1402,1404,5,264,0,0,1403,1402,1,0,
        0,0,1403,1404,1,0,0,0,1404,1405,1,0,0,0,1405,1407,3,60,30,0,1406,
        1403,1,0,0,0,1406,1407,1,0,0,0,1407,57,1,0,0,0,1408,1413,3,258,129,
        0,1409,1410,5,5,0,0,1410,1412,3,258,129,0,1411,1409,1,0,0,0,1412,
        1415,1,0,0,0,1413,1411,1,0,0,0,1413,1414,1,0,0,0,1414,1418,1,0,0,
        0,1415,1413,1,0,0,0,1416,1418,5,283,0,0,1417,1408,1,0,0,0,1417,1416,
        1,0,0,0,1418,59,1,0,0,0,1419,1424,5,287,0,0,1420,1424,5,289,0,0,
        1421,1424,3,204,102,0,1422,1424,5,283,0,0,1423,1419,1,0,0,0,1423,
        1420,1,0,0,0,1423,1421,1,0,0,0,1423,1422,1,0,0,0,1424,61,1,0,0,0,
        1425,1426,5,2,0,0,1426,1431,3,196,98,0,1427,1428,5,4,0,0,1428,1430,
        3,196,98,0,1429,1427,1,0,0,0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,
        1431,1432,1,0,0,0,1432,1434,1,0,0,0,1433,1431,1,0,0,0,1434,1435,
        5,3,0,0,1435,63,1,0,0,0,1436,1437,5,2,0,0,1437,1442,3,62,31,0,1438,
        1439,5,4,0,0,1439,1441,3,62,31,0,1440,1438,1,0,0,0,1441,1444,1,0,
        0,0,1442,1440,1,0,0,0,1442,1443,1,0,0,0,1443,1445,1,0,0,0,1444,1442,
        1,0,0,0,1445,1446,5,3,0,0,1446,65,1,0,0,0,1447,1448,5,222,0,0,1448,
        1449,5,22,0,0,1449,1454,3,68,34,0,1450,1451,5,222,0,0,1451,1452,
        5,30,0,0,1452,1454,3,70,35,0,1453,1447,1,0,0,0,1453,1450,1,0,0,0,
        1454,67,1,0,0,0,1455,1456,5,118,0,0,1456,1457,5,283,0,0,1457,1458,
        5,165,0,0,1458,1461,5,283,0,0,1459,1461,3,258,129,0,1460,1455,1,
        0,0,0,1460,1459,1,0,0,0,1461,69,1,0,0,0,1462,1466,5,283,0,0,1463,
        1464,5,262,0,0,1464,1465,5,210,0,0,1465,1467,3,54,27,0,1466,1463,
        1,0,0,0,1466,1467,1,0,0,0,1467,71,1,0,0,0,1468,1469,3,258,129,0,
        1469,1470,5,283,0,0,1470,73,1,0,0,0,1471,1472,3,32,16,0,1472,1473,
        3,80,40,0,1473,1474,3,76,38,0,1474,1523,1,0,0,0,1475,1477,3,118,
        59,0,1476,1478,3,78,39,0,1477,1476,1,0,0,0,1478,1479,1,0,0,0,1479,
        1477,1,0,0,0,1479,1480,1,0,0,0,1480,1523,1,0,0,0,1481,1482,5,67,
        0,0,1482,1483,5,100,0,0,1483,1484,3,170,85,0,1484,1486,3,164,82,
        0,1485,1487,3,110,55,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,
        1523,1,0,0,0,1488,1489,5,252,0,0,1489,1490,3,170,85,0,1490,1491,
        3,164,82,0,1491,1493,3,96,48,0,1492,1494,3,110,55,0,1493,1492,1,
        0,0,0,1493,1494,1,0,0,0,1494,1523,1,0,0,0,1495,1496,5,145,0,0,1496,
        1497,5,122,0,0,1497,1498,3,170,85,0,1498,1499,3,164,82,0,1499,1505,
        5,255,0,0,1500,1506,3,170,85,0,1501,1502,5,2,0,0,1502,1503,3,30,
        15,0,1503,1504,5,3,0,0,1504,1506,1,0,0,0,1505,1500,1,0,0,0,1505,
        1501,1,0,0,0,1506,1507,1,0,0,0,1507,1508,3,164,82,0,1508,1509,5,
        157,0,0,1509,1513,3,188,94,0,1510,1512,3,98,49,0,1511,1510,1,0,0,
        0,1512,1515,1,0,0,0,1513,1511,1,0,0,0,1513,1514,1,0,0,0,1514,1519,
        1,0,0,0,1515,1513,1,0,0,0,1516,1518,3,100,50,0,1517,1516,1,0,0,0,
        1518,1521,1,0,0,0,1519,1517,1,0,0,0,1519,1520,1,0,0,0,1520,1523,
        1,0,0,0,1521,1519,1,0,0,0,1522,1471,1,0,0,0,1522,1475,1,0,0,0,1522,
        1481,1,0,0,0,1522,1488,1,0,0,0,1522,1495,1,0,0,0,1523,75,1,0,0,0,
        1524,1525,5,162,0,0,1525,1526,5,30,0,0,1526,1531,3,84,42,0,1527,
        1528,5,4,0,0,1528,1530,3,84,42,0,1529,1527,1,0,0,0,1530,1533,1,0,
        0,0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,1535,1,0,0,0,1533,1531,
        1,0,0,0,1534,1524,1,0,0,0,1534,1535,1,0,0,0,1535,1546,1,0,0,0,1536,
        1537,5,38,0,0,1537,1538,5,30,0,0,1538,1543,3,186,93,0,1539,1540,
        5,4,0,0,1540,1542,3,186,93,0,1541,1539,1,0,0,0,1542,1545,1,0,0,0,
        1543,1541,1,0,0,0,1543,1544,1,0,0,0,1544,1547,1,0,0,0,1545,1543,
        1,0,0,0,1546,1536,1,0,0,0,1546,1547,1,0,0,0,1547,1558,1,0,0,0,1548,
        1549,5,75,0,0,1549,1550,5,30,0,0,1550,1555,3,186,93,0,1551,1552,
        5,4,0,0,1552,1554,3,186,93,0,1553,1551,1,0,0,0,1554,1557,1,0,0,0,
        1555,1553,1,0,0,0,1555,1556,1,0,0,0,1556,1559,1,0,0,0,1557,1555,
        1,0,0,0,1558,1548,1,0,0,0,1558,1559,1,0,0,0,1559,1570,1,0,0,0,1560,
        1561,5,218,0,0,1561,1562,5,30,0,0,1562,1567,3,84,42,0,1563,1564,
        5,4,0,0,1564,1566,3,84,42,0,1565,1563,1,0,0,0,1566,1569,1,0,0,0,
        1567,1565,1,0,0,0,1567,1568,1,0,0,0,1568,1571,1,0,0,0,1569,1567,
        1,0,0,0,1570,1560,1,0,0,0,1570,1571,1,0,0,0,1571,1573,1,0,0,0,1572,
        1574,3,238,119,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,1574,1580,1,
        0,0,0,1575,1578,5,133,0,0,1576,1579,5,14,0,0,1577,1579,3,186,93,
        0,1578,1576,1,0,0,0,1578,1577,1,0,0,0,1579,1581,1,0,0,0,1580,1575,
        1,0,0,0,1580,1581,1,0,0,0,1581,77,1,0,0,0,1582,1583,3,32,16,0,1583,
        1584,3,88,44,0,1584,79,1,0,0,0,1585,1586,6,40,-1,0,1586,1587,3,82,
        41,0,1587,1611,1,0,0,0,1588,1589,10,3,0,0,1589,1590,4,40,3,0,1590,
        1592,7,13,0,0,1591,1593,3,132,66,0,1592,1591,1,0,0,0,1592,1593,1,
        0,0,0,1593,1594,1,0,0,0,1594,1610,3,80,40,4,1595,1596,10,2,0,0,1596,
        1597,4,40,5,0,1597,1599,5,120,0,0,1598,1600,3,132,66,0,1599,1598,
        1,0,0,0,1599,1600,1,0,0,0,1600,1601,1,0,0,0,1601,1610,3,80,40,3,
        1602,1603,10,1,0,0,1603,1604,4,40,7,0,1604,1606,7,14,0,0,1605,1607,
        3,132,66,0,1606,1605,1,0,0,0,1606,1607,1,0,0,0,1607,1608,1,0,0,0,
        1608,1610,3,80,40,2,1609,1588,1,0,0,0,1609,1595,1,0,0,0,1609,1602,
        1,0,0,0,1610,1613,1,0,0,0,1611,1609,1,0,0,0,1611,1612,1,0,0,0,1612,
        81,1,0,0,0,1613,1611,1,0,0,0,1614,1624,3,90,45,0,1615,1624,3,86,
        43,0,1616,1617,5,227,0,0,1617,1624,3,170,85,0,1618,1624,3,160,80,
        0,1619,1620,5,2,0,0,1620,1621,3,30,15,0,1621,1622,5,3,0,0,1622,1624,
        1,0,0,0,1623,1614,1,0,0,0,1623,1615,1,0,0,0,1623,1616,1,0,0,0,1623,
        1618,1,0,0,0,1623,1619,1,0,0,0,1624,83,1,0,0,0,1625,1627,3,186,93,
        0,1626,1628,7,15,0,0,1627,1626,1,0,0,0,1627,1628,1,0,0,0,1628,1631,
        1,0,0,0,1629,1630,5,155,0,0,1630,1632,7,16,0,0,1631,1629,1,0,0,0,
        1631,1632,1,0,0,0,1632,85,1,0,0,0,1633,1635,3,118,59,0,1634,1636,
        3,88,44,0,1635,1634,1,0,0,0,1636,1637,1,0,0,0,1637,1635,1,0,0,0,
        1637,1638,1,0,0,0,1638,87,1,0,0,0,1639,1641,3,92,46,0,1640,1642,
        3,110,55,0,1641,1640,1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,
        1643,1644,3,76,38,0,1644,1667,1,0,0,0,1645,1649,3,94,47,0,1646,1648,
        3,130,65,0,1647,1646,1,0,0,0,1648,1651,1,0,0,0,1649,1647,1,0,0,0,
        1649,1650,1,0,0,0,1650,1653,1,0,0,0,1651,1649,1,0,0,0,1652,1654,
        3,110,55,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1656,1,0,0,0,
        1655,1657,3,120,60,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1659,
        1,0,0,0,1658,1660,3,112,56,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,
        1660,1662,1,0,0,0,1661,1663,3,238,119,0,1662,1661,1,0,0,0,1662,1663,
        1,0,0,0,1663,1664,1,0,0,0,1664,1665,3,76,38,0,1665,1667,1,0,0,0,
        1666,1639,1,0,0,0,1666,1645,1,0,0,0,1667,89,1,0,0,0,1668,1670,3,
        92,46,0,1669,1671,3,118,59,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,
        1671,1673,1,0,0,0,1672,1674,3,110,55,0,1673,1672,1,0,0,0,1673,1674,
        1,0,0,0,1674,1698,1,0,0,0,1675,1677,3,94,47,0,1676,1678,3,118,59,
        0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1682,1,0,0,0,1679,1681,
        3,130,65,0,1680,1679,1,0,0,0,1681,1684,1,0,0,0,1682,1680,1,0,0,0,
        1682,1683,1,0,0,0,1683,1686,1,0,0,0,1684,1682,1,0,0,0,1685,1687,
        3,110,55,0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,1689,1,0,0,0,
        1688,1690,3,120,60,0,1689,1688,1,0,0,0,1689,1690,1,0,0,0,1690,1692,
        1,0,0,0,1691,1693,3,112,56,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,
        1693,1695,1,0,0,0,1694,1696,3,238,119,0,1695,1694,1,0,0,0,1695,1696,
        1,0,0,0,1696,1698,1,0,0,0,1697,1668,1,0,0,0,1697,1675,1,0,0,0,1698,
        91,1,0,0,0,1699,1700,5,206,0,0,1700,1701,5,239,0,0,1701,1702,5,2,
        0,0,1702,1703,3,178,89,0,1703,1704,5,3,0,0,1704,1710,1,0,0,0,1705,
        1706,5,143,0,0,1706,1710,3,178,89,0,1707,1708,5,187,0,0,1708,1710,
        3,178,89,0,1709,1699,1,0,0,0,1709,1705,1,0,0,0,1709,1707,1,0,0,0,
        1710,1712,1,0,0,0,1711,1713,3,166,83,0,1712,1711,1,0,0,0,1712,1713,
        1,0,0,0,1713,1716,1,0,0,0,1714,1715,5,185,0,0,1715,1717,5,283,0,
        0,1716,1714,1,0,0,0,1716,1717,1,0,0,0,1717,1718,1,0,0,0,1718,1719,
        5,255,0,0,1719,1732,5,283,0,0,1720,1730,5,22,0,0,1721,1731,3,148,
        74,0,1722,1731,3,228,114,0,1723,1726,5,2,0,0,1724,1727,3,148,74,
        0,1725,1727,3,228,114,0,1726,1724,1,0,0,0,1726,1725,1,0,0,0,1727,
        1728,1,0,0,0,1728,1729,5,3,0,0,1729,1731,1,0,0,0,1730,1721,1,0,0,
        0,1730,1722,1,0,0,0,1730,1723,1,0,0,0,1731,1733,1,0,0,0,1732,1720,
        1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,1734,1736,3,166,83,0,
        1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1739,1,0,0,0,1737,1738,
        5,184,0,0,1738,1740,5,283,0,0,1739,1737,1,0,0,0,1739,1740,1,0,0,
        0,1740,93,1,0,0,0,1741,1745,5,206,0,0,1742,1744,3,114,57,0,1743,
        1742,1,0,0,0,1744,1747,1,0,0,0,1745,1743,1,0,0,0,1745,1746,1,0,0,
        0,1746,1749,1,0,0,0,1747,1745,1,0,0,0,1748,1750,3,132,66,0,1749,
        1748,1,0,0,0,1749,1750,1,0,0,0,1750,1751,1,0,0,0,1751,1752,3,178,
        89,0,1752,95,1,0,0,0,1753,1754,5,212,0,0,1754,1755,3,106,53,0,1755,
        97,1,0,0,0,1756,1757,5,259,0,0,1757,1760,5,144,0,0,1758,1759,5,17,
        0,0,1759,1761,3,188,94,0,1760,1758,1,0,0,0,1760,1761,1,0,0,0,1761,
        1762,1,0,0,0,1762,1763,5,233,0,0,1763,1764,3,102,51,0,1764,99,1,
        0,0,0,1765,1766,5,259,0,0,1766,1767,5,153,0,0,1767,1770,5,144,0,
        0,1768,1769,5,17,0,0,1769,1771,3,188,94,0,1770,1768,1,0,0,0,1770,
        1771,1,0,0,0,1771,1772,1,0,0,0,1772,1773,5,233,0,0,1773,1774,3,104,
        52,0,1774,101,1,0,0,0,1775,1783,5,67,0,0,1776,1777,5,252,0,0,1777,
        1778,5,212,0,0,1778,1783,5,274,0,0,1779,1780,5,252,0,0,1780,1781,
        5,212,0,0,1781,1783,3,106,53,0,1782,1775,1,0,0,0,1782,1776,1,0,0,
        0,1782,1779,1,0,0,0,1783,103,1,0,0,0,1784,1785,5,119,0,0,1785,1803,
        5,274,0,0,1786,1787,5,119,0,0,1787,1788,5,2,0,0,1788,1789,3,168,
        84,0,1789,1790,5,3,0,0,1790,1791,5,256,0,0,1791,1792,5,2,0,0,1792,
        1797,3,186,93,0,1793,1794,5,4,0,0,1794,1796,3,186,93,0,1795,1793,
        1,0,0,0,1796,1799,1,0,0,0,1797,1795,1,0,0,0,1797,1798,1,0,0,0,1798,
        1800,1,0,0,0,1799,1797,1,0,0,0,1800,1801,5,3,0,0,1801,1803,1,0,0,
        0,1802,1784,1,0,0,0,1802,1786,1,0,0,0,1803,105,1,0,0,0,1804,1809,
        3,108,54,0,1805,1806,5,4,0,0,1806,1808,3,108,54,0,1807,1805,1,0,
        0,0,1808,1811,1,0,0,0,1809,1807,1,0,0,0,1809,1810,1,0,0,0,1810,107,
        1,0,0,0,1811,1809,1,0,0,0,1812,1813,3,170,85,0,1813,1814,5,264,0,
        0,1814,1815,3,186,93,0,1815,109,1,0,0,0,1816,1817,5,260,0,0,1817,
        1818,3,188,94,0,1818,111,1,0,0,0,1819,1820,5,108,0,0,1820,1821,3,
        188,94,0,1821,113,1,0,0,0,1822,1823,5,6,0,0,1823,1830,3,116,58,0,
        1824,1826,5,4,0,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,1827,
        1,0,0,0,1827,1829,3,116,58,0,1828,1825,1,0,0,0,1829,1832,1,0,0,0,
        1830,1828,1,0,0,0,1830,1831,1,0,0,0,1831,1833,1,0,0,0,1832,1830,
        1,0,0,0,1833,1834,5,7,0,0,1834,115,1,0,0,0,1835,1849,3,258,129,0,
        1836,1837,3,258,129,0,1837,1838,5,2,0,0,1838,1843,3,194,97,0,1839,
        1840,5,4,0,0,1840,1842,3,194,97,0,1841,1839,1,0,0,0,1842,1845,1,
        0,0,0,1843,1841,1,0,0,0,1843,1844,1,0,0,0,1844,1846,1,0,0,0,1845,
        1843,1,0,0,0,1846,1847,5,3,0,0,1847,1849,1,0,0,0,1848,1835,1,0,0,
        0,1848,1836,1,0,0,0,1849,117,1,0,0,0,1850,1851,5,100,0,0,1851,1856,
        3,134,67,0,1852,1853,5,4,0,0,1853,1855,3,134,67,0,1854,1852,1,0,
        0,0,1855,1858,1,0,0,0,1856,1854,1,0,0,0,1856,1857,1,0,0,0,1857,1862,
        1,0,0,0,1858,1856,1,0,0,0,1859,1861,3,130,65,0,1860,1859,1,0,0,0,
        1861,1864,1,0,0,0,1862,1860,1,0,0,0,1862,1863,1,0,0,0,1863,1866,
        1,0,0,0,1864,1862,1,0,0,0,1865,1867,3,124,62,0,1866,1865,1,0,0,0,
        1866,1867,1,0,0,0,1867,119,1,0,0,0,1868,1869,5,106,0,0,1869,1870,
        5,30,0,0,1870,1875,3,186,93,0,1871,1872,5,4,0,0,1872,1874,3,186,
        93,0,1873,1871,1,0,0,0,1874,1877,1,0,0,0,1875,1873,1,0,0,0,1875,
        1876,1,0,0,0,1876,1895,1,0,0,0,1877,1875,1,0,0,0,1878,1879,5,262,
        0,0,1879,1896,5,201,0,0,1880,1881,5,262,0,0,1881,1896,5,55,0,0,1882,
        1883,5,107,0,0,1883,1884,5,214,0,0,1884,1885,5,2,0,0,1885,1890,3,
        122,61,0,1886,1887,5,4,0,0,1887,1889,3,122,61,0,1888,1886,1,0,0,
        0,1889,1892,1,0,0,0,1890,1888,1,0,0,0,1890,1891,1,0,0,0,1891,1893,
        1,0,0,0,1892,1890,1,0,0,0,1893,1894,5,3,0,0,1894,1896,1,0,0,0,1895,
        1878,1,0,0,0,1895,1880,1,0,0,0,1895,1882,1,0,0,0,1895,1896,1,0,0,
        0,1896,1913,1,0,0,0,1897,1898,5,106,0,0,1898,1899,5,30,0,0,1899,
        1900,5,107,0,0,1900,1901,5,214,0,0,1901,1902,5,2,0,0,1902,1907,3,
        122,61,0,1903,1904,5,4,0,0,1904,1906,3,122,61,0,1905,1903,1,0,0,
        0,1906,1909,1,0,0,0,1907,1905,1,0,0,0,1907,1908,1,0,0,0,1908,1910,
        1,0,0,0,1909,1907,1,0,0,0,1910,1911,5,3,0,0,1911,1913,1,0,0,0,1912,
        1868,1,0,0,0,1912,1897,1,0,0,0,1913,121,1,0,0,0,1914,1923,5,2,0,
        0,1915,1920,3,186,93,0,1916,1917,5,4,0,0,1917,1919,3,186,93,0,1918,
        1916,1,0,0,0,1919,1922,1,0,0,0,1920,1918,1,0,0,0,1920,1921,1,0,0,
        0,1921,1924,1,0,0,0,1922,1920,1,0,0,0,1923,1915,1,0,0,0,1923,1924,
        1,0,0,0,1924,1925,1,0,0,0,1925,1928,5,3,0,0,1926,1928,3,186,93,0,
        1927,1914,1,0,0,0,1927,1926,1,0,0,0,1928,123,1,0,0,0,1929,1930,5,
        174,0,0,1930,1931,5,2,0,0,1931,1932,3,178,89,0,1932,1933,5,96,0,
        0,1933,1934,3,126,63,0,1934,1935,5,113,0,0,1935,1936,5,2,0,0,1936,
        1941,3,128,64,0,1937,1938,5,4,0,0,1938,1940,3,128,64,0,1939,1937,
        1,0,0,0,1940,1943,1,0,0,0,1941,1939,1,0,0,0,1941,1942,1,0,0,0,1942,
        1944,1,0,0,0,1943,1941,1,0,0,0,1944,1945,5,3,0,0,1945,1946,5,3,0,
        0,1946,125,1,0,0,0,1947,1960,3,258,129,0,1948,1949,5,2,0,0,1949,
        1954,3,258,129,0,1950,1951,5,4,0,0,1951,1953,3,258,129,0,1952,1950,
        1,0,0,0,1953,1956,1,0,0,0,1954,1952,1,0,0,0,1954,1955,1,0,0,0,1955,
        1957,1,0,0,0,1956,1954,1,0,0,0,1957,1958,5,3,0,0,1958,1960,1,0,0,
        0,1959,1947,1,0,0,0,1959,1948,1,0,0,0,1960,127,1,0,0,0,1961,1966,
        3,186,93,0,1962,1964,5,22,0,0,1963,1962,1,0,0,0,1963,1964,1,0,0,
        0,1964,1965,1,0,0,0,1965,1967,3,258,129,0,1966,1963,1,0,0,0,1966,
        1967,1,0,0,0,1967,129,1,0,0,0,1968,1969,5,128,0,0,1969,1971,5,257,
        0,0,1970,1972,5,164,0,0,1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,
        1973,1,0,0,0,1973,1974,3,252,126,0,1974,1983,5,2,0,0,1975,1980,3,
        186,93,0,1976,1977,5,4,0,0,1977,1979,3,186,93,0,1978,1976,1,0,0,
        0,1979,1982,1,0,0,0,1980,1978,1,0,0,0,1980,1981,1,0,0,0,1981,1984,
        1,0,0,0,1982,1980,1,0,0,0,1983,1975,1,0,0,0,1983,1984,1,0,0,0,1984,
        1985,1,0,0,0,1985,1986,5,3,0,0,1986,1998,3,258,129,0,1987,1989,5,
        22,0,0,1988,1987,1,0,0,0,1988,1989,1,0,0,0,1989,1990,1,0,0,0,1990,
        1995,3,258,129,0,1991,1992,5,4,0,0,1992,1994,3,258,129,0,1993,1991,
        1,0,0,0,1994,1997,1,0,0,0,1995,1993,1,0,0,0,1995,1996,1,0,0,0,1996,
        1999,1,0,0,0,1997,1995,1,0,0,0,1998,1988,1,0,0,0,1998,1999,1,0,0,
        0,1999,131,1,0,0,0,2000,2001,7,17,0,0,2001,133,1,0,0,0,2002,2006,
        3,158,79,0,2003,2005,3,136,68,0,2004,2003,1,0,0,0,2005,2008,1,0,
        0,0,2006,2004,1,0,0,0,2006,2007,1,0,0,0,2007,135,1,0,0,0,2008,2006,
        1,0,0,0,2009,2010,3,138,69,0,2010,2011,5,125,0,0,2011,2013,3,158,
        79,0,2012,2014,3,140,70,0,2013,2012,1,0,0,0,2013,2014,1,0,0,0,2014,
        2021,1,0,0,0,2015,2016,5,151,0,0,2016,2017,3,138,69,0,2017,2018,
        5,125,0,0,2018,2019,3,158,79,0,2019,2021,1,0,0,0,2020,2009,1,0,0,
        0,2020,2015,1,0,0,0,2021,137,1,0,0,0,2022,2024,5,116,0,0,2023,2022,
        1,0,0,0,2023,2024,1,0,0,0,2024,2047,1,0,0,0,2025,2047,5,54,0,0,2026,
        2028,5,131,0,0,2027,2029,5,164,0,0,2028,2027,1,0,0,0,2028,2029,1,
        0,0,0,2029,2047,1,0,0,0,2030,2032,5,131,0,0,2031,2030,1,0,0,0,2031,
        2032,1,0,0,0,2032,2033,1,0,0,0,2033,2047,5,207,0,0,2034,2036,5,196,
        0,0,2035,2037,5,164,0,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,
        2047,1,0,0,0,2038,2040,5,101,0,0,2039,2041,5,164,0,0,2040,2039,1,
        0,0,0,2040,2041,1,0,0,0,2041,2047,1,0,0,0,2042,2044,5,131,0,0,2043,
        2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2047,5,18,
        0,0,2046,2023,1,0,0,0,2046,2025,1,0,0,0,2046,2026,1,0,0,0,2046,2031,
        1,0,0,0,2046,2034,1,0,0,0,2046,2038,1,0,0,0,2046,2043,1,0,0,0,2047,
        139,1,0,0,0,2048,2049,5,157,0,0,2049,2053,3,188,94,0,2050,2051,5,
        255,0,0,2051,2053,3,146,73,0,2052,2048,1,0,0,0,2052,2050,1,0,0,0,
        2053,141,1,0,0,0,2054,2055,5,229,0,0,2055,2057,5,2,0,0,2056,2058,
        3,144,72,0,2057,2056,1,0,0,0,2057,2058,1,0,0,0,2058,2059,1,0,0,0,
        2059,2060,5,3,0,0,2060,143,1,0,0,0,2061,2063,5,273,0,0,2062,2061,
        1,0,0,0,2062,2063,1,0,0,0,2063,2064,1,0,0,0,2064,2065,7,18,0,0,2065,
        2086,5,173,0,0,2066,2067,3,186,93,0,2067,2068,5,203,0,0,2068,2086,
        1,0,0,0,2069,2070,5,28,0,0,2070,2071,5,287,0,0,2071,2072,5,163,0,
        0,2072,2073,5,156,0,0,2073,2082,5,287,0,0,2074,2080,5,157,0,0,2075,
        2081,3,258,129,0,2076,2077,3,252,126,0,2077,2078,5,2,0,0,2078,2079,
        5,3,0,0,2079,2081,1,0,0,0,2080,2075,1,0,0,0,2080,2076,1,0,0,0,2081,
        2083,1,0,0,0,2082,2074,1,0,0,0,2082,2083,1,0,0,0,2083,2086,1,0,0,
        0,2084,2086,3,186,93,0,2085,2062,1,0,0,0,2085,2066,1,0,0,0,2085,
        2069,1,0,0,0,2085,2084,1,0,0,0,2086,145,1,0,0,0,2087,2088,5,2,0,
        0,2088,2089,3,148,74,0,2089,2090,5,3,0,0,2090,147,1,0,0,0,2091,2096,
        3,254,127,0,2092,2093,5,4,0,0,2093,2095,3,254,127,0,2094,2092,1,
        0,0,0,2095,2098,1,0,0,0,2096,2094,1,0,0,0,2096,2097,1,0,0,0,2097,
        149,1,0,0,0,2098,2096,1,0,0,0,2099,2100,5,2,0,0,2100,2105,3,152,
        76,0,2101,2102,5,4,0,0,2102,2104,3,152,76,0,2103,2101,1,0,0,0,2104,
        2107,1,0,0,0,2105,2103,1,0,0,0,2105,2106,1,0,0,0,2106,2108,1,0,0,
        0,2107,2105,1,0,0,0,2108,2109,5,3,0,0,2109,151,1,0,0,0,2110,2112,
        3,254,127,0,2111,2113,7,15,0,0,2112,2111,1,0,0,0,2112,2113,1,0,0,
        0,2113,153,1,0,0,0,2114,2115,5,2,0,0,2115,2120,3,156,78,0,2116,2117,
        5,4,0,0,2117,2119,3,156,78,0,2118,2116,1,0,0,0,2119,2122,1,0,0,0,
        2120,2118,1,0,0,0,2120,2121,1,0,0,0,2121,2123,1,0,0,0,2122,2120,
        1,0,0,0,2123,2124,5,3,0,0,2124,155,1,0,0,0,2125,2127,3,258,129,0,
        2126,2128,3,28,14,0,2127,2126,1,0,0,0,2127,2128,1,0,0,0,2128,157,
        1,0,0,0,2129,2131,3,170,85,0,2130,2132,3,142,71,0,2131,2130,1,0,
        0,0,2131,2132,1,0,0,0,2132,2133,1,0,0,0,2133,2134,3,164,82,0,2134,
        2154,1,0,0,0,2135,2136,5,2,0,0,2136,2137,3,30,15,0,2137,2139,5,3,
        0,0,2138,2140,3,142,71,0,2139,2138,1,0,0,0,2139,2140,1,0,0,0,2140,
        2141,1,0,0,0,2141,2142,3,164,82,0,2142,2154,1,0,0,0,2143,2144,5,
        2,0,0,2144,2145,3,134,67,0,2145,2147,5,3,0,0,2146,2148,3,142,71,
        0,2147,2146,1,0,0,0,2147,2148,1,0,0,0,2148,2149,1,0,0,0,2149,2150,
        3,164,82,0,2150,2154,1,0,0,0,2151,2154,3,160,80,0,2152,2154,3,162,
        81,0,2153,2129,1,0,0,0,2153,2135,1,0,0,0,2153,2143,1,0,0,0,2153,
        2151,1,0,0,0,2153,2152,1,0,0,0,2154,159,1,0,0,0,2155,2156,5,256,
        0,0,2156,2161,3,186,93,0,2157,2158,5,4,0,0,2158,2160,3,186,93,0,
        2159,2157,1,0,0,0,2160,2163,1,0,0,0,2161,2159,1,0,0,0,2161,2162,
        1,0,0,0,2162,2164,1,0,0,0,2163,2161,1,0,0,0,2164,2165,3,164,82,0,
        2165,161,1,0,0,0,2166,2167,3,254,127,0,2167,2176,5,2,0,0,2168,2173,
        3,186,93,0,2169,2170,5,4,0,0,2170,2172,3,186,93,0,2171,2169,1,0,
        0,0,2172,2175,1,0,0,0,2173,2171,1,0,0,0,2173,2174,1,0,0,0,2174,2177,
        1,0,0,0,2175,2173,1,0,0,0,2176,2168,1,0,0,0,2176,2177,1,0,0,0,2177,
        2178,1,0,0,0,2178,2179,5,3,0,0,2179,2180,3,164,82,0,2180,163,1,0,
        0,0,2181,2183,5,22,0,0,2182,2181,1,0,0,0,2182,2183,1,0,0,0,2183,
        2184,1,0,0,0,2184,2186,3,260,130,0,2185,2187,3,146,73,0,2186,2185,
        1,0,0,0,2186,2187,1,0,0,0,2187,2189,1,0,0,0,2188,2182,1,0,0,0,2188,
        2189,1,0,0,0,2189,165,1,0,0,0,2190,2191,5,202,0,0,2191,2192,5,98,
        0,0,2192,2193,5,209,0,0,2193,2197,5,283,0,0,2194,2195,5,262,0,0,
        2195,2196,5,210,0,0,2196,2198,3,54,27,0,2197,2194,1,0,0,0,2197,2198,
        1,0,0,0,2198,2240,1,0,0,0,2199,2200,5,202,0,0,2200,2201,5,98,0,0,
        2201,2211,5,68,0,0,2202,2203,5,91,0,0,2203,2204,5,232,0,0,2204,2205,
        5,30,0,0,2205,2209,5,283,0,0,2206,2207,5,80,0,0,2207,2208,5,30,0,
        0,2208,2210,5,283,0,0,2209,2206,1,0,0,0,2209,2210,1,0,0,0,2210,2212,
        1,0,0,0,2211,2202,1,0,0,0,2211,2212,1,0,0,0,2212,2218,1,0,0,0,2213,
        2214,5,42,0,0,2214,2215,5,124,0,0,2215,2216,5,232,0,0,2216,2217,
        5,30,0,0,2217,2219,5,283,0,0,2218,2213,1,0,0,0,2218,2219,1,0,0,0,
        2219,2225,1,0,0,0,2220,2221,5,143,0,0,2221,2222,5,126,0,0,2222,2223,
        5,232,0,0,2223,2224,5,30,0,0,2224,2226,5,283,0,0,2225,2220,1,0,0,
        0,2225,2226,1,0,0,0,2226,2231,1,0,0,0,2227,2228,5,134,0,0,2228,2229,
        5,232,0,0,2229,2230,5,30,0,0,2230,2232,5,283,0,0,2231,2227,1,0,0,
        0,2231,2232,1,0,0,0,2232,2237,1,0,0,0,2233,2234,5,154,0,0,2234,2235,
        5,66,0,0,2235,2236,5,22,0,0,2236,2238,5,283,0,0,2237,2233,1,0,0,
        0,2237,2238,1,0,0,0,2238,2240,1,0,0,0,2239,2190,1,0,0,0,2239,2199,
        1,0,0,0,2240,167,1,0,0,0,2241,2246,3,170,85,0,2242,2243,5,4,0,0,
        2243,2245,3,170,85,0,2244,2242,1,0,0,0,2245,2248,1,0,0,0,2246,2244,
        1,0,0,0,2246,2247,1,0,0,0,2247,169,1,0,0,0,2248,2246,1,0,0,0,2249,
        2254,3,254,127,0,2250,2251,5,5,0,0,2251,2253,3,254,127,0,2252,2250,
        1,0,0,0,2253,2256,1,0,0,0,2254,2252,1,0,0,0,2254,2255,1,0,0,0,2255,
        171,1,0,0,0,2256,2254,1,0,0,0,2257,2258,3,254,127,0,2258,2259,5,
        5,0,0,2259,2261,1,0,0,0,2260,2257,1,0,0,0,2260,2261,1,0,0,0,2261,
        2262,1,0,0,0,2262,2263,3,254,127,0,2263,173,1,0,0,0,2264,2265,3,
        254,127,0,2265,2266,5,5,0,0,2266,2268,1,0,0,0,2267,2264,1,0,0,0,
        2267,2268,1,0,0,0,2268,2269,1,0,0,0,2269,2270,3,254,127,0,2270,175,
        1,0,0,0,2271,2279,3,186,93,0,2272,2274,5,22,0,0,2273,2272,1,0,0,
        0,2273,2274,1,0,0,0,2274,2277,1,0,0,0,2275,2278,3,254,127,0,2276,
        2278,3,146,73,0,2277,2275,1,0,0,0,2277,2276,1,0,0,0,2278,2280,1,
        0,0,0,2279,2273,1,0,0,0,2279,2280,1,0,0,0,2280,177,1,0,0,0,2281,
        2286,3,176,88,0,2282,2283,5,4,0,0,2283,2285,3,176,88,0,2284,2282,
        1,0,0,0,2285,2288,1,0,0,0,2286,2284,1,0,0,0,2286,2287,1,0,0,0,2287,
        179,1,0,0,0,2288,2286,1,0,0,0,2289,2290,5,2,0,0,2290,2295,3,182,
        91,0,2291,2292,5,4,0,0,2292,2294,3,182,91,0,2293,2291,1,0,0,0,2294,
        2297,1,0,0,0,2295,2293,1,0,0,0,2295,2296,1,0,0,0,2296,2298,1,0,0,
        0,2297,2295,1,0,0,0,2298,2299,5,3,0,0,2299,181,1,0,0,0,2300,2314,
        3,252,126,0,2301,2302,3,258,129,0,2302,2303,5,2,0,0,2303,2308,3,
        184,92,0,2304,2305,5,4,0,0,2305,2307,3,184,92,0,2306,2304,1,0,0,
        0,2307,2310,1,0,0,0,2308,2306,1,0,0,0,2308,2309,1,0,0,0,2309,2311,
        1,0,0,0,2310,2308,1,0,0,0,2311,2312,5,3,0,0,2312,2314,1,0,0,0,2313,
        2300,1,0,0,0,2313,2301,1,0,0,0,2314,183,1,0,0,0,2315,2318,3,252,
        126,0,2316,2318,3,196,98,0,2317,2315,1,0,0,0,2317,2316,1,0,0,0,2318,
        185,1,0,0,0,2319,2320,3,188,94,0,2320,187,1,0,0,0,2321,2322,6,94,
        -1,0,2322,2323,5,153,0,0,2323,2334,3,188,94,5,2324,2325,5,83,0,0,
        2325,2326,5,2,0,0,2326,2327,3,30,15,0,2327,2328,5,3,0,0,2328,2334,
        1,0,0,0,2329,2331,3,192,96,0,2330,2332,3,190,95,0,2331,2330,1,0,
        0,0,2331,2332,1,0,0,0,2332,2334,1,0,0,0,2333,2321,1,0,0,0,2333,2324,
        1,0,0,0,2333,2329,1,0,0,0,2334,2343,1,0,0,0,2335,2336,10,2,0,0,2336,
        2337,5,17,0,0,2337,2342,3,188,94,3,2338,2339,10,1,0,0,2339,2340,
        5,161,0,0,2340,2342,3,188,94,2,2341,2335,1,0,0,0,2341,2338,1,0,0,
        0,2342,2345,1,0,0,0,2343,2341,1,0,0,0,2343,2344,1,0,0,0,2344,189,
        1,0,0,0,2345,2343,1,0,0,0,2346,2348,5,153,0,0,2347,2346,1,0,0,0,
        2347,2348,1,0,0,0,2348,2349,1,0,0,0,2349,2350,5,26,0,0,2350,2351,
        3,192,96,0,2351,2352,5,17,0,0,2352,2353,3,192,96,0,2353,2429,1,0,
        0,0,2354,2356,5,153,0,0,2355,2354,1,0,0,0,2355,2356,1,0,0,0,2356,
        2357,1,0,0,0,2357,2358,5,113,0,0,2358,2359,5,2,0,0,2359,2364,3,186,
        93,0,2360,2361,5,4,0,0,2361,2363,3,186,93,0,2362,2360,1,0,0,0,2363,
        2366,1,0,0,0,2364,2362,1,0,0,0,2364,2365,1,0,0,0,2365,2367,1,0,0,
        0,2366,2364,1,0,0,0,2367,2368,5,3,0,0,2368,2429,1,0,0,0,2369,2371,
        5,153,0,0,2370,2369,1,0,0,0,2370,2371,1,0,0,0,2371,2372,1,0,0,0,
        2372,2373,5,113,0,0,2373,2374,5,2,0,0,2374,2375,3,30,15,0,2375,2376,
        5,3,0,0,2376,2429,1,0,0,0,2377,2379,5,153,0,0,2378,2377,1,0,0,0,
        2378,2379,1,0,0,0,2379,2380,1,0,0,0,2380,2381,5,197,0,0,2381,2429,
        3,192,96,0,2382,2384,5,153,0,0,2383,2382,1,0,0,0,2383,2384,1,0,0,
        0,2384,2385,1,0,0,0,2385,2386,5,132,0,0,2386,2400,7,19,0,0,2387,
        2388,5,2,0,0,2388,2401,5,3,0,0,2389,2390,5,2,0,0,2390,2395,3,186,
        93,0,2391,2392,5,4,0,0,2392,2394,3,186,93,0,2393,2391,1,0,0,0,2394,
        2397,1,0,0,0,2395,2393,1,0,0,0,2395,2396,1,0,0,0,2396,2398,1,0,0,
        0,2397,2395,1,0,0,0,2398,2399,5,3,0,0,2399,2401,1,0,0,0,2400,2387,
        1,0,0,0,2400,2389,1,0,0,0,2401,2429,1,0,0,0,2402,2404,5,153,0,0,
        2403,2402,1,0,0,0,2403,2404,1,0,0,0,2404,2405,1,0,0,0,2405,2406,
        5,132,0,0,2406,2409,3,192,96,0,2407,2408,5,79,0,0,2408,2410,5,283,
        0,0,2409,2407,1,0,0,0,2409,2410,1,0,0,0,2410,2429,1,0,0,0,2411,2413,
        5,123,0,0,2412,2414,5,153,0,0,2413,2412,1,0,0,0,2413,2414,1,0,0,
        0,2414,2415,1,0,0,0,2415,2429,5,154,0,0,2416,2418,5,123,0,0,2417,
        2419,5,153,0,0,2418,2417,1,0,0,0,2418,2419,1,0,0,0,2419,2420,1,0,
        0,0,2420,2429,7,20,0,0,2421,2423,5,123,0,0,2422,2424,5,153,0,0,2423,
        2422,1,0,0,0,2423,2424,1,0,0,0,2424,2425,1,0,0,0,2425,2426,5,74,
        0,0,2426,2427,5,100,0,0,2427,2429,3,192,96,0,2428,2347,1,0,0,0,2428,
        2355,1,0,0,0,2428,2370,1,0,0,0,2428,2378,1,0,0,0,2428,2383,1,0,0,
        0,2428,2403,1,0,0,0,2428,2411,1,0,0,0,2428,2416,1,0,0,0,2428,2421,
        1,0,0,0,2429,191,1,0,0,0,2430,2431,6,96,-1,0,2431,2435,3,194,97,
        0,2432,2433,7,21,0,0,2433,2435,3,192,96,7,2434,2430,1,0,0,0,2434,
        2432,1,0,0,0,2435,2457,1,0,0,0,2436,2437,10,6,0,0,2437,2438,7,22,
        0,0,2438,2456,3,192,96,7,2439,2440,10,5,0,0,2440,2441,7,23,0,0,2441,
        2456,3,192,96,6,2442,2443,10,4,0,0,2443,2444,5,279,0,0,2444,2456,
        3,192,96,5,2445,2446,10,3,0,0,2446,2447,5,282,0,0,2447,2456,3,192,
        96,4,2448,2449,10,2,0,0,2449,2450,5,280,0,0,2450,2456,3,192,96,3,
        2451,2452,10,1,0,0,2452,2453,3,198,99,0,2453,2454,3,192,96,2,2454,
        2456,1,0,0,0,2455,2436,1,0,0,0,2455,2439,1,0,0,0,2455,2442,1,0,0,
        0,2455,2445,1,0,0,0,2455,2448,1,0,0,0,2455,2451,1,0,0,0,2456,2459,
        1,0,0,0,2457,2455,1,0,0,0,2457,2458,1,0,0,0,2458,193,1,0,0,0,2459,
        2457,1,0,0,0,2460,2461,6,97,-1,0,2461,2645,7,24,0,0,2462,2464,5,
        33,0,0,2463,2465,3,236,118,0,2464,2463,1,0,0,0,2465,2466,1,0,0,0,
        2466,2464,1,0,0,0,2466,2467,1,0,0,0,2467,2470,1,0,0,0,2468,2469,
        5,77,0,0,2469,2471,3,186,93,0,2470,2468,1,0,0,0,2470,2471,1,0,0,
        0,2471,2472,1,0,0,0,2472,2473,5,78,0,0,2473,2645,1,0,0,0,2474,2475,
        5,33,0,0,2475,2477,3,186,93,0,2476,2478,3,236,118,0,2477,2476,1,
        0,0,0,2478,2479,1,0,0,0,2479,2477,1,0,0,0,2479,2480,1,0,0,0,2480,
        2483,1,0,0,0,2481,2482,5,77,0,0,2482,2484,3,186,93,0,2483,2481,1,
        0,0,0,2483,2484,1,0,0,0,2484,2485,1,0,0,0,2485,2486,5,78,0,0,2486,
        2645,1,0,0,0,2487,2488,5,34,0,0,2488,2489,5,2,0,0,2489,2490,3,186,
        93,0,2490,2491,5,22,0,0,2491,2492,3,222,111,0,2492,2493,5,3,0,0,
        2493,2645,1,0,0,0,2494,2495,5,224,0,0,2495,2504,5,2,0,0,2496,2501,
        3,176,88,0,2497,2498,5,4,0,0,2498,2500,3,176,88,0,2499,2497,1,0,
        0,0,2500,2503,1,0,0,0,2501,2499,1,0,0,0,2501,2502,1,0,0,0,2502,2505,
        1,0,0,0,2503,2501,1,0,0,0,2504,2496,1,0,0,0,2504,2505,1,0,0,0,2505,
        2506,1,0,0,0,2506,2645,5,3,0,0,2507,2508,5,94,0,0,2508,2509,5,2,
        0,0,2509,2512,3,186,93,0,2510,2511,5,111,0,0,2511,2513,5,155,0,0,
        2512,2510,1,0,0,0,2512,2513,1,0,0,0,2513,2514,1,0,0,0,2514,2515,
        5,3,0,0,2515,2645,1,0,0,0,2516,2517,5,127,0,0,2517,2518,5,2,0,0,
        2518,2521,3,186,93,0,2519,2520,5,111,0,0,2520,2522,5,155,0,0,2521,
        2519,1,0,0,0,2521,2522,1,0,0,0,2522,2523,1,0,0,0,2523,2524,5,3,0,
        0,2524,2645,1,0,0,0,2525,2526,5,176,0,0,2526,2527,5,2,0,0,2527,2528,
        3,192,96,0,2528,2529,5,113,0,0,2529,2530,3,192,96,0,2530,2531,5,
        3,0,0,2531,2645,1,0,0,0,2532,2645,3,196,98,0,2533,2645,5,274,0,0,
        2534,2535,3,252,126,0,2535,2536,5,5,0,0,2536,2537,5,274,0,0,2537,
        2645,1,0,0,0,2538,2539,5,2,0,0,2539,2542,3,176,88,0,2540,2541,5,
        4,0,0,2541,2543,3,176,88,0,2542,2540,1,0,0,0,2543,2544,1,0,0,0,2544,
        2542,1,0,0,0,2544,2545,1,0,0,0,2545,2546,1,0,0,0,2546,2547,5,3,0,
        0,2547,2645,1,0,0,0,2548,2549,5,2,0,0,2549,2550,3,30,15,0,2550,2551,
        5,3,0,0,2551,2645,1,0,0,0,2552,2553,3,250,125,0,2553,2565,5,2,0,
        0,2554,2556,3,132,66,0,2555,2554,1,0,0,0,2555,2556,1,0,0,0,2556,
        2557,1,0,0,0,2557,2562,3,186,93,0,2558,2559,5,4,0,0,2559,2561,3,
        186,93,0,2560,2558,1,0,0,0,2561,2564,1,0,0,0,2562,2560,1,0,0,0,2562,
        2563,1,0,0,0,2563,2566,1,0,0,0,2564,2562,1,0,0,0,2565,2555,1,0,0,
        0,2565,2566,1,0,0,0,2566,2567,1,0,0,0,2567,2574,5,3,0,0,2568,2569,
        5,92,0,0,2569,2570,5,2,0,0,2570,2571,5,260,0,0,2571,2572,3,188,94,
        0,2572,2573,5,3,0,0,2573,2575,1,0,0,0,2574,2568,1,0,0,0,2574,2575,
        1,0,0,0,2575,2578,1,0,0,0,2576,2577,5,166,0,0,2577,2579,3,242,121,
        0,2578,2576,1,0,0,0,2578,2579,1,0,0,0,2579,2645,1,0,0,0,2580,2581,
        3,258,129,0,2581,2582,5,8,0,0,2582,2583,3,186,93,0,2583,2645,1,0,
        0,0,2584,2585,5,2,0,0,2585,2588,3,258,129,0,2586,2587,5,4,0,0,2587,
        2589,3,258,129,0,2588,2586,1,0,0,0,2589,2590,1,0,0,0,2590,2588,1,
        0,0,0,2590,2591,1,0,0,0,2591,2592,1,0,0,0,2592,2593,5,3,0,0,2593,
        2594,5,8,0,0,2594,2595,3,186,93,0,2595,2645,1,0,0,0,2596,2645,3,
        258,129,0,2597,2598,5,2,0,0,2598,2599,3,186,93,0,2599,2600,5,3,0,
        0,2600,2645,1,0,0,0,2601,2602,5,88,0,0,2602,2603,5,2,0,0,2603,2604,
        3,258,129,0,2604,2605,5,100,0,0,2605,2606,3,192,96,0,2606,2607,5,
        3,0,0,2607,2645,1,0,0,0,2608,2609,7,25,0,0,2609,2610,5,2,0,0,2610,
        2611,3,192,96,0,2611,2612,7,26,0,0,2612,2615,3,192,96,0,2613,2614,
        7,27,0,0,2614,2616,3,192,96,0,2615,2613,1,0,0,0,2615,2616,1,0,0,
        0,2616,2617,1,0,0,0,2617,2618,5,3,0,0,2618,2645,1,0,0,0,2619,2620,
        5,240,0,0,2620,2622,5,2,0,0,2621,2623,7,28,0,0,2622,2621,1,0,0,0,
        2622,2623,1,0,0,0,2623,2625,1,0,0,0,2624,2626,3,192,96,0,2625,2624,
        1,0,0,0,2625,2626,1,0,0,0,2626,2627,1,0,0,0,2627,2628,5,100,0,0,
        2628,2629,3,192,96,0,2629,2630,5,3,0,0,2630,2645,1,0,0,0,2631,2632,
        5,168,0,0,2632,2633,5,2,0,0,2633,2634,3,192,96,0,2634,2635,5,175,
        0,0,2635,2636,3,192,96,0,2636,2637,5,100,0,0,2637,2640,3,192,96,
        0,2638,2639,5,96,0,0,2639,2641,3,192,96,0,2640,2638,1,0,0,0,2640,
        2641,1,0,0,0,2641,2642,1,0,0,0,2642,2643,5,3,0,0,2643,2645,1,0,0,
        0,2644,2460,1,0,0,0,2644,2462,1,0,0,0,2644,2474,1,0,0,0,2644,2487,
        1,0,0,0,2644,2494,1,0,0,0,2644,2507,1,0,0,0,2644,2516,1,0,0,0,2644,
        2525,1,0,0,0,2644,2532,1,0,0,0,2644,2533,1,0,0,0,2644,2534,1,0,0,
        0,2644,2538,1,0,0,0,2644,2548,1,0,0,0,2644,2552,1,0,0,0,2644,2580,
        1,0,0,0,2644,2584,1,0,0,0,2644,2596,1,0,0,0,2644,2597,1,0,0,0,2644,
        2601,1,0,0,0,2644,2608,1,0,0,0,2644,2619,1,0,0,0,2644,2631,1,0,0,
        0,2645,2656,1,0,0,0,2646,2647,10,8,0,0,2647,2648,5,9,0,0,2648,2649,
        3,192,96,0,2649,2650,5,10,0,0,2650,2655,1,0,0,0,2651,2652,10,6,0,
        0,2652,2653,5,5,0,0,2653,2655,3,258,129,0,2654,2646,1,0,0,0,2654,
        2651,1,0,0,0,2655,2658,1,0,0,0,2656,2654,1,0,0,0,2656,2657,1,0,0,
        0,2657,195,1,0,0,0,2658,2656,1,0,0,0,2659,2672,5,154,0,0,2660,2672,
        3,206,103,0,2661,2662,3,258,129,0,2662,2663,5,283,0,0,2663,2672,
        1,0,0,0,2664,2672,3,264,132,0,2665,2672,3,204,102,0,2666,2668,5,
        283,0,0,2667,2666,1,0,0,0,2668,2669,1,0,0,0,2669,2667,1,0,0,0,2669,
        2670,1,0,0,0,2670,2672,1,0,0,0,2671,2659,1,0,0,0,2671,2660,1,0,0,
        0,2671,2661,1,0,0,0,2671,2664,1,0,0,0,2671,2665,1,0,0,0,2671,2667,
        1,0,0,0,2672,197,1,0,0,0,2673,2674,7,29,0,0,2674,199,1,0,0,0,2675,
        2676,7,30,0,0,2676,201,1,0,0,0,2677,2678,7,31,0,0,2678,203,1,0,0,
        0,2679,2680,7,32,0,0,2680,205,1,0,0,0,2681,2684,5,121,0,0,2682,2685,
        3,208,104,0,2683,2685,3,212,106,0,2684,2682,1,0,0,0,2684,2683,1,
        0,0,0,2684,2685,1,0,0,0,2685,207,1,0,0,0,2686,2688,3,210,105,0,2687,
        2689,3,214,107,0,2688,2687,1,0,0,0,2688,2689,1,0,0,0,2689,209,1,
        0,0,0,2690,2691,3,216,108,0,2691,2692,3,218,109,0,2692,2694,1,0,
        0,0,2693,2690,1,0,0,0,2694,2695,1,0,0,0,2695,2693,1,0,0,0,2695,2696,
        1,0,0,0,2696,211,1,0,0,0,2697,2700,3,214,107,0,2698,2701,3,210,105,
        0,2699,2701,3,214,107,0,2700,2698,1,0,0,0,2700,2699,1,0,0,0,2700,
        2701,1,0,0,0,2701,213,1,0,0,0,2702,2703,3,216,108,0,2703,2704,3,
        218,109,0,2704,2705,5,234,0,0,2705,2706,3,218,109,0,2706,215,1,0,
        0,0,2707,2709,7,33,0,0,2708,2707,1,0,0,0,2708,2709,1,0,0,0,2709,
        2710,1,0,0,0,2710,2713,7,18,0,0,2711,2713,5,283,0,0,2712,2708,1,
        0,0,0,2712,2711,1,0,0,0,2713,217,1,0,0,0,2714,2722,5,64,0,0,2715,
        2722,5,109,0,0,2716,2722,5,146,0,0,2717,2722,5,147,0,0,2718,2722,
        5,205,0,0,2719,2722,5,263,0,0,2720,2722,3,258,129,0,2721,2714,1,
        0,0,0,2721,2715,1,0,0,0,2721,2716,1,0,0,0,2721,2717,1,0,0,0,2721,
        2718,1,0,0,0,2721,2719,1,0,0,0,2721,2720,1,0,0,0,2722,219,1,0,0,
        0,2723,2727,5,94,0,0,2724,2725,5,13,0,0,2725,2727,3,254,127,0,2726,
        2723,1,0,0,0,2726,2724,1,0,0,0,2727,221,1,0,0,0,2728,2729,5,21,0,
        0,2729,2730,5,268,0,0,2730,2731,3,222,111,0,2731,2732,5,270,0,0,
        2732,2763,1,0,0,0,2733,2734,5,143,0,0,2734,2735,5,268,0,0,2735,2736,
        3,222,111,0,2736,2737,5,4,0,0,2737,2738,3,222,111,0,2738,2739,5,
        270,0,0,2739,2763,1,0,0,0,2740,2747,5,224,0,0,2741,2743,5,268,0,
        0,2742,2744,3,232,116,0,2743,2742,1,0,0,0,2743,2744,1,0,0,0,2744,
        2745,1,0,0,0,2745,2748,5,270,0,0,2746,2748,5,266,0,0,2747,2741,1,
        0,0,0,2747,2746,1,0,0,0,2748,2763,1,0,0,0,2749,2760,3,258,129,0,
        2750,2751,5,2,0,0,2751,2756,5,287,0,0,2752,2753,5,4,0,0,2753,2755,
        5,287,0,0,2754,2752,1,0,0,0,2755,2758,1,0,0,0,2756,2754,1,0,0,0,
        2756,2757,1,0,0,0,2757,2759,1,0,0,0,2758,2756,1,0,0,0,2759,2761,
        5,3,0,0,2760,2750,1,0,0,0,2760,2761,1,0,0,0,2761,2763,1,0,0,0,2762,
        2728,1,0,0,0,2762,2733,1,0,0,0,2762,2740,1,0,0,0,2762,2749,1,0,0,
        0,2763,223,1,0,0,0,2764,2769,3,226,113,0,2765,2766,5,4,0,0,2766,
        2768,3,226,113,0,2767,2765,1,0,0,0,2768,2771,1,0,0,0,2769,2767,1,
        0,0,0,2769,2770,1,0,0,0,2770,225,1,0,0,0,2771,2769,1,0,0,0,2772,
        2773,3,170,85,0,2773,2776,3,222,111,0,2774,2775,5,153,0,0,2775,2777,
        5,154,0,0,2776,2774,1,0,0,0,2776,2777,1,0,0,0,2777,2779,1,0,0,0,
        2778,2780,3,28,14,0,2779,2778,1,0,0,0,2779,2780,1,0,0,0,2780,2782,
        1,0,0,0,2781,2783,3,220,110,0,2782,2781,1,0,0,0,2782,2783,1,0,0,
        0,2783,227,1,0,0,0,2784,2789,3,230,115,0,2785,2786,5,4,0,0,2786,
        2788,3,230,115,0,2787,2785,1,0,0,0,2788,2791,1,0,0,0,2789,2787,1,
        0,0,0,2789,2790,1,0,0,0,2790,229,1,0,0,0,2791,2789,1,0,0,0,2792,
        2793,3,254,127,0,2793,2796,3,222,111,0,2794,2795,5,153,0,0,2795,
        2797,5,154,0,0,2796,2794,1,0,0,0,2796,2797,1,0,0,0,2797,2799,1,0,
        0,0,2798,2800,3,28,14,0,2799,2798,1,0,0,0,2799,2800,1,0,0,0,2800,
        231,1,0,0,0,2801,2806,3,234,117,0,2802,2803,5,4,0,0,2803,2805,3,
        234,117,0,2804,2802,1,0,0,0,2805,2808,1,0,0,0,2806,2804,1,0,0,0,
        2806,2807,1,0,0,0,2807,233,1,0,0,0,2808,2806,1,0,0,0,2809,2810,3,
        258,129,0,2810,2811,5,11,0,0,2811,2814,3,222,111,0,2812,2813,5,153,
        0,0,2813,2815,5,154,0,0,2814,2812,1,0,0,0,2814,2815,1,0,0,0,2815,
        2817,1,0,0,0,2816,2818,3,28,14,0,2817,2816,1,0,0,0,2817,2818,1,0,
        0,0,2818,235,1,0,0,0,2819,2820,5,259,0,0,2820,2821,3,186,93,0,2821,
        2822,5,233,0,0,2822,2823,3,186,93,0,2823,237,1,0,0,0,2824,2825,5,
        261,0,0,2825,2830,3,240,120,0,2826,2827,5,4,0,0,2827,2829,3,240,
        120,0,2828,2826,1,0,0,0,2829,2832,1,0,0,0,2830,2828,1,0,0,0,2830,
        2831,1,0,0,0,2831,239,1,0,0,0,2832,2830,1,0,0,0,2833,2834,3,254,
        127,0,2834,2835,5,22,0,0,2835,2836,3,242,121,0,2836,241,1,0,0,0,
        2837,2884,3,254,127,0,2838,2839,5,2,0,0,2839,2840,3,254,127,0,2840,
        2841,5,3,0,0,2841,2884,1,0,0,0,2842,2877,5,2,0,0,2843,2844,5,38,
        0,0,2844,2845,5,30,0,0,2845,2850,3,186,93,0,2846,2847,5,4,0,0,2847,
        2849,3,186,93,0,2848,2846,1,0,0,0,2849,2852,1,0,0,0,2850,2848,1,
        0,0,0,2850,2851,1,0,0,0,2851,2878,1,0,0,0,2852,2850,1,0,0,0,2853,
        2854,7,34,0,0,2854,2855,5,30,0,0,2855,2860,3,186,93,0,2856,2857,
        5,4,0,0,2857,2859,3,186,93,0,2858,2856,1,0,0,0,2859,2862,1,0,0,0,
        2860,2858,1,0,0,0,2860,2861,1,0,0,0,2861,2864,1,0,0,0,2862,2860,
        1,0,0,0,2863,2853,1,0,0,0,2863,2864,1,0,0,0,2864,2875,1,0,0,0,2865,
        2866,7,35,0,0,2866,2867,5,30,0,0,2867,2872,3,84,42,0,2868,2869,5,
        4,0,0,2869,2871,3,84,42,0,2870,2868,1,0,0,0,2871,2874,1,0,0,0,2872,
        2870,1,0,0,0,2872,2873,1,0,0,0,2873,2876,1,0,0,0,2874,2872,1,0,0,
        0,2875,2865,1,0,0,0,2875,2876,1,0,0,0,2876,2878,1,0,0,0,2877,2843,
        1,0,0,0,2877,2863,1,0,0,0,2878,2880,1,0,0,0,2879,2881,3,244,122,
        0,2880,2879,1,0,0,0,2880,2881,1,0,0,0,2881,2882,1,0,0,0,2882,2884,
        5,3,0,0,2883,2837,1,0,0,0,2883,2838,1,0,0,0,2883,2842,1,0,0,0,2884,
        243,1,0,0,0,2885,2886,5,183,0,0,2886,2902,3,246,123,0,2887,2888,
        5,203,0,0,2888,2902,3,246,123,0,2889,2890,5,183,0,0,2890,2891,5,
        26,0,0,2891,2892,3,246,123,0,2892,2893,5,17,0,0,2893,2894,3,246,
        123,0,2894,2902,1,0,0,0,2895,2896,5,203,0,0,2896,2897,5,26,0,0,2897,
        2898,3,246,123,0,2898,2899,5,17,0,0,2899,2900,3,246,123,0,2900,2902,
        1,0,0,0,2901,2885,1,0,0,0,2901,2887,1,0,0,0,2901,2889,1,0,0,0,2901,
        2895,1,0,0,0,2902,245,1,0,0,0,2903,2904,5,245,0,0,2904,2911,7,36,
        0,0,2905,2906,5,56,0,0,2906,2911,5,202,0,0,2907,2908,3,186,93,0,
        2908,2909,7,36,0,0,2909,2911,1,0,0,0,2910,2903,1,0,0,0,2910,2905,
        1,0,0,0,2910,2907,1,0,0,0,2911,247,1,0,0,0,2912,2917,3,252,126,0,
        2913,2914,5,4,0,0,2914,2916,3,252,126,0,2915,2913,1,0,0,0,2916,2919,
        1,0,0,0,2917,2915,1,0,0,0,2917,2918,1,0,0,0,2918,249,1,0,0,0,2919,
        2917,1,0,0,0,2920,2925,3,252,126,0,2921,2925,5,92,0,0,2922,2925,
        5,131,0,0,2923,2925,5,196,0,0,2924,2920,1,0,0,0,2924,2921,1,0,0,
        0,2924,2922,1,0,0,0,2924,2923,1,0,0,0,2925,251,1,0,0,0,2926,2931,
        3,258,129,0,2927,2928,5,5,0,0,2928,2930,3,258,129,0,2929,2927,1,
        0,0,0,2930,2933,1,0,0,0,2931,2929,1,0,0,0,2931,2932,1,0,0,0,2932,
        253,1,0,0,0,2933,2931,1,0,0,0,2934,2935,3,258,129,0,2935,2936,3,
        256,128,0,2936,255,1,0,0,0,2937,2938,5,273,0,0,2938,2940,3,258,129,
        0,2939,2937,1,0,0,0,2940,2941,1,0,0,0,2941,2939,1,0,0,0,2941,2942,
        1,0,0,0,2942,2945,1,0,0,0,2943,2945,1,0,0,0,2944,2939,1,0,0,0,2944,
        2943,1,0,0,0,2945,257,1,0,0,0,2946,2950,3,260,130,0,2947,2948,4,
        129,18,0,2948,2950,3,270,135,0,2949,2946,1,0,0,0,2949,2947,1,0,0,
        0,2950,259,1,0,0,0,2951,2958,5,292,0,0,2952,2958,3,262,131,0,2953,
        2954,4,130,19,0,2954,2958,3,268,134,0,2955,2956,4,130,20,0,2956,
        2958,3,272,136,0,2957,2951,1,0,0,0,2957,2952,1,0,0,0,2957,2953,1,
        0,0,0,2957,2955,1,0,0,0,2958,261,1,0,0,0,2959,2960,5,293,0,0,2960,
        263,1,0,0,0,2961,2963,4,132,21,0,2962,2964,5,273,0,0,2963,2962,1,
        0,0,0,2963,2964,1,0,0,0,2964,2965,1,0,0,0,2965,3001,5,288,0,0,2966,
        2968,4,132,22,0,2967,2969,5,273,0,0,2968,2967,1,0,0,0,2968,2969,
        1,0,0,0,2969,2970,1,0,0,0,2970,3001,5,289,0,0,2971,2973,4,132,23,
        0,2972,2974,5,273,0,0,2973,2972,1,0,0,0,2973,2974,1,0,0,0,2974,2975,
        1,0,0,0,2975,3001,7,37,0,0,2976,2978,5,273,0,0,2977,2976,1,0,0,0,
        2977,2978,1,0,0,0,2978,2979,1,0,0,0,2979,3001,5,287,0,0,2980,2982,
        5,273,0,0,2981,2980,1,0,0,0,2981,2982,1,0,0,0,2982,2983,1,0,0,0,
        2983,3001,5,284,0,0,2984,2986,5,273,0,0,2985,2984,1,0,0,0,2985,2986,
        1,0,0,0,2986,2987,1,0,0,0,2987,3001,5,285,0,0,2988,2990,5,273,0,
        0,2989,2988,1,0,0,0,2989,2990,1,0,0,0,2990,2991,1,0,0,0,2991,3001,
        5,286,0,0,2992,2994,5,273,0,0,2993,2992,1,0,0,0,2993,2994,1,0,0,
        0,2994,2995,1,0,0,0,2995,3001,5,290,0,0,2996,2998,5,273,0,0,2997,
        2996,1,0,0,0,2997,2998,1,0,0,0,2998,2999,1,0,0,0,2999,3001,5,291,
        0,0,3000,2961,1,0,0,0,3000,2966,1,0,0,0,3000,2971,1,0,0,0,3000,2977,
        1,0,0,0,3000,2981,1,0,0,0,3000,2985,1,0,0,0,3000,2989,1,0,0,0,3000,
        2993,1,0,0,0,3000,2997,1,0,0,0,3001,265,1,0,0,0,3002,3003,5,243,
        0,0,3003,3010,3,222,111,0,3004,3010,3,28,14,0,3005,3010,3,220,110,
        0,3006,3007,7,38,0,0,3007,3008,5,153,0,0,3008,3010,5,154,0,0,3009,
        3002,1,0,0,0,3009,3004,1,0,0,0,3009,3005,1,0,0,0,3009,3006,1,0,0,
        0,3010,267,1,0,0,0,3011,3012,7,39,0,0,3012,269,1,0,0,0,3013,3014,
        7,40,0,0,3014,271,1,0,0,0,3015,3016,7,41,0,0,3016,273,1,0,0,0,394,
        278,303,308,316,324,326,346,350,356,359,362,370,373,377,380,388,
        393,396,403,415,424,426,430,433,440,451,453,461,466,469,475,486,
        550,559,563,569,573,578,584,596,604,610,623,628,644,651,655,661,
        676,680,686,692,695,698,704,708,716,718,727,730,739,744,750,757,
        760,766,777,780,784,789,794,801,804,807,814,819,828,836,842,845,
        848,854,858,862,866,868,876,884,890,896,899,903,906,910,935,938,
        942,948,951,954,960,968,973,979,985,997,1000,1007,1014,1022,1025,
        1033,1037,1044,1160,1168,1176,1185,1195,1199,1202,1208,1214,1226,
        1238,1243,1252,1260,1267,1269,1274,1278,1283,1288,1293,1296,1301,
        1305,1310,1312,1316,1325,1333,1342,1349,1358,1363,1366,1385,1387,
        1396,1403,1406,1413,1417,1423,1431,1442,1453,1460,1466,1479,1486,
        1493,1505,1513,1519,1522,1531,1534,1543,1546,1555,1558,1567,1570,
        1573,1578,1580,1592,1599,1606,1609,1611,1623,1627,1631,1637,1641,
        1649,1653,1656,1659,1662,1666,1670,1673,1677,1682,1686,1689,1692,
        1695,1697,1709,1712,1716,1726,1730,1732,1735,1739,1745,1749,1760,
        1770,1782,1797,1802,1809,1825,1830,1843,1848,1856,1862,1866,1875,
        1890,1895,1907,1912,1920,1923,1927,1941,1954,1959,1963,1966,1971,
        1980,1983,1988,1995,1998,2006,2013,2020,2023,2028,2031,2036,2040,
        2043,2046,2052,2057,2062,2080,2082,2085,2096,2105,2112,2120,2127,
        2131,2139,2147,2153,2161,2173,2176,2182,2186,2188,2197,2209,2211,
        2218,2225,2231,2237,2239,2246,2254,2260,2267,2273,2277,2279,2286,
        2295,2308,2313,2317,2331,2333,2341,2343,2347,2355,2364,2370,2378,
        2383,2395,2400,2403,2409,2413,2418,2423,2428,2434,2455,2457,2466,
        2470,2479,2483,2501,2504,2512,2521,2544,2555,2562,2565,2574,2578,
        2590,2615,2622,2625,2640,2644,2654,2656,2669,2671,2684,2688,2695,
        2700,2708,2712,2721,2726,2743,2747,2756,2760,2762,2769,2776,2779,
        2782,2789,2796,2799,2806,2814,2817,2830,2850,2860,2863,2872,2875,
        2877,2880,2883,2901,2910,2917,2924,2931,2941,2944,2949,2957,2963,
        2968,2973,2977,2981,2985,2989,2993,2997,3000,3009
    ]

class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "')'", "','", "'.'", "'/*+'", 
                     "'*/'", "'->'", "'['", "']'", "':'", "'ADD'", "'AFTER'", 
                     "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", 
                     "'ANY'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", 
                     "'AUTHORIZATION'", "'BETWEEN'", "'BOTH'", "'BUCKET'", 
                     "'BUCKETS'", "'BY'", "'CACHE'", "'CASCADE'", "'CASE'", 
                     "'CAST'", "'CHANGE'", "'CHECK'", "'CLEAR'", "'CLUSTER'", 
                     "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", "'COLLECTION'", 
                     "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
                     "'COMPACTIONS'", "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", 
                     "'COST'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", 
                     "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_USER'", "'DATA'", "'DATABASE'", "<INVALID>", 
                     "'DAY'", "'DBPROPERTIES'", "'DEFINED'", "'DELETE'", 
                     "'DELIMITED'", "'DESC'", "'DESCRIBE'", "'DFS'", "'DIRECTORIES'", 
                     "'DIRECTORY'", "'DISTINCT'", "'DISTRIBUTE'", "'DROP'", 
                     "'ELSE'", "'END'", "'ESCAPE'", "'ESCAPED'", "'EXCEPT'", 
                     "'EXCHANGE'", "'EXISTS'", "'EXPLAIN'", "'EXPORT'", 
                     "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", 
                     "'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'", 
                     "'FIRST'", "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'", 
                     "'FORMATTED'", "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", 
                     "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", 
                     "'HOUR'", "'IF'", "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", 
                     "'INDEXES'", "'INNER'", "'INPATH'", "'INPUTFORMAT'", 
                     "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INTO'", 
                     "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", "'LATERAL'", 
                     "'LAZY'", "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", 
                     "'LINES'", "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", 
                     "'LOCK'", "'LOCKS'", "'LOGICAL'", "'MACRO'", "'MAP'", 
                     "'MATCHED'", "'MERGE'", "'MINUTE'", "'MONTH'", "'MSCK'", 
                     "'NAMESPACE'", "'NAMESPACES'", "'NATURAL'", "'NO'", 
                     "<INVALID>", "'NULL'", "'NULLS'", "'OF'", "'ON'", "'ONLY'", 
                     "'OPTION'", "'OPTIONS'", "'OR'", "'ORDER'", "'OUT'", 
                     "'OUTER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", 
                     "'OVERLAY'", "'OVERWRITE'", "'PARTITION'", "'PARTITIONED'", 
                     "'PARTITIONS'", "'PERCENT'", "'PIVOT'", "'PLACING'", 
                     "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", 
                     "'PROPERTIES'", "'PURGE'", "'QUERY'", "'RANGE'", "'RECORDREADER'", 
                     "'RECORDWRITER'", "'RECOVER'", "'REDUCE'", "'REFERENCES'", 
                     "'REFRESH'", "'RENAME'", "'REPAIR'", "'REPLACE'", "'RESET'", 
                     "'RESTRICT'", "'REVOKE'", "'RIGHT'", "<INVALID>", "'ROLE'", 
                     "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", 
                     "'SCHEMA'", "'SECOND'", "'SELECT'", "'SEMI'", "'SEPARATED'", 
                     "'SERDE'", "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", 
                     "'MINUS'", "'SETS'", "'SHOW'", "'SKEWED'", "'SOME'", 
                     "'SORT'", "'SORTED'", "'START'", "'STATISTICS'", "'STORED'", 
                     "'STRATIFY'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", 
                     "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", 
                     "<INVALID>", "'TERMINATED'", "'THEN'", "'TO'", "'TOUCH'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
                     "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", "'UNARCHIVE'", 
                     "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
                     "'UNKNOWN'", "'UNLOCK'", "'UNSET'", "'UPDATE'", "'USE'", 
                     "'USER'", "'USING'", "'VALUES'", "'VIEW'", "'VIEWS'", 
                     "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'YEAR'", 
                     "<INVALID>", "'<=>'", "'<>'", "'!='", "'<'", "<INVALID>", 
                     "'>'", "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", 
                     "'DIV'", "'~'", "'&'", "'|'", "'||'", "'^'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", "AND", 
                      "ANTI", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", "AT", 
                      "AUTHORIZATION", "BETWEEN", "BOTH", "BUCKET", "BUCKETS", 
                      "BY", "CACHE", "CASCADE", "CASE", "CAST", "CHANGE", 
                      "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", "CODEGEN", 
                      "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", "COMMENT", 
                      "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE", "CONCATENATE", 
                      "CONSTRAINT", "COST", "CREATE", "CROSS", "CUBE", "CURRENT", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_USER", "DATA", "DATABASE", "DATABASES", "DAY", 
                      "DBPROPERTIES", "DEFINED", "DELETE", "DELIMITED", 
                      "DESC", "DESCRIBE", "DFS", "DIRECTORIES", "DIRECTORY", 
                      "DISTINCT", "DISTRIBUTE", "DROP", "ELSE", "END", "ESCAPE", 
                      "ESCAPED", "EXCEPT", "EXCHANGE", "EXISTS", "EXPLAIN", 
                      "EXPORT", "EXTENDED", "EXTERNAL", "EXTRACT", "FALSE", 
                      "FETCH", "FIELDS", "FILTER", "FILEFORMAT", "FIRST", 
                      "FOLLOWING", "FOR", "FOREIGN", "FORMAT", "FORMATTED", 
                      "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GLOBAL", 
                      "GRANT", "GROUP", "GROUPING", "HAVING", "HOUR", "IF", 
                      "IGNORE", "IMPORT", "IN", "INDEX", "INDEXES", "INNER", 
                      "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT", "INTERVAL", 
                      "INTO", "IS", "ITEMS", "JOIN", "KEYS", "LAST", "LATERAL", 
                      "LAZY", "LEADING", "LEFT", "LIKE", "LIMIT", "LINES", 
                      "LIST", "LOAD", "LOCAL", "LOCATION", "LOCK", "LOCKS", 
                      "LOGICAL", "MACRO", "MAP", "MATCHED", "MERGE", "MINUTE", 
                      "MONTH", "MSCK", "NAMESPACE", "NAMESPACES", "NATURAL", 
                      "NO", "NOT", "NULL", "NULLS", "OF", "ON", "ONLY", 
                      "OPTION", "OPTIONS", "OR", "ORDER", "OUT", "OUTER", 
                      "OUTPUTFORMAT", "OVER", "OVERLAPS", "OVERLAY", "OVERWRITE", 
                      "PARTITION", "PARTITIONED", "PARTITIONS", "PERCENTLIT", 
                      "PIVOT", "PLACING", "POSITION", "PRECEDING", "PRIMARY", 
                      "PRINCIPALS", "PROPERTIES", "PURGE", "QUERY", "RANGE", 
                      "RECORDREADER", "RECORDWRITER", "RECOVER", "REDUCE", 
                      "REFERENCES", "REFRESH", "RENAME", "REPAIR", "REPLACE", 
                      "RESET", "RESTRICT", "REVOKE", "RIGHT", "RLIKE", "ROLE", 
                      "ROLES", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SCHEMA", 
                      "SECOND", "SELECT", "SEMI", "SEPARATED", "SERDE", 
                      "SERDEPROPERTIES", "SESSION_USER", "SET", "SETMINUS", 
                      "SETS", "SHOW", "SKEWED", "SOME", "SORT", "SORTED", 
                      "START", "STATISTICS", "STORED", "STRATIFY", "STRUCT", 
                      "SUBSTR", "SUBSTRING", "TABLE", "TABLES", "TABLESAMPLE", 
                      "TBLPROPERTIES", "TEMPORARY", "TERMINATED", "THEN", 
                      "TO", "TOUCH", "TRAILING", "TRANSACTION", "TRANSACTIONS", 
                      "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", "TYPE", "UNARCHIVE", 
                      "UNBOUNDED", "UNCACHE", "UNION", "UNIQUE", "UNKNOWN", 
                      "UNLOCK", "UNSET", "UPDATE", "USE", "USER", "USING", 
                      "VALUES", "VIEW", "VIEWS", "WHEN", "WHERE", "WINDOW", 
                      "WITH", "YEAR", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", 
                      "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
                      "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", 
                      "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED" ]

    RULE_singleStatement = 0
    RULE_singleExpression = 1
    RULE_singleTableIdentifier = 2
    RULE_singleMultipartIdentifier = 3
    RULE_singleFunctionIdentifier = 4
    RULE_singleDataType = 5
    RULE_singleTableSchema = 6
    RULE_statement = 7
    RULE_unsupportedHiveNativeCommands = 8
    RULE_createTableHeader = 9
    RULE_replaceTableHeader = 10
    RULE_bucketSpec = 11
    RULE_skewSpec = 12
    RULE_locationSpec = 13
    RULE_commentSpec = 14
    RULE_query = 15
    RULE_insertInto = 16
    RULE_partitionSpecLocation = 17
    RULE_partitionSpec = 18
    RULE_partitionVal = 19
    RULE_namespace = 20
    RULE_describeFuncName = 21
    RULE_describeColName = 22
    RULE_ctes = 23
    RULE_namedQuery = 24
    RULE_tableProvider = 25
    RULE_createTableClauses = 26
    RULE_tablePropertyList = 27
    RULE_tableProperty = 28
    RULE_tablePropertyKey = 29
    RULE_tablePropertyValue = 30
    RULE_constantList = 31
    RULE_nestedConstantList = 32
    RULE_createFileFormat = 33
    RULE_fileFormat = 34
    RULE_storageHandler = 35
    RULE_resource = 36
    RULE_dmlStatementNoWith = 37
    RULE_queryOrganization = 38
    RULE_multiInsertQueryBody = 39
    RULE_queryTerm = 40
    RULE_queryPrimary = 41
    RULE_sortItem = 42
    RULE_fromStatement = 43
    RULE_fromStatementBody = 44
    RULE_querySpecification = 45
    RULE_transformClause = 46
    RULE_selectClause = 47
    RULE_setClause = 48
    RULE_matchedClause = 49
    RULE_notMatchedClause = 50
    RULE_matchedAction = 51
    RULE_notMatchedAction = 52
    RULE_assignmentList = 53
    RULE_assignment = 54
    RULE_whereClause = 55
    RULE_havingClause = 56
    RULE_hint = 57
    RULE_hintStatement = 58
    RULE_fromClause = 59
    RULE_aggregationClause = 60
    RULE_groupingSet = 61
    RULE_pivotClause = 62
    RULE_pivotColumn = 63
    RULE_pivotValue = 64
    RULE_lateralView = 65
    RULE_setQuantifier = 66
    RULE_relation = 67
    RULE_joinRelation = 68
    RULE_joinType = 69
    RULE_joinCriteria = 70
    RULE_sample = 71
    RULE_sampleMethod = 72
    RULE_identifierList = 73
    RULE_identifierSeq = 74
    RULE_orderedIdentifierList = 75
    RULE_orderedIdentifier = 76
    RULE_identifierCommentList = 77
    RULE_identifierComment = 78
    RULE_relationPrimary = 79
    RULE_inlineTable = 80
    RULE_functionTable = 81
    RULE_tableAlias = 82
    RULE_rowFormat = 83
    RULE_multipartIdentifierList = 84
    RULE_multipartIdentifier = 85
    RULE_tableIdentifier = 86
    RULE_functionIdentifier = 87
    RULE_namedExpression = 88
    RULE_namedExpressionSeq = 89
    RULE_transformList = 90
    RULE_transform = 91
    RULE_transformArgument = 92
    RULE_expression = 93
    RULE_booleanExpression = 94
    RULE_predicate = 95
    RULE_valueExpression = 96
    RULE_primaryExpression = 97
    RULE_constant = 98
    RULE_comparisonOperator = 99
    RULE_arithmeticOperator = 100
    RULE_predicateOperator = 101
    RULE_booleanValue = 102
    RULE_interval = 103
    RULE_errorCapturingMultiUnitsInterval = 104
    RULE_multiUnitsInterval = 105
    RULE_errorCapturingUnitToUnitInterval = 106
    RULE_unitToUnitInterval = 107
    RULE_intervalValue = 108
    RULE_intervalUnit = 109
    RULE_colPosition = 110
    RULE_dataType = 111
    RULE_qualifiedColTypeWithPositionList = 112
    RULE_qualifiedColTypeWithPosition = 113
    RULE_colTypeList = 114
    RULE_colType = 115
    RULE_complexColTypeList = 116
    RULE_complexColType = 117
    RULE_whenClause = 118
    RULE_windowClause = 119
    RULE_namedWindow = 120
    RULE_windowSpec = 121
    RULE_windowFrame = 122
    RULE_frameBound = 123
    RULE_qualifiedNameList = 124
    RULE_functionName = 125
    RULE_qualifiedName = 126
    RULE_errorCapturingIdentifier = 127
    RULE_errorCapturingIdentifierExtra = 128
    RULE_identifier = 129
    RULE_strictIdentifier = 130
    RULE_quotedIdentifier = 131
    RULE_number = 132
    RULE_alterColumnAction = 133
    RULE_ansiNonReserved = 134
    RULE_strictNonReserved = 135
    RULE_nonReserved = 136

    ruleNames =  [ "singleStatement", "singleExpression", "singleTableIdentifier", 
                   "singleMultipartIdentifier", "singleFunctionIdentifier", 
                   "singleDataType", "singleTableSchema", "statement", "unsupportedHiveNativeCommands", 
                   "createTableHeader", "replaceTableHeader", "bucketSpec", 
                   "skewSpec", "locationSpec", "commentSpec", "query", "insertInto", 
                   "partitionSpecLocation", "partitionSpec", "partitionVal", 
                   "namespace", "describeFuncName", "describeColName", "ctes", 
                   "namedQuery", "tableProvider", "createTableClauses", 
                   "tablePropertyList", "tableProperty", "tablePropertyKey", 
                   "tablePropertyValue", "constantList", "nestedConstantList", 
                   "createFileFormat", "fileFormat", "storageHandler", "resource", 
                   "dmlStatementNoWith", "queryOrganization", "multiInsertQueryBody", 
                   "queryTerm", "queryPrimary", "sortItem", "fromStatement", 
                   "fromStatementBody", "querySpecification", "transformClause", 
                   "selectClause", "setClause", "matchedClause", "notMatchedClause", 
                   "matchedAction", "notMatchedAction", "assignmentList", 
                   "assignment", "whereClause", "havingClause", "hint", 
                   "hintStatement", "fromClause", "aggregationClause", "groupingSet", 
                   "pivotClause", "pivotColumn", "pivotValue", "lateralView", 
                   "setQuantifier", "relation", "joinRelation", "joinType", 
                   "joinCriteria", "sample", "sampleMethod", "identifierList", 
                   "identifierSeq", "orderedIdentifierList", "orderedIdentifier", 
                   "identifierCommentList", "identifierComment", "relationPrimary", 
                   "inlineTable", "functionTable", "tableAlias", "rowFormat", 
                   "multipartIdentifierList", "multipartIdentifier", "tableIdentifier", 
                   "functionIdentifier", "namedExpression", "namedExpressionSeq", 
                   "transformList", "transform", "transformArgument", "expression", 
                   "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "constant", "comparisonOperator", 
                   "arithmeticOperator", "predicateOperator", "booleanValue", 
                   "interval", "errorCapturingMultiUnitsInterval", "multiUnitsInterval", 
                   "errorCapturingUnitToUnitInterval", "unitToUnitInterval", 
                   "intervalValue", "intervalUnit", "colPosition", "dataType", 
                   "qualifiedColTypeWithPositionList", "qualifiedColTypeWithPosition", 
                   "colTypeList", "colType", "complexColTypeList", "complexColType", 
                   "whenClause", "windowClause", "namedWindow", "windowSpec", 
                   "windowFrame", "frameBound", "qualifiedNameList", "functionName", 
                   "qualifiedName", "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "number", "alterColumnAction", "ansiNonReserved", "strictNonReserved", 
                   "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    ADD=12
    AFTER=13
    ALL=14
    ALTER=15
    ANALYZE=16
    AND=17
    ANTI=18
    ANY=19
    ARCHIVE=20
    ARRAY=21
    AS=22
    ASC=23
    AT=24
    AUTHORIZATION=25
    BETWEEN=26
    BOTH=27
    BUCKET=28
    BUCKETS=29
    BY=30
    CACHE=31
    CASCADE=32
    CASE=33
    CAST=34
    CHANGE=35
    CHECK=36
    CLEAR=37
    CLUSTER=38
    CLUSTERED=39
    CODEGEN=40
    COLLATE=41
    COLLECTION=42
    COLUMN=43
    COLUMNS=44
    COMMENT=45
    COMMIT=46
    COMPACT=47
    COMPACTIONS=48
    COMPUTE=49
    CONCATENATE=50
    CONSTRAINT=51
    COST=52
    CREATE=53
    CROSS=54
    CUBE=55
    CURRENT=56
    CURRENT_DATE=57
    CURRENT_TIME=58
    CURRENT_TIMESTAMP=59
    CURRENT_USER=60
    DATA=61
    DATABASE=62
    DATABASES=63
    DAY=64
    DBPROPERTIES=65
    DEFINED=66
    DELETE=67
    DELIMITED=68
    DESC=69
    DESCRIBE=70
    DFS=71
    DIRECTORIES=72
    DIRECTORY=73
    DISTINCT=74
    DISTRIBUTE=75
    DROP=76
    ELSE=77
    END=78
    ESCAPE=79
    ESCAPED=80
    EXCEPT=81
    EXCHANGE=82
    EXISTS=83
    EXPLAIN=84
    EXPORT=85
    EXTENDED=86
    EXTERNAL=87
    EXTRACT=88
    FALSE=89
    FETCH=90
    FIELDS=91
    FILTER=92
    FILEFORMAT=93
    FIRST=94
    FOLLOWING=95
    FOR=96
    FOREIGN=97
    FORMAT=98
    FORMATTED=99
    FROM=100
    FULL=101
    FUNCTION=102
    FUNCTIONS=103
    GLOBAL=104
    GRANT=105
    GROUP=106
    GROUPING=107
    HAVING=108
    HOUR=109
    IF=110
    IGNORE=111
    IMPORT=112
    IN=113
    INDEX=114
    INDEXES=115
    INNER=116
    INPATH=117
    INPUTFORMAT=118
    INSERT=119
    INTERSECT=120
    INTERVAL=121
    INTO=122
    IS=123
    ITEMS=124
    JOIN=125
    KEYS=126
    LAST=127
    LATERAL=128
    LAZY=129
    LEADING=130
    LEFT=131
    LIKE=132
    LIMIT=133
    LINES=134
    LIST=135
    LOAD=136
    LOCAL=137
    LOCATION=138
    LOCK=139
    LOCKS=140
    LOGICAL=141
    MACRO=142
    MAP=143
    MATCHED=144
    MERGE=145
    MINUTE=146
    MONTH=147
    MSCK=148
    NAMESPACE=149
    NAMESPACES=150
    NATURAL=151
    NO=152
    NOT=153
    NULL=154
    NULLS=155
    OF=156
    ON=157
    ONLY=158
    OPTION=159
    OPTIONS=160
    OR=161
    ORDER=162
    OUT=163
    OUTER=164
    OUTPUTFORMAT=165
    OVER=166
    OVERLAPS=167
    OVERLAY=168
    OVERWRITE=169
    PARTITION=170
    PARTITIONED=171
    PARTITIONS=172
    PERCENTLIT=173
    PIVOT=174
    PLACING=175
    POSITION=176
    PRECEDING=177
    PRIMARY=178
    PRINCIPALS=179
    PROPERTIES=180
    PURGE=181
    QUERY=182
    RANGE=183
    RECORDREADER=184
    RECORDWRITER=185
    RECOVER=186
    REDUCE=187
    REFERENCES=188
    REFRESH=189
    RENAME=190
    REPAIR=191
    REPLACE=192
    RESET=193
    RESTRICT=194
    REVOKE=195
    RIGHT=196
    RLIKE=197
    ROLE=198
    ROLES=199
    ROLLBACK=200
    ROLLUP=201
    ROW=202
    ROWS=203
    SCHEMA=204
    SECOND=205
    SELECT=206
    SEMI=207
    SEPARATED=208
    SERDE=209
    SERDEPROPERTIES=210
    SESSION_USER=211
    SET=212
    SETMINUS=213
    SETS=214
    SHOW=215
    SKEWED=216
    SOME=217
    SORT=218
    SORTED=219
    START=220
    STATISTICS=221
    STORED=222
    STRATIFY=223
    STRUCT=224
    SUBSTR=225
    SUBSTRING=226
    TABLE=227
    TABLES=228
    TABLESAMPLE=229
    TBLPROPERTIES=230
    TEMPORARY=231
    TERMINATED=232
    THEN=233
    TO=234
    TOUCH=235
    TRAILING=236
    TRANSACTION=237
    TRANSACTIONS=238
    TRANSFORM=239
    TRIM=240
    TRUE=241
    TRUNCATE=242
    TYPE=243
    UNARCHIVE=244
    UNBOUNDED=245
    UNCACHE=246
    UNION=247
    UNIQUE=248
    UNKNOWN=249
    UNLOCK=250
    UNSET=251
    UPDATE=252
    USE=253
    USER=254
    USING=255
    VALUES=256
    VIEW=257
    VIEWS=258
    WHEN=259
    WHERE=260
    WINDOW=261
    WITH=262
    YEAR=263
    EQ=264
    NSEQ=265
    NEQ=266
    NEQJ=267
    LT=268
    LTE=269
    GT=270
    GTE=271
    PLUS=272
    MINUS=273
    ASTERISK=274
    SLASH=275
    PERCENT=276
    DIV=277
    TILDE=278
    AMPERSAND=279
    PIPE=280
    CONCAT_PIPE=281
    HAT=282
    STRING=283
    BIGINT_LITERAL=284
    SMALLINT_LITERAL=285
    TINYINT_LITERAL=286
    INTEGER_VALUE=287
    EXPONENT_VALUE=288
    DECIMAL_VALUE=289
    DOUBLE_LITERAL=290
    BIGDECIMAL_LITERAL=291
    IDENTIFIER=292
    BACKQUOTED_IDENTIFIER=293
    SIMPLE_COMMENT=294
    BRACKETED_COMMENT=295
    WS=296
    UNRECOGNIZED=297

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    """
    When false, INTERSECT is given the greater precedence over the other set
    operations (UNION, EXCEPT and MINUS) as per the SQL standard.
    """
    legacy_setops_precedence_enbled = False

    """
    When false, a literal with an exponent would be converted into
    double type rather than decimal type.
    """
    legacy_exponent_literal_as_decimal_enabled = False

    """
    When false, CREATE TABLE syntax without a provider will use
    the value of spark.sql.sources.default as its provider.
    """
    legacy_create_hive_table_by_default_enabled = False

    """
    When true, the behavior of keywords follows ANSI SQL standard.
    """
    SQL_standard_keyword_behavior = False

    def isValidDecimal(self):
        """
        Verify whether current token is a valid decimal token (which contains dot).
        Returns true if the character that follows the token is not a digit or letter or underscore.

        For example:
        For char stream "2.3", "2." is not a valid decimal token, because it is followed by digit '3'.
        For char stream "2.3_", "2.3" is not a valid decimal token, because it is followed by '_'.
        For char stream "2.3W", "2.3" is not a valid decimal token, because it is followed by 'W'.
        For char stream "12.0D 34.E2+0.12 "  12.0D is a valid decimal token because it is followed
        by a space. 34.E2 is a valid decimal token because it is followed by symbol '+'
        which is not a digit or letter or underscore.
        """
        nextChar = self._input.LA(1)
        if 'A' <= nextChar <= 'Z' or '0' <= nextChar <= '9' or nextChar == '_':
            return False
        else:
            return True

    def isHint(self):
        """
        This method will be called when we see '/*' and try to match it as a bracketed comment.
        If the next character is '+', it should be parsed as hint later, and we cannot match
        it as a bracketed comment.

        Returns true if the next character is '+'.
        """
        nextChar = self._input.LA(1)
        if nextChar == '+':
            return True
        else:
            return False



    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.statement()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__0:
                self.state = 275
                self.match(SqlBaseParser.T__0)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 281
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)




    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.namedExpression()
            self.state = 284
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableIdentifier" ):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableIdentifier" ):
                listener.exitSingleTableIdentifier(self)




    def singleTableIdentifier(self):

        localctx = SqlBaseParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.tableIdentifier()
            self.state = 287
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleMultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleMultipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleMultipartIdentifier" ):
                listener.enterSingleMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleMultipartIdentifier" ):
                listener.exitSingleMultipartIdentifier(self)




    def singleMultipartIdentifier(self):

        localctx = SqlBaseParser.SingleMultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_singleMultipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.multipartIdentifier()
            self.state = 290
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFunctionIdentifier" ):
                listener.enterSingleFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFunctionIdentifier" ):
                listener.exitSingleFunctionIdentifier(self)




    def singleFunctionIdentifier(self):

        localctx = SqlBaseParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.functionIdentifier()
            self.state = 293
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDataType" ):
                listener.enterSingleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDataType" ):
                listener.exitSingleDataType(self)




    def singleDataType(self):

        localctx = SqlBaseParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.dataType()
            self.state = 296
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableSchema" ):
                listener.enterSingleTableSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableSchema" ):
                listener.exitSingleTableSchema(self)




    def singleTableSchema(self):

        localctx = SqlBaseParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.colTypeList()
            self.state = 299
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetConfiguration" ):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetConfiguration" ):
                listener.exitResetConfiguration(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewQuery" ):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewQuery" ):
                listener.exitAlterViewQuery(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)


    class DropNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropNamespace" ):
                listener.enterDropNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropNamespace" ):
                listener.exitDropNamespace(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTempViewUsing" ):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTempViewUsing" ):
                listener.exitCreateTempViewUsing(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # MultipartIdentifierContext
            self.to = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(SqlBaseParser.UnsupportedHiveNativeCommandsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailNativeCommand" ):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailNativeCommand" ):
                listener.exitFailNativeCommand(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClearCache" ):
                listener.enterClearCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClearCache" ):
                listener.exitClearCache(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverPartitions" ):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverPartitions" ):
                listener.exitRecoverPartitions(self)


    class ShowCurrentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCurrentNamespace" ):
                listener.enterShowCurrentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCurrentNamespace" ):
                listener.exitShowCurrentNamespace(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTablePartition" ):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTablePartition" ):
                listener.exitRenameTablePartition(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshResource" ):
                listener.enterRefreshResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshResource" ):
                listener.exitRefreshResource(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)


    class ShowNamespacesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)
        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowNamespaces" ):
                listener.enterShowNamespaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowNamespaces" ):
                listener.exitShowNamespaces(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ns = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)


    class ReplaceTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def replaceTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.ReplaceTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTable" ):
                listener.enterReplaceTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTable" ):
                listener.exitReplaceTable(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecLocationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTablePartition" ):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTablePartition" ):
                listener.exitAddTablePartition(self)


    class SetNamespaceLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceLocation" ):
                listener.enterSetNamespaceLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceLocation" ):
                listener.exitSetNamespaceLocation(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)


    class SetNamespacePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)
        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNamespaceProperties" ):
                listener.enterSetNamespaceProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNamespaceProperties" ):
                listener.exitSetNamespaceProperties(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManageResource" ):
                listener.enterManageResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManageResource" ):
                listener.exitManageResource(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)


    class CreateHiveTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.partitionColumns = None # ColTypeListContext
            self.partitionColumnNames = None # IdentifierListContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,i)

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SkewSpecContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def colTypeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateHiveTable" ):
                listener.enterCreateHiveTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateHiveTable" ):
                listener.exitCreateHiveTable(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.className = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ResourceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ResourceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)


    class ShowTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.ns = None # MultipartIdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTable" ):
                listener.enterShowTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTable" ):
                listener.exitShowTable(self)


    class HiveReplaceColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionListContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveReplaceColumns" ):
                listener.enterHiveReplaceColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveReplaceColumns" ):
                listener.exitHiveReplaceColumns(self)


    class CommentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentNamespace" ):
                listener.enterCommentNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentNamespace" ):
                listener.exitCommentNamespace(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)


    class DmlStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlStatementNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.DmlStatementNoWithContext,0)

        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def tableProvider(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableProviderContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableLike" ):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableLike" ):
                listener.exitCreateTableLike(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncacheTable" ):
                listener.enterUncacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncacheTable" ):
                listener.exitUncacheTable(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)


    class DescribeRelationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeRelation" ):
                listener.enterDescribeRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeRelation" ):
                listener.exitDescribeRelation(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)
        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadData" ):
                listener.enterLoadData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadData" ):
                listener.exitLoadData(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitions" ):
                listener.enterShowPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitions" ):
                listener.exitShowPartitions(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFunction" ):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFunction" ):
                listener.exitDescribeFunction(self)


    class RenameTableColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.from_ = None # MultipartIdentifierContext
            self.to = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableColumn" ):
                listener.enterRenameTableColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableColumn" ):
                listener.exitRenameTableColumn(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)


    class HiveChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.colName = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,0)

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHiveChangeColumn" ):
                listener.enterHiveChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHiveChangeColumn" ):
                listener.exitHiveChangeColumn(self)


    class DescribeQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeQuery" ):
                listener.enterDescribeQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeQuery" ):
                listener.exitDescribeQuery(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableSerDe" ):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableSerDe" ):
                listener.exitSetTableSerDe(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentListContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ON)
            else:
                return self.getToken(SqlBaseParser.ON, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,i)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablePartitions" ):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablePartitions" ):
                listener.exitDropTablePartitions(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetConfiguration" ):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetConfiguration" ):
                listener.exitSetConfiguration(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)


    class DescribeNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeNamespace" ):
                listener.enterDescribeNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeNamespace" ):
                listener.exitDescribeNamespace(self)


    class AlterTableAlterColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.column = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ALTER)
            else:
                return self.getToken(SqlBaseParser.ALTER, i)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def alterColumnAction(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterColumnActionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableAlterColumn" ):
                listener.enterAlterTableAlterColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableAlterColumn" ):
                listener.exitAlterTableAlterColumn(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentTable" ):
                listener.enterCommentTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentTable" ):
                listener.exitCommentTable(self)


    class CreateNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def namespace(self):
            return self.getTypedRuleContext(SqlBaseParser.NamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.WITH)
            else:
                return self.getToken(SqlBaseParser.WITH, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,i)

        def DBPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DBPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.DBPROPERTIES, i)
        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PROPERTIES)
            else:
                return self.getToken(SqlBaseParser.PROPERTIES, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateNamespace" ):
                listener.enterCreateNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateNamespace" ):
                listener.exitCreateNamespace(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.key = None # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTblProperties" ):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTblProperties" ):
                listener.exitShowTblProperties(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetTableProperties" ):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetTableProperties" ):
                listener.exitUnsetTableProperties(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableLocation" ):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableLocation" ):
                listener.exitSetTableLocation(self)


    class DropTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # MultipartIdentifierListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableColumns" ):
                listener.enterDropTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableColumns" ):
                listener.exitDropTableColumns(self)


    class ShowViewsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowViews" ):
                listener.enterShowViews(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowViews" ):
                listener.exitShowViews(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheTable" ):
                listener.enterCacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheTable" ):
                listener.exitCacheTable(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTableColumns" ):
                listener.enterAddTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTableColumns" ):
                listener.exitAddTableColumns(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DmlStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 302
                    self.ctes()


                self.state = 305
                self.dmlStatementNoWith()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 306
                self.match(SqlBaseParser.USE)
                self.state = 308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 307
                    self.match(SqlBaseParser.NAMESPACE)


                self.state = 310
                self.multipartIdentifier()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CreateNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 311
                self.match(SqlBaseParser.CREATE)
                self.state = 312
                self.namespace()
                self.state = 316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 313
                    self.match(SqlBaseParser.IF)
                    self.state = 314
                    self.match(SqlBaseParser.NOT)
                    self.state = 315
                    self.match(SqlBaseParser.EXISTS)


                self.state = 318
                self.multipartIdentifier()
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.COMMENT or _la==SqlBaseParser.LOCATION or _la==SqlBaseParser.WITH:
                    self.state = 324
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.COMMENT]:
                        self.state = 319
                        self.commentSpec()
                        pass
                    elif token in [SqlBaseParser.LOCATION]:
                        self.state = 320
                        self.locationSpec()
                        pass
                    elif token in [SqlBaseParser.WITH]:
                        self.state = 321
                        self.match(SqlBaseParser.WITH)
                        self.state = 322
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.DBPROPERTIES or _la==SqlBaseParser.PROPERTIES):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 323
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = SqlBaseParser.SetNamespacePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 329
                self.match(SqlBaseParser.ALTER)
                self.state = 330
                self.namespace()
                self.state = 331
                self.multipartIdentifier()
                self.state = 332
                self.match(SqlBaseParser.SET)
                self.state = 333
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DBPROPERTIES or _la==SqlBaseParser.PROPERTIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 334
                self.tablePropertyList()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SetNamespaceLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 336
                self.match(SqlBaseParser.ALTER)
                self.state = 337
                self.namespace()
                self.state = 338
                self.multipartIdentifier()
                self.state = 339
                self.match(SqlBaseParser.SET)
                self.state = 340
                self.locationSpec()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.DropNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 342
                self.match(SqlBaseParser.DROP)
                self.state = 343
                self.namespace()
                self.state = 346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 344
                    self.match(SqlBaseParser.IF)
                    self.state = 345
                    self.match(SqlBaseParser.EXISTS)


                self.state = 348
                self.multipartIdentifier()
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT:
                    self.state = 349
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.ShowNamespacesContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 352
                self.match(SqlBaseParser.SHOW)
                self.state = 353
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DATABASES or _la==SqlBaseParser.NAMESPACES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 354
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 355
                    self.multipartIdentifier()


                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE or _la==SqlBaseParser.STRING:
                    self.state = 359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.LIKE:
                        self.state = 358
                        self.match(SqlBaseParser.LIKE)


                    self.state = 361
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 9:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 364
                if not not self.legacy_create_hive_table_by_default_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.legacy_create_hive_table_by_default_enabled")
                self.state = 365
                self.createTableHeader()
                self.state = 370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 366
                    self.match(SqlBaseParser.T__1)
                    self.state = 367
                    self.colTypeList()
                    self.state = 368
                    self.match(SqlBaseParser.T__2)


                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.USING:
                    self.state = 372
                    self.tableProvider()


                self.state = 375
                self.createTableClauses()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1 or _la==SqlBaseParser.AS or _la==SqlBaseParser.FROM or _la==SqlBaseParser.MAP or ((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & ((1 << (SqlBaseParser.REDUCE - 187)) | (1 << (SqlBaseParser.SELECT - 187)) | (1 << (SqlBaseParser.TABLE - 187)))) != 0) or _la==SqlBaseParser.VALUES or _la==SqlBaseParser.WITH:
                    self.state = 377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 376
                        self.match(SqlBaseParser.AS)


                    self.state = 379
                    self.query()


                pass

            elif la_ == 10:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 382
                if not self.legacy_create_hive_table_by_default_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.legacy_create_hive_table_by_default_enabled")
                self.state = 383
                self.createTableHeader()
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 384
                    self.match(SqlBaseParser.T__1)
                    self.state = 385
                    self.colTypeList()
                    self.state = 386
                    self.match(SqlBaseParser.T__2)


                self.state = 390
                self.tableProvider()
                self.state = 391
                self.createTableClauses()
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1 or _la==SqlBaseParser.AS or _la==SqlBaseParser.FROM or _la==SqlBaseParser.MAP or ((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & ((1 << (SqlBaseParser.REDUCE - 187)) | (1 << (SqlBaseParser.SELECT - 187)) | (1 << (SqlBaseParser.TABLE - 187)))) != 0) or _la==SqlBaseParser.VALUES or _la==SqlBaseParser.WITH:
                    self.state = 393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 392
                        self.match(SqlBaseParser.AS)


                    self.state = 395
                    self.query()


                pass

            elif la_ == 11:
                localctx = SqlBaseParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 398
                self.createTableHeader()
                self.state = 403
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 399
                    self.match(SqlBaseParser.T__1)
                    self.state = 400
                    localctx.columns = self.colTypeList()
                    self.state = 401
                    self.match(SqlBaseParser.T__2)


                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.CLUSTERED or _la==SqlBaseParser.COMMENT or _la==SqlBaseParser.LOCATION or _la==SqlBaseParser.PARTITIONED or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (SqlBaseParser.ROW - 202)) | (1 << (SqlBaseParser.SKEWED - 202)) | (1 << (SqlBaseParser.STORED - 202)) | (1 << (SqlBaseParser.TBLPROPERTIES - 202)))) != 0):
                    self.state = 424
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.COMMENT]:
                        self.state = 405
                        self.commentSpec()
                        pass
                    elif token in [SqlBaseParser.PARTITIONED]:
                        self.state = 415
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                        if la_ == 1:
                            self.state = 406
                            self.match(SqlBaseParser.PARTITIONED)
                            self.state = 407
                            self.match(SqlBaseParser.BY)
                            self.state = 408
                            self.match(SqlBaseParser.T__1)
                            self.state = 409
                            localctx.partitionColumns = self.colTypeList()
                            self.state = 410
                            self.match(SqlBaseParser.T__2)
                            pass

                        elif la_ == 2:
                            self.state = 412
                            self.match(SqlBaseParser.PARTITIONED)
                            self.state = 413
                            self.match(SqlBaseParser.BY)
                            self.state = 414
                            localctx.partitionColumnNames = self.identifierList()
                            pass


                        pass
                    elif token in [SqlBaseParser.CLUSTERED]:
                        self.state = 417
                        self.bucketSpec()
                        pass
                    elif token in [SqlBaseParser.SKEWED]:
                        self.state = 418
                        self.skewSpec()
                        pass
                    elif token in [SqlBaseParser.ROW]:
                        self.state = 419
                        self.rowFormat()
                        pass
                    elif token in [SqlBaseParser.STORED]:
                        self.state = 420
                        self.createFileFormat()
                        pass
                    elif token in [SqlBaseParser.LOCATION]:
                        self.state = 421
                        self.locationSpec()
                        pass
                    elif token in [SqlBaseParser.TBLPROPERTIES]:
                        self.state = 422
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 423
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1 or _la==SqlBaseParser.AS or _la==SqlBaseParser.FROM or _la==SqlBaseParser.MAP or ((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & ((1 << (SqlBaseParser.REDUCE - 187)) | (1 << (SqlBaseParser.SELECT - 187)) | (1 << (SqlBaseParser.TABLE - 187)))) != 0) or _la==SqlBaseParser.VALUES or _la==SqlBaseParser.WITH:
                    self.state = 430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 429
                        self.match(SqlBaseParser.AS)


                    self.state = 432
                    self.query()


                pass

            elif la_ == 12:
                localctx = SqlBaseParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 435
                self.match(SqlBaseParser.CREATE)
                self.state = 436
                self.match(SqlBaseParser.TABLE)
                self.state = 440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 437
                    self.match(SqlBaseParser.IF)
                    self.state = 438
                    self.match(SqlBaseParser.NOT)
                    self.state = 439
                    self.match(SqlBaseParser.EXISTS)


                self.state = 442
                localctx.target = self.tableIdentifier()
                self.state = 443
                self.match(SqlBaseParser.LIKE)
                self.state = 444
                localctx.source = self.tableIdentifier()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.LOCATION or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (SqlBaseParser.ROW - 202)) | (1 << (SqlBaseParser.STORED - 202)) | (1 << (SqlBaseParser.TBLPROPERTIES - 202)) | (1 << (SqlBaseParser.USING - 202)))) != 0):
                    self.state = 451
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.USING]:
                        self.state = 445
                        self.tableProvider()
                        pass
                    elif token in [SqlBaseParser.ROW]:
                        self.state = 446
                        self.rowFormat()
                        pass
                    elif token in [SqlBaseParser.STORED]:
                        self.state = 447
                        self.createFileFormat()
                        pass
                    elif token in [SqlBaseParser.LOCATION]:
                        self.state = 448
                        self.locationSpec()
                        pass
                    elif token in [SqlBaseParser.TBLPROPERTIES]:
                        self.state = 449
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 450
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 13:
                localctx = SqlBaseParser.ReplaceTableContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 456
                self.replaceTableHeader()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 457
                    self.match(SqlBaseParser.T__1)
                    self.state = 458
                    self.colTypeList()
                    self.state = 459
                    self.match(SqlBaseParser.T__2)


                self.state = 463
                self.tableProvider()
                self.state = 464
                self.createTableClauses()
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1 or _la==SqlBaseParser.AS or _la==SqlBaseParser.FROM or _la==SqlBaseParser.MAP or ((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & ((1 << (SqlBaseParser.REDUCE - 187)) | (1 << (SqlBaseParser.SELECT - 187)) | (1 << (SqlBaseParser.TABLE - 187)))) != 0) or _la==SqlBaseParser.VALUES or _la==SqlBaseParser.WITH:
                    self.state = 466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 465
                        self.match(SqlBaseParser.AS)


                    self.state = 468
                    self.query()


                pass

            elif la_ == 14:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 471
                self.match(SqlBaseParser.ANALYZE)
                self.state = 472
                self.match(SqlBaseParser.TABLE)
                self.state = 473
                self.multipartIdentifier()
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 474
                    self.partitionSpec()


                self.state = 477
                self.match(SqlBaseParser.COMPUTE)
                self.state = 478
                self.match(SqlBaseParser.STATISTICS)
                self.state = 486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 479
                    self.identifier()

                elif la_ == 2:
                    self.state = 480
                    self.match(SqlBaseParser.FOR)
                    self.state = 481
                    self.match(SqlBaseParser.COLUMNS)
                    self.state = 482
                    self.identifierSeq()

                elif la_ == 3:
                    self.state = 483
                    self.match(SqlBaseParser.FOR)
                    self.state = 484
                    self.match(SqlBaseParser.ALL)
                    self.state = 485
                    self.match(SqlBaseParser.COLUMNS)


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 488
                self.match(SqlBaseParser.ALTER)
                self.state = 489
                self.match(SqlBaseParser.TABLE)
                self.state = 490
                self.multipartIdentifier()
                self.state = 491
                self.match(SqlBaseParser.ADD)
                self.state = 492
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.COLUMN or _la==SqlBaseParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 493
                localctx.columns = self.qualifiedColTypeWithPositionList()
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 495
                self.match(SqlBaseParser.ALTER)
                self.state = 496
                self.match(SqlBaseParser.TABLE)
                self.state = 497
                self.multipartIdentifier()
                self.state = 498
                self.match(SqlBaseParser.ADD)
                self.state = 499
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.COLUMN or _la==SqlBaseParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 500
                self.match(SqlBaseParser.T__1)
                self.state = 501
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 502
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.RenameTableColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 504
                self.match(SqlBaseParser.ALTER)
                self.state = 505
                self.match(SqlBaseParser.TABLE)
                self.state = 506
                localctx.table = self.multipartIdentifier()
                self.state = 507
                self.match(SqlBaseParser.RENAME)
                self.state = 508
                self.match(SqlBaseParser.COLUMN)
                self.state = 509
                localctx.from_ = self.multipartIdentifier()
                self.state = 510
                self.match(SqlBaseParser.TO)
                self.state = 511
                localctx.to = self.errorCapturingIdentifier()
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 513
                self.match(SqlBaseParser.ALTER)
                self.state = 514
                self.match(SqlBaseParser.TABLE)
                self.state = 515
                self.multipartIdentifier()
                self.state = 516
                self.match(SqlBaseParser.DROP)
                self.state = 517
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.COLUMN or _la==SqlBaseParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 518
                self.match(SqlBaseParser.T__1)
                self.state = 519
                localctx.columns = self.multipartIdentifierList()
                self.state = 520
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 522
                self.match(SqlBaseParser.ALTER)
                self.state = 523
                self.match(SqlBaseParser.TABLE)
                self.state = 524
                self.multipartIdentifier()
                self.state = 525
                self.match(SqlBaseParser.DROP)
                self.state = 526
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.COLUMN or _la==SqlBaseParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 527
                localctx.columns = self.multipartIdentifierList()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 529
                self.match(SqlBaseParser.ALTER)
                self.state = 530
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 531
                localctx.from_ = self.multipartIdentifier()
                self.state = 532
                self.match(SqlBaseParser.RENAME)
                self.state = 533
                self.match(SqlBaseParser.TO)
                self.state = 534
                localctx.to = self.multipartIdentifier()
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 536
                self.match(SqlBaseParser.ALTER)
                self.state = 537
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 538
                self.multipartIdentifier()
                self.state = 539
                self.match(SqlBaseParser.SET)
                self.state = 540
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 541
                self.tablePropertyList()
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 543
                self.match(SqlBaseParser.ALTER)
                self.state = 544
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 545
                self.multipartIdentifier()
                self.state = 546
                self.match(SqlBaseParser.UNSET)
                self.state = 547
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 548
                    self.match(SqlBaseParser.IF)
                    self.state = 549
                    self.match(SqlBaseParser.EXISTS)


                self.state = 552
                self.tablePropertyList()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.AlterTableAlterColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 554
                self.match(SqlBaseParser.ALTER)
                self.state = 555
                self.match(SqlBaseParser.TABLE)
                self.state = 556
                localctx.table = self.multipartIdentifier()
                self.state = 557
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ALTER or _la==SqlBaseParser.CHANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 559
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 558
                    self.match(SqlBaseParser.COLUMN)


                self.state = 561
                localctx.column = self.multipartIdentifier()
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AFTER or _la==SqlBaseParser.COMMENT or _la==SqlBaseParser.DROP or _la==SqlBaseParser.FIRST or _la==SqlBaseParser.SET or _la==SqlBaseParser.TYPE:
                    self.state = 562
                    self.alterColumnAction()


                pass

            elif la_ == 24:
                localctx = SqlBaseParser.HiveChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 565
                self.match(SqlBaseParser.ALTER)
                self.state = 566
                self.match(SqlBaseParser.TABLE)
                self.state = 567
                localctx.table = self.multipartIdentifier()
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 568
                    self.partitionSpec()


                self.state = 571
                self.match(SqlBaseParser.CHANGE)
                self.state = 573
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 572
                    self.match(SqlBaseParser.COLUMN)


                self.state = 575
                localctx.colName = self.multipartIdentifier()
                self.state = 576
                self.colType()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AFTER or _la==SqlBaseParser.FIRST:
                    self.state = 577
                    self.colPosition()


                pass

            elif la_ == 25:
                localctx = SqlBaseParser.HiveReplaceColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 580
                self.match(SqlBaseParser.ALTER)
                self.state = 581
                self.match(SqlBaseParser.TABLE)
                self.state = 582
                localctx.table = self.multipartIdentifier()
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 583
                    self.partitionSpec()


                self.state = 586
                self.match(SqlBaseParser.REPLACE)
                self.state = 587
                self.match(SqlBaseParser.COLUMNS)
                self.state = 588
                self.match(SqlBaseParser.T__1)
                self.state = 589
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 590
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 592
                self.match(SqlBaseParser.ALTER)
                self.state = 593
                self.match(SqlBaseParser.TABLE)
                self.state = 594
                self.multipartIdentifier()
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 595
                    self.partitionSpec()


                self.state = 598
                self.match(SqlBaseParser.SET)
                self.state = 599
                self.match(SqlBaseParser.SERDE)
                self.state = 600
                self.match(SqlBaseParser.STRING)
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 601
                    self.match(SqlBaseParser.WITH)
                    self.state = 602
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 603
                    self.tablePropertyList()


                pass

            elif la_ == 27:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 606
                self.match(SqlBaseParser.ALTER)
                self.state = 607
                self.match(SqlBaseParser.TABLE)
                self.state = 608
                self.multipartIdentifier()
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 609
                    self.partitionSpec()


                self.state = 612
                self.match(SqlBaseParser.SET)
                self.state = 613
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 614
                self.tablePropertyList()
                pass

            elif la_ == 28:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 616
                self.match(SqlBaseParser.ALTER)
                self.state = 617
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 618
                self.multipartIdentifier()
                self.state = 619
                self.match(SqlBaseParser.ADD)
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 620
                    self.match(SqlBaseParser.IF)
                    self.state = 621
                    self.match(SqlBaseParser.NOT)
                    self.state = 622
                    self.match(SqlBaseParser.EXISTS)


                self.state = 626 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 625
                    self.partitionSpecLocation()
                    self.state = 628 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.PARTITION):
                        break

                pass

            elif la_ == 29:
                localctx = SqlBaseParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 630
                self.match(SqlBaseParser.ALTER)
                self.state = 631
                self.match(SqlBaseParser.TABLE)
                self.state = 632
                self.multipartIdentifier()
                self.state = 633
                localctx.from_ = self.partitionSpec()
                self.state = 634
                self.match(SqlBaseParser.RENAME)
                self.state = 635
                self.match(SqlBaseParser.TO)
                self.state = 636
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 30:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 638
                self.match(SqlBaseParser.ALTER)
                self.state = 639
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 640
                self.multipartIdentifier()
                self.state = 641
                self.match(SqlBaseParser.DROP)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 642
                    self.match(SqlBaseParser.IF)
                    self.state = 643
                    self.match(SqlBaseParser.EXISTS)


                self.state = 646
                self.partitionSpec()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 647
                    self.match(SqlBaseParser.T__3)
                    self.state = 648
                    self.partitionSpec()
                    self.state = 653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PURGE:
                    self.state = 654
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 31:
                localctx = SqlBaseParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 657
                self.match(SqlBaseParser.ALTER)
                self.state = 658
                self.match(SqlBaseParser.TABLE)
                self.state = 659
                self.multipartIdentifier()
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 660
                    self.partitionSpec()


                self.state = 663
                self.match(SqlBaseParser.SET)
                self.state = 664
                self.locationSpec()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 666
                self.match(SqlBaseParser.ALTER)
                self.state = 667
                self.match(SqlBaseParser.TABLE)
                self.state = 668
                self.multipartIdentifier()
                self.state = 669
                self.match(SqlBaseParser.RECOVER)
                self.state = 670
                self.match(SqlBaseParser.PARTITIONS)
                pass

            elif la_ == 33:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 672
                self.match(SqlBaseParser.DROP)
                self.state = 673
                self.match(SqlBaseParser.TABLE)
                self.state = 676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 674
                    self.match(SqlBaseParser.IF)
                    self.state = 675
                    self.match(SqlBaseParser.EXISTS)


                self.state = 678
                self.multipartIdentifier()
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PURGE:
                    self.state = 679
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 34:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 682
                self.match(SqlBaseParser.DROP)
                self.state = 683
                self.match(SqlBaseParser.VIEW)
                self.state = 686
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 684
                    self.match(SqlBaseParser.IF)
                    self.state = 685
                    self.match(SqlBaseParser.EXISTS)


                self.state = 688
                self.multipartIdentifier()
                pass

            elif la_ == 35:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 689
                self.match(SqlBaseParser.CREATE)
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 690
                    self.match(SqlBaseParser.OR)
                    self.state = 691
                    self.match(SqlBaseParser.REPLACE)


                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GLOBAL or _la==SqlBaseParser.TEMPORARY:
                    self.state = 695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.GLOBAL:
                        self.state = 694
                        self.match(SqlBaseParser.GLOBAL)


                    self.state = 697
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 700
                self.match(SqlBaseParser.VIEW)
                self.state = 704
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 701
                    self.match(SqlBaseParser.IF)
                    self.state = 702
                    self.match(SqlBaseParser.NOT)
                    self.state = 703
                    self.match(SqlBaseParser.EXISTS)


                self.state = 706
                self.multipartIdentifier()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 707
                    self.identifierCommentList()


                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.COMMENT or _la==SqlBaseParser.PARTITIONED or _la==SqlBaseParser.TBLPROPERTIES:
                    self.state = 716
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.COMMENT]:
                        self.state = 710
                        self.commentSpec()
                        pass
                    elif token in [SqlBaseParser.PARTITIONED]:
                        self.state = 711
                        self.match(SqlBaseParser.PARTITIONED)
                        self.state = 712
                        self.match(SqlBaseParser.ON)
                        self.state = 713
                        self.identifierList()
                        pass
                    elif token in [SqlBaseParser.TBLPROPERTIES]:
                        self.state = 714
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 715
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 721
                self.match(SqlBaseParser.AS)
                self.state = 722
                self.query()
                pass

            elif la_ == 36:
                localctx = SqlBaseParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 724
                self.match(SqlBaseParser.CREATE)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 725
                    self.match(SqlBaseParser.OR)
                    self.state = 726
                    self.match(SqlBaseParser.REPLACE)


                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GLOBAL:
                    self.state = 729
                    self.match(SqlBaseParser.GLOBAL)


                self.state = 732
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 733
                self.match(SqlBaseParser.VIEW)
                self.state = 734
                self.tableIdentifier()
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 735
                    self.match(SqlBaseParser.T__1)
                    self.state = 736
                    self.colTypeList()
                    self.state = 737
                    self.match(SqlBaseParser.T__2)


                self.state = 741
                self.tableProvider()
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OPTIONS:
                    self.state = 742
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 743
                    self.tablePropertyList()


                pass

            elif la_ == 37:
                localctx = SqlBaseParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 746
                self.match(SqlBaseParser.ALTER)
                self.state = 747
                self.match(SqlBaseParser.VIEW)
                self.state = 748
                self.multipartIdentifier()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AS:
                    self.state = 749
                    self.match(SqlBaseParser.AS)


                self.state = 752
                self.query()
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 754
                self.match(SqlBaseParser.CREATE)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 755
                    self.match(SqlBaseParser.OR)
                    self.state = 756
                    self.match(SqlBaseParser.REPLACE)


                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TEMPORARY:
                    self.state = 759
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 762
                self.match(SqlBaseParser.FUNCTION)
                self.state = 766
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 763
                    self.match(SqlBaseParser.IF)
                    self.state = 764
                    self.match(SqlBaseParser.NOT)
                    self.state = 765
                    self.match(SqlBaseParser.EXISTS)


                self.state = 768
                self.multipartIdentifier()
                self.state = 769
                self.match(SqlBaseParser.AS)
                self.state = 770
                localctx.className = self.match(SqlBaseParser.STRING)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.USING:
                    self.state = 771
                    self.match(SqlBaseParser.USING)
                    self.state = 772
                    self.resource()
                    self.state = 777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 773
                        self.match(SqlBaseParser.T__3)
                        self.state = 774
                        self.resource()
                        self.state = 779
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 39:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 782
                self.match(SqlBaseParser.DROP)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TEMPORARY:
                    self.state = 783
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 786
                self.match(SqlBaseParser.FUNCTION)
                self.state = 789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 787
                    self.match(SqlBaseParser.IF)
                    self.state = 788
                    self.match(SqlBaseParser.EXISTS)


                self.state = 791
                self.multipartIdentifier()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 792
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 794
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 793
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.CODEGEN or _la==SqlBaseParser.COST or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (SqlBaseParser.EXTENDED - 86)) | (1 << (SqlBaseParser.FORMATTED - 86)) | (1 << (SqlBaseParser.LOGICAL - 86)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 796
                self.statement()
                pass

            elif la_ == 41:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 797
                self.match(SqlBaseParser.SHOW)
                self.state = 798
                self.match(SqlBaseParser.TABLES)
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 799
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 800
                    self.multipartIdentifier()


                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE or _la==SqlBaseParser.STRING:
                    self.state = 804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.LIKE:
                        self.state = 803
                        self.match(SqlBaseParser.LIKE)


                    self.state = 806
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 42:
                localctx = SqlBaseParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 809
                self.match(SqlBaseParser.SHOW)
                self.state = 810
                self.match(SqlBaseParser.TABLE)
                self.state = 811
                self.match(SqlBaseParser.EXTENDED)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 812
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 813
                    localctx.ns = self.multipartIdentifier()


                self.state = 816
                self.match(SqlBaseParser.LIKE)
                self.state = 817
                localctx.pattern = self.match(SqlBaseParser.STRING)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 818
                    self.partitionSpec()


                pass

            elif la_ == 43:
                localctx = SqlBaseParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 821
                self.match(SqlBaseParser.SHOW)
                self.state = 822
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 823
                localctx.table = self.multipartIdentifier()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1:
                    self.state = 824
                    self.match(SqlBaseParser.T__1)
                    self.state = 825
                    localctx.key = self.tablePropertyKey()
                    self.state = 826
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 44:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 830
                self.match(SqlBaseParser.SHOW)
                self.state = 831
                self.match(SqlBaseParser.COLUMNS)
                self.state = 832
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 833
                localctx.table = self.multipartIdentifier()
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 834
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 835
                    localctx.ns = self.multipartIdentifier()


                pass

            elif la_ == 45:
                localctx = SqlBaseParser.ShowViewsContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 838
                self.match(SqlBaseParser.SHOW)
                self.state = 839
                self.match(SqlBaseParser.VIEWS)
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 840
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 841
                    self.multipartIdentifier()


                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE or _la==SqlBaseParser.STRING:
                    self.state = 845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.LIKE:
                        self.state = 844
                        self.match(SqlBaseParser.LIKE)


                    self.state = 847
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 46:
                localctx = SqlBaseParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 850
                self.match(SqlBaseParser.SHOW)
                self.state = 851
                self.match(SqlBaseParser.PARTITIONS)
                self.state = 852
                self.multipartIdentifier()
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 853
                    self.partitionSpec()


                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 856
                self.match(SqlBaseParser.SHOW)
                self.state = 858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 857
                    self.identifier()


                self.state = 860
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 868
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 862
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        self.state = 861
                        self.match(SqlBaseParser.LIKE)


                    self.state = 866
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        self.state = 864
                        self.multipartIdentifier()
                        pass

                    elif la_ == 2:
                        self.state = 865
                        localctx.pattern = self.match(SqlBaseParser.STRING)
                        pass




                pass

            elif la_ == 48:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 870
                self.match(SqlBaseParser.SHOW)
                self.state = 871
                self.match(SqlBaseParser.CREATE)
                self.state = 872
                self.match(SqlBaseParser.TABLE)
                self.state = 873
                self.multipartIdentifier()
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AS:
                    self.state = 874
                    self.match(SqlBaseParser.AS)
                    self.state = 875
                    self.match(SqlBaseParser.SERDE)


                pass

            elif la_ == 49:
                localctx = SqlBaseParser.ShowCurrentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 878
                self.match(SqlBaseParser.SHOW)
                self.state = 879
                self.match(SqlBaseParser.CURRENT)
                self.state = 880
                self.match(SqlBaseParser.NAMESPACE)
                pass

            elif la_ == 50:
                localctx = SqlBaseParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 881
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DESC or _la==SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 882
                self.match(SqlBaseParser.FUNCTION)
                self.state = 884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 883
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 886
                self.describeFuncName()
                pass

            elif la_ == 51:
                localctx = SqlBaseParser.DescribeNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 887
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DESC or _la==SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 888
                self.namespace()
                self.state = 890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 889
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 892
                self.multipartIdentifier()
                pass

            elif la_ == 52:
                localctx = SqlBaseParser.DescribeRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 894
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DESC or _la==SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 895
                    self.match(SqlBaseParser.TABLE)


                self.state = 899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 898
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.EXTENDED or _la==SqlBaseParser.FORMATTED):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 901
                self.multipartIdentifier()
                self.state = 903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 902
                    self.partitionSpec()


                self.state = 906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 905
                    self.describeColName()


                pass

            elif la_ == 53:
                localctx = SqlBaseParser.DescribeQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 908
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DESC or _la==SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.QUERY:
                    self.state = 909
                    self.match(SqlBaseParser.QUERY)


                self.state = 912
                self.query()
                pass

            elif la_ == 54:
                localctx = SqlBaseParser.CommentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 913
                self.match(SqlBaseParser.COMMENT)
                self.state = 914
                self.match(SqlBaseParser.ON)
                self.state = 915
                self.namespace()
                self.state = 916
                self.multipartIdentifier()
                self.state = 917
                self.match(SqlBaseParser.IS)
                self.state = 918
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.NULL or _la==SqlBaseParser.STRING):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 55:
                localctx = SqlBaseParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 920
                self.match(SqlBaseParser.COMMENT)
                self.state = 921
                self.match(SqlBaseParser.ON)
                self.state = 922
                self.match(SqlBaseParser.TABLE)
                self.state = 923
                self.multipartIdentifier()
                self.state = 924
                self.match(SqlBaseParser.IS)
                self.state = 925
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.NULL or _la==SqlBaseParser.STRING):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 56:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 927
                self.match(SqlBaseParser.REFRESH)
                self.state = 928
                self.match(SqlBaseParser.TABLE)
                self.state = 929
                self.multipartIdentifier()
                pass

            elif la_ == 57:
                localctx = SqlBaseParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 930
                self.match(SqlBaseParser.REFRESH)
                self.state = 938
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 931
                    self.match(SqlBaseParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 935
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 932
                            self.matchWildcard() 
                        self.state = 937
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                    pass


                pass

            elif la_ == 58:
                localctx = SqlBaseParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 940
                self.match(SqlBaseParser.CACHE)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LAZY:
                    self.state = 941
                    self.match(SqlBaseParser.LAZY)


                self.state = 944
                self.match(SqlBaseParser.TABLE)
                self.state = 945
                self.multipartIdentifier()
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OPTIONS:
                    self.state = 946
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 947
                    localctx.options = self.tablePropertyList()


                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__1 or _la==SqlBaseParser.AS or _la==SqlBaseParser.FROM or _la==SqlBaseParser.MAP or ((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & ((1 << (SqlBaseParser.REDUCE - 187)) | (1 << (SqlBaseParser.SELECT - 187)) | (1 << (SqlBaseParser.TABLE - 187)))) != 0) or _la==SqlBaseParser.VALUES or _la==SqlBaseParser.WITH:
                    self.state = 951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 950
                        self.match(SqlBaseParser.AS)


                    self.state = 953
                    self.query()


                pass

            elif la_ == 59:
                localctx = SqlBaseParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 956
                self.match(SqlBaseParser.UNCACHE)
                self.state = 957
                self.match(SqlBaseParser.TABLE)
                self.state = 960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 958
                    self.match(SqlBaseParser.IF)
                    self.state = 959
                    self.match(SqlBaseParser.EXISTS)


                self.state = 962
                self.multipartIdentifier()
                pass

            elif la_ == 60:
                localctx = SqlBaseParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 963
                self.match(SqlBaseParser.CLEAR)
                self.state = 964
                self.match(SqlBaseParser.CACHE)
                pass

            elif la_ == 61:
                localctx = SqlBaseParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 965
                self.match(SqlBaseParser.LOAD)
                self.state = 966
                self.match(SqlBaseParser.DATA)
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCAL:
                    self.state = 967
                    self.match(SqlBaseParser.LOCAL)


                self.state = 970
                self.match(SqlBaseParser.INPATH)
                self.state = 971
                localctx.path = self.match(SqlBaseParser.STRING)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OVERWRITE:
                    self.state = 972
                    self.match(SqlBaseParser.OVERWRITE)


                self.state = 975
                self.match(SqlBaseParser.INTO)
                self.state = 976
                self.match(SqlBaseParser.TABLE)
                self.state = 977
                self.multipartIdentifier()
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 978
                    self.partitionSpec()


                pass

            elif la_ == 62:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 981
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 982
                self.match(SqlBaseParser.TABLE)
                self.state = 983
                self.multipartIdentifier()
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 984
                    self.partitionSpec()


                pass

            elif la_ == 63:
                localctx = SqlBaseParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 987
                self.match(SqlBaseParser.MSCK)
                self.state = 988
                self.match(SqlBaseParser.REPAIR)
                self.state = 989
                self.match(SqlBaseParser.TABLE)
                self.state = 990
                self.multipartIdentifier()
                pass

            elif la_ == 64:
                localctx = SqlBaseParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 991
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ADD or _la==SqlBaseParser.LIST):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 992
                self.identifier()
                self.state = 1000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 993
                    self.match(SqlBaseParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 997
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 994
                            self.matchWildcard() 
                        self.state = 999
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                    pass


                pass

            elif la_ == 65:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1002
                self.match(SqlBaseParser.SET)
                self.state = 1003
                self.match(SqlBaseParser.ROLE)
                self.state = 1007
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1004
                        self.matchWildcard() 
                    self.state = 1009
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

                pass

            elif la_ == 66:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1010
                self.match(SqlBaseParser.SET)
                self.state = 1014
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1011
                        self.matchWildcard() 
                    self.state = 1016
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                pass

            elif la_ == 67:
                localctx = SqlBaseParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1017
                self.match(SqlBaseParser.RESET)
                pass

            elif la_ == 68:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 68)
                self.state = 1018
                self.unsupportedHiveNativeCommands()
                self.state = 1022
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1019
                        self.matchWildcard() 
                    self.state = 1024
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsupportedHiveNativeCommands" ):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsupportedHiveNativeCommands" ):
                listener.exitUnsupportedHiveNativeCommands(self)




    def unsupportedHiveNativeCommands(self):

        localctx = SqlBaseParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 1195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1027
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1028
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1030
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1031
                localctx.kw1 = self.match(SqlBaseParser.GRANT)
                self.state = 1033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1032
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1035
                localctx.kw1 = self.match(SqlBaseParser.REVOKE)
                self.state = 1037
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1036
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1039
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1040
                localctx.kw2 = self.match(SqlBaseParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1041
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1042
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                self.state = 1044
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1043
                    localctx.kw3 = self.match(SqlBaseParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1046
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1047
                localctx.kw2 = self.match(SqlBaseParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1048
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1049
                localctx.kw2 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1050
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1051
                localctx.kw2 = self.match(SqlBaseParser.CURRENT)
                self.state = 1052
                localctx.kw3 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1053
                localctx.kw1 = self.match(SqlBaseParser.EXPORT)
                self.state = 1054
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1055
                localctx.kw1 = self.match(SqlBaseParser.IMPORT)
                self.state = 1056
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1057
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1058
                localctx.kw2 = self.match(SqlBaseParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1059
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1060
                localctx.kw2 = self.match(SqlBaseParser.CREATE)
                self.state = 1061
                localctx.kw3 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1062
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1063
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1064
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1065
                localctx.kw2 = self.match(SqlBaseParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1066
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 1067
                localctx.kw2 = self.match(SqlBaseParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1068
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1069
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1070
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1071
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1072
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1073
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1074
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 1075
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1076
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 1077
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1078
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 1079
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1080
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 1081
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1082
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 1083
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 1084
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1085
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 1086
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 1087
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1088
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1089
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1090
                self.tableIdentifier()
                self.state = 1091
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1092
                localctx.kw4 = self.match(SqlBaseParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1094
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1095
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1096
                self.tableIdentifier()
                self.state = 1097
                localctx.kw3 = self.match(SqlBaseParser.CLUSTERED)
                self.state = 1098
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1100
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1101
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1102
                self.tableIdentifier()
                self.state = 1103
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1104
                localctx.kw4 = self.match(SqlBaseParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1106
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1107
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1108
                self.tableIdentifier()
                self.state = 1109
                localctx.kw3 = self.match(SqlBaseParser.SKEWED)
                self.state = 1110
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1112
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1113
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1114
                self.tableIdentifier()
                self.state = 1115
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1116
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1118
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1119
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1120
                self.tableIdentifier()
                self.state = 1121
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 1122
                localctx.kw4 = self.match(SqlBaseParser.STORED)
                self.state = 1123
                localctx.kw5 = self.match(SqlBaseParser.AS)
                self.state = 1124
                localctx.kw6 = self.match(SqlBaseParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1126
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1127
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1128
                self.tableIdentifier()
                self.state = 1129
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 1130
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                self.state = 1131
                localctx.kw5 = self.match(SqlBaseParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1133
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1134
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1135
                self.tableIdentifier()
                self.state = 1136
                localctx.kw3 = self.match(SqlBaseParser.EXCHANGE)
                self.state = 1137
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1139
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1140
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1141
                self.tableIdentifier()
                self.state = 1142
                localctx.kw3 = self.match(SqlBaseParser.ARCHIVE)
                self.state = 1143
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1145
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1146
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1147
                self.tableIdentifier()
                self.state = 1148
                localctx.kw3 = self.match(SqlBaseParser.UNARCHIVE)
                self.state = 1149
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1151
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1152
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1153
                self.tableIdentifier()
                self.state = 1154
                localctx.kw3 = self.match(SqlBaseParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1156
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1157
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1158
                self.tableIdentifier()
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1159
                    self.partitionSpec()


                self.state = 1162
                localctx.kw3 = self.match(SqlBaseParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1164
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1165
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1166
                self.tableIdentifier()
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1167
                    self.partitionSpec()


                self.state = 1170
                localctx.kw3 = self.match(SqlBaseParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1172
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1173
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1174
                self.tableIdentifier()
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1175
                    self.partitionSpec()


                self.state = 1178
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 1179
                localctx.kw4 = self.match(SqlBaseParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1181
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 1182
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 1183
                self.tableIdentifier()
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1184
                    self.partitionSpec()


                self.state = 1187
                localctx.kw3 = self.match(SqlBaseParser.REPLACE)
                self.state = 1188
                localctx.kw4 = self.match(SqlBaseParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1190
                localctx.kw1 = self.match(SqlBaseParser.START)
                self.state = 1191
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1192
                localctx.kw1 = self.match(SqlBaseParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1193
                localctx.kw1 = self.match(SqlBaseParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1194
                localctx.kw1 = self.match(SqlBaseParser.DFS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableHeader" ):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableHeader" ):
                listener.exitCreateTableHeader(self)




    def createTableHeader(self):

        localctx = SqlBaseParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(SqlBaseParser.CREATE)
            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.TEMPORARY:
                self.state = 1198
                self.match(SqlBaseParser.TEMPORARY)


            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.EXTERNAL:
                self.state = 1201
                self.match(SqlBaseParser.EXTERNAL)


            self.state = 1204
            self.match(SqlBaseParser.TABLE)
            self.state = 1208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 1205
                self.match(SqlBaseParser.IF)
                self.state = 1206
                self.match(SqlBaseParser.NOT)
                self.state = 1207
                self.match(SqlBaseParser.EXISTS)


            self.state = 1210
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_replaceTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceTableHeader" ):
                listener.enterReplaceTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceTableHeader" ):
                listener.exitReplaceTableHeader(self)




    def replaceTableHeader(self):

        localctx = SqlBaseParser.ReplaceTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_replaceTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.CREATE:
                self.state = 1212
                self.match(SqlBaseParser.CREATE)
                self.state = 1213
                self.match(SqlBaseParser.OR)


            self.state = 1216
            self.match(SqlBaseParser.REPLACE)
            self.state = 1217
            self.match(SqlBaseParser.TABLE)
            self.state = 1218
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_bucketSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBucketSpec" ):
                listener.enterBucketSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBucketSpec" ):
                listener.exitBucketSpec(self)




    def bucketSpec(self):

        localctx = SqlBaseParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 1221
            self.match(SqlBaseParser.BY)
            self.state = 1222
            self.identifierList()
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.SORTED:
                self.state = 1223
                self.match(SqlBaseParser.SORTED)
                self.state = 1224
                self.match(SqlBaseParser.BY)
                self.state = 1225
                self.orderedIdentifierList()


            self.state = 1228
            self.match(SqlBaseParser.INTO)
            self.state = 1229
            self.match(SqlBaseParser.INTEGER_VALUE)
            self.state = 1230
            self.match(SqlBaseParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(SqlBaseParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_skewSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewSpec" ):
                listener.enterSkewSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewSpec" ):
                listener.exitSkewSpec(self)




    def skewSpec(self):

        localctx = SqlBaseParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(SqlBaseParser.SKEWED)
            self.state = 1233
            self.match(SqlBaseParser.BY)
            self.state = 1234
            self.identifierList()
            self.state = 1235
            self.match(SqlBaseParser.ON)
            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1236
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1237
                self.nestedConstantList()
                pass


            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1240
                self.match(SqlBaseParser.STORED)
                self.state = 1241
                self.match(SqlBaseParser.AS)
                self.state = 1242
                self.match(SqlBaseParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_locationSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationSpec" ):
                listener.enterLocationSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationSpec" ):
                listener.exitLocationSpec(self)




    def locationSpec(self):

        localctx = SqlBaseParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(SqlBaseParser.LOCATION)
            self.state = 1246
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_commentSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentSpec" ):
                listener.enterCommentSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentSpec" ):
                listener.exitCommentSpec(self)




    def commentSpec(self):

        localctx = SqlBaseParser.CommentSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_commentSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.match(SqlBaseParser.COMMENT)
            self.state = 1249
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.WITH:
                self.state = 1251
                self.ctes()


            self.state = 1254
            self.queryTerm(0)
            self.state = 1255
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteHiveDir" ):
                listener.enterInsertOverwriteHiveDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteHiveDir" ):
                listener.exitInsertOverwriteHiveDir(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteDir" ):
                listener.enterInsertOverwriteDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteDir" ):
                listener.exitInsertOverwriteDir(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteTable" ):
                listener.enterInsertOverwriteTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteTable" ):
                listener.exitInsertOverwriteTable(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIntoTable" ):
                listener.enterInsertIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIntoTable" ):
                listener.exitInsertIntoTable(self)



    def insertInto(self):

        localctx = SqlBaseParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1257
                self.match(SqlBaseParser.INSERT)
                self.state = 1258
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 1259
                    self.match(SqlBaseParser.TABLE)


                self.state = 1262
                self.multipartIdentifier()
                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1263
                    self.partitionSpec()
                    self.state = 1267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.IF:
                        self.state = 1264
                        self.match(SqlBaseParser.IF)
                        self.state = 1265
                        self.match(SqlBaseParser.NOT)
                        self.state = 1266
                        self.match(SqlBaseParser.EXISTS)




                pass

            elif la_ == 2:
                localctx = SqlBaseParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1271
                self.match(SqlBaseParser.INSERT)
                self.state = 1272
                self.match(SqlBaseParser.INTO)
                self.state = 1274
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1273
                    self.match(SqlBaseParser.TABLE)


                self.state = 1276
                self.multipartIdentifier()
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1277
                    self.partitionSpec()


                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 1280
                    self.match(SqlBaseParser.IF)
                    self.state = 1281
                    self.match(SqlBaseParser.NOT)
                    self.state = 1282
                    self.match(SqlBaseParser.EXISTS)


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1285
                self.match(SqlBaseParser.INSERT)
                self.state = 1286
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCAL:
                    self.state = 1287
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1290
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1291
                localctx.path = self.match(SqlBaseParser.STRING)
                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ROW:
                    self.state = 1292
                    self.rowFormat()


                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.STORED:
                    self.state = 1295
                    self.createFileFormat()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1298
                self.match(SqlBaseParser.INSERT)
                self.state = 1299
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCAL:
                    self.state = 1300
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1303
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.STRING:
                    self.state = 1304
                    localctx.path = self.match(SqlBaseParser.STRING)


                self.state = 1307
                self.tableProvider()
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OPTIONS:
                    self.state = 1308
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1309
                    localctx.options = self.tablePropertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpecLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpecLocation" ):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpecLocation" ):
                listener.exitPartitionSpecLocation(self)




    def partitionSpecLocation(self):

        localctx = SqlBaseParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.partitionSpec()
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.LOCATION:
                self.state = 1315
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionValContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)




    def partitionSpec(self):

        localctx = SqlBaseParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self.match(SqlBaseParser.PARTITION)
            self.state = 1319
            self.match(SqlBaseParser.T__1)
            self.state = 1320
            self.partitionVal()
            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1321
                self.match(SqlBaseParser.T__3)
                self.state = 1322
                self.partitionVal()
                self.state = 1327
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1328
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)




    def partitionVal(self):

        localctx = SqlBaseParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.identifier()
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.EQ:
                self.state = 1331
                self.match(SqlBaseParser.EQ)
                self.state = 1332
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace" ):
                listener.enterNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace" ):
                listener.exitNamespace(self)




    def namespace(self):

        localctx = SqlBaseParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_namespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.DATABASE or _la==SqlBaseParser.NAMESPACE or _la==SqlBaseParser.SCHEMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeFuncName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFuncName" ):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFuncName" ):
                listener.exitDescribeFuncName(self)




    def describeFuncName(self):

        localctx = SqlBaseParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_describeFuncName)
        try:
            self.state = 1342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1337
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1338
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1339
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1340
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1341
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.nameParts = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeColName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeColName" ):
                listener.enterDescribeColName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeColName" ):
                listener.exitDescribeColName(self)




    def describeColName(self):

        localctx = SqlBaseParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__4:
                self.state = 1345
                self.match(SqlBaseParser.T__4)
                self.state = 1346
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)




    def ctes(self):

        localctx = SqlBaseParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(SqlBaseParser.WITH)
            self.state = 1353
            self.namedQuery()
            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1354
                self.match(SqlBaseParser.T__3)
                self.state = 1355
                self.namedQuery()
                self.state = 1360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext
            self.columnAliases = None # IdentifierListContext

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            localctx.name = self.errorCapturingIdentifier()
            self.state = 1363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1362
                localctx.columnAliases = self.identifierList()


            self.state = 1366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.AS:
                self.state = 1365
                self.match(SqlBaseParser.AS)


            self.state = 1368
            self.match(SqlBaseParser.T__1)
            self.state = 1369
            self.query()
            self.state = 1370
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProvider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProvider" ):
                listener.enterTableProvider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProvider" ):
                listener.exitTableProvider(self)




    def tableProvider(self):

        localctx = SqlBaseParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(SqlBaseParser.USING)
            self.state = 1373
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # TablePropertyListContext
            self.partitioning = None # TransformListContext
            self.tableProps = None # TablePropertyListContext

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,i)


        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)


        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,i)


        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.OPTIONS)
            else:
                return self.getToken(SqlBaseParser.OPTIONS, i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,i)


        def transformList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransformListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransformListContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableClauses" ):
                listener.enterCreateTableClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableClauses" ):
                listener.exitCreateTableClauses(self)




    def createTableClauses(self):

        localctx = SqlBaseParser.CreateTableClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_createTableClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.CLUSTERED or _la==SqlBaseParser.COMMENT or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (SqlBaseParser.LOCATION - 138)) | (1 << (SqlBaseParser.OPTIONS - 138)) | (1 << (SqlBaseParser.PARTITIONED - 138)))) != 0) or _la==SqlBaseParser.TBLPROPERTIES:
                self.state = 1385
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.OPTIONS]:
                    self.state = 1375
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1376
                    localctx.options = self.tablePropertyList()
                    pass
                elif token in [SqlBaseParser.PARTITIONED]:
                    self.state = 1377
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 1378
                    self.match(SqlBaseParser.BY)
                    self.state = 1379
                    localctx.partitioning = self.transformList()
                    pass
                elif token in [SqlBaseParser.CLUSTERED]:
                    self.state = 1380
                    self.bucketSpec()
                    pass
                elif token in [SqlBaseParser.LOCATION]:
                    self.state = 1381
                    self.locationSpec()
                    pass
                elif token in [SqlBaseParser.COMMENT]:
                    self.state = 1382
                    self.commentSpec()
                    pass
                elif token in [SqlBaseParser.TBLPROPERTIES]:
                    self.state = 1383
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 1384
                    localctx.tableProps = self.tablePropertyList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyList" ):
                listener.enterTablePropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyList" ):
                listener.exitTablePropertyList(self)




    def tablePropertyList(self):

        localctx = SqlBaseParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_tablePropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self.match(SqlBaseParser.T__1)
            self.state = 1391
            self.tableProperty()
            self.state = 1396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1392
                self.match(SqlBaseParser.T__3)
                self.state = 1393
                self.tableProperty()
                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1399
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # TablePropertyKeyContext
            self.value = None # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext,0)


        def tablePropertyValue(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyValueContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperty" ):
                listener.enterTableProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperty" ):
                listener.exitTableProperty(self)




    def tableProperty(self):

        localctx = SqlBaseParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_tableProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            localctx.key = self.tablePropertyKey()
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.FALSE or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & ((1 << (SqlBaseParser.TRUE - 241)) | (1 << (SqlBaseParser.EQ - 241)) | (1 << (SqlBaseParser.STRING - 241)) | (1 << (SqlBaseParser.INTEGER_VALUE - 241)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 241)))) != 0):
                self.state = 1403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.EQ:
                    self.state = 1402
                    self.match(SqlBaseParser.EQ)


                self.state = 1405
                localctx.value = self.tablePropertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyKey" ):
                listener.enterTablePropertyKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyKey" ):
                listener.exitTablePropertyKey(self)




    def tablePropertyKey(self):

        localctx = SqlBaseParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_tablePropertyKey)
        self._la = 0 # Token type
        try:
            self.state = 1417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1408
                self.identifier()
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__4:
                    self.state = 1409
                    self.match(SqlBaseParser.T__4)
                    self.state = 1410
                    self.identifier()
                    self.state = 1415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1416
                self.match(SqlBaseParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyValue" ):
                listener.enterTablePropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyValue" ):
                listener.exitTablePropertyValue(self)




    def tablePropertyValue(self):

        localctx = SqlBaseParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_tablePropertyValue)
        try:
            self.state = 1423
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1419
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass
            elif token in [SqlBaseParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1420
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass
            elif token in [SqlBaseParser.FALSE, SqlBaseParser.TRUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1421
                self.booleanValue()
                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1422
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantList" ):
                listener.enterConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantList" ):
                listener.exitConstantList(self)




    def constantList(self):

        localctx = SqlBaseParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(SqlBaseParser.T__1)
            self.state = 1426
            self.constant()
            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1427
                self.match(SqlBaseParser.T__3)
                self.state = 1428
                self.constant()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1434
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_nestedConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedConstantList" ):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedConstantList" ):
                listener.exitNestedConstantList(self)




    def nestedConstantList(self):

        localctx = SqlBaseParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.match(SqlBaseParser.T__1)
            self.state = 1437
            self.constantList()
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1438
                self.match(SqlBaseParser.T__3)
                self.state = 1439
                self.constantList()
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1445
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(SqlBaseParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFileFormat" ):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFileFormat" ):
                listener.exitCreateFileFormat(self)




    def createFileFormat(self):

        localctx = SqlBaseParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_createFileFormat)
        try:
            self.state = 1453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1447
                self.match(SqlBaseParser.STORED)
                self.state = 1448
                self.match(SqlBaseParser.AS)
                self.state = 1449
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1450
                self.match(SqlBaseParser.STORED)
                self.state = 1451
                self.match(SqlBaseParser.BY)
                self.state = 1452
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFileFormat" ):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFileFormat" ):
                listener.exitGenericFileFormat(self)



    def fileFormat(self):

        localctx = SqlBaseParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fileFormat)
        try:
            self.state = 1460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1455
                self.match(SqlBaseParser.INPUTFORMAT)
                self.state = 1456
                localctx.inFmt = self.match(SqlBaseParser.STRING)
                self.state = 1457
                self.match(SqlBaseParser.OUTPUTFORMAT)
                self.state = 1458
                localctx.outFmt = self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1459
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_storageHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageHandler" ):
                listener.enterStorageHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageHandler" ):
                listener.exitStorageHandler(self)




    def storageHandler(self):

        localctx = SqlBaseParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.match(SqlBaseParser.STRING)
            self.state = 1466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1463
                self.match(SqlBaseParser.WITH)
                self.state = 1464
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 1465
                self.tablePropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = SqlBaseParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.identifier()
            self.state = 1469
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dmlStatementNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteFromTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteFromTable" ):
                listener.enterDeleteFromTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteFromTable" ):
                listener.exitDeleteFromTable(self)


    class SingleInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)

        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleInsertQuery" ):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleInsertQuery" ):
                listener.exitSingleInsertQuery(self)


    class MultiInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultiInsertQueryBodyContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQuery" ):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQuery" ):
                listener.exitMultiInsertQuery(self)


    class UpdateTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def setClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SetClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateTable" ):
                listener.enterUpdateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateTable" ):
                listener.exitUpdateTable(self)


    class MergeIntoTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.target = None # MultipartIdentifierContext
            self.targetAlias = None # TableAliasContext
            self.source = None # MultipartIdentifierContext
            self.sourceQuery = None # QueryContext
            self.sourceAlias = None # TableAliasContext
            self.mergeCondition = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)

        def tableAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableAliasContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def matchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MatchedClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MatchedClauseContext,i)

        def notMatchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NotMatchedClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NotMatchedClauseContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeIntoTable" ):
                listener.enterMergeIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeIntoTable" ):
                listener.exitMergeIntoTable(self)



    def dmlStatementNoWith(self):

        localctx = SqlBaseParser.DmlStatementNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_dmlStatementNoWith)
        self._la = 0 # Token type
        try:
            self.state = 1522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.INSERT]:
                localctx = SqlBaseParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1471
                self.insertInto()
                self.state = 1472
                self.queryTerm(0)
                self.state = 1473
                self.queryOrganization()
                pass
            elif token in [SqlBaseParser.FROM]:
                localctx = SqlBaseParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1475
                self.fromClause()
                self.state = 1477 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1476
                    self.multiInsertQueryBody()
                    self.state = 1479 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.INSERT):
                        break

                pass
            elif token in [SqlBaseParser.DELETE]:
                localctx = SqlBaseParser.DeleteFromTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1481
                self.match(SqlBaseParser.DELETE)
                self.state = 1482
                self.match(SqlBaseParser.FROM)
                self.state = 1483
                self.multipartIdentifier()
                self.state = 1484
                self.tableAlias()
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WHERE:
                    self.state = 1485
                    self.whereClause()


                pass
            elif token in [SqlBaseParser.UPDATE]:
                localctx = SqlBaseParser.UpdateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1488
                self.match(SqlBaseParser.UPDATE)
                self.state = 1489
                self.multipartIdentifier()
                self.state = 1490
                self.tableAlias()
                self.state = 1491
                self.setClause()
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WHERE:
                    self.state = 1492
                    self.whereClause()


                pass
            elif token in [SqlBaseParser.MERGE]:
                localctx = SqlBaseParser.MergeIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1495
                self.match(SqlBaseParser.MERGE)
                self.state = 1496
                self.match(SqlBaseParser.INTO)
                self.state = 1497
                localctx.target = self.multipartIdentifier()
                self.state = 1498
                localctx.targetAlias = self.tableAlias()
                self.state = 1499
                self.match(SqlBaseParser.USING)
                self.state = 1505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1500
                    localctx.source = self.multipartIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 1501
                    self.match(SqlBaseParser.T__1)
                    self.state = 1502
                    localctx.sourceQuery = self.query()
                    self.state = 1503
                    self.match(SqlBaseParser.T__2)
                    pass


                self.state = 1507
                localctx.sourceAlias = self.tableAlias()
                self.state = 1508
                self.match(SqlBaseParser.ON)
                self.state = 1509
                localctx.mergeCondition = self.booleanExpression(0)
                self.state = 1513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1510
                        self.matchedClause() 
                    self.state = 1515
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.WHEN:
                    self.state = 1516
                    self.notMatchedClause()
                    self.state = 1521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOrganization" ):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOrganization" ):
                listener.exitQueryOrganization(self)




    def queryOrganization(self):

        localctx = SqlBaseParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_queryOrganization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1524
                self.match(SqlBaseParser.ORDER)
                self.state = 1525
                self.match(SqlBaseParser.BY)
                self.state = 1526
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 1531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1527
                        self.match(SqlBaseParser.T__3)
                        self.state = 1528
                        localctx._sortItem = self.sortItem()
                        localctx.order.append(localctx._sortItem) 
                    self.state = 1533
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)



            self.state = 1546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1536
                self.match(SqlBaseParser.CLUSTER)
                self.state = 1537
                self.match(SqlBaseParser.BY)
                self.state = 1538
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 1543
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1539
                        self.match(SqlBaseParser.T__3)
                        self.state = 1540
                        localctx._expression = self.expression()
                        localctx.clusterBy.append(localctx._expression) 
                    self.state = 1545
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)



            self.state = 1558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1548
                self.match(SqlBaseParser.DISTRIBUTE)
                self.state = 1549
                self.match(SqlBaseParser.BY)
                self.state = 1550
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 1555
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1551
                        self.match(SqlBaseParser.T__3)
                        self.state = 1552
                        localctx._expression = self.expression()
                        localctx.distributeBy.append(localctx._expression) 
                    self.state = 1557
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,172,self._ctx)



            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1560
                self.match(SqlBaseParser.SORT)
                self.state = 1561
                self.match(SqlBaseParser.BY)
                self.state = 1562
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 1567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1563
                        self.match(SqlBaseParser.T__3)
                        self.state = 1564
                        localctx._sortItem = self.sortItem()
                        localctx.sort.append(localctx._sortItem) 
                    self.state = 1569
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,174,self._ctx)



            self.state = 1573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1572
                self.windowClause()


            self.state = 1580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1575
                self.match(SqlBaseParser.LIMIT)
                self.state = 1578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1576
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 1577
                    localctx.limit = self.expression()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)


        def fromStatementBody(self):
            return self.getTypedRuleContext(SqlBaseParser.FromStatementBodyContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiInsertQueryBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQueryBody" ):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQueryBody" ):
                listener.exitMultiInsertQueryBody(self)




    def multiInsertQueryBody(self):

        localctx = SqlBaseParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_multiInsertQueryBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            self.insertInto()
            self.state = 1583
            self.fromStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1586
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1611
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1609
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1588
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1589
                        if not self.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.legacy_setops_precedence_enbled")
                        self.state = 1590
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.EXCEPT or _la==SqlBaseParser.INTERSECT or _la==SqlBaseParser.SETMINUS or _la==SqlBaseParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1592
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 1591
                            self.setQuantifier()


                        self.state = 1594
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1595
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1596
                        if not not self.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "not self.legacy_setops_precedence_enbled")
                        self.state = 1597
                        localctx.operator = self.match(SqlBaseParser.INTERSECT)
                        self.state = 1599
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 1598
                            self.setQuantifier()


                        self.state = 1601
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1602
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1603
                        if not not self.legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "not self.legacy_setops_precedence_enbled")
                        self.state = 1604
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.EXCEPT or _la==SqlBaseParser.SETMINUS or _la==SqlBaseParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1606
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 1605
                            self.setQuantifier()


                        self.state = 1608
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 1613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault1" ):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault1" ):
                listener.exitInlineTableDefault1(self)


    class FromStmtContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromStatement(self):
            return self.getTypedRuleContext(SqlBaseParser.FromStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStmt" ):
                listener.enterFromStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStmt" ):
                listener.exitFromStmt(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_queryPrimary)
        try:
            self.state = 1623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.MAP, SqlBaseParser.REDUCE, SqlBaseParser.SELECT]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1614
                self.querySpecification()
                pass
            elif token in [SqlBaseParser.FROM]:
                localctx = SqlBaseParser.FromStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1615
                self.fromStatement()
                pass
            elif token in [SqlBaseParser.TABLE]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1616
                self.match(SqlBaseParser.TABLE)
                self.state = 1617
                self.multipartIdentifier()
                pass
            elif token in [SqlBaseParser.VALUES]:
                localctx = SqlBaseParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1618
                self.inlineTable()
                pass
            elif token in [SqlBaseParser.T__1]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1619
                self.match(SqlBaseParser.T__1)
                self.state = 1620
                self.query()
                self.state = 1621
                self.match(SqlBaseParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.expression()
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1626
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1629
                self.match(SqlBaseParser.NULLS)
                self.state = 1630
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FIRST or _la==SqlBaseParser.LAST):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)


        def fromStatementBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FromStatementBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FromStatementBodyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatement" ):
                listener.enterFromStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatement" ):
                listener.exitFromStatement(self)




    def fromStatement(self):

        localctx = SqlBaseParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.fromClause()
            self.state = 1635 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1634
                    self.fromStatementBody()

                else:
                    raise NoViableAltException(self)
                self.state = 1637 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transformClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformClauseContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SelectClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromStatementBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStatementBody" ):
                listener.enterFromStatementBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStatementBody" ):
                listener.exitFromStatementBody(self)




    def fromStatementBody(self):

        localctx = SqlBaseParser.FromStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_fromStatementBody)
        try:
            self.state = 1666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1639
                self.transformClause()
                self.state = 1641
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1640
                    self.whereClause()


                self.state = 1643
                self.queryOrganization()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1645
                self.selectClause()
                self.state = 1649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1646
                        self.lateralView() 
                    self.state = 1651
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

                self.state = 1653
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1652
                    self.whereClause()


                self.state = 1656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1655
                    self.aggregationClause()


                self.state = 1659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1658
                    self.havingClause()


                self.state = 1662
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1661
                    self.windowClause()


                self.state = 1664
                self.queryOrganization()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(SqlBaseParser.SelectClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(SqlBaseParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegularQuerySpecification" ):
                listener.enterRegularQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegularQuerySpecification" ):
                listener.exitRegularQuerySpecification(self)


    class TransformQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transformClause(self):
            return self.getTypedRuleContext(SqlBaseParser.TransformClauseContext,0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformQuerySpecification" ):
                listener.enterTransformQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformQuerySpecification" ):
                listener.exitTransformQuerySpecification(self)



    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_querySpecification)
        try:
            self.state = 1697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TransformQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1668
                self.transformClause()
                self.state = 1670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1669
                    self.fromClause()


                self.state = 1673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1672
                    self.whereClause()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RegularQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1675
                self.selectClause()
                self.state = 1677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1676
                    self.fromClause()


                self.state = 1682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1679
                        self.lateralView() 
                    self.state = 1684
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

                self.state = 1686
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1685
                    self.whereClause()


                self.state = 1689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1688
                    self.aggregationClause()


                self.state = 1692
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1691
                    self.havingClause()


                self.state = 1695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1694
                    self.windowClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # Token
            self.script = None # Token
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # Token

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)


        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transformClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformClause" ):
                listener.enterTransformClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformClause" ):
                listener.exitTransformClause(self)




    def transformClause(self):

        localctx = SqlBaseParser.TransformClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_transformClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT]:
                self.state = 1699
                self.match(SqlBaseParser.SELECT)
                self.state = 1700
                localctx.kind = self.match(SqlBaseParser.TRANSFORM)
                self.state = 1701
                self.match(SqlBaseParser.T__1)
                self.state = 1702
                self.namedExpressionSeq()
                self.state = 1703
                self.match(SqlBaseParser.T__2)
                pass
            elif token in [SqlBaseParser.MAP]:
                self.state = 1705
                localctx.kind = self.match(SqlBaseParser.MAP)
                self.state = 1706
                self.namedExpressionSeq()
                pass
            elif token in [SqlBaseParser.REDUCE]:
                self.state = 1707
                localctx.kind = self.match(SqlBaseParser.REDUCE)
                self.state = 1708
                self.namedExpressionSeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ROW:
                self.state = 1711
                localctx.inRowFormat = self.rowFormat()


            self.state = 1716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.RECORDWRITER:
                self.state = 1714
                self.match(SqlBaseParser.RECORDWRITER)
                self.state = 1715
                localctx.recordWriter = self.match(SqlBaseParser.STRING)


            self.state = 1718
            self.match(SqlBaseParser.USING)
            self.state = 1719
            localctx.script = self.match(SqlBaseParser.STRING)
            self.state = 1732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1720
                self.match(SqlBaseParser.AS)
                self.state = 1730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 1721
                    self.identifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 1722
                    self.colTypeList()
                    pass

                elif la_ == 3:
                    self.state = 1723
                    self.match(SqlBaseParser.T__1)
                    self.state = 1726
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                    if la_ == 1:
                        self.state = 1724
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 1725
                        self.colTypeList()
                        pass


                    self.state = 1728
                    self.match(SqlBaseParser.T__2)
                    pass




            self.state = 1735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1734
                localctx.outRowFormat = self.rowFormat()


            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1737
                self.match(SqlBaseParser.RECORDREADER)
                self.state = 1738
                localctx.recordReader = self.match(SqlBaseParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hint = None # HintContext
            self.hints = list() # of HintContexts

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectClause" ):
                listener.enterSelectClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectClause" ):
                listener.exitSelectClause(self)




    def selectClause(self):

        localctx = SqlBaseParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selectClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741
            self.match(SqlBaseParser.SELECT)
            self.state = 1745
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1742
                    localctx._hint = self.hint()
                    localctx.hints.append(localctx._hint) 
                self.state = 1747
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

            self.state = 1749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1748
                self.setQuantifier()


            self.state = 1751
            self.namedExpressionSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_setClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetClause" ):
                listener.enterSetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetClause" ):
                listener.exitSetClause(self)




    def setClause(self):

        localctx = SqlBaseParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_setClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            self.match(SqlBaseParser.SET)
            self.state = 1754
            self.assignmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def matchedAction(self):
            return self.getTypedRuleContext(SqlBaseParser.MatchedActionContext,0)


        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedClause" ):
                listener.enterMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedClause" ):
                listener.exitMatchedClause(self)




    def matchedClause(self):

        localctx = SqlBaseParser.MatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_matchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.match(SqlBaseParser.WHEN)
            self.state = 1757
            self.match(SqlBaseParser.MATCHED)
            self.state = 1760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.AND:
                self.state = 1758
                self.match(SqlBaseParser.AND)
                self.state = 1759
                localctx.matchedCond = self.booleanExpression(0)


            self.state = 1762
            self.match(SqlBaseParser.THEN)
            self.state = 1763
            self.matchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def notMatchedAction(self):
            return self.getTypedRuleContext(SqlBaseParser.NotMatchedActionContext,0)


        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedClause" ):
                listener.enterNotMatchedClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedClause" ):
                listener.exitNotMatchedClause(self)




    def notMatchedClause(self):

        localctx = SqlBaseParser.NotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_notMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self.match(SqlBaseParser.WHEN)
            self.state = 1766
            self.match(SqlBaseParser.NOT)
            self.state = 1767
            self.match(SqlBaseParser.MATCHED)
            self.state = 1770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.AND:
                self.state = 1768
                self.match(SqlBaseParser.AND)
                self.state = 1769
                localctx.notMatchedCond = self.booleanExpression(0)


            self.state = 1772
            self.match(SqlBaseParser.THEN)
            self.state = 1773
            self.notMatchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(SqlBaseParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchedAction" ):
                listener.enterMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchedAction" ):
                listener.exitMatchedAction(self)




    def matchedAction(self):

        localctx = SqlBaseParser.MatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_matchedAction)
        try:
            self.state = 1782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1775
                self.match(SqlBaseParser.DELETE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1776
                self.match(SqlBaseParser.UPDATE)
                self.state = 1777
                self.match(SqlBaseParser.SET)
                self.state = 1778
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1779
                self.match(SqlBaseParser.UPDATE)
                self.state = 1780
                self.match(SqlBaseParser.SET)
                self.state = 1781
                self.assignmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # MultipartIdentifierListContext

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_notMatchedAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotMatchedAction" ):
                listener.enterNotMatchedAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotMatchedAction" ):
                listener.exitNotMatchedAction(self)




    def notMatchedAction(self):

        localctx = SqlBaseParser.NotMatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_notMatchedAction)
        self._la = 0 # Token type
        try:
            self.state = 1802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1784
                self.match(SqlBaseParser.INSERT)
                self.state = 1785
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1786
                self.match(SqlBaseParser.INSERT)
                self.state = 1787
                self.match(SqlBaseParser.T__1)
                self.state = 1788
                localctx.columns = self.multipartIdentifierList()
                self.state = 1789
                self.match(SqlBaseParser.T__2)
                self.state = 1790
                self.match(SqlBaseParser.VALUES)
                self.state = 1791
                self.match(SqlBaseParser.T__1)
                self.state = 1792
                self.expression()
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1793
                    self.match(SqlBaseParser.T__3)
                    self.state = 1794
                    self.expression()
                    self.state = 1799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1800
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AssignmentContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)




    def assignmentList(self):

        localctx = SqlBaseParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.assignment()
            self.state = 1809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1805
                self.match(SqlBaseParser.T__3)
                self.state = 1806
                self.assignment()
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MultipartIdentifierContext
            self.value = None # ExpressionContext

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = SqlBaseParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            localctx.key = self.multipartIdentifier()
            self.state = 1813
            self.match(SqlBaseParser.EQ)
            self.state = 1814
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = SqlBaseParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816
            self.match(SqlBaseParser.WHERE)
            self.state = 1817
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = SqlBaseParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.match(SqlBaseParser.HAVING)
            self.state = 1820
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintStatementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHint" ):
                listener.enterHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHint" ):
                listener.exitHint(self)




    def hint(self):

        localctx = SqlBaseParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1822
            self.match(SqlBaseParser.T__5)
            self.state = 1823
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 1830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1825
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                    if la_ == 1:
                        self.state = 1824
                        self.match(SqlBaseParser.T__3)


                    self.state = 1827
                    localctx._hintStatement = self.hintStatement()
                    localctx.hintStatements.append(localctx._hintStatement) 
                self.state = 1832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

            self.state = 1833
            self.match(SqlBaseParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_hintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintStatement" ):
                listener.enterHintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintStatement" ):
                listener.exitHintStatement(self)




    def hintStatement(self):

        localctx = SqlBaseParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 1848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1835
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1836
                localctx.hintName = self.identifier()
                self.state = 1837
                self.match(SqlBaseParser.T__1)
                self.state = 1838
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1839
                    self.match(SqlBaseParser.T__3)
                    self.state = 1840
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 1845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1846
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = SqlBaseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            self.match(SqlBaseParser.FROM)
            self.state = 1851
            self.relation()
            self.state = 1856
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1852
                    self.match(SqlBaseParser.T__3)
                    self.state = 1853
                    self.relation() 
                self.state = 1858
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

            self.state = 1862
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1859
                    self.lateralView() 
                self.state = 1864
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

            self.state = 1866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1865
                self.pivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aggregationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregationClause" ):
                listener.enterAggregationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregationClause" ):
                listener.exitAggregationClause(self)




    def aggregationClause(self):

        localctx = SqlBaseParser.AggregationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_aggregationClause)
        self._la = 0 # Token type
        try:
            self.state = 1912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1868
                self.match(SqlBaseParser.GROUP)
                self.state = 1869
                self.match(SqlBaseParser.BY)
                self.state = 1870
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 1875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1871
                        self.match(SqlBaseParser.T__3)
                        self.state = 1872
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 1877
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

                self.state = 1895
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1878
                    self.match(SqlBaseParser.WITH)
                    self.state = 1879
                    localctx.kind = self.match(SqlBaseParser.ROLLUP)

                elif la_ == 2:
                    self.state = 1880
                    self.match(SqlBaseParser.WITH)
                    self.state = 1881
                    localctx.kind = self.match(SqlBaseParser.CUBE)

                elif la_ == 3:
                    self.state = 1882
                    localctx.kind = self.match(SqlBaseParser.GROUPING)
                    self.state = 1883
                    self.match(SqlBaseParser.SETS)
                    self.state = 1884
                    self.match(SqlBaseParser.T__1)
                    self.state = 1885
                    self.groupingSet()
                    self.state = 1890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1886
                        self.match(SqlBaseParser.T__3)
                        self.state = 1887
                        self.groupingSet()
                        self.state = 1892
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1893
                    self.match(SqlBaseParser.T__2)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1897
                self.match(SqlBaseParser.GROUP)
                self.state = 1898
                self.match(SqlBaseParser.BY)
                self.state = 1899
                localctx.kind = self.match(SqlBaseParser.GROUPING)
                self.state = 1900
                self.match(SqlBaseParser.SETS)
                self.state = 1901
                self.match(SqlBaseParser.T__1)
                self.state = 1902
                self.groupingSet()
                self.state = 1907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1903
                    self.match(SqlBaseParser.T__3)
                    self.state = 1904
                    self.groupingSet()
                    self.state = 1909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1910
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 1927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1914
                self.match(SqlBaseParser.T__1)
                self.state = 1923
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1915
                    self.expression()
                    self.state = 1920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 1916
                        self.match(SqlBaseParser.T__3)
                        self.state = 1917
                        self.expression()
                        self.state = 1922
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1925
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1926
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PivotValueContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotClause" ):
                listener.enterPivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotClause" ):
                listener.exitPivotClause(self)




    def pivotClause(self):

        localctx = SqlBaseParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self.match(SqlBaseParser.PIVOT)
            self.state = 1930
            self.match(SqlBaseParser.T__1)
            self.state = 1931
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 1932
            self.match(SqlBaseParser.FOR)
            self.state = 1933
            self.pivotColumn()
            self.state = 1934
            self.match(SqlBaseParser.IN)
            self.state = 1935
            self.match(SqlBaseParser.T__1)
            self.state = 1936
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 1941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1937
                self.match(SqlBaseParser.T__3)
                self.state = 1938
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1944
            self.match(SqlBaseParser.T__2)
            self.state = 1945
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.identifiers = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotColumn" ):
                listener.enterPivotColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotColumn" ):
                listener.exitPivotColumn(self)




    def pivotColumn(self):

        localctx = SqlBaseParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 1959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1947
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1948
                self.match(SqlBaseParser.T__1)
                self.state = 1949
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1950
                    self.match(SqlBaseParser.T__3)
                    self.state = 1951
                    localctx._identifier = self.identifier()
                    localctx.identifiers.append(localctx._identifier)
                    self.state = 1956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1957
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotValue" ):
                listener.enterPivotValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotValue" ):
                listener.exitPivotValue(self)




    def pivotValue(self):

        localctx = SqlBaseParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_pivotValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1961
            self.expression()
            self.state = 1966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.state = 1963
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1962
                    self.match(SqlBaseParser.AS)


                self.state = 1965
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)




    def lateralView(self):

        localctx = SqlBaseParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            self.match(SqlBaseParser.LATERAL)
            self.state = 1969
            self.match(SqlBaseParser.VIEW)
            self.state = 1971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 1970
                self.match(SqlBaseParser.OUTER)


            self.state = 1973
            self.qualifiedName()
            self.state = 1974
            self.match(SqlBaseParser.T__1)
            self.state = 1983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 1975
                self.expression()
                self.state = 1980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1976
                    self.match(SqlBaseParser.T__3)
                    self.state = 1977
                    self.expression()
                    self.state = 1982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1985
            self.match(SqlBaseParser.T__2)
            self.state = 1986
            localctx.tblName = self.identifier()
            self.state = 1998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 1988
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 1987
                    self.match(SqlBaseParser.AS)


                self.state = 1990
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 1995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1991
                        self.match(SqlBaseParser.T__3)
                        self.state = 1992
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 1997
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,244,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)




    def relation(self):

        localctx = SqlBaseParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.relationPrimary()
            self.state = 2006
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2003
                    self.joinRelation() 
                self.state = 2008
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)




    def joinRelation(self):

        localctx = SqlBaseParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_joinRelation)
        try:
            self.state = 2020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ANTI, SqlBaseParser.CROSS, SqlBaseParser.FULL, SqlBaseParser.INNER, SqlBaseParser.JOIN, SqlBaseParser.LEFT, SqlBaseParser.RIGHT, SqlBaseParser.SEMI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2009
                self.joinType()
                self.state = 2010
                self.match(SqlBaseParser.JOIN)
                self.state = 2011
                localctx.right = self.relationPrimary()
                self.state = 2013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 2012
                    self.joinCriteria()


                pass
            elif token in [SqlBaseParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2015
                self.match(SqlBaseParser.NATURAL)
                self.state = 2016
                self.joinType()
                self.state = 2017
                self.match(SqlBaseParser.JOIN)
                self.state = 2018
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 2046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INNER:
                    self.state = 2022
                    self.match(SqlBaseParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2025
                self.match(SqlBaseParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2026
                self.match(SqlBaseParser.LEFT)
                self.state = 2028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 2027
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LEFT:
                    self.state = 2030
                    self.match(SqlBaseParser.LEFT)


                self.state = 2033
                self.match(SqlBaseParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2034
                self.match(SqlBaseParser.RIGHT)
                self.state = 2036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 2035
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2038
                self.match(SqlBaseParser.FULL)
                self.state = 2040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 2039
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LEFT:
                    self.state = 2042
                    self.match(SqlBaseParser.LEFT)


                self.state = 2045
                self.match(SqlBaseParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_joinCriteria)
        try:
            self.state = 2052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2048
                self.match(SqlBaseParser.ON)
                self.state = 2049
                self.booleanExpression(0)
                pass
            elif token in [SqlBaseParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2050
                self.match(SqlBaseParser.USING)
                self.state = 2051
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def sampleMethod(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleMethodContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)




    def sample(self):

        localctx = SqlBaseParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_sample)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2054
            self.match(SqlBaseParser.TABLESAMPLE)
            self.state = 2055
            self.match(SqlBaseParser.T__1)
            self.state = 2057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.state = 2056
                self.sampleMethod()


            self.state = 2059
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByRows" ):
                listener.enterSampleByRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByRows" ):
                listener.exitSampleByRows(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByPercentile" ):
                listener.enterSampleByPercentile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByPercentile" ):
                listener.exitSampleByPercentile(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)
        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)
        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBucket" ):
                listener.enterSampleByBucket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBucket" ):
                listener.exitSampleByBucket(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBytes" ):
                listener.enterSampleByBytes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBytes" ):
                listener.exitSampleByBytes(self)



    def sampleMethod(self):

        localctx = SqlBaseParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 2085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2061
                    localctx.negativeSign = self.match(SqlBaseParser.MINUS)


                self.state = 2064
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.INTEGER_VALUE or _la==SqlBaseParser.DECIMAL_VALUE):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2065
                self.match(SqlBaseParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2066
                self.expression()
                self.state = 2067
                self.match(SqlBaseParser.ROWS)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2069
                localctx.sampleType = self.match(SqlBaseParser.BUCKET)
                self.state = 2070
                localctx.numerator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2071
                self.match(SqlBaseParser.OUT)
                self.state = 2072
                self.match(SqlBaseParser.OF)
                self.state = 2073
                localctx.denominator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ON:
                    self.state = 2074
                    self.match(SqlBaseParser.ON)
                    self.state = 2080
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                    if la_ == 1:
                        self.state = 2075
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 2076
                        self.qualifiedName()
                        self.state = 2077
                        self.match(SqlBaseParser.T__1)
                        self.state = 2078
                        self.match(SqlBaseParser.T__2)
                        pass




                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2084
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = SqlBaseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self.match(SqlBaseParser.T__1)
            self.state = 2088
            self.identifierSeq()
            self.state = 2089
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.ident = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierSeq" ):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierSeq" ):
                listener.exitIdentifierSeq(self)




    def identifierSeq(self):

        localctx = SqlBaseParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2091
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.ident.append(localctx._errorCapturingIdentifier)
            self.state = 2096
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2092
                    self.match(SqlBaseParser.T__3)
                    self.state = 2093
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.ident.append(localctx._errorCapturingIdentifier) 
                self.state = 2098
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifierList" ):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifierList" ):
                listener.exitOrderedIdentifierList(self)




    def orderedIdentifierList(self):

        localctx = SqlBaseParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.match(SqlBaseParser.T__1)
            self.state = 2100
            self.orderedIdentifier()
            self.state = 2105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2101
                self.match(SqlBaseParser.T__3)
                self.state = 2102
                self.orderedIdentifier()
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2108
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # ErrorCapturingIdentifierContext
            self.ordering = None # Token

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifier" ):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifier" ):
                listener.exitOrderedIdentifier(self)




    def orderedIdentifier(self):

        localctx = SqlBaseParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2110
            localctx.ident = self.errorCapturingIdentifier()
            self.state = 2112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC:
                self.state = 2111
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierCommentList" ):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierCommentList" ):
                listener.exitIdentifierCommentList(self)




    def identifierCommentList(self):

        localctx = SqlBaseParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self.match(SqlBaseParser.T__1)
            self.state = 2115
            self.identifierComment()
            self.state = 2120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2116
                self.match(SqlBaseParser.T__3)
                self.state = 2117
                self.identifierComment()
                self.state = 2122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2123
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierComment" ):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierComment" ):
                listener.exitIdentifierComment(self)




    def identifierComment(self):

        localctx = SqlBaseParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2125
            self.identifier()
            self.state = 2127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.COMMENT:
                self.state = 2126
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValuedFunction" ):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValuedFunction" ):
                listener.exitTableValuedFunction(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault2" ):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault2" ):
                listener.exitInlineTableDefault2(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuery" ):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuery" ):
                listener.exitAliasedQuery(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_relationPrimary)
        try:
            self.state = 2153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2129
                self.multipartIdentifier()
                self.state = 2131
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
                if la_ == 1:
                    self.state = 2130
                    self.sample()


                self.state = 2133
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2135
                self.match(SqlBaseParser.T__1)
                self.state = 2136
                self.query()
                self.state = 2137
                self.match(SqlBaseParser.T__2)
                self.state = 2139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 2138
                    self.sample()


                self.state = 2141
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2143
                self.match(SqlBaseParser.T__1)
                self.state = 2144
                self.relation()
                self.state = 2145
                self.match(SqlBaseParser.T__2)
                self.state = 2147
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                if la_ == 1:
                    self.state = 2146
                    self.sample()


                self.state = 2149
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2151
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2152
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_inlineTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)




    def inlineTable(self):

        localctx = SqlBaseParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            self.match(SqlBaseParser.VALUES)
            self.state = 2156
            self.expression()
            self.state = 2161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2157
                    self.match(SqlBaseParser.T__3)
                    self.state = 2158
                    self.expression() 
                self.state = 2163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

            self.state = 2164
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # ErrorCapturingIdentifierContext

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTable" ):
                listener.enterFunctionTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTable" ):
                listener.exitFunctionTable(self)




    def functionTable(self):

        localctx = SqlBaseParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2166
            localctx.funcName = self.errorCapturingIdentifier()
            self.state = 2167
            self.match(SqlBaseParser.T__1)
            self.state = 2176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 2168
                self.expression()
                self.state = 2173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2169
                    self.match(SqlBaseParser.T__3)
                    self.state = 2170
                    self.expression()
                    self.state = 2175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2178
            self.match(SqlBaseParser.T__2)
            self.state = 2179
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)




    def tableAlias(self):

        localctx = SqlBaseParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 2182
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2181
                    self.match(SqlBaseParser.AS)


                self.state = 2184
                self.strictIdentifier()
                self.state = 2186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 2185
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.name = None # Token
            self.props = None # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # Token
            self.escapedBy = None # Token
            self.collectionItemsTerminatedBy = None # Token
            self.keysTerminatedBy = None # Token
            self.linesSeparatedBy = None # Token
            self.nullDefinedAs = None # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TERMINATED)
            else:
                return self.getToken(SqlBaseParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)
        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)
        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)



    def rowFormat(self):

        localctx = SqlBaseParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_rowFormat)
        try:
            self.state = 2239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2190
                self.match(SqlBaseParser.ROW)
                self.state = 2191
                self.match(SqlBaseParser.FORMAT)
                self.state = 2192
                self.match(SqlBaseParser.SERDE)
                self.state = 2193
                localctx.name = self.match(SqlBaseParser.STRING)
                self.state = 2197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                if la_ == 1:
                    self.state = 2194
                    self.match(SqlBaseParser.WITH)
                    self.state = 2195
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 2196
                    localctx.props = self.tablePropertyList()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2199
                self.match(SqlBaseParser.ROW)
                self.state = 2200
                self.match(SqlBaseParser.FORMAT)
                self.state = 2201
                self.match(SqlBaseParser.DELIMITED)
                self.state = 2211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                if la_ == 1:
                    self.state = 2202
                    self.match(SqlBaseParser.FIELDS)
                    self.state = 2203
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2204
                    self.match(SqlBaseParser.BY)
                    self.state = 2205
                    localctx.fieldsTerminatedBy = self.match(SqlBaseParser.STRING)
                    self.state = 2209
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                    if la_ == 1:
                        self.state = 2206
                        self.match(SqlBaseParser.ESCAPED)
                        self.state = 2207
                        self.match(SqlBaseParser.BY)
                        self.state = 2208
                        localctx.escapedBy = self.match(SqlBaseParser.STRING)




                self.state = 2218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 2213
                    self.match(SqlBaseParser.COLLECTION)
                    self.state = 2214
                    self.match(SqlBaseParser.ITEMS)
                    self.state = 2215
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2216
                    self.match(SqlBaseParser.BY)
                    self.state = 2217
                    localctx.collectionItemsTerminatedBy = self.match(SqlBaseParser.STRING)


                self.state = 2225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                if la_ == 1:
                    self.state = 2220
                    self.match(SqlBaseParser.MAP)
                    self.state = 2221
                    self.match(SqlBaseParser.KEYS)
                    self.state = 2222
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2223
                    self.match(SqlBaseParser.BY)
                    self.state = 2224
                    localctx.keysTerminatedBy = self.match(SqlBaseParser.STRING)


                self.state = 2231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 2227
                    self.match(SqlBaseParser.LINES)
                    self.state = 2228
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 2229
                    self.match(SqlBaseParser.BY)
                    self.state = 2230
                    localctx.linesSeparatedBy = self.match(SqlBaseParser.STRING)


                self.state = 2237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2233
                    self.match(SqlBaseParser.NULL)
                    self.state = 2234
                    self.match(SqlBaseParser.DEFINED)
                    self.state = 2235
                    self.match(SqlBaseParser.AS)
                    self.state = 2236
                    localctx.nullDefinedAs = self.match(SqlBaseParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifierList" ):
                listener.enterMultipartIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifierList" ):
                listener.exitMultipartIdentifierList(self)




    def multipartIdentifierList(self):

        localctx = SqlBaseParser.MultipartIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_multipartIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2241
            self.multipartIdentifier()
            self.state = 2246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2242
                self.match(SqlBaseParser.T__3)
                self.state = 2243
                self.multipartIdentifier()
                self.state = 2248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.parts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multipartIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipartIdentifier" ):
                listener.enterMultipartIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipartIdentifier" ):
                listener.exitMultipartIdentifier(self)




    def multipartIdentifier(self):

        localctx = SqlBaseParser.MultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_multipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2249
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.parts.append(localctx._errorCapturingIdentifier)
            self.state = 2254
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,286,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2250
                    self.match(SqlBaseParser.T__4)
                    self.state = 2251
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.parts.append(localctx._errorCapturingIdentifier) 
                self.state = 2256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.table = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)




    def tableIdentifier(self):

        localctx = SqlBaseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 2257
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2258
                self.match(SqlBaseParser.T__4)


            self.state = 2262
            localctx.table = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.function = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)




    def functionIdentifier(self):

        localctx = SqlBaseParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.state = 2264
                localctx.db = self.errorCapturingIdentifier()
                self.state = 2265
                self.match(SqlBaseParser.T__4)


            self.state = 2269
            localctx.function = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)




    def namedExpression(self):

        localctx = SqlBaseParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2271
            self.expression()
            self.state = 2279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 2272
                    self.match(SqlBaseParser.AS)


                self.state = 2277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 2275
                    localctx.name = self.errorCapturingIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 2276
                    self.identifierList()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionSeq" ):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionSeq" ):
                listener.exitNamedExpressionSeq(self)




    def namedExpressionSeq(self):

        localctx = SqlBaseParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2281
            self.namedExpression()
            self.state = 2286
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2282
                    self.match(SqlBaseParser.T__3)
                    self.state = 2283
                    self.namedExpression() 
                self.state = 2288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._transform = None # TransformContext
            self.transforms = list() # of TransformContexts

        def transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransformContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransformContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transformList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformList" ):
                listener.enterTransformList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformList" ):
                listener.exitTransformList(self)




    def transformList(self):

        localctx = SqlBaseParser.TransformListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_transformList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2289
            self.match(SqlBaseParser.T__1)
            self.state = 2290
            localctx._transform = self.transform()
            localctx.transforms.append(localctx._transform)
            self.state = 2295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2291
                self.match(SqlBaseParser.T__3)
                self.state = 2292
                localctx._transform = self.transform()
                localctx.transforms.append(localctx._transform)
                self.state = 2297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2298
            self.match(SqlBaseParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transform

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentityTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransformContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentityTransform" ):
                listener.enterIdentityTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentityTransform" ):
                listener.exitIdentityTransform(self)


    class ApplyTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TransformContext
            super().__init__(parser)
            self.transformName = None # IdentifierContext
            self._transformArgument = None # TransformArgumentContext
            self.argument = list() # of TransformArgumentContexts
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def transformArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransformArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransformArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApplyTransform" ):
                listener.enterApplyTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApplyTransform" ):
                listener.exitApplyTransform(self)



    def transform(self):

        localctx = SqlBaseParser.TransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_transform)
        self._la = 0 # Token type
        try:
            self.state = 2313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.IdentityTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2300
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ApplyTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2301
                localctx.transformName = self.identifier()
                self.state = 2302
                self.match(SqlBaseParser.T__1)
                self.state = 2303
                localctx._transformArgument = self.transformArgument()
                localctx.argument.append(localctx._transformArgument)
                self.state = 2308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2304
                    self.match(SqlBaseParser.T__3)
                    self.state = 2305
                    localctx._transformArgument = self.transformArgument()
                    localctx.argument.append(localctx._transformArgument)
                    self.state = 2310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2311
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_transformArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformArgument" ):
                listener.enterTransformArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformArgument" ):
                listener.exitTransformArgument(self)




    def transformArgument(self):

        localctx = SqlBaseParser.TransformArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_transformArgument)
        try:
            self.state = 2317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2315
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2316
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2322
                self.match(SqlBaseParser.NOT)
                self.state = 2323
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2324
                self.match(SqlBaseParser.EXISTS)
                self.state = 2325
                self.match(SqlBaseParser.T__1)
                self.state = 2326
                self.query()
                self.state = 2327
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2329
                self.valueExpression(0)
                self.state = 2331
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2330
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2343
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2341
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 2335
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2336
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 2337
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 2338
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2339
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 2340
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 2345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.quantifier = None # Token
            self.escapeChar = None # Token
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 2346
                    self.match(SqlBaseParser.NOT)


                self.state = 2349
                localctx.kind = self.match(SqlBaseParser.BETWEEN)
                self.state = 2350
                localctx.lower = self.valueExpression(0)
                self.state = 2351
                self.match(SqlBaseParser.AND)
                self.state = 2352
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 2354
                    self.match(SqlBaseParser.NOT)


                self.state = 2357
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 2358
                self.match(SqlBaseParser.T__1)
                self.state = 2359
                self.expression()
                self.state = 2364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 2360
                    self.match(SqlBaseParser.T__3)
                    self.state = 2361
                    self.expression()
                    self.state = 2366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2367
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 2369
                    self.match(SqlBaseParser.NOT)


                self.state = 2372
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 2373
                self.match(SqlBaseParser.T__1)
                self.state = 2374
                self.query()
                self.state = 2375
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 2377
                    self.match(SqlBaseParser.NOT)


                self.state = 2380
                localctx.kind = self.match(SqlBaseParser.RLIKE)
                self.state = 2381
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 2382
                    self.match(SqlBaseParser.NOT)


                self.state = 2385
                localctx.kind = self.match(SqlBaseParser.LIKE)
                self.state = 2386
                localctx.quantifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.ANY or _la==SqlBaseParser.SOME):
                    localctx.quantifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                if la_ == 1:
                    self.state = 2387
                    self.match(SqlBaseParser.T__1)
                    self.state = 2388
                    self.match(SqlBaseParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 2389
                    self.match(SqlBaseParser.T__1)
                    self.state = 2390
                    self.expression()
                    self.state = 2395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 2391
                        self.match(SqlBaseParser.T__3)
                        self.state = 2392
                        self.expression()
                        self.state = 2397
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2398
                    self.match(SqlBaseParser.T__2)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 2402
                    self.match(SqlBaseParser.NOT)


                self.state = 2405
                localctx.kind = self.match(SqlBaseParser.LIKE)
                self.state = 2406
                localctx.pattern = self.valueExpression(0)
                self.state = 2409
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                if la_ == 1:
                    self.state = 2407
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 2408
                    localctx.escapeChar = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2411
                self.match(SqlBaseParser.IS)
                self.state = 2413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 2412
                    self.match(SqlBaseParser.NOT)


                self.state = 2415
                localctx.kind = self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2416
                self.match(SqlBaseParser.IS)
                self.state = 2418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 2417
                    self.match(SqlBaseParser.NOT)


                self.state = 2420
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FALSE or _la==SqlBaseParser.TRUE or _la==SqlBaseParser.UNKNOWN):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2421
                self.match(SqlBaseParser.IS)
                self.state = 2423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 2422
                    self.match(SqlBaseParser.NOT)


                self.state = 2425
                localctx.kind = self.match(SqlBaseParser.DISTINCT)
                self.state = 2426
                self.match(SqlBaseParser.FROM)
                self.state = 2427
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)
        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 192
        self.enterRecursionRule(localctx, 192, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2431
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2432
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & ((1 << (SqlBaseParser.PLUS - 272)) | (1 << (SqlBaseParser.MINUS - 272)) | (1 << (SqlBaseParser.TILDE - 272)))) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2433
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2457
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2455
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2436
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2437
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (SqlBaseParser.ASTERISK - 274)) | (1 << (SqlBaseParser.SLASH - 274)) | (1 << (SqlBaseParser.PERCENT - 274)) | (1 << (SqlBaseParser.DIV - 274)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2438
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2439
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2440
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & ((1 << (SqlBaseParser.PLUS - 272)) | (1 << (SqlBaseParser.MINUS - 272)) | (1 << (SqlBaseParser.CONCAT_PIPE - 272)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2441
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2442
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2443
                        localctx.operator = self.match(SqlBaseParser.AMPERSAND)
                        self.state = 2444
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2445
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2446
                        localctx.operator = self.match(SqlBaseParser.HAT)
                        self.state = 2447
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2448
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2449
                        localctx.operator = self.match(SqlBaseParser.PIPE)
                        self.state = 2450
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = SqlBaseParser.ComparisonContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2451
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2452
                        self.comparisonOperator()
                        self.state = 2453
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 2459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast" ):
                listener.enterLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast" ):
                listener.exitLast(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)


    class OverlayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.initial_value = None # ValueExpressionContext
            self.replace = None # ValueExpressionContext
            self.position = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)
        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlay" ):
                listener.enterOverlay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlay" ):
                listener.exitOverlay(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.superstr = None # ValueExpressionContext
            self.pos = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)


    class CurrentDatetimeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentDatetime" ):
                listener.enterCurrentDatetime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentDatetime" ):
                listener.exitCurrentDatetime(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefault" ):
                listener.enterConstantDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefault" ):
                listener.exitConstantDefault(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimOption = None # Token
            self.trimStr = None # ValueExpressionContext
            self.srcStr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def functionName(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionNameContext,0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)
        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.superstr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst" ):
                listener.enterFirst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst" ):
                listener.exitFirst(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 194
        self.enterRecursionRule(localctx, 194, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.CurrentDatetimeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2461
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.CURRENT_DATE or _la==SqlBaseParser.CURRENT_TIMESTAMP):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2462
                self.match(SqlBaseParser.CASE)
                self.state = 2464 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2463
                    self.whenClause()
                    self.state = 2466 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 2470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 2468
                    self.match(SqlBaseParser.ELSE)
                    self.state = 2469
                    localctx.elseExpression = self.expression()


                self.state = 2472
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2474
                self.match(SqlBaseParser.CASE)
                self.state = 2475
                localctx.value = self.expression()
                self.state = 2477 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2476
                    self.whenClause()
                    self.state = 2479 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 2483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 2481
                    self.match(SqlBaseParser.ELSE)
                    self.state = 2482
                    localctx.elseExpression = self.expression()


                self.state = 2485
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2487
                self.match(SqlBaseParser.CAST)
                self.state = 2488
                self.match(SqlBaseParser.T__1)
                self.state = 2489
                self.expression()
                self.state = 2490
                self.match(SqlBaseParser.AS)
                self.state = 2491
                self.dataType()
                self.state = 2492
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2494
                self.match(SqlBaseParser.STRUCT)
                self.state = 2495
                self.match(SqlBaseParser.T__1)
                self.state = 2504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                if la_ == 1:
                    self.state = 2496
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 2501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 2497
                        self.match(SqlBaseParser.T__3)
                        self.state = 2498
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 2503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2506
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2507
                self.match(SqlBaseParser.FIRST)
                self.state = 2508
                self.match(SqlBaseParser.T__1)
                self.state = 2509
                self.expression()
                self.state = 2512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IGNORE:
                    self.state = 2510
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 2511
                    self.match(SqlBaseParser.NULLS)


                self.state = 2514
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2516
                self.match(SqlBaseParser.LAST)
                self.state = 2517
                self.match(SqlBaseParser.T__1)
                self.state = 2518
                self.expression()
                self.state = 2521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IGNORE:
                    self.state = 2519
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 2520
                    self.match(SqlBaseParser.NULLS)


                self.state = 2523
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2525
                self.match(SqlBaseParser.POSITION)
                self.state = 2526
                self.match(SqlBaseParser.T__1)
                self.state = 2527
                localctx.substr = self.valueExpression(0)
                self.state = 2528
                self.match(SqlBaseParser.IN)
                self.state = 2529
                localctx.superstr = self.valueExpression(0)
                self.state = 2530
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2532
                self.constant()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2533
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2534
                self.qualifiedName()
                self.state = 2535
                self.match(SqlBaseParser.T__4)
                self.state = 2536
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2538
                self.match(SqlBaseParser.T__1)
                self.state = 2539
                self.namedExpression()
                self.state = 2542 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2540
                    self.match(SqlBaseParser.T__3)
                    self.state = 2541
                    self.namedExpression()
                    self.state = 2544 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.T__3):
                        break

                self.state = 2546
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2548
                self.match(SqlBaseParser.T__1)
                self.state = 2549
                self.query()
                self.state = 2550
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2552
                self.functionName()
                self.state = 2553
                self.match(SqlBaseParser.T__1)
                self.state = 2565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 2555
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                    if la_ == 1:
                        self.state = 2554
                        self.setQuantifier()


                    self.state = 2557
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 2562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 2558
                        self.match(SqlBaseParser.T__3)
                        self.state = 2559
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 2564
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2567
                self.match(SqlBaseParser.T__2)
                self.state = 2574
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 2568
                    self.match(SqlBaseParser.FILTER)
                    self.state = 2569
                    self.match(SqlBaseParser.T__1)
                    self.state = 2570
                    self.match(SqlBaseParser.WHERE)
                    self.state = 2571
                    localctx.where = self.booleanExpression(0)
                    self.state = 2572
                    self.match(SqlBaseParser.T__2)


                self.state = 2578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 2576
                    self.match(SqlBaseParser.OVER)
                    self.state = 2577
                    self.windowSpec()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2580
                self.identifier()
                self.state = 2581
                self.match(SqlBaseParser.T__7)
                self.state = 2582
                self.expression()
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2584
                self.match(SqlBaseParser.T__1)
                self.state = 2585
                self.identifier()
                self.state = 2588 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2586
                    self.match(SqlBaseParser.T__3)
                    self.state = 2587
                    self.identifier()
                    self.state = 2590 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.T__3):
                        break

                self.state = 2592
                self.match(SqlBaseParser.T__2)
                self.state = 2593
                self.match(SqlBaseParser.T__7)
                self.state = 2594
                self.expression()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2596
                self.identifier()
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2597
                self.match(SqlBaseParser.T__1)
                self.state = 2598
                self.expression()
                self.state = 2599
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2601
                self.match(SqlBaseParser.EXTRACT)
                self.state = 2602
                self.match(SqlBaseParser.T__1)
                self.state = 2603
                localctx.field = self.identifier()
                self.state = 2604
                self.match(SqlBaseParser.FROM)
                self.state = 2605
                localctx.source = self.valueExpression(0)
                self.state = 2606
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2608
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.SUBSTR or _la==SqlBaseParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2609
                self.match(SqlBaseParser.T__1)
                self.state = 2610
                localctx.superstr = self.valueExpression(0)
                self.state = 2611
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.T__3 or _la==SqlBaseParser.FROM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2612
                localctx.pos = self.valueExpression(0)
                self.state = 2615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__3 or _la==SqlBaseParser.FOR:
                    self.state = 2613
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.T__3 or _la==SqlBaseParser.FOR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2614
                    localctx.length = self.valueExpression(0)


                self.state = 2617
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 21:
                localctx = SqlBaseParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2619
                self.match(SqlBaseParser.TRIM)
                self.state = 2620
                self.match(SqlBaseParser.T__1)
                self.state = 2622
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                if la_ == 1:
                    self.state = 2621
                    localctx.trimOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.BOTH or _la==SqlBaseParser.LEADING or _la==SqlBaseParser.TRAILING):
                        localctx.trimOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 2624
                    localctx.trimStr = self.valueExpression(0)


                self.state = 2627
                self.match(SqlBaseParser.FROM)
                self.state = 2628
                localctx.srcStr = self.valueExpression(0)
                self.state = 2629
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.OverlayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2631
                self.match(SqlBaseParser.OVERLAY)
                self.state = 2632
                self.match(SqlBaseParser.T__1)
                self.state = 2633
                localctx.initial_value = self.valueExpression(0)
                self.state = 2634
                self.match(SqlBaseParser.PLACING)
                self.state = 2635
                localctx.replace = self.valueExpression(0)
                self.state = 2636
                self.match(SqlBaseParser.FROM)
                self.state = 2637
                localctx.position = self.valueExpression(0)
                self.state = 2640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FOR:
                    self.state = 2638
                    self.match(SqlBaseParser.FOR)
                    self.state = 2639
                    localctx.length = self.valueExpression(0)


                self.state = 2642
                self.match(SqlBaseParser.T__2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2656
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,339,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2654
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2646
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 2647
                        self.match(SqlBaseParser.T__8)
                        self.state = 2648
                        localctx.index = self.valueExpression(0)
                        self.state = 2649
                        self.match(SqlBaseParser.T__9)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2651
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2652
                        self.match(SqlBaseParser.T__4)
                        self.state = 2653
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 2658
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,339,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)



    def constant(self):

        localctx = SqlBaseParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_constant)
        try:
            self.state = 2671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2659
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2660
                self.interval()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2661
                self.identifier()
                self.state = 2662
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2664
                self.number()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2665
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2667 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2666
                        self.match(SqlBaseParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2669 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,340,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(SqlBaseParser.NEQJ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(SqlBaseParser.NSEQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2673
            _la = self._input.LA(1)
            if not(((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (SqlBaseParser.EQ - 264)) | (1 << (SqlBaseParser.NSEQ - 264)) | (1 << (SqlBaseParser.NEQ - 264)) | (1 << (SqlBaseParser.NEQJ - 264)) | (1 << (SqlBaseParser.LT - 264)) | (1 << (SqlBaseParser.LTE - 264)) | (1 << (SqlBaseParser.GT - 264)) | (1 << (SqlBaseParser.GTE - 264)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_arithmeticOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOperator" ):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOperator" ):
                listener.exitArithmeticOperator(self)




    def arithmeticOperator(self):

        localctx = SqlBaseParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2675
            _la = self._input.LA(1)
            if not(((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & ((1 << (SqlBaseParser.PLUS - 272)) | (1 << (SqlBaseParser.MINUS - 272)) | (1 << (SqlBaseParser.ASTERISK - 272)) | (1 << (SqlBaseParser.SLASH - 272)) | (1 << (SqlBaseParser.PERCENT - 272)) | (1 << (SqlBaseParser.DIV - 272)) | (1 << (SqlBaseParser.TILDE - 272)) | (1 << (SqlBaseParser.AMPERSAND - 272)) | (1 << (SqlBaseParser.PIPE - 272)) | (1 << (SqlBaseParser.CONCAT_PIPE - 272)) | (1 << (SqlBaseParser.HAT - 272)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateOperator" ):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateOperator" ):
                listener.exitPredicateOperator(self)




    def predicateOperator(self):

        localctx = SqlBaseParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2677
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.AND or ((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & ((1 << (SqlBaseParser.IN - 113)) | (1 << (SqlBaseParser.NOT - 113)) | (1 << (SqlBaseParser.OR - 113)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2679
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.FALSE or _la==SqlBaseParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def errorCapturingMultiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingMultiUnitsIntervalContext,0)


        def errorCapturingUnitToUnitInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingUnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2681
            self.match(SqlBaseParser.INTERVAL)
            self.state = 2684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 2682
                self.errorCapturingMultiUnitsInterval()

            elif la_ == 2:
                self.state = 2683
                self.errorCapturingUnitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.MultiUnitsIntervalContext,0)


        def unitToUnitInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.UnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingMultiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingMultiUnitsInterval" ):
                listener.enterErrorCapturingMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingMultiUnitsInterval" ):
                listener.exitErrorCapturingMultiUnitsInterval(self)




    def errorCapturingMultiUnitsInterval(self):

        localctx = SqlBaseParser.ErrorCapturingMultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_errorCapturingMultiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2686
            self.multiUnitsInterval()
            self.state = 2688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2687
                self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,i)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiUnitsInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiUnitsInterval" ):
                listener.enterMultiUnitsInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiUnitsInterval" ):
                listener.exitMultiUnitsInterval(self)




    def multiUnitsInterval(self):

        localctx = SqlBaseParser.MultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_multiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2693 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2690
                    self.intervalValue()
                    self.state = 2691
                    self.intervalUnit()

                else:
                    raise NoViableAltException(self)
                self.state = 2695 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,344,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # UnitToUnitIntervalContext
            self.error1 = None # MultiUnitsIntervalContext
            self.error2 = None # UnitToUnitIntervalContext

        def unitToUnitInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.UnitToUnitIntervalContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.UnitToUnitIntervalContext,i)


        def multiUnitsInterval(self):
            return self.getTypedRuleContext(SqlBaseParser.MultiUnitsIntervalContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingUnitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingUnitToUnitInterval" ):
                listener.enterErrorCapturingUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingUnitToUnitInterval" ):
                listener.exitErrorCapturingUnitToUnitInterval(self)




    def errorCapturingUnitToUnitInterval(self):

        localctx = SqlBaseParser.ErrorCapturingUnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_errorCapturingUnitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2697
            localctx.body = self.unitToUnitInterval()
            self.state = 2700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.state = 2698
                localctx.error1 = self.multiUnitsInterval()

            elif la_ == 2:
                self.state = 2699
                localctx.error2 = self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.from_ = None # IntervalUnitContext
            self.to = None # IntervalUnitContext

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,0)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unitToUnitInterval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitToUnitInterval" ):
                listener.enterUnitToUnitInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitToUnitInterval" ):
                listener.exitUnitToUnitInterval(self)




    def unitToUnitInterval(self):

        localctx = SqlBaseParser.UnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_unitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2702
            localctx.value = self.intervalValue()
            self.state = 2703
            localctx.from_ = self.intervalUnit()
            self.state = 2704
            self.match(SqlBaseParser.TO)
            self.state = 2705
            localctx.to = self.intervalUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)




    def intervalValue(self):

        localctx = SqlBaseParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 2712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.PLUS, SqlBaseParser.MINUS, SqlBaseParser.INTEGER_VALUE, SqlBaseParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS:
                    self.state = 2707
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2710
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.INTEGER_VALUE or _la==SqlBaseParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2711
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalUnit" ):
                listener.enterIntervalUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalUnit" ):
                listener.exitIntervalUnit(self)




    def intervalUnit(self):

        localctx = SqlBaseParser.IntervalUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_intervalUnit)
        try:
            self.state = 2721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2714
                self.match(SqlBaseParser.DAY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2715
                self.match(SqlBaseParser.HOUR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2716
                self.match(SqlBaseParser.MINUTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2717
                self.match(SqlBaseParser.MONTH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2718
                self.match(SqlBaseParser.SECOND)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2719
                self.match(SqlBaseParser.YEAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2720
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.position = None # Token
            self.afterCol = None # ErrorCapturingIdentifierContext

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColPosition" ):
                listener.enterColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColPosition" ):
                listener.exitColPosition(self)




    def colPosition(self):

        localctx = SqlBaseParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_colPosition)
        try:
            self.state = 2726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.FIRST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2723
                localctx.position = self.match(SqlBaseParser.FIRST)
                pass
            elif token in [SqlBaseParser.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2724
                localctx.position = self.match(SqlBaseParser.AFTER)
                self.state = 2725
                localctx.afterCol = self.errorCapturingIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.complexDefinition = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDataType" ):
                listener.enterComplexDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDataType" ):
                listener.exitComplexDataType(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveDataType" ):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveDataType" ):
                listener.exitPrimitiveDataType(self)



    def dataType(self):

        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 2762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2728
                localctx.complexDefinition = self.match(SqlBaseParser.ARRAY)
                self.state = 2729
                self.match(SqlBaseParser.LT)
                self.state = 2730
                self.dataType()
                self.state = 2731
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2733
                localctx.complexDefinition = self.match(SqlBaseParser.MAP)
                self.state = 2734
                self.match(SqlBaseParser.LT)
                self.state = 2735
                self.dataType()
                self.state = 2736
                self.match(SqlBaseParser.T__3)
                self.state = 2737
                self.dataType()
                self.state = 2738
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2740
                localctx.complexDefinition = self.match(SqlBaseParser.STRUCT)
                self.state = 2747
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.LT]:
                    self.state = 2741
                    self.match(SqlBaseParser.LT)
                    self.state = 2743
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                    if la_ == 1:
                        self.state = 2742
                        self.complexColTypeList()


                    self.state = 2745
                    self.match(SqlBaseParser.GT)
                    pass
                elif token in [SqlBaseParser.NEQ]:
                    self.state = 2746
                    self.match(SqlBaseParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2749
                self.identifier()
                self.state = 2760
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                if la_ == 1:
                    self.state = 2750
                    self.match(SqlBaseParser.T__1)
                    self.state = 2751
                    self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 2752
                        self.match(SqlBaseParser.T__3)
                        self.state = 2753
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 2758
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2759
                    self.match(SqlBaseParser.T__2)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedColTypeWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedColTypeWithPositionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedColTypeWithPositionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedColTypeWithPositionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPositionList" ):
                listener.enterQualifiedColTypeWithPositionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPositionList" ):
                listener.exitQualifiedColTypeWithPositionList(self)




    def qualifiedColTypeWithPositionList(self):

        localctx = SqlBaseParser.QualifiedColTypeWithPositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_qualifiedColTypeWithPositionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2764
            self.qualifiedColTypeWithPosition()
            self.state = 2769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2765
                self.match(SqlBaseParser.T__3)
                self.state = 2766
                self.qualifiedColTypeWithPosition()
                self.state = 2771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # MultipartIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.MultipartIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedColTypeWithPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedColTypeWithPosition" ):
                listener.enterQualifiedColTypeWithPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedColTypeWithPosition" ):
                listener.exitQualifiedColTypeWithPosition(self)




    def qualifiedColTypeWithPosition(self):

        localctx = SqlBaseParser.QualifiedColTypeWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_qualifiedColTypeWithPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2772
            localctx.name = self.multipartIdentifier()
            self.state = 2773
            self.dataType()
            self.state = 2776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.NOT:
                self.state = 2774
                self.match(SqlBaseParser.NOT)
                self.state = 2775
                self.match(SqlBaseParser.NULL)


            self.state = 2779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.COMMENT:
                self.state = 2778
                self.commentSpec()


            self.state = 2782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.AFTER or _la==SqlBaseParser.FIRST:
                self.state = 2781
                self.colPosition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)




    def colTypeList(self):

        localctx = SqlBaseParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2784
            self.colType()
            self.state = 2789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,359,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2785
                    self.match(SqlBaseParser.T__3)
                    self.state = 2786
                    self.colType() 
                self.state = 2791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,359,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)




    def colType(self):

        localctx = SqlBaseParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2792
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 2793
            self.dataType()
            self.state = 2796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.state = 2794
                self.match(SqlBaseParser.NOT)
                self.state = 2795
                self.match(SqlBaseParser.NULL)


            self.state = 2799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 2798
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColTypeList" ):
                listener.enterComplexColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColTypeList" ):
                listener.exitComplexColTypeList(self)




    def complexColTypeList(self):

        localctx = SqlBaseParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            self.complexColType()
            self.state = 2806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2802
                self.match(SqlBaseParser.T__3)
                self.state = 2803
                self.complexColType()
                self.state = 2808
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColType" ):
                listener.enterComplexColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColType" ):
                listener.exitComplexColType(self)




    def complexColType(self):

        localctx = SqlBaseParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2809
            self.identifier()
            self.state = 2810
            self.match(SqlBaseParser.T__10)
            self.state = 2811
            self.dataType()
            self.state = 2814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.NOT:
                self.state = 2812
                self.match(SqlBaseParser.NOT)
                self.state = 2813
                self.match(SqlBaseParser.NULL)


            self.state = 2817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.COMMENT:
                self.state = 2816
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2819
            self.match(SqlBaseParser.WHEN)
            self.state = 2820
            localctx.condition = self.expression()
            self.state = 2821
            self.match(SqlBaseParser.THEN)
            self.state = 2822
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)




    def windowClause(self):

        localctx = SqlBaseParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2824
            self.match(SqlBaseParser.WINDOW)
            self.state = 2825
            self.namedWindow()
            self.state = 2830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,365,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2826
                    self.match(SqlBaseParser.T__3)
                    self.state = 2827
                    self.namedWindow() 
                self.state = 2832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,365,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)




    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2833
            localctx.name = self.errorCapturingIdentifier()
            self.state = 2834
            self.match(SqlBaseParser.AS)
            self.state = 2835
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowRef" ):
                listener.enterWindowRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowRef" ):
                listener.exitWindowRef(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDef" ):
                listener.enterWindowDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDef" ):
                listener.exitWindowDef(self)



    def windowSpec(self):

        localctx = SqlBaseParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 2883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2837
                localctx.name = self.errorCapturingIdentifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2838
                self.match(SqlBaseParser.T__1)
                self.state = 2839
                localctx.name = self.errorCapturingIdentifier()
                self.state = 2840
                self.match(SqlBaseParser.T__2)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2842
                self.match(SqlBaseParser.T__1)
                self.state = 2877
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.CLUSTER]:
                    self.state = 2843
                    self.match(SqlBaseParser.CLUSTER)
                    self.state = 2844
                    self.match(SqlBaseParser.BY)
                    self.state = 2845
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 2850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__3:
                        self.state = 2846
                        self.match(SqlBaseParser.T__3)
                        self.state = 2847
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2852
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SqlBaseParser.T__2, SqlBaseParser.DISTRIBUTE, SqlBaseParser.ORDER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.SORT]:
                    self.state = 2863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.DISTRIBUTE or _la==SqlBaseParser.PARTITION:
                        self.state = 2853
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.DISTRIBUTE or _la==SqlBaseParser.PARTITION):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2854
                        self.match(SqlBaseParser.BY)
                        self.state = 2855
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2860
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SqlBaseParser.T__3:
                            self.state = 2856
                            self.match(SqlBaseParser.T__3)
                            self.state = 2857
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 2862
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 2875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ORDER or _la==SqlBaseParser.SORT:
                        self.state = 2865
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.ORDER or _la==SqlBaseParser.SORT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2866
                        self.match(SqlBaseParser.BY)
                        self.state = 2867
                        self.sortItem()
                        self.state = 2872
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SqlBaseParser.T__3:
                            self.state = 2868
                            self.match(SqlBaseParser.T__3)
                            self.state = 2869
                            self.sortItem()
                            self.state = 2874
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.RANGE or _la==SqlBaseParser.ROWS:
                    self.state = 2879
                    self.windowFrame()


                self.state = 2882
                self.match(SqlBaseParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_windowFrame)
        try:
            self.state = 2901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2885
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2886
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2887
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2888
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2889
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2890
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2891
                localctx.start = self.frameBound()
                self.state = 2892
                self.match(SqlBaseParser.AND)
                self.state = 2893
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2895
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2896
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2897
                localctx.start = self.frameBound()
                self.state = 2898
                self.match(SqlBaseParser.AND)
                self.state = 2899
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBound" ):
                listener.enterFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBound" ):
                listener.exitFrameBound(self)




    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 2910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2903
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2904
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FOLLOWING or _la==SqlBaseParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2905
                localctx.boundType = self.match(SqlBaseParser.CURRENT)
                self.state = 2906
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2907
                self.expression()
                self.state = 2908
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FOLLOWING or _la==SqlBaseParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)




    def qualifiedNameList(self):

        localctx = SqlBaseParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2912
            self.qualifiedName()
            self.state = 2917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 2913
                self.match(SqlBaseParser.T__3)
                self.state = 2914
                self.qualifiedName()
                self.state = 2919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionName" ):
                listener.enterFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionName" ):
                listener.exitFunctionName(self)




    def functionName(self):

        localctx = SqlBaseParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_functionName)
        try:
            self.state = 2924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2920
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2921
                self.match(SqlBaseParser.FILTER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2922
                self.match(SqlBaseParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2923
                self.match(SqlBaseParser.RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2926
            self.identifier()
            self.state = 2931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2927
                    self.match(SqlBaseParser.T__4)
                    self.state = 2928
                    self.identifier() 
                self.state = 2933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def errorCapturingIdentifierExtra(self):
            return self.getTypedRuleContext(SqlBaseParser.ErrorCapturingIdentifierExtraContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorCapturingIdentifier" ):
                listener.enterErrorCapturingIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorCapturingIdentifier" ):
                listener.exitErrorCapturingIdentifier(self)




    def errorCapturingIdentifier(self):

        localctx = SqlBaseParser.ErrorCapturingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_errorCapturingIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2934
            self.identifier()
            self.state = 2935
            self.errorCapturingIdentifierExtra()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierExtraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_errorCapturingIdentifierExtra

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ErrorIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.MINUS)
            else:
                return self.getToken(SqlBaseParser.MINUS, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorIdent" ):
                listener.enterErrorIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorIdent" ):
                listener.exitErrorIdent(self)


    class RealIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRealIdent" ):
                listener.enterRealIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRealIdent" ):
                listener.exitRealIdent(self)



    def errorCapturingIdentifierExtra(self):

        localctx = SqlBaseParser.ErrorCapturingIdentifierExtraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_errorCapturingIdentifierExtra)
        try:
            self.state = 2944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ErrorIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2939 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2937
                        self.match(SqlBaseParser.MINUS)
                        self.state = 2938
                        self.identifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2941 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,379,self._ctx)

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RealIdentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def strictNonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictNonReservedContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_identifier)
        try:
            self.state = 2949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2946
                self.strictIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2947
                if not not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.SQL_standard_keyword_behavior")
                self.state = 2948
                self.strictNonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifierAlternative" ):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifierAlternative" ):
                listener.exitQuotedIdentifierAlternative(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def ansiNonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.AnsiNonReservedContext,0)

        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)



    def strictIdentifier(self):

        localctx = SqlBaseParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_strictIdentifier)
        try:
            self.state = 2957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2951
                self.match(SqlBaseParser.IDENTIFIER)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2952
                self.quotedIdentifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2953
                if not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.SQL_standard_keyword_behavior")
                self.state = 2954
                self.ansiNonReserved()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2955
                if not not self.SQL_standard_keyword_behavior:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.SQL_standard_keyword_behavior")
                self.state = 2956
                self.nonReserved()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)




    def quotedIdentifier(self):

        localctx = SqlBaseParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2959
            self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigIntLiteral" ):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigIntLiteral" ):
                listener.exitBigIntLiteral(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(SqlBaseParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTinyIntLiteral" ):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTinyIntLiteral" ):
                listener.exitTinyIntLiteral(self)


    class LegacyDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(SqlBaseParser.EXPONENT_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLegacyDecimalLiteral" ):
                listener.enterLegacyDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLegacyDecimalLiteral" ):
                listener.exitLegacyDecimalLiteral(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigDecimalLiteral" ):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigDecimalLiteral" ):
                listener.exitBigDecimalLiteral(self)


    class ExponentLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(SqlBaseParser.EXPONENT_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentLiteral" ):
                listener.enterExponentLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentLiteral" ):
                listener.exitExponentLiteral(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(SqlBaseParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(SqlBaseParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallIntLiteral" ):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallIntLiteral" ):
                listener.exitSmallIntLiteral(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ExponentLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2961
                if not not self.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.legacy_exponent_literal_as_decimal_enabled")
                self.state = 2963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2962
                    self.match(SqlBaseParser.MINUS)


                self.state = 2965
                self.match(SqlBaseParser.EXPONENT_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2966
                if not not self.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.legacy_exponent_literal_as_decimal_enabled")
                self.state = 2968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2967
                    self.match(SqlBaseParser.MINUS)


                self.state = 2970
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.LegacyDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2971
                if not self.legacy_exponent_literal_as_decimal_enabled:
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.legacy_exponent_literal_as_decimal_enabled")
                self.state = 2973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2972
                    self.match(SqlBaseParser.MINUS)


                self.state = 2975
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.EXPONENT_VALUE or _la==SqlBaseParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2976
                    self.match(SqlBaseParser.MINUS)


                self.state = 2979
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2980
                    self.match(SqlBaseParser.MINUS)


                self.state = 2983
                self.match(SqlBaseParser.BIGINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2984
                    self.match(SqlBaseParser.MINUS)


                self.state = 2987
                self.match(SqlBaseParser.SMALLINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2988
                    self.match(SqlBaseParser.MINUS)


                self.state = 2991
                self.match(SqlBaseParser.TINYINT_LITERAL)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2992
                    self.match(SqlBaseParser.MINUS)


                self.state = 2995
                self.match(SqlBaseParser.DOUBLE_LITERAL)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2996
                    self.match(SqlBaseParser.MINUS)


                self.state = 2999
                self.match(SqlBaseParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setOrDrop = None # Token

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_alterColumnAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterColumnAction" ):
                listener.enterAlterColumnAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterColumnAction" ):
                listener.exitAlterColumnAction(self)




    def alterColumnAction(self):

        localctx = SqlBaseParser.AlterColumnActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_alterColumnAction)
        self._la = 0 # Token type
        try:
            self.state = 3009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.TYPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3002
                self.match(SqlBaseParser.TYPE)
                self.state = 3003
                self.dataType()
                pass
            elif token in [SqlBaseParser.COMMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3004
                self.commentSpec()
                pass
            elif token in [SqlBaseParser.AFTER, SqlBaseParser.FIRST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3005
                self.colPosition()
                pass
            elif token in [SqlBaseParser.DROP, SqlBaseParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3006
                localctx.setOrDrop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DROP or _la==SqlBaseParser.SET):
                    localctx.setOrDrop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3007
                self.match(SqlBaseParser.NOT)
                self.state = 3008
                self.match(SqlBaseParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnsiNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_ansiNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnsiNonReserved" ):
                listener.enterAnsiNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnsiNonReserved" ):
                listener.exitAnsiNonReserved(self)




    def ansiNonReserved(self):

        localctx = SqlBaseParser.AnsiNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_ansiNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3011
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALTER) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ARCHIVE) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.BUCKET) | (1 << SqlBaseParser.BUCKETS) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.CACHE) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CHANGE) | (1 << SqlBaseParser.CLEAR) | (1 << SqlBaseParser.CLUSTER) | (1 << SqlBaseParser.CLUSTERED) | (1 << SqlBaseParser.CODEGEN) | (1 << SqlBaseParser.COLLECTION) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMPACT) | (1 << SqlBaseParser.COMPACTIONS) | (1 << SqlBaseParser.COMPUTE) | (1 << SqlBaseParser.CONCATENATE) | (1 << SqlBaseParser.COST) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATABASE) | (1 << SqlBaseParser.DATABASES))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (SqlBaseParser.DBPROPERTIES - 65)) | (1 << (SqlBaseParser.DEFINED - 65)) | (1 << (SqlBaseParser.DELETE - 65)) | (1 << (SqlBaseParser.DELIMITED - 65)) | (1 << (SqlBaseParser.DESC - 65)) | (1 << (SqlBaseParser.DESCRIBE - 65)) | (1 << (SqlBaseParser.DFS - 65)) | (1 << (SqlBaseParser.DIRECTORIES - 65)) | (1 << (SqlBaseParser.DIRECTORY - 65)) | (1 << (SqlBaseParser.DISTRIBUTE - 65)) | (1 << (SqlBaseParser.DROP - 65)) | (1 << (SqlBaseParser.ESCAPED - 65)) | (1 << (SqlBaseParser.EXCHANGE - 65)) | (1 << (SqlBaseParser.EXISTS - 65)) | (1 << (SqlBaseParser.EXPLAIN - 65)) | (1 << (SqlBaseParser.EXPORT - 65)) | (1 << (SqlBaseParser.EXTENDED - 65)) | (1 << (SqlBaseParser.EXTERNAL - 65)) | (1 << (SqlBaseParser.EXTRACT - 65)) | (1 << (SqlBaseParser.FIELDS - 65)) | (1 << (SqlBaseParser.FILEFORMAT - 65)) | (1 << (SqlBaseParser.FIRST - 65)) | (1 << (SqlBaseParser.FOLLOWING - 65)) | (1 << (SqlBaseParser.FORMAT - 65)) | (1 << (SqlBaseParser.FORMATTED - 65)) | (1 << (SqlBaseParser.FUNCTION - 65)) | (1 << (SqlBaseParser.FUNCTIONS - 65)) | (1 << (SqlBaseParser.GLOBAL - 65)) | (1 << (SqlBaseParser.GROUPING - 65)) | (1 << (SqlBaseParser.IF - 65)) | (1 << (SqlBaseParser.IGNORE - 65)) | (1 << (SqlBaseParser.IMPORT - 65)) | (1 << (SqlBaseParser.INDEX - 65)) | (1 << (SqlBaseParser.INDEXES - 65)) | (1 << (SqlBaseParser.INPATH - 65)) | (1 << (SqlBaseParser.INPUTFORMAT - 65)) | (1 << (SqlBaseParser.INSERT - 65)) | (1 << (SqlBaseParser.INTERVAL - 65)) | (1 << (SqlBaseParser.ITEMS - 65)) | (1 << (SqlBaseParser.KEYS - 65)) | (1 << (SqlBaseParser.LAST - 65)) | (1 << (SqlBaseParser.LATERAL - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.LAZY - 129)) | (1 << (SqlBaseParser.LIKE - 129)) | (1 << (SqlBaseParser.LIMIT - 129)) | (1 << (SqlBaseParser.LINES - 129)) | (1 << (SqlBaseParser.LIST - 129)) | (1 << (SqlBaseParser.LOAD - 129)) | (1 << (SqlBaseParser.LOCAL - 129)) | (1 << (SqlBaseParser.LOCATION - 129)) | (1 << (SqlBaseParser.LOCK - 129)) | (1 << (SqlBaseParser.LOCKS - 129)) | (1 << (SqlBaseParser.LOGICAL - 129)) | (1 << (SqlBaseParser.MACRO - 129)) | (1 << (SqlBaseParser.MAP - 129)) | (1 << (SqlBaseParser.MATCHED - 129)) | (1 << (SqlBaseParser.MERGE - 129)) | (1 << (SqlBaseParser.MSCK - 129)) | (1 << (SqlBaseParser.NAMESPACE - 129)) | (1 << (SqlBaseParser.NAMESPACES - 129)) | (1 << (SqlBaseParser.NO - 129)) | (1 << (SqlBaseParser.NULLS - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.OPTION - 129)) | (1 << (SqlBaseParser.OPTIONS - 129)) | (1 << (SqlBaseParser.OUT - 129)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 129)) | (1 << (SqlBaseParser.OVER - 129)) | (1 << (SqlBaseParser.OVERLAY - 129)) | (1 << (SqlBaseParser.OVERWRITE - 129)) | (1 << (SqlBaseParser.PARTITION - 129)) | (1 << (SqlBaseParser.PARTITIONED - 129)) | (1 << (SqlBaseParser.PARTITIONS - 129)) | (1 << (SqlBaseParser.PERCENTLIT - 129)) | (1 << (SqlBaseParser.PIVOT - 129)) | (1 << (SqlBaseParser.PLACING - 129)) | (1 << (SqlBaseParser.POSITION - 129)) | (1 << (SqlBaseParser.PRECEDING - 129)) | (1 << (SqlBaseParser.PRINCIPALS - 129)) | (1 << (SqlBaseParser.PROPERTIES - 129)) | (1 << (SqlBaseParser.PURGE - 129)) | (1 << (SqlBaseParser.QUERY - 129)) | (1 << (SqlBaseParser.RANGE - 129)) | (1 << (SqlBaseParser.RECORDREADER - 129)) | (1 << (SqlBaseParser.RECORDWRITER - 129)) | (1 << (SqlBaseParser.RECOVER - 129)) | (1 << (SqlBaseParser.REDUCE - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.RENAME - 129)) | (1 << (SqlBaseParser.REPAIR - 129)) | (1 << (SqlBaseParser.REPLACE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.RESET - 193)) | (1 << (SqlBaseParser.RESTRICT - 193)) | (1 << (SqlBaseParser.REVOKE - 193)) | (1 << (SqlBaseParser.RLIKE - 193)) | (1 << (SqlBaseParser.ROLE - 193)) | (1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.ROLLBACK - 193)) | (1 << (SqlBaseParser.ROLLUP - 193)) | (1 << (SqlBaseParser.ROW - 193)) | (1 << (SqlBaseParser.ROWS - 193)) | (1 << (SqlBaseParser.SCHEMA - 193)) | (1 << (SqlBaseParser.SEPARATED - 193)) | (1 << (SqlBaseParser.SERDE - 193)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 193)) | (1 << (SqlBaseParser.SET - 193)) | (1 << (SqlBaseParser.SETS - 193)) | (1 << (SqlBaseParser.SHOW - 193)) | (1 << (SqlBaseParser.SKEWED - 193)) | (1 << (SqlBaseParser.SORT - 193)) | (1 << (SqlBaseParser.SORTED - 193)) | (1 << (SqlBaseParser.START - 193)) | (1 << (SqlBaseParser.STATISTICS - 193)) | (1 << (SqlBaseParser.STORED - 193)) | (1 << (SqlBaseParser.STRATIFY - 193)) | (1 << (SqlBaseParser.STRUCT - 193)) | (1 << (SqlBaseParser.SUBSTR - 193)) | (1 << (SqlBaseParser.SUBSTRING - 193)) | (1 << (SqlBaseParser.TABLES - 193)) | (1 << (SqlBaseParser.TABLESAMPLE - 193)) | (1 << (SqlBaseParser.TBLPROPERTIES - 193)) | (1 << (SqlBaseParser.TEMPORARY - 193)) | (1 << (SqlBaseParser.TERMINATED - 193)) | (1 << (SqlBaseParser.TOUCH - 193)) | (1 << (SqlBaseParser.TRANSACTION - 193)) | (1 << (SqlBaseParser.TRANSACTIONS - 193)) | (1 << (SqlBaseParser.TRANSFORM - 193)) | (1 << (SqlBaseParser.TRIM - 193)) | (1 << (SqlBaseParser.TRUE - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.UNARCHIVE - 193)) | (1 << (SqlBaseParser.UNBOUNDED - 193)) | (1 << (SqlBaseParser.UNCACHE - 193)) | (1 << (SqlBaseParser.UNLOCK - 193)) | (1 << (SqlBaseParser.UNSET - 193)) | (1 << (SqlBaseParser.UPDATE - 193)) | (1 << (SqlBaseParser.USE - 193)) | (1 << (SqlBaseParser.VALUES - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (SqlBaseParser.VIEW - 257)) | (1 << (SqlBaseParser.VIEWS - 257)) | (1 << (SqlBaseParser.WINDOW - 257)) | (1 << (SqlBaseParser.DIV - 257)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictNonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrictNonReserved" ):
                listener.enterStrictNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrictNonReserved" ):
                listener.exitStrictNonReserved(self)




    def strictNonReserved(self):

        localctx = SqlBaseParser.StrictNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_strictNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3013
            _la = self._input.LA(1)
            if not(((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (SqlBaseParser.ANTI - 18)) | (1 << (SqlBaseParser.CROSS - 18)) | (1 << (SqlBaseParser.EXCEPT - 18)))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (SqlBaseParser.FULL - 101)) | (1 << (SqlBaseParser.INNER - 101)) | (1 << (SqlBaseParser.INTERSECT - 101)) | (1 << (SqlBaseParser.JOIN - 101)) | (1 << (SqlBaseParser.LEFT - 101)) | (1 << (SqlBaseParser.NATURAL - 101)) | (1 << (SqlBaseParser.ON - 101)))) != 0) or ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (SqlBaseParser.RIGHT - 196)) | (1 << (SqlBaseParser.SEMI - 196)) | (1 << (SqlBaseParser.SETMINUS - 196)) | (1 << (SqlBaseParser.UNION - 196)) | (1 << (SqlBaseParser.USING - 196)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CHECK(self):
            return self.getToken(SqlBaseParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COLLATE(self):
            return self.getToken(SqlBaseParser.COLLATE, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(SqlBaseParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(SqlBaseParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(SqlBaseParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(SqlBaseParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(SqlBaseParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def OVERLAPS(self):
            return self.getToken(SqlBaseParser.OVERLAPS, 0)

        def OVERLAY(self):
            return self.getToken(SqlBaseParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(SqlBaseParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(SqlBaseParser.PRIMARY, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(SqlBaseParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(SqlBaseParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def REFERENCES(self):
            return self.getToken(SqlBaseParser.REFERENCES, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def SESSION_USER(self):
            return self.getToken(SqlBaseParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(SqlBaseParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def UNIQUE(self):
            return self.getToken(SqlBaseParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(SqlBaseParser.UNKNOWN, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(SqlBaseParser.VIEWS, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3015
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ALTER) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARCHIVE) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.BOTH) | (1 << SqlBaseParser.BUCKET) | (1 << SqlBaseParser.BUCKETS) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.CACHE) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CHANGE) | (1 << SqlBaseParser.CHECK) | (1 << SqlBaseParser.CLEAR) | (1 << SqlBaseParser.CLUSTER) | (1 << SqlBaseParser.CLUSTERED) | (1 << SqlBaseParser.CODEGEN) | (1 << SqlBaseParser.COLLATE) | (1 << SqlBaseParser.COLLECTION) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT) | (1 << SqlBaseParser.COMMIT) | (1 << SqlBaseParser.COMPACT) | (1 << SqlBaseParser.COMPACTIONS) | (1 << SqlBaseParser.COMPUTE) | (1 << SqlBaseParser.CONCATENATE) | (1 << SqlBaseParser.CONSTRAINT) | (1 << SqlBaseParser.COST) | (1 << SqlBaseParser.CREATE) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.CURRENT) | (1 << SqlBaseParser.CURRENT_DATE) | (1 << SqlBaseParser.CURRENT_TIME) | (1 << SqlBaseParser.CURRENT_TIMESTAMP) | (1 << SqlBaseParser.CURRENT_USER) | (1 << SqlBaseParser.DATA) | (1 << SqlBaseParser.DATABASE) | (1 << SqlBaseParser.DATABASES))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DAY - 64)) | (1 << (SqlBaseParser.DBPROPERTIES - 64)) | (1 << (SqlBaseParser.DEFINED - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.DELIMITED - 64)) | (1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.DFS - 64)) | (1 << (SqlBaseParser.DIRECTORIES - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.DISTINCT - 64)) | (1 << (SqlBaseParser.DISTRIBUTE - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.ELSE - 64)) | (1 << (SqlBaseParser.END - 64)) | (1 << (SqlBaseParser.ESCAPE - 64)) | (1 << (SqlBaseParser.ESCAPED - 64)) | (1 << (SqlBaseParser.EXCHANGE - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXPORT - 64)) | (1 << (SqlBaseParser.EXTENDED - 64)) | (1 << (SqlBaseParser.EXTERNAL - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FIELDS - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FILEFORMAT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FOR - 64)) | (1 << (SqlBaseParser.FOREIGN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FORMATTED - 64)) | (1 << (SqlBaseParser.FROM - 64)) | (1 << (SqlBaseParser.FUNCTION - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GLOBAL - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GROUP - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HAVING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IMPORT - 64)) | (1 << (SqlBaseParser.IN - 64)) | (1 << (SqlBaseParser.INDEX - 64)) | (1 << (SqlBaseParser.INDEXES - 64)) | (1 << (SqlBaseParser.INPATH - 64)) | (1 << (SqlBaseParser.INPUTFORMAT - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.IS - 64)) | (1 << (SqlBaseParser.ITEMS - 64)) | (1 << (SqlBaseParser.KEYS - 64)) | (1 << (SqlBaseParser.LAST - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.LATERAL - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.LEADING - 128)) | (1 << (SqlBaseParser.LIKE - 128)) | (1 << (SqlBaseParser.LIMIT - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.LIST - 128)) | (1 << (SqlBaseParser.LOAD - 128)) | (1 << (SqlBaseParser.LOCAL - 128)) | (1 << (SqlBaseParser.LOCATION - 128)) | (1 << (SqlBaseParser.LOCK - 128)) | (1 << (SqlBaseParser.LOCKS - 128)) | (1 << (SqlBaseParser.LOGICAL - 128)) | (1 << (SqlBaseParser.MACRO - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.MATCHED - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MINUTE - 128)) | (1 << (SqlBaseParser.MONTH - 128)) | (1 << (SqlBaseParser.MSCK - 128)) | (1 << (SqlBaseParser.NAMESPACE - 128)) | (1 << (SqlBaseParser.NAMESPACES - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.OR - 128)) | (1 << (SqlBaseParser.ORDER - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OUTER - 128)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.OVERLAPS - 128)) | (1 << (SqlBaseParser.OVERLAY - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONED - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.PIVOT - 128)) | (1 << (SqlBaseParser.PLACING - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIMARY - 128)) | (1 << (SqlBaseParser.PRINCIPALS - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.PURGE - 128)) | (1 << (SqlBaseParser.QUERY - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.RECOVER - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.REFERENCES - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPAIR - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.REPLACE - 192)) | (1 << (SqlBaseParser.RESET - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.RLIKE - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.ROLLBACK - 192)) | (1 << (SqlBaseParser.ROLLUP - 192)) | (1 << (SqlBaseParser.ROW - 192)) | (1 << (SqlBaseParser.ROWS - 192)) | (1 << (SqlBaseParser.SCHEMA - 192)) | (1 << (SqlBaseParser.SECOND - 192)) | (1 << (SqlBaseParser.SELECT - 192)) | (1 << (SqlBaseParser.SEPARATED - 192)) | (1 << (SqlBaseParser.SERDE - 192)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 192)) | (1 << (SqlBaseParser.SESSION_USER - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SKEWED - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.SORT - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.STORED - 192)) | (1 << (SqlBaseParser.STRATIFY - 192)) | (1 << (SqlBaseParser.STRUCT - 192)) | (1 << (SqlBaseParser.SUBSTR - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)) | (1 << (SqlBaseParser.TABLE - 192)) | (1 << (SqlBaseParser.TABLES - 192)) | (1 << (SqlBaseParser.TABLESAMPLE - 192)) | (1 << (SqlBaseParser.TBLPROPERTIES - 192)) | (1 << (SqlBaseParser.TEMPORARY - 192)) | (1 << (SqlBaseParser.TERMINATED - 192)) | (1 << (SqlBaseParser.THEN - 192)) | (1 << (SqlBaseParser.TO - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.TRAILING - 192)) | (1 << (SqlBaseParser.TRANSACTION - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.TRANSFORM - 192)) | (1 << (SqlBaseParser.TRIM - 192)) | (1 << (SqlBaseParser.TRUE - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCACHE - 192)) | (1 << (SqlBaseParser.UNIQUE - 192)) | (1 << (SqlBaseParser.UNKNOWN - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.UNSET - 192)) | (1 << (SqlBaseParser.UPDATE - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (SqlBaseParser.VALUES - 256)) | (1 << (SqlBaseParser.VIEW - 256)) | (1 << (SqlBaseParser.VIEWS - 256)) | (1 << (SqlBaseParser.WHEN - 256)) | (1 << (SqlBaseParser.WHERE - 256)) | (1 << (SqlBaseParser.WINDOW - 256)) | (1 << (SqlBaseParser.WITH - 256)) | (1 << (SqlBaseParser.YEAR - 256)) | (1 << (SqlBaseParser.DIV - 256)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[7] = self.statement_sempred
        self._predicates[40] = self.queryTerm_sempred
        self._predicates[94] = self.booleanExpression_sempred
        self._predicates[96] = self.valueExpression_sempred
        self._predicates[97] = self.primaryExpression_sempred
        self._predicates[129] = self.identifier_sempred
        self._predicates[130] = self.strictIdentifier_sempred
        self._predicates[132] = self.number_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def statement_sempred(self, localctx:StatementContext, predIndex:int):
            if predIndex == 0:
                return not self.legacy_create_hive_table_by_default_enabled
         

            if predIndex == 1:
                return self.legacy_create_hive_table_by_default_enabled
         

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 3:
                return self.legacy_setops_precedence_enbled
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return not self.legacy_setops_precedence_enbled
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 7:
                return not self.legacy_setops_precedence_enbled
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 6)
         

    def identifier_sempred(self, localctx:IdentifierContext, predIndex:int):
            if predIndex == 18:
                return not self.SQL_standard_keyword_behavior
         

    def strictIdentifier_sempred(self, localctx:StrictIdentifierContext, predIndex:int):
            if predIndex == 19:
                return self.SQL_standard_keyword_behavior
         

            if predIndex == 20:
                return not self.SQL_standard_keyword_behavior
         

    def number_sempred(self, localctx:NumberContext, predIndex:int):
            if predIndex == 21:
                return not self.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 22:
                return not self.legacy_exponent_literal_as_decimal_enabled
         

            if predIndex == 23:
                return self.legacy_exponent_literal_as_decimal_enabled
         




