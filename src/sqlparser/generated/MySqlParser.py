# Generated from /media/NVMe/Projects/SQL-AI/python-sql-parser/src/sqlparser/grammar/MySqlParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,1152,7185,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
        7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,
        2,307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,
        7,312,2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,
        2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,
        7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,
        2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,
        7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
        2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,
        7,345,1,0,3,0,694,8,0,1,0,1,0,3,0,698,8,0,1,0,1,0,1,1,1,1,1,1,3,
        1,705,8,1,1,1,3,1,708,8,1,1,1,5,1,711,8,1,10,1,12,1,714,9,1,1,1,
        1,1,1,1,3,1,719,8,1,1,1,3,1,722,8,1,1,1,3,1,725,8,1,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,3,2,734,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,3,4,779,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,
        791,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,802,8,6,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,819,8,7,
        1,8,1,8,1,8,3,8,824,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        3,9,836,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,3,10,863,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,872,
        8,11,1,12,1,12,1,12,3,12,877,8,12,1,12,1,12,5,12,881,8,12,10,12,
        12,12,884,9,12,1,13,1,13,3,13,888,8,13,1,13,1,13,3,13,892,8,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,901,8,13,1,13,3,13,904,8,13,
        1,13,3,13,907,8,13,1,13,1,13,3,13,911,8,13,1,13,1,13,1,13,1,14,1,
        14,1,14,3,14,919,8,14,1,14,3,14,922,8,14,1,14,3,14,925,8,14,1,14,
        1,14,1,14,1,14,3,14,931,8,14,1,14,1,14,3,14,935,8,14,1,14,1,14,1,
        14,1,14,3,14,941,8,14,1,14,5,14,944,8,14,10,14,12,14,947,9,14,1,
        14,1,14,3,14,951,8,14,1,14,1,14,1,14,3,14,956,8,14,1,14,5,14,959,
        8,14,10,14,12,14,962,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,3,15,973,8,15,1,15,3,15,976,8,15,1,15,1,15,3,15,980,8,15,1,
        15,3,15,983,8,15,1,15,1,15,3,15,987,8,15,1,15,3,15,990,8,15,1,15,
        1,15,3,15,994,8,15,1,15,3,15,997,8,15,1,15,3,15,1000,8,15,1,15,1,
        15,3,15,1004,8,15,1,15,3,15,1007,8,15,1,15,1,15,3,15,1011,8,15,1,
        15,1,15,1,16,1,16,3,16,1017,8,16,1,16,1,16,1,16,1,16,3,16,1023,8,
        16,1,16,1,16,5,16,1027,8,16,10,16,12,16,1030,9,16,1,16,1,16,5,16,
        1034,8,16,10,16,12,16,1037,9,16,1,16,1,16,1,17,1,17,3,17,1043,8,
        17,1,17,1,17,1,17,1,17,3,17,1049,8,17,1,17,1,17,5,17,1053,8,17,10,
        17,12,17,1056,9,17,1,17,1,17,1,17,1,17,5,17,1062,8,17,10,17,12,17,
        1065,9,17,1,17,1,17,3,17,1069,8,17,1,18,1,18,1,18,1,18,1,18,3,18,
        1076,8,18,1,18,1,18,1,18,5,18,1081,8,18,10,18,12,18,1084,9,18,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,1098,
        8,19,10,19,12,19,1101,9,19,1,19,1,19,1,20,1,20,1,20,3,20,1108,8,
        20,1,20,3,20,1111,8,20,1,20,1,20,3,20,1115,8,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,3,20,1125,8,20,1,20,1,20,1,20,3,20,1130,8,
        20,1,20,3,20,1133,8,20,1,20,1,20,3,20,1137,8,20,1,20,1,20,3,20,1141,
        8,20,1,20,1,20,3,20,1145,8,20,1,20,5,20,1148,8,20,10,20,12,20,1151,
        9,20,3,20,1153,8,20,1,20,3,20,1156,8,20,1,20,3,20,1159,8,20,1,20,
        3,20,1162,8,20,1,20,1,20,1,20,1,20,1,20,3,20,1169,8,20,1,20,3,20,
        1172,8,20,1,20,1,20,3,20,1176,8,20,1,20,1,20,1,20,1,20,3,20,1182,
        8,20,1,20,5,20,1185,8,20,10,20,12,20,1188,9,20,3,20,1190,8,20,1,
        20,3,20,1193,8,20,3,20,1195,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,3,21,1206,8,21,1,21,1,21,3,21,1210,8,21,1,21,3,21,1213,
        8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        3,22,1227,8,22,1,22,3,22,1230,8,22,1,22,1,22,3,22,1234,8,22,1,22,
        3,22,1237,8,22,1,22,1,22,3,22,1241,8,22,1,22,3,22,1244,8,22,1,22,
        1,22,3,22,1248,8,22,1,22,3,22,1251,8,22,1,22,1,22,3,22,1255,8,22,
        1,22,3,22,1258,8,22,1,22,3,22,1261,8,22,1,22,1,22,3,22,1265,8,22,
        1,22,3,22,1268,8,22,1,22,1,22,3,22,1272,8,22,1,22,1,22,1,23,1,23,
        1,23,3,23,1279,8,23,1,23,3,23,1282,8,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,3,23,1295,8,23,1,23,1,23,1,24,1,24,
        3,24,1301,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,5,25,1310,8,25,
        10,25,12,25,1313,9,25,1,25,1,25,3,25,1317,8,25,1,25,1,25,1,25,1,
        25,1,25,1,25,3,25,1325,8,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,3,
        28,1334,8,28,1,28,1,28,1,28,3,28,1339,8,28,1,28,3,28,1342,8,28,1,
        28,1,28,1,28,3,28,1347,8,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1355,
        8,28,1,28,1,28,3,28,1359,8,28,1,28,1,28,1,28,3,28,1364,8,28,1,28,
        1,28,3,28,1368,8,28,1,29,1,29,1,29,3,29,1373,8,29,1,29,3,29,1376,
        8,29,1,29,1,29,3,29,1380,8,29,1,29,1,29,1,29,5,29,1385,8,29,10,29,
        12,29,1388,9,29,1,30,1,30,3,30,1392,8,30,1,30,1,30,1,30,3,30,1397,
        8,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1405,8,30,1,30,1,30,1,30,
        1,30,1,30,1,30,3,30,1413,8,30,1,30,1,30,1,30,3,30,1418,8,30,1,30,
        1,30,1,30,1,30,1,30,1,30,3,30,1426,8,30,1,30,3,30,1429,8,30,1,31,
        3,31,1432,8,31,1,31,1,31,3,31,1436,8,31,1,31,1,31,3,31,1440,8,31,
        1,31,3,31,1443,8,31,1,31,1,31,3,31,1447,8,31,1,31,3,31,1450,8,31,
        1,32,1,32,1,32,1,32,1,32,3,32,1457,8,32,1,33,1,33,1,33,1,33,1,33,
        1,33,3,33,1465,8,33,3,33,1467,8,33,1,34,1,34,1,34,5,34,1472,8,34,
        10,34,12,34,1475,9,34,1,34,1,34,1,34,3,34,1480,8,34,1,34,1,34,1,
        34,1,34,5,34,1486,8,34,10,34,12,34,1489,9,34,3,34,1491,8,34,1,34,
        1,34,1,34,5,34,1496,8,34,10,34,12,34,1499,9,34,3,34,1501,8,34,3,
        34,1503,8,34,1,35,1,35,1,35,1,35,3,35,1509,8,35,1,36,1,36,1,36,1,
        36,3,36,1515,8,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,3,37,1532,8,37,1,38,1,38,1,38,1,38,1,
        38,3,38,1539,8,38,1,39,1,39,1,39,1,40,1,40,3,40,1546,8,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1558,8,40,1,40,1,
        40,1,40,3,40,1563,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1572,
        8,40,3,40,1574,8,40,1,41,3,41,1577,8,41,1,41,1,41,1,41,1,42,1,42,
        1,42,1,43,1,43,1,43,1,43,1,43,3,43,1590,8,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1603,8,43,1,43,1,43,1,43,
        3,43,1608,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,3,44,1624,8,44,1,45,1,45,1,45,1,45,5,45,1630,
        8,45,10,45,12,45,1633,9,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,3,
        46,1642,8,46,1,47,1,47,5,47,1646,8,47,10,47,12,47,1649,9,47,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1660,8,48,1,48,3,48,
        1663,8,48,1,48,1,48,1,48,3,48,1668,8,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,3,48,1681,8,48,1,48,1,48,1,48,1,48,
        1,48,3,48,1688,8,48,1,48,1,48,1,48,1,48,1,48,3,48,1695,8,48,3,48,
        1697,8,48,1,48,1,48,1,48,1,48,1,48,3,48,1704,8,48,1,49,1,49,3,49,
        1708,8,49,3,49,1710,8,49,1,49,1,49,1,49,3,49,1715,8,49,1,49,3,49,
        1718,8,49,1,49,1,49,5,49,1722,8,49,10,49,12,49,1725,9,49,1,49,1,
        49,3,49,1729,8,49,3,49,1731,8,49,1,49,1,49,3,49,1735,8,49,1,49,3,
        49,1738,8,49,1,49,3,49,1741,8,49,1,49,1,49,5,49,1745,8,49,10,49,
        12,49,1748,9,49,1,49,1,49,3,49,1752,8,49,3,49,1754,8,49,1,49,1,49,
        1,49,3,49,1759,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1766,8,49,3,49,
        1768,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1775,8,49,1,50,1,50,1,50,
        3,50,1780,8,50,1,50,1,50,3,50,1784,8,50,1,50,3,50,1787,8,50,1,51,
        1,51,1,51,1,51,1,51,1,51,3,51,1795,8,51,1,51,1,51,1,51,1,51,1,51,
        1,51,3,51,1803,8,51,3,51,1805,8,51,1,52,1,52,1,52,1,52,1,52,1,52,
        3,52,1813,8,52,1,53,1,53,3,53,1817,8,53,1,53,3,53,1820,8,53,1,53,
        1,53,5,53,1824,8,53,10,53,12,53,1827,9,53,1,53,1,53,3,53,1831,8,
        53,1,53,3,53,1834,8,53,1,53,1,53,5,53,1838,8,53,10,53,12,53,1841,
        9,53,3,53,1843,8,53,1,54,1,54,3,54,1847,8,54,1,54,3,54,1850,8,54,
        1,54,1,54,3,54,1854,8,54,1,54,1,54,1,54,3,54,1859,8,54,1,54,1,54,
        1,54,3,54,1864,8,54,1,54,1,54,1,54,3,54,1869,8,54,1,54,1,54,3,54,
        1873,8,54,1,54,1,54,3,54,1877,8,54,1,54,1,54,3,54,1881,8,54,1,54,
        1,54,3,54,1885,8,54,1,54,1,54,3,54,1889,8,54,1,54,1,54,3,54,1893,
        8,54,1,54,1,54,1,54,3,54,1898,8,54,1,54,1,54,1,54,3,54,1903,8,54,
        1,54,1,54,1,54,3,54,1908,8,54,1,54,1,54,1,54,1,54,3,54,1914,8,54,
        1,54,1,54,1,54,3,54,1919,8,54,1,54,1,54,1,54,3,54,1924,8,54,1,54,
        1,54,1,54,1,54,3,54,1930,8,54,1,54,1,54,1,54,3,54,1935,8,54,1,54,
        1,54,1,54,3,54,1940,8,54,1,54,1,54,1,54,3,54,1945,8,54,1,54,1,54,
        1,54,3,54,1950,8,54,1,54,1,54,1,54,3,54,1955,8,54,1,54,1,54,1,54,
        3,54,1960,8,54,1,54,1,54,1,54,3,54,1965,8,54,1,54,1,54,1,54,1,54,
        1,54,3,54,1972,8,54,1,54,1,54,1,54,3,54,1977,8,54,1,54,1,54,1,54,
        3,54,1982,8,54,1,54,1,54,1,54,3,54,1987,8,54,1,54,1,54,1,54,1,54,
        3,54,1993,8,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,2001,8,54,1,54,
        1,54,1,54,1,54,3,54,2007,8,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,
        1,57,1,57,1,57,3,57,2019,8,57,1,57,1,57,1,57,1,57,1,57,3,57,2026,
        8,57,3,57,2028,8,57,1,57,1,57,1,57,1,57,5,57,2034,8,57,10,57,12,
        57,2037,9,57,1,57,1,57,3,57,2041,8,57,1,58,3,58,2044,8,58,1,58,1,
        58,1,58,1,58,1,58,1,58,3,58,2052,8,58,1,58,1,58,1,58,1,58,3,58,2058,
        8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,3,58,2074,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,3,58,2086,8,58,3,58,2088,8,58,1,59,3,59,2091,8,59,1,59,
        1,59,1,59,1,59,1,59,1,59,3,59,2099,8,59,1,59,1,59,1,59,1,59,3,59,
        2105,8,59,1,59,1,59,1,59,1,59,3,59,2111,8,59,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,5,60,2122,8,60,10,60,12,60,2125,9,60,1,
        60,1,60,5,60,2129,8,60,10,60,12,60,2132,9,60,1,60,1,60,1,60,1,60,
        5,60,2138,8,60,10,60,12,60,2141,9,60,1,60,1,60,3,60,2145,8,60,1,
        60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,2154,8,60,10,60,12,60,2157,
        9,60,1,60,1,60,1,60,1,60,5,60,2163,8,60,10,60,12,60,2166,9,60,1,
        60,1,60,3,60,2170,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,5,
        60,2180,8,60,10,60,12,60,2183,9,60,1,60,1,60,5,60,2187,8,60,10,60,
        12,60,2190,9,60,1,60,1,60,1,60,1,60,5,60,2196,8,60,10,60,12,60,2199,
        9,60,1,60,1,60,3,60,2203,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,5,60,2213,8,60,10,60,12,60,2216,9,60,1,60,1,60,5,60,2220,8,
        60,10,60,12,60,2223,9,60,1,60,1,60,1,60,1,60,5,60,2229,8,60,10,60,
        12,60,2232,9,60,1,60,1,60,3,60,2236,8,60,1,60,1,60,1,60,5,60,2241,
        8,60,10,60,12,60,2244,9,60,1,60,1,60,1,60,1,60,5,60,2250,8,60,10,
        60,12,60,2253,9,60,1,60,1,60,3,60,2257,8,60,3,60,2259,8,60,1,61,
        1,61,1,61,3,61,2264,8,61,1,62,1,62,1,62,1,62,4,62,2270,8,62,11,62,
        12,62,2271,1,62,1,62,1,63,1,63,1,63,5,63,2279,8,63,10,63,12,63,2282,
        9,63,1,64,3,64,2285,8,64,1,64,3,64,2288,8,64,1,64,1,64,3,64,2292,
        8,64,1,64,1,64,1,64,3,64,2297,8,64,1,64,1,64,1,64,1,64,3,64,2303,
        8,64,1,64,1,64,1,64,1,64,3,64,2309,8,64,1,64,1,64,1,64,3,64,2314,
        8,64,1,64,1,64,1,64,3,64,2319,8,64,1,64,1,64,1,64,3,64,2324,8,64,
        1,64,1,64,1,64,3,64,2329,8,64,1,64,3,64,2332,8,64,1,65,1,65,1,65,
        3,65,2337,8,65,1,65,4,65,2340,8,65,11,65,12,65,2341,1,65,1,65,1,
        65,1,65,1,65,1,65,1,65,1,65,3,65,2352,8,65,1,66,1,66,3,66,2356,8,
        66,1,66,1,66,1,66,1,66,1,66,3,66,2363,8,66,1,66,1,66,1,66,3,66,2368,
        8,66,1,66,3,66,2371,8,66,1,66,1,66,1,66,3,66,2376,8,66,1,66,3,66,
        2379,8,66,1,66,1,66,3,66,2383,8,66,1,66,1,66,3,66,2387,8,66,1,67,
        1,67,1,67,1,67,5,67,2393,8,67,10,67,12,67,2396,9,67,1,68,1,68,1,
        68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
        69,3,69,2414,8,69,1,69,3,69,2417,8,69,1,69,3,69,2420,8,69,1,69,1,
        69,3,69,2424,8,69,1,69,1,69,1,70,1,70,1,70,1,70,5,70,2432,8,70,10,
        70,12,70,2435,9,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,
        2445,8,71,10,71,12,71,2448,9,71,1,71,1,71,1,72,1,72,3,72,2454,8,
        72,1,72,3,72,2457,8,72,1,72,1,72,1,72,3,72,2462,8,72,1,72,1,72,1,
        72,5,72,2467,8,72,10,72,12,72,2470,9,72,3,72,2472,8,72,1,72,3,72,
        2475,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2486,
        8,73,1,73,3,73,2489,8,73,1,73,1,73,3,73,2493,8,73,1,73,1,73,1,74,
        1,74,1,74,1,74,3,74,2501,8,74,1,74,3,74,2504,8,74,1,74,1,74,1,74,
        3,74,2509,8,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2517,8,74,1,74,
        1,74,1,74,1,74,3,74,2523,8,74,1,74,1,74,3,74,2527,8,74,1,75,1,75,
        1,75,3,75,2532,8,75,1,75,1,75,4,75,2536,8,75,11,75,12,75,2537,1,
        76,1,76,3,76,2542,8,76,1,76,5,76,2545,8,76,10,76,12,76,2548,9,76,
        1,76,1,76,3,76,2552,8,76,1,76,3,76,2555,8,76,1,76,1,76,1,76,1,76,
        1,76,3,76,2562,8,76,1,76,1,76,3,76,2566,8,76,1,76,3,76,2569,8,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,2578,8,76,10,76,12,76,2581,
        9,76,1,76,1,76,1,76,1,76,1,76,3,76,2588,8,76,1,76,3,76,2591,8,76,
        1,76,3,76,2594,8,76,1,76,1,76,5,76,2598,8,76,10,76,12,76,2601,9,
        76,1,76,1,76,1,76,3,76,2606,8,76,3,76,2608,8,76,1,76,1,76,1,76,3,
        76,2613,8,76,1,76,3,76,2616,8,76,1,76,1,76,5,76,2620,8,76,10,76,
        12,76,2623,9,76,1,76,1,76,1,76,3,76,2628,8,76,3,76,2630,8,76,1,76,
        1,76,3,76,2634,8,76,1,76,3,76,2637,8,76,1,76,3,76,2640,8,76,1,76,
        1,76,5,76,2644,8,76,10,76,12,76,2647,9,76,1,76,1,76,1,76,3,76,2652,
        8,76,1,76,3,76,2655,8,76,1,76,1,76,5,76,2659,8,76,10,76,12,76,2662,
        9,76,1,76,1,76,1,76,3,76,2667,8,76,3,76,2669,8,76,1,76,1,76,1,76,
        3,76,2674,8,76,1,76,3,76,2677,8,76,1,76,1,76,1,76,1,76,1,76,1,76,
        3,76,2685,8,76,3,76,2687,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        3,76,2696,8,76,1,76,1,76,1,76,3,76,2701,8,76,1,76,1,76,1,76,1,76,
        1,76,1,76,3,76,2709,8,76,1,76,1,76,3,76,2713,8,76,1,76,3,76,2716,
        8,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2724,8,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,3,76,2734,8,76,1,76,1,76,1,76,3,76,2739,
        8,76,1,76,3,76,2742,8,76,1,76,1,76,1,76,1,76,1,76,3,76,2749,8,76,
        1,76,1,76,3,76,2753,8,76,1,76,3,76,2756,8,76,1,76,1,76,3,76,2760,
        8,76,1,76,1,76,1,76,3,76,2765,8,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,
        2785,8,76,1,76,1,76,1,76,1,76,1,76,3,76,2792,8,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,3,76,2801,8,76,1,76,1,76,3,76,2805,8,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2817,8,76,1,76,
        3,76,2820,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2829,8,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2841,8,76,
        1,76,1,76,1,76,1,76,5,76,2847,8,76,10,76,12,76,2850,9,76,1,76,1,
        76,1,76,1,76,1,76,3,76,2857,8,76,1,76,1,76,1,76,1,76,1,76,3,76,2864,
        8,76,1,76,1,76,1,76,1,76,1,76,3,76,2871,8,76,1,76,1,76,1,76,1,76,
        1,76,3,76,2878,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,5,76,2891,8,76,10,76,12,76,2894,9,76,1,76,1,76,1,76,1,
        76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2906,8,76,1,76,1,76,1,76,1,
        76,3,76,2912,8,76,1,76,1,76,1,76,1,76,3,76,2918,8,76,1,76,1,76,1,
        76,1,76,3,76,2924,8,76,1,76,1,76,1,76,1,76,3,76,2930,8,76,1,76,1,
        76,1,76,1,76,3,76,2936,8,76,1,76,1,76,1,76,1,76,3,76,2942,8,76,1,
        77,1,77,1,77,3,77,2947,8,77,1,77,1,77,1,78,1,78,1,78,3,78,2954,8,
        78,1,78,1,78,1,79,1,79,1,79,3,79,2961,8,79,1,79,1,79,1,79,1,79,1,
        79,3,79,2968,8,79,1,79,1,79,1,79,3,79,2973,8,79,1,79,5,79,2976,8,
        79,10,79,12,79,2979,9,79,1,79,3,79,2982,8,79,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,1,80,1,81,1,81,1,81,3,81,2995,8,81,1,81,1,81,1,82,
        1,82,1,82,3,82,3002,8,82,1,82,1,82,1,83,1,83,1,83,3,83,3009,8,83,
        1,83,1,83,1,84,1,84,3,84,3015,8,84,1,84,1,84,3,84,3019,8,84,1,84,
        1,84,3,84,3023,8,84,1,84,3,84,3026,8,84,1,85,1,85,1,85,1,85,1,85,
        3,85,3033,8,85,1,85,3,85,3036,8,85,1,86,1,86,1,86,3,86,3041,8,86,
        1,86,1,86,1,87,1,87,1,87,3,87,3048,8,87,1,87,1,87,1,87,5,87,3053,
        8,87,10,87,12,87,3056,9,87,1,87,3,87,3059,8,87,1,88,1,88,1,88,3,
        88,3064,8,88,1,88,1,88,1,88,5,88,3069,8,88,10,88,12,88,3072,9,88,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,3082,8,89,10,89,12,
        89,3085,9,89,3,89,3087,8,89,1,89,1,89,1,89,3,89,3092,8,89,1,89,1,
        89,1,89,3,89,3097,8,89,5,89,3099,8,89,10,89,12,89,3102,9,89,1,89,
        1,89,1,89,3,89,3107,8,89,1,90,1,90,3,90,3111,8,90,1,90,1,90,3,90,
        3115,8,90,1,90,3,90,3118,8,90,1,90,1,90,1,90,5,90,3123,8,90,10,90,
        12,90,3126,9,90,1,91,1,91,1,91,1,91,1,91,5,91,3133,8,91,10,91,12,
        91,3136,9,91,1,92,1,92,3,92,3140,8,92,1,92,1,92,1,92,1,93,1,93,3,
        93,3147,8,93,1,93,1,93,3,93,3151,8,93,1,94,1,94,1,94,1,94,1,94,3,
        94,3158,8,94,1,94,3,94,3161,8,94,1,95,1,95,3,95,3165,8,95,1,96,1,
        96,1,96,1,97,1,97,1,97,1,97,3,97,3174,8,97,1,98,1,98,3,98,3178,8,
        98,1,98,3,98,3181,8,98,1,98,3,98,3184,8,98,1,98,1,98,1,98,1,98,3,
        98,3190,8,98,1,98,3,98,3193,8,98,1,98,1,98,1,98,1,98,3,98,3199,8,
        98,1,98,1,98,1,98,1,98,1,98,5,98,3206,8,98,10,98,12,98,3209,9,98,
        3,98,3211,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,5,98,3220,8,98,
        10,98,12,98,3223,9,98,3,98,3225,8,98,1,99,1,99,1,99,3,99,3230,8,
        99,1,99,3,99,3233,8,99,1,99,1,99,1,99,3,99,3238,8,99,1,99,1,99,1,
        99,1,99,1,99,1,99,1,99,1,99,3,99,3248,8,99,1,99,1,99,1,99,3,99,3253,
        8,99,1,99,1,99,4,99,3257,8,99,11,99,12,99,3258,3,99,3261,8,99,1,
        99,1,99,4,99,3265,8,99,11,99,12,99,3266,3,99,3269,8,99,1,99,1,99,
        1,99,1,99,3,99,3275,8,99,1,99,1,99,1,99,1,99,5,99,3281,8,99,10,99,
        12,99,3284,9,99,1,99,1,99,3,99,3288,8,99,1,99,1,99,1,99,1,99,5,99,
        3294,8,99,10,99,12,99,3297,9,99,3,99,3299,8,99,1,100,1,100,1,100,
        3,100,3304,8,100,1,100,3,100,3307,8,100,1,100,1,100,1,100,3,100,
        3312,8,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,3320,8,100,
        1,100,1,100,1,100,1,100,1,100,1,100,3,100,3328,8,100,1,100,1,100,
        1,100,1,100,3,100,3334,8,100,1,100,1,100,1,100,1,100,5,100,3340,
        8,100,10,100,12,100,3343,9,100,1,100,1,100,3,100,3347,8,100,1,100,
        1,100,1,100,1,100,5,100,3353,8,100,10,100,12,100,3356,9,100,3,100,
        3358,8,100,1,101,1,101,3,101,3362,8,101,1,101,3,101,3365,8,101,1,
        101,1,101,1,101,1,101,1,101,1,101,3,101,3373,8,101,1,101,1,101,1,
        101,1,101,3,101,3379,8,101,1,101,1,101,1,101,1,101,1,101,5,101,3386,
        8,101,10,101,12,101,3389,9,101,3,101,3391,8,101,1,102,1,102,3,102,
        3395,8,102,1,102,1,102,3,102,3399,8,102,1,102,1,102,4,102,3403,8,
        102,11,102,12,102,3404,1,102,1,102,3,102,3409,8,102,1,102,1,102,
        3,102,3413,8,102,3,102,3415,8,102,1,102,3,102,3418,8,102,1,102,3,
        102,3421,8,102,1,102,3,102,3424,8,102,1,102,1,102,4,102,3428,8,102,
        11,102,12,102,3429,1,102,1,102,3,102,3434,8,102,1,102,3,102,3437,
        8,102,1,102,3,102,3440,8,102,1,102,3,102,3443,8,102,1,102,3,102,
        3446,8,102,3,102,3448,8,102,1,103,1,103,3,103,3452,8,103,1,104,1,
        104,1,104,1,104,3,104,3458,8,104,1,104,1,104,1,104,1,104,3,104,3464,
        8,104,1,104,5,104,3467,8,104,10,104,12,104,3470,9,104,3,104,3472,
        8,104,1,105,1,105,1,105,1,105,3,105,3478,8,105,1,106,1,106,3,106,
        3482,8,106,1,107,1,107,1,107,1,107,1,107,1,107,3,107,3490,8,107,
        1,107,3,107,3493,8,107,1,108,1,108,3,108,3497,8,108,1,108,3,108,
        3500,8,108,1,108,3,108,3503,8,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,3,108,3512,8,108,1,108,1,108,3,108,3516,8,108,1,108,
        3,108,3519,8,108,1,108,1,108,3,108,3523,8,108,1,109,1,109,3,109,
        3527,8,109,1,109,3,109,3530,8,109,1,109,3,109,3533,8,109,1,109,1,
        109,1,109,3,109,3538,8,109,1,109,1,109,1,109,1,109,3,109,3544,8,
        109,5,109,3546,8,109,10,109,12,109,3549,9,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,3,109,3558,8,109,1,109,1,109,1,109,1,109,
        3,109,3564,8,109,5,109,3566,8,109,10,109,12,109,3569,9,109,1,109,
        1,109,1,109,3,109,3574,8,109,1,109,1,109,3,109,3578,8,109,1,110,
        1,110,1,110,1,110,3,110,3584,8,110,1,110,3,110,3587,8,110,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,3599,
        8,111,1,111,1,111,3,111,3603,8,111,1,111,1,111,3,111,3607,8,111,
        1,112,1,112,1,112,1,112,1,112,1,112,3,112,3615,8,112,1,112,1,112,
        3,112,3619,8,112,1,113,1,113,1,113,1,113,1,114,1,114,3,114,3627,
        8,114,1,114,3,114,3630,8,114,1,114,1,114,3,114,3634,8,114,1,114,
        3,114,3637,8,114,1,114,1,114,1,114,1,114,5,114,3643,8,114,10,114,
        12,114,3646,9,114,1,114,1,114,3,114,3650,8,114,1,114,3,114,3653,
        8,114,1,114,3,114,3656,8,114,1,115,1,115,3,115,3660,8,115,1,115,
        3,115,3663,8,115,1,115,1,115,1,115,1,115,1,115,5,115,3670,8,115,
        10,115,12,115,3673,9,115,1,115,1,115,3,115,3677,8,115,1,116,1,116,
        1,116,1,116,1,116,5,116,3684,8,116,10,116,12,116,3687,9,116,1,117,
        1,117,3,117,3691,8,117,1,118,1,118,1,118,5,118,3696,8,118,10,118,
        12,118,3699,9,118,1,119,1,119,5,119,3703,8,119,10,119,12,119,3706,
        9,119,1,119,1,119,1,119,5,119,3711,8,119,10,119,12,119,3714,9,119,
        1,119,1,119,3,119,3718,8,119,1,120,1,120,1,120,1,120,1,120,1,120,
        3,120,3726,8,120,1,120,3,120,3729,8,120,1,120,3,120,3732,8,120,1,
        120,1,120,1,120,5,120,3737,8,120,10,120,12,120,3740,9,120,3,120,
        3742,8,120,1,120,1,120,1,120,1,120,1,120,3,120,3749,8,120,1,120,
        3,120,3752,8,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,3760,
        8,120,1,121,1,121,1,121,1,121,3,121,3766,8,121,1,121,1,121,1,121,
        1,121,1,122,1,122,1,122,1,122,1,122,3,122,3777,8,122,1,123,3,123,
        3780,8,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
        3,123,3791,8,123,1,123,1,123,1,123,1,123,3,123,3797,8,123,1,123,
        1,123,3,123,3801,8,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
        1,123,1,123,3,123,3812,8,123,1,123,1,123,1,123,3,123,3817,8,123,
        3,123,3819,8,123,1,123,1,123,3,123,3823,8,123,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,3,124,3833,8,124,1,125,1,125,1,125,
        1,125,1,125,1,125,1,125,1,125,3,125,3843,8,125,1,126,1,126,5,126,
        3847,8,126,10,126,12,126,3850,9,126,1,126,1,126,3,126,3854,8,126,
        1,126,3,126,3857,8,126,1,126,3,126,3860,8,126,1,126,3,126,3863,8,
        126,1,126,3,126,3866,8,126,1,126,3,126,3869,8,126,1,126,3,126,3872,
        8,126,1,126,1,126,5,126,3876,8,126,10,126,12,126,3879,9,126,1,126,
        1,126,3,126,3883,8,126,1,126,3,126,3886,8,126,1,126,3,126,3889,8,
        126,1,126,3,126,3892,8,126,1,126,3,126,3895,8,126,1,126,3,126,3898,
        8,126,1,126,3,126,3901,8,126,3,126,3903,8,126,1,127,1,127,5,127,
        3907,8,127,10,127,12,127,3910,9,127,1,127,1,127,3,127,3914,8,127,
        1,127,3,127,3917,8,127,1,127,3,127,3920,8,127,1,127,3,127,3923,8,
        127,1,127,3,127,3926,8,127,1,127,3,127,3929,8,127,1,128,1,128,3,
        128,3933,8,128,1,128,1,128,1,129,1,129,3,129,3939,8,129,1,129,1,
        129,3,129,3943,8,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,
        130,3,130,3953,8,130,1,131,1,131,3,131,3957,8,131,1,131,1,131,5,
        131,3961,8,131,10,131,12,131,3964,9,131,1,132,1,132,1,132,1,132,
        1,132,1,132,3,132,3972,8,132,1,132,3,132,3975,8,132,1,132,1,132,
        3,132,3979,8,132,1,132,3,132,3982,8,132,1,132,1,132,3,132,3986,8,
        132,1,132,1,132,3,132,3990,8,132,1,132,3,132,3993,8,132,3,132,3995,
        8,132,1,133,1,133,1,133,1,133,5,133,4001,8,133,10,133,12,133,4004,
        9,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,3,133,
        4015,8,133,1,133,1,133,4,133,4019,8,133,11,133,12,133,4020,3,133,
        4023,8,133,1,133,1,133,4,133,4027,8,133,11,133,12,133,4028,3,133,
        4031,8,133,3,133,4033,8,133,1,134,1,134,1,134,1,134,3,134,4039,8,
        134,1,134,1,134,1,134,1,134,1,134,1,134,3,134,4047,8,134,1,135,1,
        135,1,135,1,135,1,135,1,135,3,135,4055,8,135,1,136,1,136,3,136,4059,
        8,136,1,136,1,136,3,136,4063,8,136,1,137,1,137,1,137,1,137,1,137,
        5,137,4070,8,137,10,137,12,137,4073,9,137,1,137,1,137,3,137,4077,
        8,137,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,5,139,4095,8,139,10,139,12,139,
        4098,9,139,1,140,1,140,3,140,4102,8,140,1,141,1,141,1,141,1,141,
        3,141,4108,8,141,1,141,1,141,1,141,1,141,1,141,3,141,4115,8,141,
        1,142,1,142,1,142,3,142,4120,8,142,1,143,1,143,1,143,1,143,1,143,
        5,143,4127,8,143,10,143,12,143,4130,9,143,3,143,4132,8,143,1,144,
        1,144,3,144,4136,8,144,1,145,1,145,3,145,4140,8,145,1,145,1,145,
        3,145,4144,8,145,1,145,3,145,4147,8,145,1,145,3,145,4150,8,145,1,
        145,3,145,4153,8,145,1,146,1,146,3,146,4157,8,146,1,146,1,146,3,
        146,4161,8,146,1,146,3,146,4164,8,146,1,146,3,146,4167,8,146,1,146,
        3,146,4170,8,146,1,147,1,147,1,147,1,148,1,148,3,148,4177,8,148,
        1,148,1,148,3,148,4181,8,148,1,148,1,148,1,149,1,149,1,149,1,149,
        1,150,1,150,1,150,1,150,1,150,5,150,4194,8,150,10,150,12,150,4197,
        9,150,1,150,3,150,4200,8,150,1,151,1,151,1,151,1,152,1,152,1,152,
        1,152,1,152,1,153,1,153,3,153,4212,8,153,1,153,1,153,1,153,1,153,
        5,153,4218,8,153,10,153,12,153,4221,9,153,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,3,154,4230,8,154,1,155,1,155,3,155,4234,8,155,
        1,155,3,155,4237,8,155,1,155,1,155,1,156,1,156,3,156,4243,8,156,
        1,156,3,156,4246,8,156,1,156,3,156,4249,8,156,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,3,157,4258,8,157,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,3,158,4267,8,158,1,159,1,159,1,159,1,159,1,159,
        1,159,5,159,4275,8,159,10,159,12,159,4278,9,159,1,159,3,159,4281,
        8,159,1,160,1,160,1,160,1,160,1,160,1,160,5,160,4289,8,160,10,160,
        12,160,4292,9,160,1,161,1,161,1,161,1,161,1,161,1,161,1,161,3,161,
        4301,8,161,1,162,1,162,1,162,1,163,1,163,1,163,3,163,4309,8,163,
        1,163,3,163,4312,8,163,1,164,1,164,1,164,1,164,1,164,5,164,4319,
        8,164,10,164,12,164,4322,9,164,3,164,4324,8,164,1,164,1,164,3,164,
        4328,8,164,1,164,5,164,4331,8,164,10,164,12,164,4334,9,164,1,164,
        3,164,4337,8,164,1,165,1,165,1,165,1,165,1,165,5,165,4344,8,165,
        10,165,12,165,4347,9,165,3,165,4349,8,165,1,166,1,166,1,166,1,167,
        1,167,1,167,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,5,168,4378,8,168,10,168,12,168,4381,9,168,3,168,4383,8,168,
        1,168,3,168,4386,8,168,1,169,1,169,1,170,1,170,1,171,1,171,1,172,
        1,172,1,172,1,172,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,5,173,4440,8,173,10,173,12,173,4443,9,173,1,173,1,173,3,173,
        4447,8,173,1,174,1,174,1,174,1,174,1,174,1,174,1,175,1,175,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,3,176,4475,8,176,1,177,1,177,
        1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,3,177,
        4489,8,177,1,178,1,178,1,178,5,178,4494,8,178,10,178,12,178,4497,
        9,178,1,178,3,178,4500,8,178,1,179,1,179,1,179,1,179,3,179,4506,
        8,179,1,180,1,180,1,180,1,180,1,180,1,180,3,180,4514,8,180,3,180,
        4516,8,180,1,181,1,181,1,181,1,181,1,182,1,182,1,182,1,182,1,182,
        3,182,4527,8,182,1,183,1,183,1,183,1,183,1,184,1,184,1,184,1,184,
        3,184,4537,8,184,1,185,1,185,1,185,1,185,1,185,3,185,4544,8,185,
        1,186,1,186,1,186,1,186,3,186,4550,8,186,1,187,1,187,1,187,1,187,
        1,188,1,188,3,188,4558,8,188,1,189,1,189,1,189,3,189,4563,8,189,
        1,189,1,189,1,189,1,189,5,189,4569,8,189,10,189,12,189,4572,9,189,
        1,189,1,189,1,189,5,189,4577,8,189,10,189,12,189,4580,9,189,1,189,
        1,189,1,189,5,189,4585,8,189,10,189,12,189,4588,9,189,1,189,1,189,
        1,189,5,189,4593,8,189,10,189,12,189,4596,9,189,1,189,5,189,4599,
        8,189,10,189,12,189,4602,9,189,3,189,4604,8,189,1,189,1,189,3,189,
        4608,8,189,1,190,1,190,1,190,3,190,4613,8,190,1,190,4,190,4616,8,
        190,11,190,12,190,4617,1,190,1,190,4,190,4622,8,190,11,190,12,190,
        4623,3,190,4626,8,190,1,190,1,190,1,190,1,191,1,191,1,191,1,191,
        4,191,4635,8,191,11,191,12,191,4636,1,191,5,191,4640,8,191,10,191,
        12,191,4643,9,191,1,191,1,191,4,191,4647,8,191,11,191,12,191,4648,
        3,191,4651,8,191,1,191,1,191,1,191,1,192,1,192,1,192,1,193,1,193,
        1,193,1,194,1,194,1,194,3,194,4665,8,194,1,194,1,194,4,194,4669,
        8,194,11,194,12,194,4670,1,194,1,194,1,194,3,194,4676,8,194,1,195,
        1,195,1,195,3,195,4681,8,195,1,195,1,195,4,195,4685,8,195,11,195,
        12,195,4686,1,195,1,195,1,195,1,195,1,195,3,195,4694,8,195,1,196,
        1,196,1,196,1,197,1,197,1,197,3,197,4702,8,197,1,197,1,197,1,197,
        1,197,4,197,4708,8,197,11,197,12,197,4709,1,197,1,197,1,197,3,197,
        4715,8,197,1,198,1,198,1,198,1,198,3,198,4721,8,198,1,198,3,198,
        4724,8,198,1,198,1,198,1,198,1,198,1,198,1,198,3,198,4732,8,198,
        1,199,1,199,1,199,1,199,1,199,3,199,4739,8,199,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,3,200,4748,8,200,1,200,3,200,4751,8,200,
        1,201,1,201,1,201,1,201,1,201,1,201,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,5,202,4766,8,202,10,202,12,202,4769,9,202,1,202,1,202,
        1,203,1,203,1,203,3,203,4776,8,203,1,203,1,203,1,203,1,203,1,203,
        1,203,3,203,4784,8,203,1,204,1,204,3,204,4788,8,204,1,204,1,204,
        1,205,1,205,1,205,3,205,4795,8,205,1,205,1,205,4,205,4799,8,205,
        11,205,12,205,4800,1,206,1,206,1,206,1,206,4,206,4807,8,206,11,206,
        12,206,4808,1,207,1,207,1,207,1,207,1,207,5,207,4816,8,207,10,207,
        12,207,4819,9,207,1,207,1,207,1,207,3,207,4824,8,207,1,207,1,207,
        1,207,5,207,4829,8,207,10,207,12,207,4832,9,207,1,207,1,207,1,207,
        1,207,3,207,4838,8,207,1,207,5,207,4841,8,207,10,207,12,207,4844,
        9,207,3,207,4846,8,207,3,207,4848,8,207,1,207,1,207,4,207,4852,8,
        207,11,207,12,207,4853,3,207,4856,8,207,1,207,1,207,5,207,4860,8,
        207,10,207,12,207,4863,9,207,3,207,4865,8,207,1,208,1,208,1,208,
        1,208,1,208,5,208,4872,8,208,10,208,12,208,4875,9,208,1,208,1,208,
        1,208,3,208,4880,8,208,1,208,1,208,1,208,5,208,4885,8,208,10,208,
        12,208,4888,9,208,1,208,1,208,1,208,1,208,3,208,4894,8,208,1,208,
        5,208,4897,8,208,10,208,12,208,4900,9,208,3,208,4902,8,208,3,208,
        4904,8,208,1,208,1,208,4,208,4908,8,208,11,208,12,208,4909,3,208,
        4912,8,208,1,208,1,208,5,208,4916,8,208,10,208,12,208,4919,9,208,
        3,208,4921,8,208,1,209,1,209,1,209,3,209,4926,8,209,1,209,1,209,
        1,209,5,209,4931,8,209,10,209,12,209,4934,9,209,1,210,1,210,1,210,
        1,210,5,210,4940,8,210,10,210,12,210,4943,9,210,1,210,1,210,3,210,
        4947,8,210,1,210,1,210,1,210,1,210,1,210,5,210,4954,8,210,10,210,
        12,210,4957,9,210,1,210,1,210,1,210,1,210,3,210,4963,8,210,1,210,
        5,210,4966,8,210,10,210,12,210,4969,9,210,3,210,4971,8,210,3,210,
        4973,8,210,1,210,1,210,1,210,1,210,5,210,4979,8,210,10,210,12,210,
        4982,9,210,3,210,4984,8,210,1,210,1,210,1,210,1,210,1,210,1,210,
        3,210,4992,8,210,1,210,1,210,1,210,3,210,4997,8,210,1,210,1,210,
        1,210,3,210,5002,8,210,5,210,5004,8,210,10,210,12,210,5007,9,210,
        1,210,1,210,1,210,3,210,5012,8,210,1,210,1,210,1,210,3,210,5017,
        8,210,5,210,5019,8,210,10,210,12,210,5022,9,210,1,210,1,210,1,210,
        3,210,5027,8,210,3,210,5029,8,210,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,5,211,5038,8,211,10,211,12,211,5041,9,211,3,211,5043,
        8,211,1,211,1,211,1,211,5,211,5048,8,211,10,211,12,211,5051,9,211,
        3,211,5053,8,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        5,212,5063,8,212,10,212,12,212,5066,9,212,1,212,1,212,1,212,3,212,
        5071,8,212,1,213,1,213,1,213,1,213,1,213,5,213,5078,8,213,10,213,
        12,213,5081,9,213,1,214,1,214,1,214,1,214,5,214,5087,8,214,10,214,
        12,214,5090,9,214,1,214,1,214,3,214,5094,8,214,1,214,1,214,1,214,
        1,214,1,214,5,214,5101,8,214,10,214,12,214,5104,9,214,1,214,1,214,
        1,214,3,214,5109,8,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        5,214,5118,8,214,10,214,12,214,5121,9,214,1,214,1,214,1,214,1,214,
        5,214,5127,8,214,10,214,12,214,5130,9,214,1,214,1,214,1,214,3,214,
        5135,8,214,1,214,1,214,1,214,3,214,5140,8,214,5,214,5142,8,214,10,
        214,12,214,5145,9,214,3,214,5147,8,214,1,215,1,215,1,215,1,215,1,
        215,1,215,1,215,1,215,5,215,5157,8,215,10,215,12,215,5160,9,215,
        1,216,1,216,1,216,1,216,3,216,5166,8,216,1,216,1,216,1,216,3,216,
        5171,8,216,1,217,1,217,1,217,1,218,1,218,1,218,1,218,1,218,1,218,
        1,218,1,218,1,218,1,218,3,218,5186,8,218,1,218,1,218,1,218,1,218,
        1,218,3,218,5193,8,218,1,218,1,218,1,218,1,218,1,218,1,218,3,218,
        5201,8,218,1,218,3,218,5204,8,218,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,3,219,5214,8,219,1,220,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,3,220,5224,8,220,1,221,1,221,1,221,1,221,1,221,
        1,221,1,221,1,221,3,221,5234,8,221,1,222,1,222,1,222,1,223,1,223,
        1,223,1,223,1,223,3,223,5244,8,223,1,224,1,224,3,224,5248,8,224,
        1,224,1,224,3,224,5252,8,224,1,224,1,224,1,224,1,224,1,224,1,224,
        1,224,1,224,3,224,5262,8,224,1,224,1,224,1,224,3,224,5267,8,224,
        1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,1,224,1,224,3,224,5331,8,224,1,225,
        1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
        1,225,1,225,1,225,1,225,3,225,5349,8,225,1,226,1,226,1,226,1,226,
        1,227,1,227,3,227,5357,8,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,5,227,5367,8,227,10,227,12,227,5370,9,227,1,227,1,227,
        1,227,1,227,3,227,5376,8,227,3,227,5378,8,227,1,227,1,227,1,227,
        1,227,1,227,1,227,5,227,5386,8,227,10,227,12,227,5389,9,227,3,227,
        5391,8,227,1,228,1,228,1,228,1,228,5,228,5397,8,228,10,228,12,228,
        5400,9,228,1,229,1,229,1,229,1,229,3,229,5406,8,229,1,230,1,230,
        3,230,5410,8,230,1,230,1,230,1,230,3,230,5415,8,230,1,231,1,231,
        3,231,5419,8,231,1,231,1,231,1,231,3,231,5424,8,231,1,231,3,231,
        5427,8,231,1,231,3,231,5430,8,231,1,232,1,232,1,232,1,232,1,232,
        1,232,1,232,3,232,5439,8,232,1,233,1,233,3,233,5443,8,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,1,234,1,234,1,234,1,234,1,234,
        1,234,1,235,1,235,1,235,1,235,1,236,1,236,1,236,1,236,1,236,3,236,
        5467,8,236,1,236,1,236,1,236,1,236,1,236,3,236,5474,8,236,5,236,
        5476,8,236,10,236,12,236,5479,9,236,1,236,1,236,1,236,1,236,3,236,
        5485,8,236,1,236,1,236,1,236,1,236,1,236,3,236,5492,8,236,1,236,
        3,236,5495,8,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,
        1,236,1,236,1,236,1,236,5,236,5509,8,236,10,236,12,236,5512,9,236,
        3,236,5514,8,236,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
        3,237,5524,8,237,1,237,1,237,3,237,5528,8,237,1,237,1,237,1,237,
        1,237,3,237,5534,8,237,1,237,3,237,5537,8,237,1,237,1,237,1,237,
        3,237,5542,8,237,1,237,1,237,3,237,5546,8,237,1,237,1,237,1,237,
        1,237,1,237,3,237,5553,8,237,1,237,3,237,5556,8,237,1,237,1,237,
        1,237,1,237,3,237,5562,8,237,1,237,1,237,1,237,1,237,1,237,1,237,
        1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
        1,237,1,237,1,237,1,237,1,237,3,237,5586,8,237,1,237,3,237,5589,
        8,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
        3,237,5601,8,237,1,237,3,237,5604,8,237,1,237,1,237,1,237,1,237,
        1,237,1,237,1,237,1,237,3,237,5614,8,237,1,237,1,237,1,237,1,237,
        1,237,1,237,3,237,5622,8,237,1,237,1,237,3,237,5626,8,237,1,237,
        1,237,1,237,1,237,1,237,3,237,5633,8,237,1,237,3,237,5636,8,237,
        1,237,1,237,1,237,1,237,1,237,5,237,5643,8,237,10,237,12,237,5646,
        9,237,1,237,1,237,1,237,3,237,5651,8,237,1,237,1,237,1,237,1,237,
        3,237,5657,8,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
        3,237,5667,8,237,3,237,5669,8,237,1,238,1,238,1,238,1,238,3,238,
        5675,8,238,1,238,3,238,5678,8,238,1,238,3,238,5681,8,238,1,239,1,
        239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,3,239,5693,8,
        239,1,239,3,239,5696,8,239,1,240,1,240,1,240,1,240,3,240,5702,8,
        240,1,241,3,241,5705,8,241,1,241,1,241,1,241,1,241,1,241,1,241,3,
        241,5713,8,241,1,241,1,241,1,241,1,241,1,241,1,241,3,241,5721,8,
        241,1,242,1,242,1,242,1,242,3,242,5727,8,242,1,242,1,242,3,242,5731,
        8,242,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
        1,243,1,243,3,243,5745,8,243,1,244,1,244,1,244,1,245,1,245,1,245,
        1,245,1,245,5,245,5755,8,245,10,245,12,245,5758,9,245,1,245,1,245,
        1,245,1,245,3,245,5764,8,245,1,245,3,245,5767,8,245,1,245,1,245,
        1,245,1,246,1,246,3,246,5774,8,246,1,246,1,246,1,246,5,246,5779,
        8,246,10,246,12,246,5782,9,246,1,247,1,247,3,247,5786,8,247,1,247,
        4,247,5789,8,247,11,247,12,247,5790,1,247,3,247,5794,8,247,1,248,
        1,248,1,248,1,248,1,248,1,248,1,248,5,248,5803,8,248,10,248,12,248,
        5806,9,248,1,249,1,249,1,249,1,249,1,250,1,250,1,251,1,251,3,251,
        5816,8,251,1,251,1,251,1,251,1,251,3,251,5822,8,251,1,252,1,252,
        1,252,3,252,5827,8,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
        1,252,1,252,1,252,1,252,3,252,5840,8,252,3,252,5842,8,252,1,252,
        1,252,1,252,3,252,5847,8,252,1,252,1,252,3,252,5851,8,252,1,252,
        3,252,5854,8,252,3,252,5856,8,252,1,253,1,253,1,253,1,253,1,253,
        3,253,5863,8,253,1,254,1,254,1,254,1,254,1,254,3,254,5870,8,254,
        1,254,3,254,5873,8,254,1,254,3,254,5876,8,254,1,254,1,254,1,254,
        1,254,3,254,5882,8,254,1,254,1,254,3,254,5886,8,254,1,255,1,255,
        1,255,1,255,3,255,5892,8,255,1,256,1,256,1,256,1,256,3,256,5898,
        8,256,1,256,1,256,1,257,1,257,1,257,1,258,1,258,1,258,1,259,1,259,
        1,259,3,259,5911,8,259,1,259,1,259,1,259,3,259,5916,8,259,1,259,
        1,259,1,259,1,259,5,259,5922,8,259,10,259,12,259,5925,9,259,3,259,
        5927,8,259,1,260,1,260,1,260,3,260,5932,8,260,1,260,1,260,1,260,
        3,260,5937,8,260,1,260,1,260,1,260,1,260,5,260,5943,8,260,10,260,
        12,260,5946,9,260,3,260,5948,8,260,1,261,1,261,1,261,1,261,1,261,
        1,261,3,261,5956,8,261,1,262,1,262,3,262,5960,8,262,1,262,1,262,
        1,262,1,262,1,262,1,262,1,262,1,262,1,262,5,262,5971,8,262,10,262,
        12,262,5974,9,262,1,262,1,262,1,262,3,262,5979,8,262,1,262,1,262,
        1,262,1,262,1,262,1,262,1,262,1,262,5,262,5989,8,262,10,262,12,262,
        5992,9,262,3,262,5994,8,262,1,263,1,263,1,264,1,264,1,264,1,264,
        1,264,3,264,6003,8,264,1,264,1,264,1,264,3,264,6008,8,264,1,265,
        1,265,1,265,1,265,3,265,6014,8,265,1,266,1,266,1,267,1,267,3,267,
        6020,8,267,1,268,1,268,1,268,3,268,6025,8,268,3,268,6027,8,268,1,
        268,1,268,1,268,3,268,6032,8,268,3,268,6034,8,268,1,269,1,269,3,
        269,6038,8,269,1,269,1,269,1,269,1,269,3,269,6044,8,269,1,269,3,
        269,6047,8,269,1,269,3,269,6050,8,269,1,270,1,270,1,270,1,270,1,
        270,1,270,3,270,6058,8,270,1,271,1,271,1,272,1,272,1,272,1,272,3,
        272,6066,8,272,1,273,1,273,3,273,6070,8,273,1,274,1,274,1,275,1,
        275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,
        1,275,1,275,4,275,6088,8,275,11,275,12,275,6089,1,276,1,276,1,276,
        1,276,1,276,3,276,6097,8,276,3,276,6099,8,276,1,277,1,277,1,277,
        4,277,6104,8,277,11,277,12,277,6105,3,277,6108,8,277,1,278,1,278,
        3,278,6112,8,278,1,279,1,279,1,279,3,279,6117,8,279,1,280,1,280,
        1,280,1,280,1,280,1,280,1,280,1,280,1,280,3,280,6128,8,280,1,281,
        1,281,1,281,3,281,6133,8,281,1,282,1,282,1,283,1,283,3,283,6139,
        8,283,1,284,3,284,6142,8,284,1,284,1,284,3,284,6146,8,284,1,284,
        4,284,6149,8,284,11,284,12,284,6150,1,284,3,284,6154,8,284,1,284,
        1,284,3,284,6158,8,284,1,284,1,284,3,284,6162,8,284,3,284,6164,8,
        284,1,285,1,285,1,286,3,286,6169,8,286,1,286,1,286,1,287,3,287,6174,
        8,287,1,287,1,287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
        1,288,3,288,6187,8,288,1,288,3,288,6190,8,288,1,289,1,289,3,289,
        6194,8,289,1,289,3,289,6197,8,289,1,289,3,289,6200,8,289,1,289,1,
        289,1,289,3,289,6205,8,289,1,289,1,289,1,289,3,289,6210,8,289,1,
        289,1,289,1,289,3,289,6215,8,289,1,289,3,289,6218,8,289,1,289,1,
        289,1,289,3,289,6223,8,289,1,289,3,289,6226,8,289,1,289,1,289,1,
        289,1,289,3,289,6232,8,289,1,289,3,289,6235,8,289,1,289,1,289,3,
        289,6239,8,289,1,289,5,289,6242,8,289,10,289,12,289,6245,9,289,1,
        289,1,289,3,289,6249,8,289,1,289,5,289,6252,8,289,10,289,12,289,
        6255,9,289,1,289,1,289,3,289,6259,8,289,1,289,3,289,6262,8,289,1,
        289,5,289,6265,8,289,10,289,12,289,6268,9,289,1,289,1,289,3,289,
        6272,8,289,1,289,5,289,6275,8,289,10,289,12,289,6278,9,289,1,289,
        1,289,1,289,3,289,6283,8,289,1,289,1,289,1,289,3,289,6288,8,289,
        1,289,1,289,1,289,3,289,6293,8,289,1,289,1,289,1,289,3,289,6298,
        8,289,1,289,3,289,6301,8,289,1,289,1,289,1,289,3,289,6306,8,289,
        1,289,1,289,3,289,6310,8,289,1,289,1,289,3,289,6314,8,289,1,290,
        1,290,1,290,1,290,5,290,6320,8,290,10,290,12,290,6323,9,290,1,290,
        1,290,1,291,1,291,3,291,6329,8,291,1,291,1,291,3,291,6333,8,291,
        1,291,1,291,1,291,3,291,6338,8,291,1,291,1,291,1,291,3,291,6343,
        8,291,1,291,1,291,3,291,6347,8,291,3,291,6349,8,291,1,291,3,291,
        6352,8,291,1,292,1,292,1,292,1,292,1,293,1,293,1,293,1,293,1,293,
        1,293,1,294,1,294,1,294,1,294,3,294,6368,8,294,1,294,1,294,1,295,
        1,295,1,295,5,295,6375,8,295,10,295,12,295,6378,9,295,1,296,1,296,
        1,296,5,296,6383,8,296,10,296,12,296,6386,9,296,1,297,1,297,1,297,
        1,297,5,297,6392,8,297,10,297,12,297,6395,9,297,1,297,1,297,1,298,
        1,298,1,298,5,298,6402,8,298,10,298,12,298,6405,9,298,1,299,1,299,
        1,299,5,299,6410,8,299,10,299,12,299,6413,9,299,1,300,1,300,1,300,
        5,300,6418,8,300,10,300,12,300,6421,9,300,1,301,1,301,1,301,5,301,
        6426,8,301,10,301,12,301,6429,9,301,1,302,1,302,1,302,5,302,6434,
        8,302,10,302,12,302,6437,9,302,1,303,1,303,1,303,1,303,1,303,1,303,
        1,303,1,303,1,303,3,303,6448,8,303,1,303,1,303,1,303,1,303,1,303,
        3,303,6455,8,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,
        1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,3,303,6474,
        8,303,1,304,1,304,1,304,3,304,6479,8,304,1,304,3,304,6482,8,304,
        1,304,1,304,1,304,3,304,6487,8,304,1,304,3,304,6490,8,304,1,305,
        1,305,3,305,6494,8,305,1,306,1,306,1,306,1,307,1,307,1,307,1,307,
        1,308,1,308,1,308,3,308,6506,8,308,1,309,1,309,1,309,3,309,6511,
        8,309,1,310,1,310,1,310,1,310,1,310,1,310,3,310,6519,8,310,1,310,
        1,310,1,310,1,310,1,310,3,310,6526,8,310,1,310,1,310,1,310,3,310,
        6531,8,310,1,311,1,311,1,311,3,311,6536,8,311,1,311,1,311,1,311,
        1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,
        1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,
        1,311,1,311,1,311,1,311,4,311,6567,8,311,11,311,12,311,6568,1,311,
        1,311,3,311,6573,8,311,1,311,1,311,1,311,1,311,4,311,6579,8,311,
        11,311,12,311,6580,1,311,1,311,3,311,6585,8,311,1,311,1,311,1,311,
        1,311,1,311,1,311,1,311,3,311,6594,8,311,1,311,1,311,1,311,1,311,
        1,311,1,311,3,311,6602,8,311,1,311,1,311,1,311,3,311,6607,8,311,
        1,311,1,311,1,311,1,311,1,311,1,311,3,311,6615,8,311,1,311,1,311,
        1,311,3,311,6620,8,311,1,311,1,311,1,311,3,311,6625,8,311,3,311,
        6627,8,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,3,311,6636,
        8,311,1,311,1,311,1,311,3,311,6641,8,311,1,311,1,311,1,311,1,311,
        1,311,1,311,3,311,6649,8,311,1,311,1,311,1,311,3,311,6654,8,311,
        1,311,1,311,1,311,1,311,1,311,1,311,3,311,6662,8,311,1,311,1,311,
        1,311,1,311,1,311,1,311,3,311,6670,8,311,1,311,3,311,6673,8,311,
        1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,3,311,6683,8,311,
        1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,
        1,311,1,311,1,311,1,311,1,311,3,311,6701,8,311,1,311,1,311,1,311,
        1,311,3,311,6707,8,311,1,311,1,311,3,311,6711,8,311,1,311,1,311,
        1,311,1,311,3,311,6717,8,311,1,311,1,311,3,311,6721,8,311,1,311,
        1,311,3,311,6725,8,311,1,312,1,312,1,312,1,312,1,312,1,313,1,313,
        1,313,1,313,5,313,6736,8,313,10,313,12,313,6739,9,313,1,313,1,313,
        1,313,1,313,1,313,3,313,6746,8,313,1,314,1,314,3,314,6750,8,314,
        1,315,1,315,1,315,3,315,6755,8,315,1,315,1,315,1,315,3,315,6760,
        8,315,1,315,1,315,1,315,1,315,3,315,6766,8,315,1,315,1,315,1,315,
        3,315,6771,8,315,1,315,1,315,3,315,6775,8,315,1,315,1,315,1,315,
        3,315,6780,8,315,1,315,1,315,1,315,3,315,6785,8,315,1,315,1,315,
        1,315,3,315,6790,8,315,1,315,1,315,1,315,1,315,1,315,1,315,5,315,
        6798,8,315,10,315,12,315,6801,9,315,3,315,6803,8,315,1,315,1,315,
        3,315,6807,8,315,1,315,1,315,3,315,6811,8,315,1,316,1,316,1,316,
        1,316,1,316,3,316,6818,8,316,1,316,1,316,3,316,6822,8,316,1,316,
        1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,
        1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,
        1,316,1,316,1,316,1,316,3,316,6851,8,316,1,317,1,317,1,317,3,317,
        6856,8,317,1,317,1,317,3,317,6860,8,317,1,318,3,318,6863,8,318,1,
        318,3,318,6866,8,318,1,318,3,318,6869,8,318,1,318,3,318,6872,8,318,
        1,319,1,319,1,320,1,320,1,320,1,321,1,321,1,322,1,322,3,322,6883,
        8,322,1,323,1,323,1,323,1,323,1,323,1,324,1,324,1,324,1,324,1,324,
        1,324,1,324,3,324,6897,8,324,1,325,1,325,1,325,1,325,1,325,5,325,
        6904,8,325,10,325,12,325,6907,9,325,1,326,1,326,1,326,1,326,1,326,
        1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,
        1,326,1,326,1,326,1,326,1,326,1,326,1,326,3,326,6932,8,326,1,327,
        1,327,1,327,1,327,1,327,1,328,1,328,1,328,1,328,3,328,6943,8,328,
        1,328,1,328,1,328,1,328,1,328,3,328,6950,8,328,5,328,6952,8,328,
        10,328,12,328,6955,9,328,1,329,1,329,1,329,1,329,3,329,6961,8,329,
        1,330,1,330,1,330,1,330,1,330,1,330,3,330,6969,8,330,1,330,1,330,
        1,330,3,330,6974,8,330,1,330,1,330,1,330,1,330,5,330,6980,8,330,
        10,330,12,330,6983,9,330,1,331,1,331,1,331,3,331,6988,8,331,1,331,
        1,331,1,331,1,331,1,331,1,331,1,331,1,331,3,331,6998,8,331,1,331,
        1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,3,331,
        7011,8,331,1,331,1,331,1,331,1,331,3,331,7017,8,331,1,331,1,331,
        1,331,1,331,3,331,7023,8,331,1,331,1,331,1,331,1,331,1,331,1,331,
        1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,3,331,7039,8,331,
        1,331,1,331,1,331,1,331,3,331,7045,8,331,1,331,1,331,1,331,1,331,
        1,331,1,331,1,331,5,331,7054,8,331,10,331,12,331,7057,9,331,1,332,
        1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,
        1,332,1,332,5,332,7073,8,332,10,332,12,332,7076,9,332,1,332,1,332,
        1,332,1,332,1,332,1,332,1,332,4,332,7085,8,332,11,332,12,332,7086,
        1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,
        1,332,1,332,1,332,1,332,3,332,7104,8,332,1,332,1,332,1,332,1,332,
        1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,
        5,332,7121,8,332,10,332,12,332,7124,9,332,1,333,1,333,1,334,1,334,
        1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,
        1,334,3,334,7142,8,334,1,335,1,335,1,335,1,335,1,335,1,335,1,335,
        3,335,7151,8,335,1,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,
        7160,8,336,1,337,1,337,1,338,1,338,1,338,1,338,1,338,3,338,7169,
        8,338,1,339,1,339,1,340,1,340,1,341,1,341,1,342,1,342,1,343,1,343,
        1,344,1,344,1,345,1,345,1,345,0,3,660,662,664,346,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
        262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
        294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
        326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,
        358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,
        390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,
        422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,
        454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,
        486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,
        518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,
        550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,
        582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,
        614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,
        646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,
        678,680,682,684,686,688,690,0,142,2,0,37,37,146,146,2,0,518,518,
        524,524,3,0,66,66,154,154,175,175,5,0,40,40,375,375,441,441,445,
        445,510,510,4,0,40,40,408,408,516,516,594,594,2,0,501,501,1135,1135,
        2,0,75,75,137,137,2,0,14,14,325,325,3,0,42,42,82,82,178,178,2,0,
        422,422,542,542,3,0,493,493,633,633,641,641,2,0,383,383,447,447,
        2,0,343,343,461,461,2,0,18,18,1111,1111,2,0,186,186,1111,1111,3,
        0,341,341,431,431,586,586,2,0,446,446,656,656,2,0,508,508,666,666,
        3,0,77,77,81,81,121,121,3,0,40,40,393,393,419,419,3,0,40,40,389,
        389,769,769,2,0,620,620,655,655,2,0,78,78,88,88,3,0,424,424,533,
        533,596,596,2,0,66,66,154,154,1,0,347,348,1,0,1125,1126,2,0,1135,
        1135,1143,1143,2,0,78,78,379,379,3,0,418,418,456,456,508,508,2,0,
        40,40,1125,1126,7,0,40,40,361,361,363,363,393,393,419,419,557,557,
        1143,1143,2,0,501,501,517,517,1,0,1126,1127,2,0,5,5,49,49,4,0,40,
        40,375,375,441,441,445,445,2,0,25,25,29,29,2,0,12,12,169,169,2,0,
        186,186,660,660,3,0,40,40,375,375,441,441,2,0,20,20,140,140,3,0,
        41,41,72,72,102,102,2,0,102,102,365,365,2,0,356,356,415,415,2,0,
        97,97,584,584,2,0,41,41,102,102,2,0,6,6,47,47,2,0,182,182,652,652,
        4,0,418,418,456,456,507,507,546,546,2,0,418,418,507,507,2,0,13,13,
        43,43,3,0,63,63,75,75,180,180,2,0,33,33,80,80,2,0,93,93,144,144,
        2,0,6,6,47,48,1,0,609,610,2,0,166,166,680,680,2,0,427,427,592,592,
        2,0,220,220,464,464,5,0,103,103,469,470,472,472,476,484,559,559,
        4,0,466,467,471,471,473,474,560,560,3,0,104,104,465,465,475,475,
        2,0,449,449,611,611,2,0,605,605,607,607,2,0,335,335,612,612,2,0,
        87,87,575,575,2,0,49,49,381,381,3,0,30,30,58,58,173,173,3,0,127,
        127,166,166,425,425,2,0,99,99,176,176,3,0,351,351,597,597,1093,1093,
        2,0,38,38,654,654,2,0,111,111,461,461,2,0,411,411,552,552,4,0,200,
        200,202,202,208,208,621,621,2,0,1095,1095,1111,1111,2,0,336,336,
        561,561,2,0,65,65,77,77,6,0,127,127,166,166,171,171,404,404,425,
        425,654,654,2,0,500,500,617,617,2,0,401,401,658,658,2,0,127,127,
        425,425,3,0,78,78,89,89,439,439,3,0,427,427,461,461,592,592,2,0,
        617,617,653,653,2,0,367,367,551,551,6,0,220,220,398,398,400,400,
        426,426,558,558,598,598,2,0,43,44,59,59,3,0,411,411,535,535,862,
        862,2,0,453,453,635,635,10,0,350,350,358,358,369,371,378,378,494,
        494,502,502,622,622,629,629,813,813,981,981,2,0,34,34,163,163,2,
        0,113,113,972,972,11,0,350,350,358,358,369,371,378,378,494,494,502,
        502,576,576,622,622,629,629,813,813,981,981,1,0,1148,1149,4,0,366,
        366,764,775,1135,1135,1143,1144,3,0,1125,1127,1136,1136,1138,1138,
        2,0,60,60,172,172,2,0,112,112,1139,1139,5,0,24,24,216,218,225,225,
        227,230,505,505,2,0,24,24,217,217,2,0,24,24,216,216,1,0,190,201,
        3,0,177,177,189,189,595,595,2,0,205,210,419,419,6,0,211,211,222,
        222,224,224,226,226,233,233,339,340,4,0,212,215,220,221,223,223,
        337,337,2,0,149,149,231,231,2,0,453,453,780,788,2,0,220,220,505,
        505,5,0,194,194,200,200,211,212,214,214,453,453,2,0,177,177,595,
        595,1,0,1084,1085,2,0,507,507,1087,1087,2,0,306,309,313,313,2,0,
        35,35,304,307,1,0,316,317,3,0,16,16,91,91,170,170,2,0,216,216,220,
        220,2,0,211,212,214,214,3,0,13,13,43,43,970,970,3,0,277,277,289,
        290,300,300,3,0,278,280,296,299,301,303,2,0,286,286,288,288,2,0,
        284,284,287,287,2,0,282,283,293,295,2,0,129,129,584,584,2,0,421,
        421,543,543,2,0,522,522,536,536,2,0,110,110,1114,1114,3,0,60,60,
        172,172,645,645,2,0,133,133,145,145,3,0,6,6,328,328,601,601,3,0,
        110,110,1107,1108,1114,1115,1,0,1104,1110,2,0,220,220,723,763,1,
        0,776,779,1,0,680,688,1,0,672,679,3,0,211,215,228,228,231,231,40,
        0,17,17,34,34,46,46,56,56,70,70,76,76,100,100,106,107,113,113,117,
        117,120,120,153,153,163,163,233,233,277,281,285,285,289,290,296,
        303,323,420,422,445,447,542,544,576,578,619,621,630,632,639,641,
        654,657,658,660,665,667,671,690,698,703,705,707,714,716,722,769,
        769,813,813,852,852,976,976,981,981,1083,1094,1151,1152,23,0,37,
        37,93,93,144,144,146,146,211,213,215,215,245,276,281,284,286,288,
        291,295,315,315,446,446,656,656,672,679,716,716,780,780,783,812,
        814,851,853,975,977,980,982,1082,1084,1086,1110,1110,8472,0,693,
        1,0,0,0,2,712,1,0,0,0,4,733,1,0,0,0,6,735,1,0,0,0,8,778,1,0,0,0,
        10,790,1,0,0,0,12,801,1,0,0,0,14,818,1,0,0,0,16,823,1,0,0,0,18,835,
        1,0,0,0,20,862,1,0,0,0,22,871,1,0,0,0,24,873,1,0,0,0,26,885,1,0,
        0,0,28,915,1,0,0,0,30,963,1,0,0,0,32,1014,1,0,0,0,34,1040,1,0,0,
        0,36,1070,1,0,0,0,38,1085,1,0,0,0,40,1194,1,0,0,0,42,1196,1,0,0,
        0,44,1214,1,0,0,0,46,1275,1,0,0,0,48,1298,1,0,0,0,50,1304,1,0,0,
        0,52,1326,1,0,0,0,54,1328,1,0,0,0,56,1330,1,0,0,0,58,1369,1,0,0,
        0,60,1428,1,0,0,0,62,1449,1,0,0,0,64,1456,1,0,0,0,66,1458,1,0,0,
        0,68,1502,1,0,0,0,70,1508,1,0,0,0,72,1510,1,0,0,0,74,1531,1,0,0,
        0,76,1538,1,0,0,0,78,1540,1,0,0,0,80,1573,1,0,0,0,82,1576,1,0,0,
        0,84,1581,1,0,0,0,86,1607,1,0,0,0,88,1623,1,0,0,0,90,1625,1,0,0,
        0,92,1641,1,0,0,0,94,1643,1,0,0,0,96,1703,1,0,0,0,98,1774,1,0,0,
        0,100,1776,1,0,0,0,102,1804,1,0,0,0,104,1812,1,0,0,0,106,1842,1,
        0,0,0,108,2006,1,0,0,0,110,2008,1,0,0,0,112,2010,1,0,0,0,114,2013,
        1,0,0,0,116,2087,1,0,0,0,118,2110,1,0,0,0,120,2258,1,0,0,0,122,2263,
        1,0,0,0,124,2265,1,0,0,0,126,2275,1,0,0,0,128,2331,1,0,0,0,130,2351,
        1,0,0,0,132,2353,1,0,0,0,134,2388,1,0,0,0,136,2397,1,0,0,0,138,2404,
        1,0,0,0,140,2427,1,0,0,0,142,2436,1,0,0,0,144,2451,1,0,0,0,146,2476,
        1,0,0,0,148,2496,1,0,0,0,150,2528,1,0,0,0,152,2941,1,0,0,0,154,2943,
        1,0,0,0,156,2950,1,0,0,0,158,2957,1,0,0,0,160,2983,1,0,0,0,162,2991,
        1,0,0,0,164,2998,1,0,0,0,166,3005,1,0,0,0,168,3012,1,0,0,0,170,3027,
        1,0,0,0,172,3037,1,0,0,0,174,3044,1,0,0,0,176,3060,1,0,0,0,178,3106,
        1,0,0,0,180,3108,1,0,0,0,182,3127,1,0,0,0,184,3137,1,0,0,0,186,3144,
        1,0,0,0,188,3152,1,0,0,0,190,3164,1,0,0,0,192,3166,1,0,0,0,194,3173,
        1,0,0,0,196,3175,1,0,0,0,198,3226,1,0,0,0,200,3300,1,0,0,0,202,3359,
        1,0,0,0,204,3447,1,0,0,0,206,3451,1,0,0,0,208,3471,1,0,0,0,210,3473,
        1,0,0,0,212,3481,1,0,0,0,214,3489,1,0,0,0,216,3494,1,0,0,0,218,3524,
        1,0,0,0,220,3579,1,0,0,0,222,3588,1,0,0,0,224,3608,1,0,0,0,226,3620,
        1,0,0,0,228,3624,1,0,0,0,230,3657,1,0,0,0,232,3678,1,0,0,0,234,3688,
        1,0,0,0,236,3692,1,0,0,0,238,3717,1,0,0,0,240,3759,1,0,0,0,242,3761,
        1,0,0,0,244,3776,1,0,0,0,246,3822,1,0,0,0,248,3832,1,0,0,0,250,3842,
        1,0,0,0,252,3902,1,0,0,0,254,3904,1,0,0,0,256,3930,1,0,0,0,258,3936,
        1,0,0,0,260,3952,1,0,0,0,262,3956,1,0,0,0,264,3994,1,0,0,0,266,4032,
        1,0,0,0,268,4046,1,0,0,0,270,4054,1,0,0,0,272,4058,1,0,0,0,274,4064,
        1,0,0,0,276,4078,1,0,0,0,278,4081,1,0,0,0,280,4099,1,0,0,0,282,4103,
        1,0,0,0,284,4119,1,0,0,0,286,4121,1,0,0,0,288,4133,1,0,0,0,290,4137,
        1,0,0,0,292,4154,1,0,0,0,294,4171,1,0,0,0,296,4174,1,0,0,0,298,4184,
        1,0,0,0,300,4188,1,0,0,0,302,4201,1,0,0,0,304,4204,1,0,0,0,306,4209,
        1,0,0,0,308,4229,1,0,0,0,310,4231,1,0,0,0,312,4248,1,0,0,0,314,4257,
        1,0,0,0,316,4266,1,0,0,0,318,4268,1,0,0,0,320,4282,1,0,0,0,322,4293,
        1,0,0,0,324,4302,1,0,0,0,326,4305,1,0,0,0,328,4313,1,0,0,0,330,4338,
        1,0,0,0,332,4350,1,0,0,0,334,4353,1,0,0,0,336,4385,1,0,0,0,338,4387,
        1,0,0,0,340,4389,1,0,0,0,342,4391,1,0,0,0,344,4393,1,0,0,0,346,4446,
        1,0,0,0,348,4448,1,0,0,0,350,4454,1,0,0,0,352,4474,1,0,0,0,354,4488,
        1,0,0,0,356,4499,1,0,0,0,358,4501,1,0,0,0,360,4507,1,0,0,0,362,4517,
        1,0,0,0,364,4521,1,0,0,0,366,4528,1,0,0,0,368,4532,1,0,0,0,370,4538,
        1,0,0,0,372,4545,1,0,0,0,374,4551,1,0,0,0,376,4557,1,0,0,0,378,4562,
        1,0,0,0,380,4609,1,0,0,0,382,4630,1,0,0,0,384,4655,1,0,0,0,386,4658,
        1,0,0,0,388,4664,1,0,0,0,390,4680,1,0,0,0,392,4695,1,0,0,0,394,4701,
        1,0,0,0,396,4731,1,0,0,0,398,4733,1,0,0,0,400,4740,1,0,0,0,402,4752,
        1,0,0,0,404,4758,1,0,0,0,406,4783,1,0,0,0,408,4787,1,0,0,0,410,4791,
        1,0,0,0,412,4802,1,0,0,0,414,4864,1,0,0,0,416,4920,1,0,0,0,418,4922,
        1,0,0,0,420,5028,1,0,0,0,422,5052,1,0,0,0,424,5054,1,0,0,0,426,5072,
        1,0,0,0,428,5146,1,0,0,0,430,5148,1,0,0,0,432,5161,1,0,0,0,434,5172,
        1,0,0,0,436,5203,1,0,0,0,438,5213,1,0,0,0,440,5223,1,0,0,0,442,5225,
        1,0,0,0,444,5235,1,0,0,0,446,5238,1,0,0,0,448,5330,1,0,0,0,450,5348,
        1,0,0,0,452,5350,1,0,0,0,454,5354,1,0,0,0,456,5392,1,0,0,0,458,5401,
        1,0,0,0,460,5407,1,0,0,0,462,5416,1,0,0,0,464,5438,1,0,0,0,466,5440,
        1,0,0,0,468,5451,1,0,0,0,470,5457,1,0,0,0,472,5513,1,0,0,0,474,5668,
        1,0,0,0,476,5680,1,0,0,0,478,5695,1,0,0,0,480,5701,1,0,0,0,482,5720,
        1,0,0,0,484,5730,1,0,0,0,486,5744,1,0,0,0,488,5746,1,0,0,0,490,5749,
        1,0,0,0,492,5771,1,0,0,0,494,5783,1,0,0,0,496,5795,1,0,0,0,498,5807,
        1,0,0,0,500,5811,1,0,0,0,502,5813,1,0,0,0,504,5855,1,0,0,0,506,5862,
        1,0,0,0,508,5864,1,0,0,0,510,5887,1,0,0,0,512,5893,1,0,0,0,514,5901,
        1,0,0,0,516,5904,1,0,0,0,518,5907,1,0,0,0,520,5928,1,0,0,0,522,5949,
        1,0,0,0,524,5957,1,0,0,0,526,5995,1,0,0,0,528,6007,1,0,0,0,530,6009,
        1,0,0,0,532,6015,1,0,0,0,534,6019,1,0,0,0,536,6033,1,0,0,0,538,6046,
        1,0,0,0,540,6057,1,0,0,0,542,6059,1,0,0,0,544,6065,1,0,0,0,546,6069,
        1,0,0,0,548,6071,1,0,0,0,550,6073,1,0,0,0,552,6091,1,0,0,0,554,6107,
        1,0,0,0,556,6111,1,0,0,0,558,6116,1,0,0,0,560,6127,1,0,0,0,562,6132,
        1,0,0,0,564,6134,1,0,0,0,566,6138,1,0,0,0,568,6163,1,0,0,0,570,6165,
        1,0,0,0,572,6168,1,0,0,0,574,6173,1,0,0,0,576,6189,1,0,0,0,578,6313,
        1,0,0,0,580,6315,1,0,0,0,582,6348,1,0,0,0,584,6353,1,0,0,0,586,6357,
        1,0,0,0,588,6363,1,0,0,0,590,6371,1,0,0,0,592,6379,1,0,0,0,594,6387,
        1,0,0,0,596,6398,1,0,0,0,598,6406,1,0,0,0,600,6414,1,0,0,0,602,6422,
        1,0,0,0,604,6430,1,0,0,0,606,6473,1,0,0,0,608,6489,1,0,0,0,610,6493,
        1,0,0,0,612,6495,1,0,0,0,614,6498,1,0,0,0,616,6505,1,0,0,0,618,6510,
        1,0,0,0,620,6530,1,0,0,0,622,6724,1,0,0,0,624,6726,1,0,0,0,626,6745,
        1,0,0,0,628,6747,1,0,0,0,630,6810,1,0,0,0,632,6850,1,0,0,0,634,6852,
        1,0,0,0,636,6862,1,0,0,0,638,6873,1,0,0,0,640,6875,1,0,0,0,642,6878,
        1,0,0,0,644,6882,1,0,0,0,646,6884,1,0,0,0,648,6896,1,0,0,0,650,6898,
        1,0,0,0,652,6931,1,0,0,0,654,6933,1,0,0,0,656,6942,1,0,0,0,658,6960,
        1,0,0,0,660,6973,1,0,0,0,662,6984,1,0,0,0,664,7103,1,0,0,0,666,7125,
        1,0,0,0,668,7141,1,0,0,0,670,7150,1,0,0,0,672,7159,1,0,0,0,674,7161,
        1,0,0,0,676,7168,1,0,0,0,678,7170,1,0,0,0,680,7172,1,0,0,0,682,7174,
        1,0,0,0,684,7176,1,0,0,0,686,7178,1,0,0,0,688,7180,1,0,0,0,690,7182,
        1,0,0,0,692,694,3,2,1,0,693,692,1,0,0,0,693,694,1,0,0,0,694,697,
        1,0,0,0,695,696,5,1108,0,0,696,698,5,1108,0,0,697,695,1,0,0,0,697,
        698,1,0,0,0,698,699,1,0,0,0,699,700,5,0,0,1,700,1,1,0,0,0,701,704,
        3,4,2,0,702,703,5,1108,0,0,703,705,5,1108,0,0,704,702,1,0,0,0,704,
        705,1,0,0,0,705,707,1,0,0,0,706,708,5,1123,0,0,707,706,1,0,0,0,707,
        708,1,0,0,0,708,711,1,0,0,0,709,711,3,6,3,0,710,701,1,0,0,0,710,
        709,1,0,0,0,711,714,1,0,0,0,712,710,1,0,0,0,712,713,1,0,0,0,713,
        724,1,0,0,0,714,712,1,0,0,0,715,721,3,4,2,0,716,717,5,1108,0,0,717,
        719,5,1108,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,
        722,5,1123,0,0,721,718,1,0,0,0,721,722,1,0,0,0,722,725,1,0,0,0,723,
        725,3,6,3,0,724,715,1,0,0,0,724,723,1,0,0,0,725,3,1,0,0,0,726,734,
        3,8,4,0,727,734,3,10,5,0,728,734,3,12,6,0,729,734,3,14,7,0,730,734,
        3,16,8,0,731,734,3,20,10,0,732,734,3,22,11,0,733,726,1,0,0,0,733,
        727,1,0,0,0,733,728,1,0,0,0,733,729,1,0,0,0,733,730,1,0,0,0,733,
        731,1,0,0,0,733,732,1,0,0,0,734,5,1,0,0,0,735,736,5,1123,0,0,736,
        7,1,0,0,0,737,779,3,24,12,0,738,779,3,26,13,0,739,779,3,28,14,0,
        740,779,3,30,15,0,741,779,3,32,16,0,742,779,3,34,17,0,743,779,3,
        38,19,0,744,779,3,40,20,0,745,779,3,42,21,0,746,779,3,44,22,0,747,
        779,3,46,23,0,748,779,3,56,28,0,749,779,3,36,18,0,750,779,3,58,29,
        0,751,779,3,130,65,0,752,779,3,132,66,0,753,779,3,134,67,0,754,779,
        3,136,68,0,755,779,3,138,69,0,756,779,3,140,70,0,757,779,3,142,71,
        0,758,779,3,144,72,0,759,779,3,146,73,0,760,779,3,148,74,0,761,779,
        3,150,75,0,762,779,3,154,77,0,763,779,3,156,78,0,764,779,3,158,79,
        0,765,779,3,160,80,0,766,779,3,162,81,0,767,779,3,164,82,0,768,779,
        3,166,83,0,769,779,3,168,84,0,770,779,3,170,85,0,771,779,3,172,86,
        0,772,779,3,174,87,0,773,779,3,176,88,0,774,779,3,180,90,0,775,779,
        3,178,89,0,776,779,3,182,91,0,777,779,3,186,93,0,778,737,1,0,0,0,
        778,738,1,0,0,0,778,739,1,0,0,0,778,740,1,0,0,0,778,741,1,0,0,0,
        778,742,1,0,0,0,778,743,1,0,0,0,778,744,1,0,0,0,778,745,1,0,0,0,
        778,746,1,0,0,0,778,747,1,0,0,0,778,748,1,0,0,0,778,749,1,0,0,0,
        778,750,1,0,0,0,778,751,1,0,0,0,778,752,1,0,0,0,778,753,1,0,0,0,
        778,754,1,0,0,0,778,755,1,0,0,0,778,756,1,0,0,0,778,757,1,0,0,0,
        778,758,1,0,0,0,778,759,1,0,0,0,778,760,1,0,0,0,778,761,1,0,0,0,
        778,762,1,0,0,0,778,763,1,0,0,0,778,764,1,0,0,0,778,765,1,0,0,0,
        778,766,1,0,0,0,778,767,1,0,0,0,778,768,1,0,0,0,778,769,1,0,0,0,
        778,770,1,0,0,0,778,771,1,0,0,0,778,772,1,0,0,0,778,773,1,0,0,0,
        778,774,1,0,0,0,778,775,1,0,0,0,778,776,1,0,0,0,778,777,1,0,0,0,
        779,9,1,0,0,0,780,791,3,204,102,0,781,791,3,196,98,0,782,791,3,206,
        103,0,783,791,3,190,95,0,784,791,3,202,101,0,785,791,3,188,94,0,
        786,791,3,198,99,0,787,791,3,200,100,0,788,791,3,192,96,0,789,791,
        3,194,97,0,790,780,1,0,0,0,790,781,1,0,0,0,790,782,1,0,0,0,790,783,
        1,0,0,0,790,784,1,0,0,0,790,785,1,0,0,0,790,786,1,0,0,0,790,787,
        1,0,0,0,790,788,1,0,0,0,790,789,1,0,0,0,791,11,1,0,0,0,792,802,3,
        286,143,0,793,802,3,288,144,0,794,802,3,290,145,0,795,802,3,292,
        146,0,796,802,3,294,147,0,797,802,3,296,148,0,798,802,3,298,149,
        0,799,802,3,300,150,0,800,802,3,302,151,0,801,792,1,0,0,0,801,793,
        1,0,0,0,801,794,1,0,0,0,801,795,1,0,0,0,801,796,1,0,0,0,801,797,
        1,0,0,0,801,798,1,0,0,0,801,799,1,0,0,0,801,800,1,0,0,0,802,13,1,
        0,0,0,803,819,3,318,159,0,804,819,3,320,160,0,805,819,3,322,161,
        0,806,819,3,324,162,0,807,819,3,326,163,0,808,819,3,328,164,0,809,
        819,3,330,165,0,810,819,3,332,166,0,811,819,3,334,167,0,812,819,
        3,358,179,0,813,819,3,360,180,0,814,819,3,362,181,0,815,819,3,364,
        182,0,816,819,3,366,183,0,817,819,3,368,184,0,818,803,1,0,0,0,818,
        804,1,0,0,0,818,805,1,0,0,0,818,806,1,0,0,0,818,807,1,0,0,0,818,
        808,1,0,0,0,818,809,1,0,0,0,818,810,1,0,0,0,818,811,1,0,0,0,818,
        812,1,0,0,0,818,813,1,0,0,0,818,814,1,0,0,0,818,815,1,0,0,0,818,
        816,1,0,0,0,818,817,1,0,0,0,819,15,1,0,0,0,820,824,3,370,185,0,821,
        824,3,372,186,0,822,824,3,374,187,0,823,820,1,0,0,0,823,821,1,0,
        0,0,823,822,1,0,0,0,824,17,1,0,0,0,825,836,3,378,189,0,826,836,3,
        380,190,0,827,836,3,382,191,0,828,836,3,386,193,0,829,836,3,388,
        194,0,830,836,3,390,195,0,831,836,3,394,197,0,832,836,3,384,192,
        0,833,836,3,392,196,0,834,836,3,396,198,0,835,825,1,0,0,0,835,826,
        1,0,0,0,835,827,1,0,0,0,835,828,1,0,0,0,835,829,1,0,0,0,835,830,
        1,0,0,0,835,831,1,0,0,0,835,832,1,0,0,0,835,833,1,0,0,0,835,834,
        1,0,0,0,836,19,1,0,0,0,837,863,3,414,207,0,838,863,3,416,208,0,839,
        863,3,418,209,0,840,863,3,420,210,0,841,863,3,424,212,0,842,863,
        3,426,213,0,843,863,3,428,214,0,844,863,3,430,215,0,845,863,3,454,
        227,0,846,863,3,456,228,0,847,863,3,458,229,0,848,863,3,460,230,
        0,849,863,3,462,231,0,850,863,3,466,233,0,851,863,3,468,234,0,852,
        863,3,470,235,0,853,863,3,472,236,0,854,863,3,474,237,0,855,863,
        3,488,244,0,856,863,3,490,245,0,857,863,3,492,246,0,858,863,3,494,
        247,0,859,863,3,496,248,0,860,863,3,498,249,0,861,863,3,500,250,
        0,862,837,1,0,0,0,862,838,1,0,0,0,862,839,1,0,0,0,862,840,1,0,0,
        0,862,841,1,0,0,0,862,842,1,0,0,0,862,843,1,0,0,0,862,844,1,0,0,
        0,862,845,1,0,0,0,862,846,1,0,0,0,862,847,1,0,0,0,862,848,1,0,0,
        0,862,849,1,0,0,0,862,850,1,0,0,0,862,851,1,0,0,0,862,852,1,0,0,
        0,862,853,1,0,0,0,862,854,1,0,0,0,862,855,1,0,0,0,862,856,1,0,0,
        0,862,857,1,0,0,0,862,858,1,0,0,0,862,859,1,0,0,0,862,860,1,0,0,
        0,862,861,1,0,0,0,863,21,1,0,0,0,864,872,3,510,255,0,865,872,3,512,
        256,0,866,872,3,514,257,0,867,872,3,516,258,0,868,872,3,518,259,
        0,869,872,3,520,260,0,870,872,3,524,262,0,871,864,1,0,0,0,871,865,
        1,0,0,0,871,866,1,0,0,0,871,867,1,0,0,0,871,868,1,0,0,0,871,869,
        1,0,0,0,871,870,1,0,0,0,872,23,1,0,0,0,873,874,5,32,0,0,874,876,
        7,0,0,0,875,877,3,614,307,0,876,875,1,0,0,0,876,877,1,0,0,0,877,
        878,1,0,0,0,878,882,3,558,279,0,879,881,3,62,31,0,880,879,1,0,0,
        0,881,884,1,0,0,0,882,880,1,0,0,0,882,883,1,0,0,0,883,25,1,0,0,0,
        884,882,1,0,0,0,885,887,5,32,0,0,886,888,3,66,33,0,887,886,1,0,0,
        0,887,888,1,0,0,0,888,889,1,0,0,0,889,891,5,404,0,0,890,892,3,614,
        307,0,891,890,1,0,0,0,891,892,1,0,0,0,892,893,1,0,0,0,893,894,3,
        530,265,0,894,895,5,114,0,0,895,896,5,588,0,0,896,903,3,68,34,0,
        897,898,5,114,0,0,898,900,5,362,0,0,899,901,5,110,0,0,900,899,1,
        0,0,0,900,901,1,0,0,0,901,902,1,0,0,0,902,904,5,545,0,0,903,897,
        1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,907,3,76,38,0,906,905,
        1,0,0,0,906,907,1,0,0,0,907,910,1,0,0,0,908,909,5,359,0,0,909,911,
        5,1135,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,912,1,0,0,0,912,913,
        5,390,0,0,913,914,3,376,188,0,914,27,1,0,0,0,915,918,5,32,0,0,916,
        917,5,119,0,0,917,919,5,137,0,0,918,916,1,0,0,0,918,919,1,0,0,0,
        919,921,1,0,0,0,920,922,7,1,0,0,921,920,1,0,0,0,921,922,1,0,0,0,
        922,924,1,0,0,0,923,925,7,2,0,0,924,923,1,0,0,0,924,925,1,0,0,0,
        925,926,1,0,0,0,926,930,5,78,0,0,927,928,5,74,0,0,928,929,5,110,
        0,0,929,931,5,57,0,0,930,927,1,0,0,0,930,931,1,0,0,0,931,932,1,0,
        0,0,932,934,3,558,279,0,933,935,3,78,39,0,934,933,1,0,0,0,934,935,
        1,0,0,0,935,936,1,0,0,0,936,937,5,114,0,0,937,938,3,532,266,0,938,
        940,3,594,297,0,939,941,3,616,308,0,940,939,1,0,0,0,940,941,1,0,
        0,0,941,945,1,0,0,0,942,944,3,80,40,0,943,942,1,0,0,0,944,947,1,
        0,0,0,945,943,1,0,0,0,945,946,1,0,0,0,946,960,1,0,0,0,947,945,1,
        0,0,0,948,950,5,327,0,0,949,951,5,1111,0,0,950,949,1,0,0,0,950,951,
        1,0,0,0,951,952,1,0,0,0,952,959,7,3,0,0,953,955,5,99,0,0,954,956,
        5,1111,0,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,959,
        7,4,0,0,958,948,1,0,0,0,958,953,1,0,0,0,959,962,1,0,0,0,960,958,
        1,0,0,0,960,961,1,0,0,0,961,29,1,0,0,0,962,960,1,0,0,0,963,964,5,
        32,0,0,964,965,5,462,0,0,965,966,5,70,0,0,966,967,3,558,279,0,967,
        968,5,5,0,0,968,969,5,642,0,0,969,975,5,1135,0,0,970,972,5,440,0,
        0,971,973,5,1111,0,0,972,971,1,0,0,0,972,973,1,0,0,0,973,974,1,0,
        0,0,974,976,3,566,283,0,975,970,1,0,0,0,975,976,1,0,0,0,976,982,
        1,0,0,0,977,979,5,643,0,0,978,980,5,1111,0,0,979,978,1,0,0,0,979,
        980,1,0,0,0,980,981,1,0,0,0,981,983,3,566,283,0,982,977,1,0,0,0,
        982,983,1,0,0,0,983,989,1,0,0,0,984,986,5,556,0,0,985,987,5,1111,
        0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,990,3,566,
        283,0,989,984,1,0,0,0,989,990,1,0,0,0,990,996,1,0,0,0,991,993,5,
        515,0,0,992,994,5,1111,0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,
        1,0,0,0,995,997,3,558,279,0,996,991,1,0,0,0,996,997,1,0,0,0,997,
        999,1,0,0,0,998,1000,5,657,0,0,999,998,1,0,0,0,999,1000,1,0,0,0,
        1000,1006,1,0,0,0,1001,1003,5,359,0,0,1002,1004,5,1111,0,0,1003,
        1002,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,1007,5,1135,
        0,0,1006,1001,1,0,0,0,1006,1007,1,0,0,0,1007,1008,1,0,0,0,1008,1010,
        5,398,0,0,1009,1011,5,1111,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,
        0,1011,1012,1,0,0,0,1012,1013,3,548,274,0,1013,31,1,0,0,0,1014,1016,
        5,32,0,0,1015,1017,3,66,33,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,
        1017,1018,1,0,0,0,1018,1019,5,127,0,0,1019,1020,3,530,265,0,1020,
        1022,5,1120,0,0,1021,1023,3,82,41,0,1022,1021,1,0,0,0,1022,1023,
        1,0,0,0,1023,1028,1,0,0,0,1024,1025,5,1122,0,0,1025,1027,3,82,41,
        0,1026,1024,1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,
        1,0,0,0,1029,1031,1,0,0,0,1030,1028,1,0,0,0,1031,1035,5,1121,0,0,
        1032,1034,3,86,43,0,1033,1032,1,0,0,0,1034,1037,1,0,0,0,1035,1033,
        1,0,0,0,1035,1036,1,0,0,0,1036,1038,1,0,0,0,1037,1035,1,0,0,0,1038,
        1039,3,376,188,0,1039,33,1,0,0,0,1040,1042,5,32,0,0,1041,1043,3,
        66,33,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,
        1045,5,425,0,0,1045,1046,3,530,265,0,1046,1048,5,1120,0,0,1047,1049,
        3,84,42,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,1054,1,0,0,0,
        1050,1051,5,1122,0,0,1051,1053,3,84,42,0,1052,1050,1,0,0,0,1053,
        1056,1,0,0,0,1054,1052,1,0,0,0,1054,1055,1,0,0,0,1055,1057,1,0,0,
        0,1056,1054,1,0,0,0,1057,1058,5,1121,0,0,1058,1059,5,578,0,0,1059,
        1063,3,578,289,0,1060,1062,3,86,43,0,1061,1060,1,0,0,0,1062,1065,
        1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,1068,1,0,0,0,1065,
        1063,1,0,0,0,1066,1069,3,376,188,0,1067,1069,3,392,196,0,1068,1066,
        1,0,0,0,1068,1067,1,0,0,0,1069,35,1,0,0,0,1070,1071,5,32,0,0,1071,
        1075,5,579,0,0,1072,1073,5,74,0,0,1073,1074,5,110,0,0,1074,1076,
        5,57,0,0,1075,1072,1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,
        1082,3,534,267,0,1078,1079,5,1122,0,0,1079,1081,3,534,267,0,1080,
        1078,1,0,0,0,1081,1084,1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,
        0,1083,37,1,0,0,0,1084,1082,1,0,0,0,1085,1086,5,32,0,0,1086,1087,
        5,591,0,0,1087,1088,3,558,279,0,1088,1089,5,64,0,0,1089,1090,5,379,
        0,0,1090,1091,5,662,0,0,1091,1092,7,5,0,0,1092,1093,5,528,0,0,1093,
        1094,5,1120,0,0,1094,1099,3,88,44,0,1095,1096,5,1122,0,0,1096,1098,
        3,88,44,0,1097,1095,1,0,0,0,1098,1101,1,0,0,0,1099,1097,1,0,0,0,
        1099,1100,1,0,0,0,1100,1102,1,0,0,0,1101,1099,1,0,0,0,1102,1103,
        5,1121,0,0,1103,39,1,0,0,0,1104,1107,5,32,0,0,1105,1106,5,119,0,
        0,1106,1108,5,137,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,1110,
        1,0,0,0,1109,1111,5,632,0,0,1110,1109,1,0,0,0,1110,1111,1,0,0,0,
        1111,1112,1,0,0,0,1112,1114,5,166,0,0,1113,1115,3,614,307,0,1114,
        1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1124,3,532,
        266,0,1117,1118,5,94,0,0,1118,1125,3,532,266,0,1119,1120,5,1120,
        0,0,1120,1121,5,94,0,0,1121,1122,3,532,266,0,1122,1123,5,1121,0,
        0,1123,1125,1,0,0,0,1124,1117,1,0,0,0,1124,1119,1,0,0,0,1125,1195,
        1,0,0,0,1126,1129,5,32,0,0,1127,1128,5,119,0,0,1128,1130,5,137,0,
        0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,1130,1132,1,0,0,0,1131,1133,
        5,632,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1134,1,0,0,0,
        1134,1136,5,166,0,0,1135,1137,3,614,307,0,1136,1135,1,0,0,0,1136,
        1137,1,0,0,0,1137,1138,1,0,0,0,1138,1140,3,532,266,0,1139,1141,3,
        90,45,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1152,1,0,0,0,1142,
        1149,3,108,54,0,1143,1145,5,1122,0,0,1144,1143,1,0,0,0,1144,1145,
        1,0,0,0,1145,1146,1,0,0,0,1146,1148,3,108,54,0,1147,1144,1,0,0,0,
        1148,1151,1,0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,1153,
        1,0,0,0,1151,1149,1,0,0,0,1152,1142,1,0,0,0,1152,1153,1,0,0,0,1153,
        1155,1,0,0,0,1154,1156,3,114,57,0,1155,1154,1,0,0,0,1155,1156,1,
        0,0,0,1156,1158,1,0,0,0,1157,1159,7,6,0,0,1158,1157,1,0,0,0,1158,
        1159,1,0,0,0,1159,1161,1,0,0,0,1160,1162,5,12,0,0,1161,1160,1,0,
        0,0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,1164,3,204,102,0,1164,
        1195,1,0,0,0,1165,1168,5,32,0,0,1166,1167,5,119,0,0,1167,1169,5,
        137,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,1171,1,0,0,0,1170,
        1172,5,632,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,
        0,0,1173,1175,5,166,0,0,1174,1176,3,614,307,0,1175,1174,1,0,0,0,
        1175,1176,1,0,0,0,1176,1177,1,0,0,0,1177,1178,3,532,266,0,1178,1189,
        3,90,45,0,1179,1186,3,108,54,0,1180,1182,5,1122,0,0,1181,1180,1,
        0,0,0,1181,1182,1,0,0,0,1182,1183,1,0,0,0,1183,1185,3,108,54,0,1184,
        1181,1,0,0,0,1185,1188,1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,
        0,1187,1190,1,0,0,0,1188,1186,1,0,0,0,1189,1179,1,0,0,0,1189,1190,
        1,0,0,0,1190,1192,1,0,0,0,1191,1193,3,114,57,0,1192,1191,1,0,0,0,
        1192,1193,1,0,0,0,1193,1195,1,0,0,0,1194,1104,1,0,0,0,1194,1126,
        1,0,0,0,1194,1165,1,0,0,0,1195,41,1,0,0,0,1196,1197,5,32,0,0,1197,
        1198,5,630,0,0,1198,1199,3,558,279,0,1199,1200,5,5,0,0,1200,1201,
        5,380,0,0,1201,1205,5,1135,0,0,1202,1203,5,416,0,0,1203,1204,5,1111,
        0,0,1204,1206,3,566,283,0,1205,1202,1,0,0,0,1205,1206,1,0,0,0,1206,
        1212,1,0,0,0,1207,1209,5,398,0,0,1208,1210,5,1111,0,0,1209,1208,
        1,0,0,0,1209,1210,1,0,0,0,1210,1211,1,0,0,0,1211,1213,3,548,274,
        0,1212,1207,1,0,0,0,1212,1213,1,0,0,0,1213,43,1,0,0,0,1214,1215,
        5,32,0,0,1215,1216,5,630,0,0,1216,1217,3,558,279,0,1217,1218,5,5,
        0,0,1218,1219,5,380,0,0,1219,1220,5,1135,0,0,1220,1221,5,180,0,0,
        1221,1222,5,462,0,0,1222,1223,5,70,0,0,1223,1229,3,558,279,0,1224,
        1226,5,412,0,0,1225,1227,5,1111,0,0,1226,1225,1,0,0,0,1226,1227,
        1,0,0,0,1227,1228,1,0,0,0,1228,1230,3,566,283,0,1229,1224,1,0,0,
        0,1229,1230,1,0,0,0,1230,1236,1,0,0,0,1231,1233,5,440,0,0,1232,1234,
        5,1111,0,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1235,1,0,0,0,
        1235,1237,3,566,283,0,1236,1231,1,0,0,0,1236,1237,1,0,0,0,1237,1243,
        1,0,0,0,1238,1240,5,332,0,0,1239,1241,5,1111,0,0,1240,1239,1,0,0,
        0,1240,1241,1,0,0,0,1241,1242,1,0,0,0,1242,1244,3,566,283,0,1243,
        1238,1,0,0,0,1243,1244,1,0,0,0,1244,1250,1,0,0,0,1245,1247,5,488,
        0,0,1246,1248,5,1111,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,
        1249,1,0,0,0,1249,1251,3,566,283,0,1250,1245,1,0,0,0,1250,1251,1,
        0,0,0,1251,1257,1,0,0,0,1252,1254,5,515,0,0,1253,1255,5,1111,0,0,
        1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1258,
        3,558,279,0,1257,1252,1,0,0,0,1257,1258,1,0,0,0,1258,1260,1,0,0,
        0,1259,1261,5,657,0,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1267,
        1,0,0,0,1262,1264,5,359,0,0,1263,1265,5,1111,0,0,1264,1263,1,0,0,
        0,1264,1265,1,0,0,0,1265,1266,1,0,0,0,1266,1268,5,1135,0,0,1267,
        1262,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,1271,5,398,
        0,0,1270,1272,5,1111,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,
        1273,1,0,0,0,1273,1274,3,548,274,0,1274,45,1,0,0,0,1275,1278,5,32,
        0,0,1276,1277,5,119,0,0,1277,1279,5,137,0,0,1278,1276,1,0,0,0,1278,
        1279,1,0,0,0,1279,1281,1,0,0,0,1280,1282,3,66,33,0,1281,1280,1,0,
        0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1284,5,171,0,0,1284,
        1285,3,530,265,0,1285,1286,7,7,0,0,1286,1287,7,8,0,0,1287,1288,5,
        114,0,0,1288,1289,3,532,266,0,1289,1290,5,62,0,0,1290,1291,5,50,
        0,0,1291,1294,5,583,0,0,1292,1293,7,9,0,0,1293,1295,3,530,265,0,
        1294,1292,1,0,0,0,1294,1295,1,0,0,0,1295,1296,1,0,0,0,1296,1297,
        3,376,188,0,1297,47,1,0,0,0,1298,1300,5,186,0,0,1299,1301,5,555,
        0,0,1300,1299,1,0,0,0,1300,1301,1,0,0,0,1301,1302,1,0,0,0,1302,1303,
        3,50,25,0,1303,49,1,0,0,0,1304,1316,3,52,26,0,1305,1306,5,1120,0,
        0,1306,1311,3,54,27,0,1307,1308,5,1122,0,0,1308,1310,3,54,27,0,1309,
        1307,1,0,0,0,1310,1313,1,0,0,0,1311,1309,1,0,0,0,1311,1312,1,0,0,
        0,1312,1314,1,0,0,0,1313,1311,1,0,0,0,1314,1315,5,1121,0,0,1315,
        1317,1,0,0,0,1316,1305,1,0,0,0,1316,1317,1,0,0,0,1317,1318,1,0,0,
        0,1318,1319,5,12,0,0,1319,1320,5,1120,0,0,1320,1321,3,10,5,0,1321,
        1324,5,1121,0,0,1322,1323,5,1122,0,0,1323,1325,3,50,25,0,1324,1322,
        1,0,0,0,1324,1325,1,0,0,0,1325,51,1,0,0,0,1326,1327,3,558,279,0,
        1327,53,1,0,0,0,1328,1329,3,558,279,0,1329,55,1,0,0,0,1330,1333,
        5,32,0,0,1331,1332,5,119,0,0,1332,1334,5,137,0,0,1333,1331,1,0,0,
        0,1333,1334,1,0,0,0,1334,1338,1,0,0,0,1335,1336,5,327,0,0,1336,1337,
        5,1111,0,0,1337,1339,7,10,0,0,1338,1335,1,0,0,0,1338,1339,1,0,0,
        0,1339,1341,1,0,0,0,1340,1342,3,66,33,0,1341,1340,1,0,0,0,1341,1342,
        1,0,0,0,1342,1346,1,0,0,0,1343,1344,5,155,0,0,1344,1345,5,589,0,
        0,1345,1347,7,11,0,0,1346,1343,1,0,0,0,1346,1347,1,0,0,0,1347,1348,
        1,0,0,0,1348,1349,5,654,0,0,1349,1354,3,530,265,0,1350,1351,5,1120,
        0,0,1351,1352,3,590,295,0,1352,1353,5,1121,0,0,1353,1355,1,0,0,0,
        1354,1350,1,0,0,0,1354,1355,1,0,0,0,1355,1356,1,0,0,0,1356,1358,
        5,12,0,0,1357,1359,3,48,24,0,1358,1357,1,0,0,0,1358,1359,1,0,0,0,
        1359,1360,1,0,0,0,1360,1367,3,204,102,0,1361,1363,5,186,0,0,1362,
        1364,7,12,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,
        0,0,1365,1366,5,25,0,0,1366,1368,5,116,0,0,1367,1361,1,0,0,0,1367,
        1368,1,0,0,0,1368,57,1,0,0,0,1369,1372,5,32,0,0,1370,1371,5,119,
        0,0,1371,1373,5,137,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,
        1375,1,0,0,0,1374,1376,5,632,0,0,1375,1374,1,0,0,0,1375,1376,1,0,
        0,0,1376,1377,1,0,0,0,1377,1379,5,590,0,0,1378,1380,3,614,307,0,
        1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,1381,1,0,0,0,1381,1386,
        3,530,265,0,1382,1385,3,60,30,0,1383,1385,3,108,54,0,1384,1382,1,
        0,0,0,1384,1383,1,0,0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,
        1387,1,0,0,0,1387,59,1,0,0,0,1388,1386,1,0,0,0,1389,1391,5,438,0,
        0,1390,1392,7,13,0,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,1392,1393,
        1,0,0,0,1393,1429,3,564,282,0,1394,1396,5,107,0,0,1395,1397,5,1111,
        0,0,1396,1395,1,0,0,0,1396,1397,1,0,0,0,1397,1398,1,0,0,0,1398,1429,
        3,564,282,0,1399,1400,5,508,0,0,1400,1429,5,107,0,0,1401,1429,5,
        513,0,0,1402,1404,5,106,0,0,1403,1405,5,1111,0,0,1404,1403,1,0,0,
        0,1404,1405,1,0,0,0,1405,1406,1,0,0,0,1406,1429,3,564,282,0,1407,
        1408,5,508,0,0,1408,1429,5,106,0,0,1409,1429,5,512,0,0,1410,1412,
        5,612,0,0,1411,1413,7,14,0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,
        1413,1414,1,0,0,0,1414,1429,3,564,282,0,1415,1417,5,342,0,0,1416,
        1418,5,1111,0,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,1419,1,
        0,0,0,1419,1429,3,564,282,0,1420,1429,5,509,0,0,1421,1429,5,377,
        0,0,1422,1429,5,511,0,0,1423,1425,5,574,0,0,1424,1426,7,14,0,0,1425,
        1424,1,0,0,0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,1429,3,564,
        282,0,1428,1389,1,0,0,0,1428,1394,1,0,0,0,1428,1399,1,0,0,0,1428,
        1401,1,0,0,0,1428,1402,1,0,0,0,1428,1407,1,0,0,0,1428,1409,1,0,0,
        0,1428,1410,1,0,0,0,1428,1415,1,0,0,0,1428,1420,1,0,0,0,1428,1421,
        1,0,0,0,1428,1422,1,0,0,0,1428,1423,1,0,0,0,1429,61,1,0,0,0,1430,
        1432,5,40,0,0,1431,1430,1,0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,
        0,0,1433,1435,3,64,32,0,1434,1436,5,1111,0,0,1435,1434,1,0,0,0,1435,
        1436,1,0,0,0,1436,1439,1,0,0,0,1437,1440,3,544,272,0,1438,1440,5,
        40,0,0,1439,1437,1,0,0,0,1439,1438,1,0,0,0,1440,1450,1,0,0,0,1441,
        1443,5,40,0,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1444,1,0,
        0,0,1444,1446,5,26,0,0,1445,1447,5,1111,0,0,1446,1445,1,0,0,0,1446,
        1447,1,0,0,0,1447,1448,1,0,0,0,1448,1450,3,546,273,0,1449,1431,1,
        0,0,0,1449,1442,1,0,0,0,1450,63,1,0,0,0,1451,1452,5,24,0,0,1452,
        1457,5,149,0,0,1453,1457,5,818,0,0,1454,1455,5,216,0,0,1455,1457,
        5,149,0,0,1456,1451,1,0,0,0,1456,1453,1,0,0,0,1456,1454,1,0,0,0,
        1457,65,1,0,0,0,1458,1459,5,383,0,0,1459,1466,5,1111,0,0,1460,1467,
        3,540,270,0,1461,1464,5,35,0,0,1462,1463,5,1120,0,0,1463,1465,5,
        1121,0,0,1464,1462,1,0,0,0,1464,1465,1,0,0,0,1465,1467,1,0,0,0,1466,
        1460,1,0,0,0,1466,1461,1,0,0,0,1467,67,1,0,0,0,1468,1469,5,329,0,
        0,1469,1473,3,70,35,0,1470,1472,3,72,36,0,1471,1470,1,0,0,0,1472,
        1475,1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,1503,1,0,0,
        0,1475,1473,1,0,0,0,1476,1479,5,406,0,0,1477,1480,3,564,282,0,1478,
        1480,3,660,330,0,1479,1477,1,0,0,0,1479,1478,1,0,0,0,1480,1481,1,
        0,0,0,1481,1490,3,74,37,0,1482,1483,5,613,0,0,1483,1487,3,70,35,
        0,1484,1486,3,72,36,0,1485,1484,1,0,0,0,1486,1489,1,0,0,0,1487,1485,
        1,0,0,0,1487,1488,1,0,0,0,1488,1491,1,0,0,0,1489,1487,1,0,0,0,1490,
        1482,1,0,0,0,1490,1491,1,0,0,0,1491,1500,1,0,0,0,1492,1493,5,397,
        0,0,1493,1497,3,70,35,0,1494,1496,3,72,36,0,1495,1494,1,0,0,0,1496,
        1499,1,0,0,0,1497,1495,1,0,0,0,1497,1498,1,0,0,0,1498,1501,1,0,0,
        0,1499,1497,1,0,0,0,1500,1492,1,0,0,0,1500,1501,1,0,0,0,1501,1503,
        1,0,0,0,1502,1468,1,0,0,0,1502,1476,1,0,0,0,1503,69,1,0,0,0,1504,
        1509,5,306,0,0,1505,1509,3,568,284,0,1506,1509,3,564,282,0,1507,
        1509,3,660,330,0,1508,1504,1,0,0,0,1508,1505,1,0,0,0,1508,1506,1,
        0,0,0,1508,1507,1,0,0,0,1509,71,1,0,0,0,1510,1511,5,1107,0,0,1511,
        1514,5,83,0,0,1512,1515,3,564,282,0,1513,1515,3,660,330,0,1514,1512,
        1,0,0,0,1514,1513,1,0,0,0,1515,1516,1,0,0,0,1516,1517,3,74,37,0,
        1517,73,1,0,0,0,1518,1532,3,684,342,0,1519,1532,5,215,0,0,1520,1532,
        5,234,0,0,1521,1532,5,235,0,0,1522,1532,5,236,0,0,1523,1532,5,237,
        0,0,1524,1532,5,238,0,0,1525,1532,5,239,0,0,1526,1532,5,240,0,0,
        1527,1532,5,241,0,0,1528,1532,5,242,0,0,1529,1532,5,243,0,0,1530,
        1532,5,244,0,0,1531,1518,1,0,0,0,1531,1519,1,0,0,0,1531,1520,1,0,
        0,0,1531,1521,1,0,0,0,1531,1522,1,0,0,0,1531,1523,1,0,0,0,1531,1524,
        1,0,0,0,1531,1525,1,0,0,0,1531,1526,1,0,0,0,1531,1527,1,0,0,0,1531,
        1528,1,0,0,0,1531,1529,1,0,0,0,1531,1530,1,0,0,0,1532,75,1,0,0,0,
        1533,1539,5,394,0,0,1534,1539,5,387,0,0,1535,1536,5,387,0,0,1536,
        1537,5,114,0,0,1537,1539,5,597,0,0,1538,1533,1,0,0,0,1538,1534,1,
        0,0,0,1538,1535,1,0,0,0,1539,77,1,0,0,0,1540,1541,5,181,0,0,1541,
        1542,7,15,0,0,1542,79,1,0,0,0,1543,1545,5,454,0,0,1544,1546,5,1111,
        0,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,1547,1,0,0,0,1547,1574,
        3,566,283,0,1548,1574,3,78,39,0,1549,1550,5,186,0,0,1550,1551,5,
        532,0,0,1551,1574,3,558,279,0,1552,1553,5,359,0,0,1553,1574,5,1135,
        0,0,1554,1574,7,16,0,0,1555,1557,5,852,0,0,1556,1558,5,1111,0,0,
        1557,1556,1,0,0,0,1557,1558,1,0,0,0,1558,1559,1,0,0,0,1559,1574,
        5,1135,0,0,1560,1562,5,976,0,0,1561,1563,5,1111,0,0,1562,1561,1,
        0,0,0,1562,1563,1,0,0,0,1563,1564,1,0,0,0,1564,1574,5,1135,0,0,1565,
        1566,5,353,0,0,1566,1567,5,1111,0,0,1567,1574,7,17,0,0,1568,1572,
        5,76,0,0,1569,1570,5,110,0,0,1570,1572,5,76,0,0,1571,1568,1,0,0,
        0,1571,1569,1,0,0,0,1572,1574,1,0,0,0,1573,1543,1,0,0,0,1573,1548,
        1,0,0,0,1573,1549,1,0,0,0,1573,1552,1,0,0,0,1573,1554,1,0,0,0,1573,
        1555,1,0,0,0,1573,1560,1,0,0,0,1573,1565,1,0,0,0,1573,1571,1,0,0,
        0,1574,81,1,0,0,0,1575,1577,7,18,0,0,1576,1575,1,0,0,0,1576,1577,
        1,0,0,0,1577,1578,1,0,0,0,1578,1579,3,558,279,0,1579,1580,3,578,
        289,0,1580,83,1,0,0,0,1581,1582,3,558,279,0,1582,1583,3,578,289,
        0,1583,85,1,0,0,0,1584,1585,5,359,0,0,1585,1608,5,1135,0,0,1586,
        1587,5,455,0,0,1587,1608,5,155,0,0,1588,1590,5,110,0,0,1589,1588,
        1,0,0,0,1589,1590,1,0,0,0,1590,1591,1,0,0,0,1591,1608,5,45,0,0,1592,
        1593,5,372,0,0,1593,1603,5,155,0,0,1594,1595,5,508,0,0,1595,1603,
        5,155,0,0,1596,1597,5,131,0,0,1597,1598,5,155,0,0,1598,1603,5,379,
        0,0,1599,1600,5,108,0,0,1600,1601,5,155,0,0,1601,1603,5,379,0,0,
        1602,1592,1,0,0,0,1602,1594,1,0,0,0,1602,1596,1,0,0,0,1602,1599,
        1,0,0,0,1603,1608,1,0,0,0,1604,1605,5,155,0,0,1605,1606,5,589,0,
        0,1606,1608,7,11,0,0,1607,1584,1,0,0,0,1607,1586,1,0,0,0,1607,1589,
        1,0,0,0,1607,1602,1,0,0,0,1607,1604,1,0,0,0,1608,87,1,0,0,0,1609,
        1610,5,433,0,0,1610,1624,5,1135,0,0,1611,1612,5,37,0,0,1612,1624,
        5,1135,0,0,1613,1614,5,648,0,0,1614,1624,5,1135,0,0,1615,1616,5,
        536,0,0,1616,1624,5,1135,0,0,1617,1618,5,600,0,0,1618,1624,5,1135,
        0,0,1619,1620,5,529,0,0,1620,1624,5,1135,0,0,1621,1622,5,541,0,0,
        1622,1624,3,564,282,0,1623,1609,1,0,0,0,1623,1611,1,0,0,0,1623,1613,
        1,0,0,0,1623,1615,1,0,0,0,1623,1617,1,0,0,0,1623,1619,1,0,0,0,1623,
        1621,1,0,0,0,1624,89,1,0,0,0,1625,1626,5,1120,0,0,1626,1631,3,92,
        46,0,1627,1628,5,1122,0,0,1628,1630,3,92,46,0,1629,1627,1,0,0,0,
        1630,1633,1,0,0,0,1631,1629,1,0,0,0,1631,1632,1,0,0,0,1632,1634,
        1,0,0,0,1633,1631,1,0,0,0,1634,1635,5,1121,0,0,1635,91,1,0,0,0,1636,
        1637,3,558,279,0,1637,1638,3,94,47,0,1638,1642,1,0,0,0,1639,1642,
        3,98,49,0,1640,1642,3,106,53,0,1641,1636,1,0,0,0,1641,1639,1,0,0,
        0,1641,1640,1,0,0,0,1642,93,1,0,0,0,1643,1647,3,578,289,0,1644,1646,
        3,96,48,0,1645,1644,1,0,0,0,1646,1649,1,0,0,0,1647,1645,1,0,0,0,
        1647,1648,1,0,0,0,1648,95,1,0,0,0,1649,1647,1,0,0,0,1650,1704,3,
        574,287,0,1651,1652,5,40,0,0,1652,1704,3,606,303,0,1653,1704,5,656,
        0,0,1654,1704,5,446,0,0,1655,1660,5,333,0,0,1656,1657,5,114,0,0,
        1657,1658,5,178,0,0,1658,1660,3,608,304,0,1659,1655,1,0,0,0,1659,
        1656,1,0,0,0,1660,1704,1,0,0,0,1661,1663,5,126,0,0,1662,1661,1,0,
        0,0,1662,1663,1,0,0,0,1663,1664,1,0,0,0,1664,1704,5,88,0,0,1665,
        1667,5,175,0,0,1666,1668,5,88,0,0,1667,1666,1,0,0,0,1667,1668,1,
        0,0,0,1668,1704,1,0,0,0,1669,1670,5,359,0,0,1670,1704,5,1135,0,0,
        1671,1672,5,357,0,0,1672,1704,7,19,0,0,1673,1674,5,619,0,0,1674,
        1704,7,20,0,0,1675,1704,3,100,50,0,1676,1677,5,26,0,0,1677,1704,
        3,546,273,0,1678,1679,5,67,0,0,1679,1681,5,8,0,0,1680,1678,1,0,0,
        0,1680,1681,1,0,0,0,1681,1682,1,0,0,0,1682,1683,5,12,0,0,1683,1684,
        5,1120,0,0,1684,1685,3,660,330,0,1685,1687,5,1121,0,0,1686,1688,
        7,21,0,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,1704,1,0,0,0,1689,
        1690,5,233,0,0,1690,1691,5,40,0,0,1691,1704,5,652,0,0,1692,1694,
        5,29,0,0,1693,1695,3,558,279,0,1694,1693,1,0,0,0,1694,1695,1,0,0,
        0,1695,1697,1,0,0,0,1696,1692,1,0,0,0,1696,1697,1,0,0,0,1697,1698,
        1,0,0,0,1698,1699,5,25,0,0,1699,1700,5,1120,0,0,1700,1701,3,660,
        330,0,1701,1702,5,1121,0,0,1702,1704,1,0,0,0,1703,1650,1,0,0,0,1703,
        1651,1,0,0,0,1703,1653,1,0,0,0,1703,1654,1,0,0,0,1703,1659,1,0,0,
        0,1703,1662,1,0,0,0,1703,1665,1,0,0,0,1703,1669,1,0,0,0,1703,1671,
        1,0,0,0,1703,1673,1,0,0,0,1703,1675,1,0,0,0,1703,1676,1,0,0,0,1703,
        1680,1,0,0,0,1703,1689,1,0,0,0,1703,1696,1,0,0,0,1704,97,1,0,0,0,
        1705,1707,5,29,0,0,1706,1708,3,558,279,0,1707,1706,1,0,0,0,1707,
        1708,1,0,0,0,1708,1710,1,0,0,0,1709,1705,1,0,0,0,1709,1710,1,0,0,
        0,1710,1711,1,0,0,0,1711,1712,5,126,0,0,1712,1714,5,88,0,0,1713,
        1715,3,558,279,0,1714,1713,1,0,0,0,1714,1715,1,0,0,0,1715,1717,1,
        0,0,0,1716,1718,3,78,39,0,1717,1716,1,0,0,0,1717,1718,1,0,0,0,1718,
        1719,1,0,0,0,1719,1723,3,594,297,0,1720,1722,3,80,40,0,1721,1720,
        1,0,0,0,1722,1725,1,0,0,0,1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,
        1775,1,0,0,0,1725,1723,1,0,0,0,1726,1728,5,29,0,0,1727,1729,3,558,
        279,0,1728,1727,1,0,0,0,1728,1729,1,0,0,0,1729,1731,1,0,0,0,1730,
        1726,1,0,0,0,1730,1731,1,0,0,0,1731,1732,1,0,0,0,1732,1734,5,175,
        0,0,1733,1735,7,22,0,0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,
        1737,1,0,0,0,1736,1738,3,558,279,0,1737,1736,1,0,0,0,1737,1738,1,
        0,0,0,1738,1740,1,0,0,0,1739,1741,3,78,39,0,1740,1739,1,0,0,0,1740,
        1741,1,0,0,0,1741,1742,1,0,0,0,1742,1746,3,594,297,0,1743,1745,3,
        80,40,0,1744,1743,1,0,0,0,1745,1748,1,0,0,0,1746,1744,1,0,0,0,1746,
        1747,1,0,0,0,1747,1775,1,0,0,0,1748,1746,1,0,0,0,1749,1751,5,29,
        0,0,1750,1752,3,558,279,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,
        1754,1,0,0,0,1753,1749,1,0,0,0,1753,1754,1,0,0,0,1754,1755,1,0,0,
        0,1755,1756,5,64,0,0,1756,1758,5,88,0,0,1757,1759,3,558,279,0,1758,
        1757,1,0,0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,0,1760,1761,3,594,
        297,0,1761,1762,3,100,50,0,1762,1775,1,0,0,0,1763,1765,5,29,0,0,
        1764,1766,3,558,279,0,1765,1764,1,0,0,0,1765,1766,1,0,0,0,1766,1768,
        1,0,0,0,1767,1763,1,0,0,0,1767,1768,1,0,0,0,1768,1769,1,0,0,0,1769,
        1770,5,25,0,0,1770,1771,5,1120,0,0,1771,1772,3,660,330,0,1772,1773,
        5,1121,0,0,1773,1775,1,0,0,0,1774,1709,1,0,0,0,1774,1730,1,0,0,0,
        1774,1753,1,0,0,0,1774,1767,1,0,0,0,1775,99,1,0,0,0,1776,1777,5,
        132,0,0,1777,1779,3,532,266,0,1778,1780,3,594,297,0,1779,1778,1,
        0,0,0,1779,1780,1,0,0,0,1780,1783,1,0,0,0,1781,1782,5,105,0,0,1782,
        1784,7,23,0,0,1783,1781,1,0,0,0,1783,1784,1,0,0,0,1784,1786,1,0,
        0,0,1785,1787,3,102,51,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,
        101,1,0,0,0,1788,1789,5,114,0,0,1789,1790,5,42,0,0,1790,1794,3,104,
        52,0,1791,1792,5,114,0,0,1792,1793,5,178,0,0,1793,1795,3,104,52,
        0,1794,1791,1,0,0,0,1794,1795,1,0,0,0,1795,1805,1,0,0,0,1796,1797,
        5,114,0,0,1797,1798,5,178,0,0,1798,1802,3,104,52,0,1799,1800,5,114,
        0,0,1800,1801,5,42,0,0,1801,1803,3,104,52,0,1802,1799,1,0,0,0,1802,
        1803,1,0,0,0,1803,1805,1,0,0,0,1804,1788,1,0,0,0,1804,1796,1,0,0,
        0,1805,103,1,0,0,0,1806,1813,5,140,0,0,1807,1813,5,20,0,0,1808,1809,
        5,149,0,0,1809,1813,5,112,0,0,1810,1811,5,508,0,0,1811,1813,5,324,
        0,0,1812,1806,1,0,0,0,1812,1807,1,0,0,0,1812,1808,1,0,0,0,1812,1810,
        1,0,0,0,1813,105,1,0,0,0,1814,1816,7,22,0,0,1815,1817,3,558,279,
        0,1816,1815,1,0,0,0,1816,1817,1,0,0,0,1817,1819,1,0,0,0,1818,1820,
        3,78,39,0,1819,1818,1,0,0,0,1819,1820,1,0,0,0,1820,1821,1,0,0,0,
        1821,1825,3,594,297,0,1822,1824,3,80,40,0,1823,1822,1,0,0,0,1824,
        1827,1,0,0,0,1825,1823,1,0,0,0,1825,1826,1,0,0,0,1826,1843,1,0,0,
        0,1827,1825,1,0,0,0,1828,1830,7,24,0,0,1829,1831,7,22,0,0,1830,1829,
        1,0,0,0,1830,1831,1,0,0,0,1831,1833,1,0,0,0,1832,1834,3,558,279,
        0,1833,1832,1,0,0,0,1833,1834,1,0,0,0,1834,1835,1,0,0,0,1835,1839,
        3,594,297,0,1836,1838,3,80,40,0,1837,1836,1,0,0,0,1838,1841,1,0,
        0,0,1839,1837,1,0,0,0,1839,1840,1,0,0,0,1840,1843,1,0,0,0,1841,1839,
        1,0,0,0,1842,1814,1,0,0,0,1842,1828,1,0,0,0,1843,107,1,0,0,0,1844,
        1846,5,398,0,0,1845,1847,5,1111,0,0,1846,1845,1,0,0,0,1846,1847,
        1,0,0,0,1847,1849,1,0,0,0,1848,1850,3,548,274,0,1849,1848,1,0,0,
        0,1849,1850,1,0,0,0,1850,2007,1,0,0,0,1851,1853,5,852,0,0,1852,1854,
        5,1111,0,0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,1855,1,0,0,0,
        1855,2007,5,1135,0,0,1856,1858,5,332,0,0,1857,1859,5,1111,0,0,1858,
        1857,1,0,0,0,1858,1859,1,0,0,0,1859,1860,1,0,0,0,1860,2007,3,564,
        282,0,1861,1863,5,333,0,0,1862,1864,5,1111,0,0,1863,1862,1,0,0,0,
        1863,1864,1,0,0,0,1864,1865,1,0,0,0,1865,2007,3,564,282,0,1866,1868,
        5,334,0,0,1867,1869,5,1111,0,0,1868,1867,1,0,0,0,1868,1869,1,0,0,
        0,1869,1870,1,0,0,0,1870,2007,3,564,282,0,1871,1873,5,40,0,0,1872,
        1871,1,0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1876,3,64,
        32,0,1875,1877,5,1111,0,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,
        1880,1,0,0,0,1878,1881,3,544,272,0,1879,1881,5,40,0,0,1880,1878,
        1,0,0,0,1880,1879,1,0,0,0,1881,2007,1,0,0,0,1882,1884,7,25,0,0,1883,
        1885,5,1111,0,0,1884,1883,1,0,0,0,1884,1885,1,0,0,0,1885,1886,1,
        0,0,0,1886,2007,7,26,0,0,1887,1889,5,40,0,0,1888,1887,1,0,0,0,1888,
        1889,1,0,0,0,1889,1890,1,0,0,0,1890,1892,5,26,0,0,1891,1893,5,1111,
        0,0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1894,1,0,0,0,1894,2007,
        3,546,273,0,1895,1897,5,359,0,0,1896,1898,5,1111,0,0,1897,1896,1,
        0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,2007,5,1135,0,0,1900,
        1902,5,364,0,0,1901,1903,5,1111,0,0,1902,1901,1,0,0,0,1902,1903,
        1,0,0,0,1903,1904,1,0,0,0,1904,2007,7,27,0,0,1905,1907,5,367,0,0,
        1906,1908,5,1111,0,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,1909,
        1,0,0,0,1909,2007,5,1135,0,0,1910,1911,7,28,0,0,1911,1913,5,386,
        0,0,1912,1914,5,1111,0,0,1913,1912,1,0,0,0,1913,1914,1,0,0,0,1914,
        1915,1,0,0,0,1915,2007,5,1135,0,0,1916,1918,5,384,0,0,1917,1919,
        5,1111,0,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,1919,1920,1,0,0,0,
        1920,2007,7,26,0,0,1921,1923,5,395,0,0,1922,1924,5,1111,0,0,1923,
        1922,1,0,0,0,1923,1924,1,0,0,0,1924,1925,1,0,0,0,1925,2007,5,1135,
        0,0,1926,1927,5,78,0,0,1927,1929,5,386,0,0,1928,1930,5,1111,0,0,
        1929,1928,1,0,0,0,1929,1930,1,0,0,0,1930,1931,1,0,0,0,1931,2007,
        5,1135,0,0,1932,1934,5,442,0,0,1933,1935,5,1111,0,0,1934,1933,1,
        0,0,0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,2007,7,29,0,0,1937,
        1939,5,454,0,0,1938,1940,5,1111,0,0,1939,1938,1,0,0,0,1939,1940,
        1,0,0,0,1940,1941,1,0,0,0,1941,2007,3,566,283,0,1942,1944,5,487,
        0,0,1943,1945,5,1111,0,0,1944,1943,1,0,0,0,1944,1945,1,0,0,0,1945,
        1946,1,0,0,0,1946,2007,3,564,282,0,1947,1949,5,497,0,0,1948,1950,
        5,1111,0,0,1949,1948,1,0,0,0,1949,1950,1,0,0,0,1950,1951,1,0,0,0,
        1951,2007,3,564,282,0,1952,1954,5,530,0,0,1953,1955,5,1111,0,0,1954,
        1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,2007,7,30,
        0,0,1957,1959,5,536,0,0,1958,1960,5,1111,0,0,1959,1958,1,0,0,0,1959,
        1960,1,0,0,0,1960,1961,1,0,0,0,1961,2007,5,1135,0,0,1962,1964,5,
        585,0,0,1963,1965,5,1111,0,0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,
        1965,1966,1,0,0,0,1966,2007,7,31,0,0,1967,1968,5,612,0,0,1968,2007,
        5,636,0,0,1969,1971,5,976,0,0,1970,1972,5,1111,0,0,1971,1970,1,0,
        0,0,1971,1972,1,0,0,0,1972,1973,1,0,0,0,1973,2007,5,1135,0,0,1974,
        1976,5,614,0,0,1975,1977,5,1111,0,0,1976,1975,1,0,0,0,1976,1977,
        1,0,0,0,1977,1978,1,0,0,0,1978,2007,7,30,0,0,1979,1981,5,615,0,0,
        1980,1982,5,1111,0,0,1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,1983,
        1,0,0,0,1983,2007,7,30,0,0,1984,1986,5,616,0,0,1985,1987,5,1111,
        0,0,1986,1985,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,2007,
        3,564,282,0,1989,1990,5,630,0,0,1990,1992,3,558,279,0,1991,1993,
        3,112,56,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,2007,1,0,0,0,
        1994,1995,5,631,0,0,1995,1996,5,1111,0,0,1996,2007,3,110,55,0,1997,
        2007,3,112,56,0,1998,2000,5,174,0,0,1999,2001,5,1111,0,0,2000,1999,
        1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2003,5,1120,0,0,
        2003,2004,3,592,296,0,2004,2005,5,1121,0,0,2005,2007,1,0,0,0,2006,
        1844,1,0,0,0,2006,1851,1,0,0,0,2006,1856,1,0,0,0,2006,1861,1,0,0,
        0,2006,1866,1,0,0,0,2006,1872,1,0,0,0,2006,1882,1,0,0,0,2006,1888,
        1,0,0,0,2006,1895,1,0,0,0,2006,1900,1,0,0,0,2006,1905,1,0,0,0,2006,
        1910,1,0,0,0,2006,1916,1,0,0,0,2006,1921,1,0,0,0,2006,1926,1,0,0,
        0,2006,1932,1,0,0,0,2006,1937,1,0,0,0,2006,1942,1,0,0,0,2006,1947,
        1,0,0,0,2006,1952,1,0,0,0,2006,1957,1,0,0,0,2006,1962,1,0,0,0,2006,
        1967,1,0,0,0,2006,1969,1,0,0,0,2006,1974,1,0,0,0,2006,1979,1,0,0,
        0,2006,1984,1,0,0,0,2006,1989,1,0,0,0,2006,1994,1,0,0,0,2006,1997,
        1,0,0,0,2006,1998,1,0,0,0,2007,109,1,0,0,0,2008,2009,7,32,0,0,2009,
        111,1,0,0,0,2010,2011,5,619,0,0,2011,2012,7,20,0,0,2012,113,1,0,
        0,0,2013,2014,5,125,0,0,2014,2015,5,18,0,0,2015,2018,3,116,58,0,
        2016,2017,5,535,0,0,2017,2019,3,564,282,0,2018,2016,1,0,0,0,2018,
        2019,1,0,0,0,2019,2027,1,0,0,0,2020,2021,5,624,0,0,2021,2022,5,18,
        0,0,2022,2025,3,118,59,0,2023,2024,5,625,0,0,2024,2026,3,564,282,
        0,2025,2023,1,0,0,0,2025,2026,1,0,0,0,2026,2028,1,0,0,0,2027,2020,
        1,0,0,0,2027,2028,1,0,0,0,2028,2040,1,0,0,0,2029,2030,5,1120,0,0,
        2030,2035,3,120,60,0,2031,2032,5,1122,0,0,2032,2034,3,120,60,0,2033,
        2031,1,0,0,0,2034,2037,1,0,0,0,2035,2033,1,0,0,0,2035,2036,1,0,0,
        0,2036,2038,1,0,0,0,2037,2035,1,0,0,0,2038,2039,5,1121,0,0,2039,
        2041,1,0,0,0,2040,2029,1,0,0,0,2040,2041,1,0,0,0,2041,115,1,0,0,
        0,2042,2044,5,96,0,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,
        1,0,0,0,2045,2046,5,431,0,0,2046,2047,5,1120,0,0,2047,2048,3,660,
        330,0,2048,2049,5,1121,0,0,2049,2088,1,0,0,0,2050,2052,5,96,0,0,
        2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,2053,1,0,0,0,2053,2057,
        5,88,0,0,2054,2055,5,327,0,0,2055,2056,5,1111,0,0,2056,2058,7,33,
        0,0,2057,2054,1,0,0,0,2057,2058,1,0,0,0,2058,2059,1,0,0,0,2059,2060,
        5,1120,0,0,2060,2061,3,590,295,0,2061,2062,5,1121,0,0,2062,2088,
        1,0,0,0,2063,2073,5,129,0,0,2064,2065,5,1120,0,0,2065,2066,3,660,
        330,0,2066,2067,5,1121,0,0,2067,2074,1,0,0,0,2068,2069,5,356,0,0,
        2069,2070,5,1120,0,0,2070,2071,3,590,295,0,2071,2072,5,1121,0,0,
        2072,2074,1,0,0,0,2073,2064,1,0,0,0,2073,2068,1,0,0,0,2074,2088,
        1,0,0,0,2075,2085,5,460,0,0,2076,2077,5,1120,0,0,2077,2078,3,660,
        330,0,2078,2079,5,1121,0,0,2079,2086,1,0,0,0,2080,2081,5,356,0,0,
        2081,2082,5,1120,0,0,2082,2083,3,590,295,0,2083,2084,5,1121,0,0,
        2084,2086,1,0,0,0,2085,2076,1,0,0,0,2085,2080,1,0,0,0,2086,2088,
        1,0,0,0,2087,2043,1,0,0,0,2087,2051,1,0,0,0,2087,2063,1,0,0,0,2087,
        2075,1,0,0,0,2088,117,1,0,0,0,2089,2091,5,96,0,0,2090,2089,1,0,0,
        0,2090,2091,1,0,0,0,2091,2092,1,0,0,0,2092,2093,5,431,0,0,2093,2094,
        5,1120,0,0,2094,2095,3,660,330,0,2095,2096,5,1121,0,0,2096,2111,
        1,0,0,0,2097,2099,5,96,0,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,
        2100,1,0,0,0,2100,2104,5,88,0,0,2101,2102,5,327,0,0,2102,2103,5,
        1111,0,0,2103,2105,7,33,0,0,2104,2101,1,0,0,0,2104,2105,1,0,0,0,
        2105,2106,1,0,0,0,2106,2107,5,1120,0,0,2107,2108,3,590,295,0,2108,
        2109,5,1121,0,0,2109,2111,1,0,0,0,2110,2090,1,0,0,0,2110,2098,1,
        0,0,0,2111,119,1,0,0,0,2112,2113,5,125,0,0,2113,2114,3,558,279,0,
        2114,2115,5,182,0,0,2115,2116,5,458,0,0,2116,2117,5,634,0,0,2117,
        2118,5,1120,0,0,2118,2123,3,122,61,0,2119,2120,5,1122,0,0,2120,2122,
        3,122,61,0,2121,2119,1,0,0,0,2122,2125,1,0,0,0,2123,2121,1,0,0,0,
        2123,2124,1,0,0,0,2124,2126,1,0,0,0,2125,2123,1,0,0,0,2126,2130,
        5,1121,0,0,2127,2129,3,128,64,0,2128,2127,1,0,0,0,2129,2132,1,0,
        0,0,2130,2128,1,0,0,0,2130,2131,1,0,0,0,2131,2144,1,0,0,0,2132,2130,
        1,0,0,0,2133,2134,5,1120,0,0,2134,2139,3,126,63,0,2135,2136,5,1122,
        0,0,2136,2138,3,126,63,0,2137,2135,1,0,0,0,2138,2141,1,0,0,0,2139,
        2137,1,0,0,0,2139,2140,1,0,0,0,2140,2142,1,0,0,0,2141,2139,1,0,0,
        0,2142,2143,5,1121,0,0,2143,2145,1,0,0,0,2144,2133,1,0,0,0,2144,
        2145,1,0,0,0,2145,2259,1,0,0,0,2146,2147,5,125,0,0,2147,2148,3,558,
        279,0,2148,2149,5,182,0,0,2149,2150,5,458,0,0,2150,2151,5,634,0,
        0,2151,2155,3,122,61,0,2152,2154,3,128,64,0,2153,2152,1,0,0,0,2154,
        2157,1,0,0,0,2155,2153,1,0,0,0,2155,2156,1,0,0,0,2156,2169,1,0,0,
        0,2157,2155,1,0,0,0,2158,2159,5,1120,0,0,2159,2164,3,126,63,0,2160,
        2161,5,1122,0,0,2161,2163,3,126,63,0,2162,2160,1,0,0,0,2163,2166,
        1,0,0,0,2164,2162,1,0,0,0,2164,2165,1,0,0,0,2165,2167,1,0,0,0,2166,
        2164,1,0,0,0,2167,2168,5,1121,0,0,2168,2170,1,0,0,0,2169,2158,1,
        0,0,0,2169,2170,1,0,0,0,2170,2259,1,0,0,0,2171,2172,5,125,0,0,2172,
        2173,3,558,279,0,2173,2174,5,182,0,0,2174,2175,5,77,0,0,2175,2176,
        5,1120,0,0,2176,2181,3,122,61,0,2177,2178,5,1122,0,0,2178,2180,3,
        122,61,0,2179,2177,1,0,0,0,2180,2183,1,0,0,0,2181,2179,1,0,0,0,2181,
        2182,1,0,0,0,2182,2184,1,0,0,0,2183,2181,1,0,0,0,2184,2188,5,1121,
        0,0,2185,2187,3,128,64,0,2186,2185,1,0,0,0,2187,2190,1,0,0,0,2188,
        2186,1,0,0,0,2188,2189,1,0,0,0,2189,2202,1,0,0,0,2190,2188,1,0,0,
        0,2191,2192,5,1120,0,0,2192,2197,3,126,63,0,2193,2194,5,1122,0,0,
        2194,2196,3,126,63,0,2195,2193,1,0,0,0,2196,2199,1,0,0,0,2197,2195,
        1,0,0,0,2197,2198,1,0,0,0,2198,2200,1,0,0,0,2199,2197,1,0,0,0,2200,
        2201,5,1121,0,0,2201,2203,1,0,0,0,2202,2191,1,0,0,0,2202,2203,1,
        0,0,0,2203,2259,1,0,0,0,2204,2205,5,125,0,0,2205,2206,3,558,279,
        0,2206,2207,5,182,0,0,2207,2208,5,77,0,0,2208,2209,5,1120,0,0,2209,
        2214,3,124,62,0,2210,2211,5,1122,0,0,2211,2213,3,124,62,0,2212,2210,
        1,0,0,0,2213,2216,1,0,0,0,2214,2212,1,0,0,0,2214,2215,1,0,0,0,2215,
        2217,1,0,0,0,2216,2214,1,0,0,0,2217,2221,5,1121,0,0,2218,2220,3,
        128,64,0,2219,2218,1,0,0,0,2220,2223,1,0,0,0,2221,2219,1,0,0,0,2221,
        2222,1,0,0,0,2222,2235,1,0,0,0,2223,2221,1,0,0,0,2224,2225,5,1120,
        0,0,2225,2230,3,126,63,0,2226,2227,5,1122,0,0,2227,2229,3,126,63,
        0,2228,2226,1,0,0,0,2229,2232,1,0,0,0,2230,2228,1,0,0,0,2230,2231,
        1,0,0,0,2231,2233,1,0,0,0,2232,2230,1,0,0,0,2233,2234,5,1121,0,0,
        2234,2236,1,0,0,0,2235,2224,1,0,0,0,2235,2236,1,0,0,0,2236,2259,
        1,0,0,0,2237,2238,5,125,0,0,2238,2242,3,558,279,0,2239,2241,3,128,
        64,0,2240,2239,1,0,0,0,2241,2244,1,0,0,0,2242,2240,1,0,0,0,2242,
        2243,1,0,0,0,2243,2256,1,0,0,0,2244,2242,1,0,0,0,2245,2246,5,1120,
        0,0,2246,2251,3,126,63,0,2247,2248,5,1122,0,0,2248,2250,3,126,63,
        0,2249,2247,1,0,0,0,2250,2253,1,0,0,0,2251,2249,1,0,0,0,2251,2252,
        1,0,0,0,2252,2254,1,0,0,0,2253,2251,1,0,0,0,2254,2255,5,1121,0,0,
        2255,2257,1,0,0,0,2256,2245,1,0,0,0,2256,2257,1,0,0,0,2257,2259,
        1,0,0,0,2258,2112,1,0,0,0,2258,2146,1,0,0,0,2258,2171,1,0,0,0,2258,
        2204,1,0,0,0,2258,2237,1,0,0,0,2259,121,1,0,0,0,2260,2264,3,576,
        288,0,2261,2264,3,660,330,0,2262,2264,5,106,0,0,2263,2260,1,0,0,
        0,2263,2261,1,0,0,0,2263,2262,1,0,0,0,2264,123,1,0,0,0,2265,2266,
        5,1120,0,0,2266,2269,3,122,61,0,2267,2268,5,1122,0,0,2268,2270,3,
        122,61,0,2269,2267,1,0,0,0,2270,2271,1,0,0,0,2271,2269,1,0,0,0,2271,
        2272,1,0,0,0,2272,2273,1,0,0,0,2273,2274,5,1121,0,0,2274,125,1,0,
        0,0,2275,2276,5,624,0,0,2276,2280,3,558,279,0,2277,2279,3,128,64,
        0,2278,2277,1,0,0,0,2279,2282,1,0,0,0,2280,2278,1,0,0,0,2280,2281,
        1,0,0,0,2281,127,1,0,0,0,2282,2280,1,0,0,0,2283,2285,5,40,0,0,2284,
        2283,1,0,0,0,2284,2285,1,0,0,0,2285,2287,1,0,0,0,2286,2288,5,619,
        0,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,2288,2289,1,0,0,0,2289,2291,
        5,398,0,0,2290,2292,5,1111,0,0,2291,2290,1,0,0,0,2291,2292,1,0,0,
        0,2292,2293,1,0,0,0,2293,2332,3,548,274,0,2294,2296,5,359,0,0,2295,
        2297,5,1111,0,0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,2297,2298,1,
        0,0,0,2298,2332,5,1135,0,0,2299,2300,5,379,0,0,2300,2302,5,386,0,
        0,2301,2303,5,1111,0,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,
        2304,1,0,0,0,2304,2332,5,1135,0,0,2305,2306,5,78,0,0,2306,2308,5,
        386,0,0,2307,2309,5,1111,0,0,2308,2307,1,0,0,0,2308,2309,1,0,0,0,
        2309,2310,1,0,0,0,2310,2332,5,1135,0,0,2311,2313,5,487,0,0,2312,
        2314,5,1111,0,0,2313,2312,1,0,0,0,2313,2314,1,0,0,0,2314,2315,1,
        0,0,0,2315,2332,3,564,282,0,2316,2318,5,497,0,0,2317,2319,5,1111,
        0,0,2318,2317,1,0,0,0,2318,2319,1,0,0,0,2319,2320,1,0,0,0,2320,2332,
        3,564,282,0,2321,2323,5,630,0,0,2322,2324,5,1111,0,0,2323,2322,1,
        0,0,0,2323,2324,1,0,0,0,2324,2325,1,0,0,0,2325,2332,3,558,279,0,
        2326,2328,5,515,0,0,2327,2329,5,1111,0,0,2328,2327,1,0,0,0,2328,
        2329,1,0,0,0,2329,2330,1,0,0,0,2330,2332,3,558,279,0,2331,2284,1,
        0,0,0,2331,2294,1,0,0,0,2331,2299,1,0,0,0,2331,2305,1,0,0,0,2331,
        2311,1,0,0,0,2331,2316,1,0,0,0,2331,2321,1,0,0,0,2331,2326,1,0,0,
        0,2332,129,1,0,0,0,2333,2334,5,7,0,0,2334,2336,7,0,0,0,2335,2337,
        3,558,279,0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,2337,2339,1,0,0,
        0,2338,2340,3,62,31,0,2339,2338,1,0,0,0,2340,2341,1,0,0,0,2341,2339,
        1,0,0,0,2341,2342,1,0,0,0,2342,2352,1,0,0,0,2343,2344,5,7,0,0,2344,
        2345,7,0,0,0,2345,2346,3,558,279,0,2346,2347,5,647,0,0,2347,2348,
        5,379,0,0,2348,2349,5,386,0,0,2349,2350,5,503,0,0,2350,2352,1,0,
        0,0,2351,2333,1,0,0,0,2351,2343,1,0,0,0,2352,131,1,0,0,0,2353,2355,
        5,7,0,0,2354,2356,3,66,33,0,2355,2354,1,0,0,0,2355,2356,1,0,0,0,
        2356,2357,1,0,0,0,2357,2358,5,404,0,0,2358,2362,3,530,265,0,2359,
        2360,5,114,0,0,2360,2361,5,588,0,0,2361,2363,3,68,34,0,2362,2359,
        1,0,0,0,2362,2363,1,0,0,0,2363,2370,1,0,0,0,2364,2365,5,114,0,0,
        2365,2367,5,362,0,0,2366,2368,5,110,0,0,2367,2366,1,0,0,0,2367,2368,
        1,0,0,0,2368,2369,1,0,0,0,2369,2371,5,545,0,0,2370,2364,1,0,0,0,
        2370,2371,1,0,0,0,2371,2375,1,0,0,0,2372,2373,5,135,0,0,2373,2374,
        5,169,0,0,2374,2376,3,530,265,0,2375,2372,1,0,0,0,2375,2376,1,0,
        0,0,2376,2378,1,0,0,0,2377,2379,3,76,38,0,2378,2377,1,0,0,0,2378,
        2379,1,0,0,0,2379,2382,1,0,0,0,2380,2381,5,359,0,0,2381,2383,5,1135,
        0,0,2382,2380,1,0,0,0,2382,2383,1,0,0,0,2383,2386,1,0,0,0,2384,2385,
        5,390,0,0,2385,2387,3,376,188,0,2386,2384,1,0,0,0,2386,2387,1,0,
        0,0,2387,133,1,0,0,0,2388,2389,5,7,0,0,2389,2390,5,425,0,0,2390,
        2394,3,530,265,0,2391,2393,3,86,43,0,2392,2391,1,0,0,0,2393,2396,
        1,0,0,0,2394,2392,1,0,0,0,2394,2395,1,0,0,0,2395,135,1,0,0,0,2396,
        2394,1,0,0,0,2397,2398,5,7,0,0,2398,2399,5,444,0,0,2399,2400,5,582,
        0,0,2400,2401,5,768,0,0,2401,2402,5,464,0,0,2402,2403,5,88,0,0,2403,
        137,1,0,0,0,2404,2405,5,7,0,0,2405,2406,5,462,0,0,2406,2407,5,70,
        0,0,2407,2408,3,558,279,0,2408,2409,5,5,0,0,2409,2410,5,642,0,0,
        2410,2416,5,1135,0,0,2411,2413,5,440,0,0,2412,2414,5,1111,0,0,2413,
        2412,1,0,0,0,2413,2414,1,0,0,0,2414,2415,1,0,0,0,2415,2417,3,566,
        283,0,2416,2411,1,0,0,0,2416,2417,1,0,0,0,2417,2419,1,0,0,0,2418,
        2420,5,657,0,0,2419,2418,1,0,0,0,2419,2420,1,0,0,0,2420,2421,1,0,
        0,0,2421,2423,5,398,0,0,2422,2424,5,1111,0,0,2423,2422,1,0,0,0,2423,
        2424,1,0,0,0,2424,2425,1,0,0,0,2425,2426,3,548,274,0,2426,139,1,
        0,0,0,2427,2428,5,7,0,0,2428,2429,5,127,0,0,2429,2433,3,530,265,
        0,2430,2432,3,86,43,0,2431,2430,1,0,0,0,2432,2435,1,0,0,0,2433,2431,
        1,0,0,0,2433,2434,1,0,0,0,2434,141,1,0,0,0,2435,2433,1,0,0,0,2436,
        2437,5,7,0,0,2437,2438,5,591,0,0,2438,2439,3,558,279,0,2439,2440,
        5,528,0,0,2440,2441,5,1120,0,0,2441,2446,3,88,44,0,2442,2443,5,1122,
        0,0,2443,2445,3,88,44,0,2444,2442,1,0,0,0,2445,2448,1,0,0,0,2446,
        2444,1,0,0,0,2446,2447,1,0,0,0,2447,2449,1,0,0,0,2448,2446,1,0,0,
        0,2449,2450,5,1121,0,0,2450,143,1,0,0,0,2451,2453,5,7,0,0,2452,2454,
        7,1,0,0,2453,2452,1,0,0,0,2453,2454,1,0,0,0,2454,2456,1,0,0,0,2455,
        2457,5,75,0,0,2456,2455,1,0,0,0,2456,2457,1,0,0,0,2457,2458,1,0,
        0,0,2458,2459,5,166,0,0,2459,2461,3,532,266,0,2460,2462,3,616,308,
        0,2461,2460,1,0,0,0,2461,2462,1,0,0,0,2462,2471,1,0,0,0,2463,2468,
        3,152,76,0,2464,2465,5,1122,0,0,2465,2467,3,152,76,0,2466,2464,1,
        0,0,0,2467,2470,1,0,0,0,2468,2466,1,0,0,0,2468,2469,1,0,0,0,2469,
        2472,1,0,0,0,2470,2468,1,0,0,0,2471,2463,1,0,0,0,2471,2472,1,0,0,
        0,2472,2474,1,0,0,0,2473,2475,3,114,57,0,2474,2473,1,0,0,0,2474,
        2475,1,0,0,0,2475,145,1,0,0,0,2476,2477,5,7,0,0,2477,2478,5,630,
        0,0,2478,2479,3,558,279,0,2479,2480,7,34,0,0,2480,2481,5,380,0,0,
        2481,2485,5,1135,0,0,2482,2483,5,440,0,0,2483,2484,5,1111,0,0,2484,
        2486,3,566,283,0,2485,2482,1,0,0,0,2485,2486,1,0,0,0,2486,2488,1,
        0,0,0,2487,2489,5,657,0,0,2488,2487,1,0,0,0,2488,2489,1,0,0,0,2489,
        2490,1,0,0,0,2490,2492,5,398,0,0,2491,2493,5,1111,0,0,2492,2491,
        1,0,0,0,2492,2493,1,0,0,0,2493,2494,1,0,0,0,2494,2495,3,548,274,
        0,2495,147,1,0,0,0,2496,2500,5,7,0,0,2497,2498,5,327,0,0,2498,2499,
        5,1111,0,0,2499,2501,7,10,0,0,2500,2497,1,0,0,0,2500,2501,1,0,0,
        0,2501,2503,1,0,0,0,2502,2504,3,66,33,0,2503,2502,1,0,0,0,2503,2504,
        1,0,0,0,2504,2508,1,0,0,0,2505,2506,5,155,0,0,2506,2507,5,589,0,
        0,2507,2509,7,11,0,0,2508,2505,1,0,0,0,2508,2509,1,0,0,0,2509,2510,
        1,0,0,0,2510,2511,5,654,0,0,2511,2516,3,530,265,0,2512,2513,5,1120,
        0,0,2513,2514,3,590,295,0,2514,2515,5,1121,0,0,2515,2517,1,0,0,0,
        2516,2512,1,0,0,0,2516,2517,1,0,0,0,2517,2518,1,0,0,0,2518,2519,
        5,12,0,0,2519,2526,3,204,102,0,2520,2522,5,186,0,0,2521,2523,7,12,
        0,0,2522,2521,1,0,0,0,2522,2523,1,0,0,0,2523,2524,1,0,0,0,2524,2525,
        5,25,0,0,2525,2527,5,116,0,0,2526,2520,1,0,0,0,2526,2527,1,0,0,0,
        2527,149,1,0,0,0,2528,2529,5,7,0,0,2529,2531,5,590,0,0,2530,2532,
        3,612,306,0,2531,2530,1,0,0,0,2531,2532,1,0,0,0,2532,2533,1,0,0,
        0,2533,2535,3,530,265,0,2534,2536,3,60,30,0,2535,2534,1,0,0,0,2536,
        2537,1,0,0,0,2537,2535,1,0,0,0,2537,2538,1,0,0,0,2538,151,1,0,0,
        0,2539,2546,3,108,54,0,2540,2542,5,1122,0,0,2541,2540,1,0,0,0,2541,
        2542,1,0,0,0,2542,2543,1,0,0,0,2543,2545,3,108,54,0,2544,2541,1,
        0,0,0,2545,2548,1,0,0,0,2546,2544,1,0,0,0,2546,2547,1,0,0,0,2547,
        2942,1,0,0,0,2548,2546,1,0,0,0,2549,2551,5,5,0,0,2550,2552,5,27,
        0,0,2551,2550,1,0,0,0,2551,2552,1,0,0,0,2552,2554,1,0,0,0,2553,2555,
        3,614,307,0,2554,2553,1,0,0,0,2554,2555,1,0,0,0,2555,2556,1,0,0,
        0,2556,2557,3,558,279,0,2557,2561,3,94,47,0,2558,2562,5,418,0,0,
        2559,2560,5,325,0,0,2560,2562,3,558,279,0,2561,2558,1,0,0,0,2561,
        2559,1,0,0,0,2561,2562,1,0,0,0,2562,2942,1,0,0,0,2563,2565,5,5,0,
        0,2564,2566,5,27,0,0,2565,2564,1,0,0,0,2565,2566,1,0,0,0,2566,2568,
        1,0,0,0,2567,2569,3,614,307,0,2568,2567,1,0,0,0,2568,2569,1,0,0,
        0,2569,2570,1,0,0,0,2570,2571,5,1120,0,0,2571,2572,3,558,279,0,2572,
        2579,3,94,47,0,2573,2574,5,1122,0,0,2574,2575,3,558,279,0,2575,2576,
        3,94,47,0,2576,2578,1,0,0,0,2577,2573,1,0,0,0,2578,2581,1,0,0,0,
        2579,2577,1,0,0,0,2579,2580,1,0,0,0,2580,2582,1,0,0,0,2581,2579,
        1,0,0,0,2582,2583,5,1121,0,0,2583,2942,1,0,0,0,2584,2585,5,5,0,0,
        2585,2587,7,22,0,0,2586,2588,3,614,307,0,2587,2586,1,0,0,0,2587,
        2588,1,0,0,0,2588,2590,1,0,0,0,2589,2591,3,558,279,0,2590,2589,1,
        0,0,0,2590,2591,1,0,0,0,2591,2593,1,0,0,0,2592,2594,3,78,39,0,2593,
        2592,1,0,0,0,2593,2594,1,0,0,0,2594,2595,1,0,0,0,2595,2599,3,594,
        297,0,2596,2598,3,80,40,0,2597,2596,1,0,0,0,2598,2601,1,0,0,0,2599,
        2597,1,0,0,0,2599,2600,1,0,0,0,2600,2942,1,0,0,0,2601,2599,1,0,0,
        0,2602,2607,5,5,0,0,2603,2605,5,29,0,0,2604,2606,3,558,279,0,2605,
        2604,1,0,0,0,2605,2606,1,0,0,0,2606,2608,1,0,0,0,2607,2603,1,0,0,
        0,2607,2608,1,0,0,0,2608,2609,1,0,0,0,2609,2610,5,126,0,0,2610,2612,
        5,88,0,0,2611,2613,3,558,279,0,2612,2611,1,0,0,0,2612,2613,1,0,0,
        0,2613,2615,1,0,0,0,2614,2616,3,78,39,0,2615,2614,1,0,0,0,2615,2616,
        1,0,0,0,2616,2617,1,0,0,0,2617,2621,3,594,297,0,2618,2620,3,80,40,
        0,2619,2618,1,0,0,0,2620,2623,1,0,0,0,2621,2619,1,0,0,0,2621,2622,
        1,0,0,0,2622,2942,1,0,0,0,2623,2621,1,0,0,0,2624,2629,5,5,0,0,2625,
        2627,5,29,0,0,2626,2628,3,558,279,0,2627,2626,1,0,0,0,2627,2628,
        1,0,0,0,2628,2630,1,0,0,0,2629,2625,1,0,0,0,2629,2630,1,0,0,0,2630,
        2631,1,0,0,0,2631,2633,5,175,0,0,2632,2634,7,22,0,0,2633,2632,1,
        0,0,0,2633,2634,1,0,0,0,2634,2636,1,0,0,0,2635,2637,3,558,279,0,
        2636,2635,1,0,0,0,2636,2637,1,0,0,0,2637,2639,1,0,0,0,2638,2640,
        3,78,39,0,2639,2638,1,0,0,0,2639,2640,1,0,0,0,2640,2641,1,0,0,0,
        2641,2645,3,594,297,0,2642,2644,3,80,40,0,2643,2642,1,0,0,0,2644,
        2647,1,0,0,0,2645,2643,1,0,0,0,2645,2646,1,0,0,0,2646,2942,1,0,0,
        0,2647,2645,1,0,0,0,2648,2649,5,5,0,0,2649,2651,7,24,0,0,2650,2652,
        7,22,0,0,2651,2650,1,0,0,0,2651,2652,1,0,0,0,2652,2654,1,0,0,0,2653,
        2655,3,558,279,0,2654,2653,1,0,0,0,2654,2655,1,0,0,0,2655,2656,1,
        0,0,0,2656,2660,3,594,297,0,2657,2659,3,80,40,0,2658,2657,1,0,0,
        0,2659,2662,1,0,0,0,2660,2658,1,0,0,0,2660,2661,1,0,0,0,2661,2942,
        1,0,0,0,2662,2660,1,0,0,0,2663,2668,5,5,0,0,2664,2666,5,29,0,0,2665,
        2667,3,558,279,0,2666,2665,1,0,0,0,2666,2667,1,0,0,0,2667,2669,1,
        0,0,0,2668,2664,1,0,0,0,2668,2669,1,0,0,0,2669,2670,1,0,0,0,2670,
        2671,5,64,0,0,2671,2673,5,88,0,0,2672,2674,3,614,307,0,2673,2672,
        1,0,0,0,2673,2674,1,0,0,0,2674,2676,1,0,0,0,2675,2677,3,558,279,
        0,2676,2675,1,0,0,0,2676,2677,1,0,0,0,2677,2678,1,0,0,0,2678,2679,
        3,594,297,0,2679,2680,3,100,50,0,2680,2942,1,0,0,0,2681,2686,5,5,
        0,0,2682,2684,5,29,0,0,2683,2685,3,558,279,0,2684,2683,1,0,0,0,2684,
        2685,1,0,0,0,2685,2687,1,0,0,0,2686,2682,1,0,0,0,2686,2687,1,0,0,
        0,2687,2688,1,0,0,0,2688,2689,5,25,0,0,2689,2690,5,1120,0,0,2690,
        2691,3,660,330,0,2691,2692,5,1121,0,0,2692,2942,1,0,0,0,2693,2695,
        5,327,0,0,2694,2696,5,1111,0,0,2695,2694,1,0,0,0,2695,2696,1,0,0,
        0,2696,2697,1,0,0,0,2697,2942,7,35,0,0,2698,2700,5,7,0,0,2699,2701,
        5,27,0,0,2700,2699,1,0,0,0,2700,2701,1,0,0,0,2701,2702,1,0,0,0,2702,
        2708,3,558,279,0,2703,2704,5,149,0,0,2704,2705,5,40,0,0,2705,2709,
        3,606,303,0,2706,2707,5,49,0,0,2707,2709,5,40,0,0,2708,2703,1,0,
        0,0,2708,2706,1,0,0,0,2709,2942,1,0,0,0,2710,2712,5,23,0,0,2711,
        2713,5,27,0,0,2712,2711,1,0,0,0,2712,2713,1,0,0,0,2713,2715,1,0,
        0,0,2714,2716,3,612,306,0,2715,2714,1,0,0,0,2715,2716,1,0,0,0,2716,
        2717,1,0,0,0,2717,2718,3,558,279,0,2718,2719,3,558,279,0,2719,2723,
        3,94,47,0,2720,2724,5,418,0,0,2721,2722,5,325,0,0,2722,2724,3,558,
        279,0,2723,2720,1,0,0,0,2723,2721,1,0,0,0,2723,2724,1,0,0,0,2724,
        2942,1,0,0,0,2725,2726,5,135,0,0,2726,2727,5,27,0,0,2727,2728,3,
        558,279,0,2728,2729,5,169,0,0,2729,2730,3,558,279,0,2730,2942,1,
        0,0,0,2731,2733,5,99,0,0,2732,2734,5,1111,0,0,2733,2732,1,0,0,0,
        2733,2734,1,0,0,0,2734,2735,1,0,0,0,2735,2942,7,4,0,0,2736,2738,
        5,499,0,0,2737,2739,5,27,0,0,2738,2737,1,0,0,0,2738,2739,1,0,0,0,
        2739,2741,1,0,0,0,2740,2742,3,612,306,0,2741,2740,1,0,0,0,2741,2742,
        1,0,0,0,2742,2743,1,0,0,0,2743,2744,3,558,279,0,2744,2748,3,94,47,
        0,2745,2749,5,418,0,0,2746,2747,5,325,0,0,2747,2749,3,558,279,0,
        2748,2745,1,0,0,0,2748,2746,1,0,0,0,2748,2749,1,0,0,0,2749,2942,
        1,0,0,0,2750,2752,5,49,0,0,2751,2753,5,27,0,0,2752,2751,1,0,0,0,
        2752,2753,1,0,0,0,2753,2755,1,0,0,0,2754,2756,3,612,306,0,2755,2754,
        1,0,0,0,2755,2756,1,0,0,0,2756,2757,1,0,0,0,2757,2759,3,558,279,
        0,2758,2760,5,140,0,0,2759,2758,1,0,0,0,2759,2760,1,0,0,0,2760,2942,
        1,0,0,0,2761,2762,5,49,0,0,2762,2764,7,36,0,0,2763,2765,3,612,306,
        0,2764,2763,1,0,0,0,2764,2765,1,0,0,0,2765,2766,1,0,0,0,2766,2942,
        3,558,279,0,2767,2768,5,49,0,0,2768,2769,5,126,0,0,2769,2942,5,88,
        0,0,2770,2771,5,135,0,0,2771,2772,7,22,0,0,2772,2773,3,558,279,0,
        2773,2774,5,169,0,0,2774,2775,3,558,279,0,2775,2942,1,0,0,0,2776,
        2777,5,7,0,0,2777,2778,5,78,0,0,2778,2779,3,558,279,0,2779,2780,
        7,16,0,0,2780,2942,1,0,0,0,2781,2782,5,49,0,0,2782,2784,7,22,0,0,
        2783,2785,3,612,306,0,2784,2783,1,0,0,0,2784,2785,1,0,0,0,2785,2786,
        1,0,0,0,2786,2942,3,558,279,0,2787,2788,5,49,0,0,2788,2789,5,64,
        0,0,2789,2791,5,88,0,0,2790,2792,3,612,306,0,2791,2790,1,0,0,0,2791,
        2792,1,0,0,0,2792,2793,1,0,0,0,2793,2942,3,558,279,0,2794,2795,5,
        387,0,0,2795,2942,5,89,0,0,2796,2797,5,394,0,0,2797,2942,5,89,0,
        0,2798,2800,5,135,0,0,2799,2801,7,37,0,0,2800,2799,1,0,0,0,2800,
        2801,1,0,0,0,2801,2804,1,0,0,0,2802,2805,3,558,279,0,2803,2805,3,
        530,265,0,2804,2802,1,0,0,0,2804,2803,1,0,0,0,2805,2942,1,0,0,0,
        2806,2807,5,120,0,0,2807,2808,5,18,0,0,2808,2942,3,590,295,0,2809,
        2810,5,31,0,0,2810,2811,5,169,0,0,2811,2812,5,24,0,0,2812,2813,5,
        149,0,0,2813,2816,3,544,272,0,2814,2815,5,26,0,0,2815,2817,3,546,
        273,0,2816,2814,1,0,0,0,2816,2817,1,0,0,0,2817,2942,1,0,0,0,2818,
        2820,5,40,0,0,2819,2818,1,0,0,0,2819,2820,1,0,0,0,2820,2821,1,0,
        0,0,2821,2822,5,24,0,0,2822,2823,5,149,0,0,2823,2824,5,1111,0,0,
        2824,2828,3,544,272,0,2825,2826,5,26,0,0,2826,2827,5,1111,0,0,2827,
        2829,3,546,273,0,2828,2825,1,0,0,0,2828,2829,1,0,0,0,2829,2942,1,
        0,0,0,2830,2831,5,388,0,0,2831,2942,5,630,0,0,2832,2833,5,437,0,
        0,2833,2942,5,630,0,0,2834,2942,5,63,0,0,2835,2836,7,38,0,0,2836,
        2942,5,651,0,0,2837,2838,5,5,0,0,2838,2840,5,125,0,0,2839,2841,3,
        614,307,0,2840,2839,1,0,0,0,2840,2841,1,0,0,0,2841,2842,1,0,0,0,
        2842,2843,5,1120,0,0,2843,2848,3,120,60,0,2844,2845,5,1122,0,0,2845,
        2847,3,120,60,0,2846,2844,1,0,0,0,2847,2850,1,0,0,0,2848,2846,1,
        0,0,0,2848,2849,1,0,0,0,2849,2851,1,0,0,0,2850,2848,1,0,0,0,2851,
        2852,5,1121,0,0,2852,2942,1,0,0,0,2853,2854,5,49,0,0,2854,2856,5,
        125,0,0,2855,2857,3,612,306,0,2856,2855,1,0,0,0,2856,2857,1,0,0,
        0,2857,2858,1,0,0,0,2858,2942,3,590,295,0,2859,2860,5,388,0,0,2860,
        2863,5,125,0,0,2861,2864,3,590,295,0,2862,2864,5,6,0,0,2863,2861,
        1,0,0,0,2863,2862,1,0,0,0,2864,2865,1,0,0,0,2865,2942,5,630,0,0,
        2866,2867,5,437,0,0,2867,2870,5,125,0,0,2868,2871,3,590,295,0,2869,
        2871,5,6,0,0,2870,2868,1,0,0,0,2870,2869,1,0,0,0,2871,2872,1,0,0,
        0,2872,2942,5,630,0,0,2873,2874,5,639,0,0,2874,2877,5,125,0,0,2875,
        2878,3,590,295,0,2876,2878,5,6,0,0,2877,2875,1,0,0,0,2877,2876,1,
        0,0,0,2878,2942,1,0,0,0,2879,2880,5,354,0,0,2880,2881,5,125,0,0,
        2881,2942,3,564,282,0,2882,2883,5,563,0,0,2883,2884,5,125,0,0,2884,
        2885,3,590,295,0,2885,2886,5,84,0,0,2886,2887,5,1120,0,0,2887,2892,
        3,120,60,0,2888,2889,5,1122,0,0,2889,2891,3,120,60,0,2890,2888,1,
        0,0,0,2891,2894,1,0,0,0,2892,2890,1,0,0,0,2892,2893,1,0,0,0,2893,
        2895,1,0,0,0,2894,2892,1,0,0,0,2895,2896,5,1121,0,0,2896,2942,1,
        0,0,0,2897,2898,5,407,0,0,2898,2899,5,125,0,0,2899,2900,3,558,279,
        0,2900,2901,5,186,0,0,2901,2902,5,166,0,0,2902,2905,3,532,266,0,
        2903,2904,7,38,0,0,2904,2906,5,651,0,0,2905,2903,1,0,0,0,2905,2906,
        1,0,0,0,2906,2942,1,0,0,0,2907,2908,5,9,0,0,2908,2911,5,125,0,0,
        2909,2912,3,590,295,0,2910,2912,5,6,0,0,2911,2909,1,0,0,0,2911,2910,
        1,0,0,0,2912,2942,1,0,0,0,2913,2914,5,25,0,0,2914,2917,5,125,0,0,
        2915,2918,3,590,295,0,2916,2918,5,6,0,0,2917,2915,1,0,0,0,2917,2916,
        1,0,0,0,2918,2942,1,0,0,0,2919,2920,5,115,0,0,2920,2923,5,125,0,
        0,2921,2924,3,590,295,0,2922,2924,5,6,0,0,2923,2921,1,0,0,0,2923,
        2922,1,0,0,0,2924,2942,1,0,0,0,2925,2926,5,553,0,0,2926,2929,5,125,
        0,0,2927,2930,3,590,295,0,2928,2930,5,6,0,0,2929,2927,1,0,0,0,2929,
        2928,1,0,0,0,2930,2942,1,0,0,0,2931,2932,5,564,0,0,2932,2935,5,125,
        0,0,2933,2936,3,590,295,0,2934,2936,5,6,0,0,2935,2933,1,0,0,0,2935,
        2934,1,0,0,0,2936,2942,1,0,0,0,2937,2938,5,562,0,0,2938,2942,5,534,
        0,0,2939,2940,5,647,0,0,2940,2942,5,534,0,0,2941,2539,1,0,0,0,2941,
        2549,1,0,0,0,2941,2563,1,0,0,0,2941,2584,1,0,0,0,2941,2602,1,0,0,
        0,2941,2624,1,0,0,0,2941,2648,1,0,0,0,2941,2663,1,0,0,0,2941,2681,
        1,0,0,0,2941,2693,1,0,0,0,2941,2698,1,0,0,0,2941,2710,1,0,0,0,2941,
        2725,1,0,0,0,2941,2731,1,0,0,0,2941,2736,1,0,0,0,2941,2750,1,0,0,
        0,2941,2761,1,0,0,0,2941,2767,1,0,0,0,2941,2770,1,0,0,0,2941,2776,
        1,0,0,0,2941,2781,1,0,0,0,2941,2787,1,0,0,0,2941,2794,1,0,0,0,2941,
        2796,1,0,0,0,2941,2798,1,0,0,0,2941,2806,1,0,0,0,2941,2809,1,0,0,
        0,2941,2819,1,0,0,0,2941,2830,1,0,0,0,2941,2832,1,0,0,0,2941,2834,
        1,0,0,0,2941,2835,1,0,0,0,2941,2837,1,0,0,0,2941,2853,1,0,0,0,2941,
        2859,1,0,0,0,2941,2866,1,0,0,0,2941,2873,1,0,0,0,2941,2879,1,0,0,
        0,2941,2882,1,0,0,0,2941,2897,1,0,0,0,2941,2907,1,0,0,0,2941,2913,
        1,0,0,0,2941,2919,1,0,0,0,2941,2925,1,0,0,0,2941,2931,1,0,0,0,2941,
        2937,1,0,0,0,2941,2939,1,0,0,0,2942,153,1,0,0,0,2943,2944,5,49,0,
        0,2944,2946,7,0,0,0,2945,2947,3,612,306,0,2946,2945,1,0,0,0,2946,
        2947,1,0,0,0,2947,2948,1,0,0,0,2948,2949,3,558,279,0,2949,155,1,
        0,0,0,2950,2951,5,49,0,0,2951,2953,5,404,0,0,2952,2954,3,612,306,
        0,2953,2952,1,0,0,0,2953,2954,1,0,0,0,2954,2955,1,0,0,0,2955,2956,
        3,530,265,0,2956,157,1,0,0,0,2957,2958,5,49,0,0,2958,2960,5,78,0,
        0,2959,2961,7,1,0,0,2960,2959,1,0,0,0,2960,2961,1,0,0,0,2961,2962,
        1,0,0,0,2962,2963,3,558,279,0,2963,2964,5,114,0,0,2964,2977,3,532,
        266,0,2965,2967,5,327,0,0,2966,2968,5,1111,0,0,2967,2966,1,0,0,0,
        2967,2968,1,0,0,0,2968,2969,1,0,0,0,2969,2976,7,39,0,0,2970,2972,
        5,99,0,0,2971,2973,5,1111,0,0,2972,2971,1,0,0,0,2972,2973,1,0,0,
        0,2973,2974,1,0,0,0,2974,2976,7,4,0,0,2975,2965,1,0,0,0,2975,2970,
        1,0,0,0,2976,2979,1,0,0,0,2977,2975,1,0,0,0,2977,2978,1,0,0,0,2978,
        2981,1,0,0,0,2979,2977,1,0,0,0,2980,2982,3,616,308,0,2981,2980,1,
        0,0,0,2981,2982,1,0,0,0,2982,159,1,0,0,0,2983,2984,5,49,0,0,2984,
        2985,5,462,0,0,2985,2986,5,70,0,0,2986,2987,3,558,279,0,2987,2988,
        5,398,0,0,2988,2989,5,1111,0,0,2989,2990,3,548,274,0,2990,161,1,
        0,0,0,2991,2992,5,49,0,0,2992,2994,5,127,0,0,2993,2995,3,612,306,
        0,2994,2993,1,0,0,0,2994,2995,1,0,0,0,2995,2996,1,0,0,0,2996,2997,
        3,530,265,0,2997,163,1,0,0,0,2998,2999,5,49,0,0,2999,3001,5,425,
        0,0,3000,3002,3,612,306,0,3001,3000,1,0,0,0,3001,3002,1,0,0,0,3002,
        3003,1,0,0,0,3003,3004,3,530,265,0,3004,165,1,0,0,0,3005,3006,5,
        49,0,0,3006,3008,5,591,0,0,3007,3009,3,612,306,0,3008,3007,1,0,0,
        0,3008,3009,1,0,0,0,3009,3010,1,0,0,0,3010,3011,3,558,279,0,3011,
        167,1,0,0,0,3012,3014,5,49,0,0,3013,3015,5,632,0,0,3014,3013,1,0,
        0,0,3014,3015,1,0,0,0,3015,3016,1,0,0,0,3016,3018,5,166,0,0,3017,
        3019,3,612,306,0,3018,3017,1,0,0,0,3018,3019,1,0,0,0,3019,3020,1,
        0,0,0,3020,3022,3,592,296,0,3021,3023,3,616,308,0,3022,3021,1,0,
        0,0,3022,3023,1,0,0,0,3023,3025,1,0,0,0,3024,3026,7,40,0,0,3025,
        3024,1,0,0,0,3025,3026,1,0,0,0,3026,169,1,0,0,0,3027,3028,5,49,0,
        0,3028,3029,5,630,0,0,3029,3035,3,558,279,0,3030,3032,5,398,0,0,
        3031,3033,5,1111,0,0,3032,3031,1,0,0,0,3032,3033,1,0,0,0,3033,3034,
        1,0,0,0,3034,3036,3,548,274,0,3035,3030,1,0,0,0,3035,3036,1,0,0,
        0,3036,171,1,0,0,0,3037,3038,5,49,0,0,3038,3040,5,171,0,0,3039,3041,
        3,612,306,0,3040,3039,1,0,0,0,3040,3041,1,0,0,0,3041,3042,1,0,0,
        0,3042,3043,3,530,265,0,3043,173,1,0,0,0,3044,3045,5,49,0,0,3045,
        3047,5,654,0,0,3046,3048,3,612,306,0,3047,3046,1,0,0,0,3047,3048,
        1,0,0,0,3048,3049,1,0,0,0,3049,3054,3,530,265,0,3050,3051,5,1122,
        0,0,3051,3053,3,530,265,0,3052,3050,1,0,0,0,3053,3056,1,0,0,0,3054,
        3052,1,0,0,0,3054,3055,1,0,0,0,3055,3058,1,0,0,0,3056,3054,1,0,0,
        0,3057,3059,7,40,0,0,3058,3057,1,0,0,0,3058,3059,1,0,0,0,3059,175,
        1,0,0,0,3060,3061,5,49,0,0,3061,3063,5,579,0,0,3062,3064,3,612,306,
        0,3063,3062,1,0,0,0,3063,3064,1,0,0,0,3064,3065,1,0,0,0,3065,3070,
        3,534,267,0,3066,3067,5,1122,0,0,3067,3069,3,534,267,0,3068,3066,
        1,0,0,0,3069,3072,1,0,0,0,3070,3068,1,0,0,0,3070,3071,1,0,0,0,3071,
        177,1,0,0,0,3072,3070,1,0,0,0,3073,3074,5,149,0,0,3074,3075,5,40,
        0,0,3075,3086,5,579,0,0,3076,3087,5,516,0,0,3077,3087,5,6,0,0,3078,
        3083,3,534,267,0,3079,3080,5,1122,0,0,3080,3082,3,534,267,0,3081,
        3079,1,0,0,0,3082,3085,1,0,0,0,3083,3081,1,0,0,0,3083,3084,1,0,0,
        0,3084,3087,1,0,0,0,3085,3083,1,0,0,0,3086,3076,1,0,0,0,3086,3077,
        1,0,0,0,3086,3078,1,0,0,0,3087,3088,1,0,0,0,3088,3091,5,169,0,0,
        3089,3092,3,540,270,0,3090,3092,3,558,279,0,3091,3089,1,0,0,0,3091,
        3090,1,0,0,0,3092,3100,1,0,0,0,3093,3096,5,1122,0,0,3094,3097,3,
        540,270,0,3095,3097,3,558,279,0,3096,3094,1,0,0,0,3096,3095,1,0,
        0,0,3097,3099,1,0,0,0,3098,3093,1,0,0,0,3099,3102,1,0,0,0,3100,3098,
        1,0,0,0,3100,3101,1,0,0,0,3101,3107,1,0,0,0,3102,3100,1,0,0,0,3103,
        3104,5,149,0,0,3104,3105,5,579,0,0,3105,3107,3,422,211,0,3106,3073,
        1,0,0,0,3106,3103,1,0,0,0,3107,179,1,0,0,0,3108,3110,5,49,0,0,3109,
        3111,5,632,0,0,3110,3109,1,0,0,0,3110,3111,1,0,0,0,3111,3112,1,0,
        0,0,3112,3114,5,590,0,0,3113,3115,3,612,306,0,3114,3113,1,0,0,0,
        3114,3115,1,0,0,0,3115,3117,1,0,0,0,3116,3118,5,3,0,0,3117,3116,
        1,0,0,0,3117,3118,1,0,0,0,3118,3119,1,0,0,0,3119,3124,3,530,265,
        0,3120,3121,5,1122,0,0,3121,3123,3,530,265,0,3122,3120,1,0,0,0,3123,
        3126,1,0,0,0,3124,3122,1,0,0,0,3124,3125,1,0,0,0,3125,181,1,0,0,
        0,3126,3124,1,0,0,0,3127,3128,5,135,0,0,3128,3129,5,166,0,0,3129,
        3134,3,184,92,0,3130,3131,5,1122,0,0,3131,3133,3,184,92,0,3132,3130,
        1,0,0,0,3133,3136,1,0,0,0,3134,3132,1,0,0,0,3134,3135,1,0,0,0,3135,
        183,1,0,0,0,3136,3134,1,0,0,0,3137,3139,3,532,266,0,3138,3140,3,
        616,308,0,3139,3138,1,0,0,0,3139,3140,1,0,0,0,3140,3141,1,0,0,0,
        3141,3142,5,169,0,0,3142,3143,3,532,266,0,3143,185,1,0,0,0,3144,
        3146,5,639,0,0,3145,3147,5,166,0,0,3146,3145,1,0,0,0,3146,3147,1,
        0,0,0,3147,3148,1,0,0,0,3148,3150,3,532,266,0,3149,3151,3,616,308,
        0,3150,3149,1,0,0,0,3150,3151,1,0,0,0,3151,187,1,0,0,0,3152,3153,
        5,19,0,0,3153,3160,3,530,265,0,3154,3157,5,1120,0,0,3155,3158,3,
        600,300,0,3156,3158,3,596,298,0,3157,3155,1,0,0,0,3157,3156,1,0,
        0,0,3157,3158,1,0,0,0,3158,3159,1,0,0,0,3159,3161,5,1121,0,0,3160,
        3154,1,0,0,0,3160,3161,1,0,0,0,3161,189,1,0,0,0,3162,3165,3,216,
        108,0,3163,3165,3,218,109,0,3164,3162,1,0,0,0,3164,3163,1,0,0,0,
        3165,191,1,0,0,0,3166,3167,5,390,0,0,3167,3168,3,596,298,0,3168,
        193,1,0,0,0,3169,3174,3,220,110,0,3170,3174,3,222,111,0,3171,3174,
        3,224,112,0,3172,3174,3,226,113,0,3173,3169,1,0,0,0,3173,3170,1,
        0,0,0,3173,3171,1,0,0,0,3173,3172,1,0,0,0,3174,195,1,0,0,0,3175,
        3177,5,82,0,0,3176,3178,7,41,0,0,3177,3176,1,0,0,0,3177,3178,1,0,
        0,0,3178,3180,1,0,0,0,3179,3181,5,75,0,0,3180,3179,1,0,0,0,3180,
        3181,1,0,0,0,3181,3183,1,0,0,0,3182,3184,5,84,0,0,3183,3182,1,0,
        0,0,3183,3184,1,0,0,0,3184,3185,1,0,0,0,3185,3192,3,532,266,0,3186,
        3187,5,125,0,0,3187,3189,5,1120,0,0,3188,3190,3,590,295,0,3189,3188,
        1,0,0,0,3189,3190,1,0,0,0,3190,3191,1,0,0,0,3191,3193,5,1121,0,0,
        3192,3186,1,0,0,0,3192,3193,1,0,0,0,3193,3210,1,0,0,0,3194,3195,
        5,1120,0,0,3195,3196,3,590,295,0,3196,3197,5,1121,0,0,3197,3199,
        1,0,0,0,3198,3194,1,0,0,0,3198,3199,1,0,0,0,3199,3200,1,0,0,0,3200,
        3211,3,208,104,0,3201,3202,5,149,0,0,3202,3207,3,210,105,0,3203,
        3204,5,1122,0,0,3204,3206,3,210,105,0,3205,3203,1,0,0,0,3206,3209,
        1,0,0,0,3207,3205,1,0,0,0,3207,3208,1,0,0,0,3208,3211,1,0,0,0,3209,
        3207,1,0,0,0,3210,3198,1,0,0,0,3210,3201,1,0,0,0,3211,3224,1,0,0,
        0,3212,3213,5,114,0,0,3213,3214,5,392,0,0,3214,3215,5,88,0,0,3215,
        3216,5,178,0,0,3216,3221,3,210,105,0,3217,3218,5,1122,0,0,3218,3220,
        3,210,105,0,3219,3217,1,0,0,0,3220,3223,1,0,0,0,3221,3219,1,0,0,
        0,3221,3222,1,0,0,0,3222,3225,1,0,0,0,3223,3221,1,0,0,0,3224,3212,
        1,0,0,0,3224,3225,1,0,0,0,3225,197,1,0,0,0,3226,3227,5,98,0,0,3227,
        3229,5,379,0,0,3228,3230,7,42,0,0,3229,3228,1,0,0,0,3229,3230,1,
        0,0,0,3230,3232,1,0,0,0,3231,3233,5,461,0,0,3232,3231,1,0,0,0,3232,
        3233,1,0,0,0,3233,3234,1,0,0,0,3234,3235,5,79,0,0,3235,3237,5,1135,
        0,0,3236,3238,7,6,0,0,3237,3236,1,0,0,0,3237,3238,1,0,0,0,3238,3239,
        1,0,0,0,3239,3240,5,84,0,0,3240,3241,5,166,0,0,3241,3247,3,532,266,
        0,3242,3243,5,125,0,0,3243,3244,5,1120,0,0,3244,3245,3,590,295,0,
        3245,3246,5,1121,0,0,3246,3248,1,0,0,0,3247,3242,1,0,0,0,3247,3248,
        1,0,0,0,3248,3252,1,0,0,0,3249,3250,5,24,0,0,3250,3251,5,149,0,0,
        3251,3253,3,544,272,0,3252,3249,1,0,0,0,3252,3253,1,0,0,0,3253,3260,
        1,0,0,0,3254,3256,7,43,0,0,3255,3257,3,268,134,0,3256,3255,1,0,0,
        0,3257,3258,1,0,0,0,3258,3256,1,0,0,0,3258,3259,1,0,0,0,3259,3261,
        1,0,0,0,3260,3254,1,0,0,0,3260,3261,1,0,0,0,3261,3268,1,0,0,0,3262,
        3264,5,97,0,0,3263,3265,3,270,135,0,3264,3263,1,0,0,0,3265,3266,
        1,0,0,0,3266,3264,1,0,0,0,3266,3267,1,0,0,0,3267,3269,1,0,0,0,3268,
        3262,1,0,0,0,3268,3269,1,0,0,0,3269,3274,1,0,0,0,3270,3271,5,75,
        0,0,3271,3272,3,564,282,0,3272,3273,7,44,0,0,3273,3275,1,0,0,0,3274,
        3270,1,0,0,0,3274,3275,1,0,0,0,3275,3287,1,0,0,0,3276,3277,5,1120,
        0,0,3277,3282,3,212,106,0,3278,3279,5,1122,0,0,3279,3281,3,212,106,
        0,3280,3278,1,0,0,0,3281,3284,1,0,0,0,3282,3280,1,0,0,0,3282,3283,
        1,0,0,0,3283,3285,1,0,0,0,3284,3282,1,0,0,0,3285,3286,5,1121,0,0,
        3286,3288,1,0,0,0,3287,3276,1,0,0,0,3287,3288,1,0,0,0,3288,3298,
        1,0,0,0,3289,3290,5,149,0,0,3290,3295,3,210,105,0,3291,3292,5,1122,
        0,0,3292,3294,3,210,105,0,3293,3291,1,0,0,0,3294,3297,1,0,0,0,3295,
        3293,1,0,0,0,3295,3296,1,0,0,0,3296,3299,1,0,0,0,3297,3295,1,0,0,
        0,3298,3289,1,0,0,0,3298,3299,1,0,0,0,3299,199,1,0,0,0,3300,3301,
        5,98,0,0,3301,3303,5,665,0,0,3302,3304,7,42,0,0,3303,3302,1,0,0,
        0,3303,3304,1,0,0,0,3304,3306,1,0,0,0,3305,3307,5,461,0,0,3306,3305,
        1,0,0,0,3306,3307,1,0,0,0,3307,3308,1,0,0,0,3308,3309,5,79,0,0,3309,
        3311,5,1135,0,0,3310,3312,7,6,0,0,3311,3310,1,0,0,0,3311,3312,1,
        0,0,0,3312,3313,1,0,0,0,3313,3314,5,84,0,0,3314,3315,5,166,0,0,3315,
        3319,3,532,266,0,3316,3317,5,24,0,0,3317,3318,5,149,0,0,3318,3320,
        3,544,272,0,3319,3316,1,0,0,0,3319,3320,1,0,0,0,3320,3327,1,0,0,
        0,3321,3322,5,584,0,0,3322,3323,5,435,0,0,3323,3324,5,18,0,0,3324,
        3325,5,1113,0,0,3325,3326,5,1135,0,0,3326,3328,5,1112,0,0,3327,3321,
        1,0,0,0,3327,3328,1,0,0,0,3328,3333,1,0,0,0,3329,3330,5,75,0,0,3330,
        3331,3,564,282,0,3331,3332,7,44,0,0,3332,3334,1,0,0,0,3333,3329,
        1,0,0,0,3333,3334,1,0,0,0,3334,3346,1,0,0,0,3335,3336,5,1120,0,0,
        3336,3341,3,212,106,0,3337,3338,5,1122,0,0,3338,3340,3,212,106,0,
        3339,3337,1,0,0,0,3340,3343,1,0,0,0,3341,3339,1,0,0,0,3341,3342,
        1,0,0,0,3342,3344,1,0,0,0,3343,3341,1,0,0,0,3344,3345,5,1121,0,0,
        3345,3347,1,0,0,0,3346,3335,1,0,0,0,3346,3347,1,0,0,0,3347,3357,
        1,0,0,0,3348,3349,5,149,0,0,3349,3354,3,210,105,0,3350,3351,5,1122,
        0,0,3351,3353,3,210,105,0,3352,3350,1,0,0,0,3353,3356,1,0,0,0,3354,
        3352,1,0,0,0,3354,3355,1,0,0,0,3355,3358,1,0,0,0,3356,3354,1,0,0,
        0,3357,3348,1,0,0,0,3357,3358,1,0,0,0,3358,201,1,0,0,0,3359,3361,
        5,137,0,0,3360,3362,7,45,0,0,3361,3360,1,0,0,0,3361,3362,1,0,0,0,
        3362,3364,1,0,0,0,3363,3365,5,84,0,0,3364,3363,1,0,0,0,3364,3365,
        1,0,0,0,3365,3366,1,0,0,0,3366,3372,3,532,266,0,3367,3368,5,125,
        0,0,3368,3369,5,1120,0,0,3369,3370,3,590,295,0,3370,3371,5,1121,
        0,0,3371,3373,1,0,0,0,3372,3367,1,0,0,0,3372,3373,1,0,0,0,3373,3390,
        1,0,0,0,3374,3375,5,1120,0,0,3375,3376,3,590,295,0,3376,3377,5,1121,
        0,0,3377,3379,1,0,0,0,3378,3374,1,0,0,0,3378,3379,1,0,0,0,3379,3380,
        1,0,0,0,3380,3391,3,208,104,0,3381,3382,5,149,0,0,3382,3387,3,210,
        105,0,3383,3384,5,1122,0,0,3384,3386,3,210,105,0,3385,3383,1,0,0,
        0,3386,3389,1,0,0,0,3387,3385,1,0,0,0,3387,3388,1,0,0,0,3388,3391,
        1,0,0,0,3389,3387,1,0,0,0,3390,3378,1,0,0,0,3390,3381,1,0,0,0,3391,
        203,1,0,0,0,3392,3394,3,252,126,0,3393,3395,3,214,107,0,3394,3393,
        1,0,0,0,3394,3395,1,0,0,0,3395,3448,1,0,0,0,3396,3398,3,248,124,
        0,3397,3399,3,214,107,0,3398,3397,1,0,0,0,3398,3399,1,0,0,0,3399,
        3448,1,0,0,0,3400,3402,3,254,127,0,3401,3403,3,258,129,0,3402,3401,
        1,0,0,0,3403,3404,1,0,0,0,3404,3402,1,0,0,0,3404,3405,1,0,0,0,3405,
        3414,1,0,0,0,3406,3408,5,174,0,0,3407,3409,7,46,0,0,3408,3407,1,
        0,0,0,3408,3409,1,0,0,0,3409,3412,1,0,0,0,3410,3413,3,252,126,0,
        3411,3413,3,248,124,0,3412,3410,1,0,0,0,3412,3411,1,0,0,0,3413,3415,
        1,0,0,0,3414,3406,1,0,0,0,3414,3415,1,0,0,0,3415,3417,1,0,0,0,3416,
        3418,3,232,116,0,3417,3416,1,0,0,0,3417,3418,1,0,0,0,3418,3420,1,
        0,0,0,3419,3421,3,282,141,0,3420,3419,1,0,0,0,3420,3421,1,0,0,0,
        3421,3423,1,0,0,0,3422,3424,3,214,107,0,3423,3422,1,0,0,0,3423,3424,
        1,0,0,0,3424,3448,1,0,0,0,3425,3427,3,250,125,0,3426,3428,3,256,
        128,0,3427,3426,1,0,0,0,3428,3429,1,0,0,0,3429,3427,1,0,0,0,3429,
        3430,1,0,0,0,3430,3436,1,0,0,0,3431,3433,5,174,0,0,3432,3434,7,46,
        0,0,3433,3432,1,0,0,0,3433,3434,1,0,0,0,3434,3435,1,0,0,0,3435,3437,
        3,248,124,0,3436,3431,1,0,0,0,3436,3437,1,0,0,0,3437,3439,1,0,0,
        0,3438,3440,3,232,116,0,3439,3438,1,0,0,0,3439,3440,1,0,0,0,3440,
        3442,1,0,0,0,3441,3443,3,282,141,0,3442,3441,1,0,0,0,3442,3443,1,
        0,0,0,3443,3445,1,0,0,0,3444,3446,3,214,107,0,3445,3444,1,0,0,0,
        3445,3446,1,0,0,0,3446,3448,1,0,0,0,3447,3392,1,0,0,0,3447,3396,
        1,0,0,0,3447,3400,1,0,0,0,3447,3425,1,0,0,0,3448,205,1,0,0,0,3449,
        3452,3,228,114,0,3450,3452,3,230,115,0,3451,3449,1,0,0,0,3451,3450,
        1,0,0,0,3452,207,1,0,0,0,3453,3472,3,204,102,0,3454,3455,7,47,0,
        0,3455,3457,5,1120,0,0,3456,3458,3,598,299,0,3457,3456,1,0,0,0,3457,
        3458,1,0,0,0,3458,3459,1,0,0,0,3459,3468,5,1121,0,0,3460,3461,5,
        1122,0,0,3461,3463,5,1120,0,0,3462,3464,3,598,299,0,3463,3462,1,
        0,0,0,3463,3464,1,0,0,0,3464,3465,1,0,0,0,3465,3467,5,1121,0,0,3466,
        3460,1,0,0,0,3467,3470,1,0,0,0,3468,3466,1,0,0,0,3468,3469,1,0,0,
        0,3469,3472,1,0,0,0,3470,3468,1,0,0,0,3471,3453,1,0,0,0,3471,3454,
        1,0,0,0,3472,209,1,0,0,0,3473,3474,3,536,268,0,3474,3477,5,1111,
        0,0,3475,3478,3,660,330,0,3476,3478,5,40,0,0,3477,3475,1,0,0,0,3477,
        3476,1,0,0,0,3478,211,1,0,0,0,3479,3482,3,558,279,0,3480,3482,5,
        1148,0,0,3481,3479,1,0,0,0,3481,3480,1,0,0,0,3482,213,1,0,0,0,3483,
        3484,5,62,0,0,3484,3490,5,178,0,0,3485,3486,5,99,0,0,3486,3487,5,
        77,0,0,3487,3488,5,593,0,0,3488,3490,5,498,0,0,3489,3483,1,0,0,0,
        3489,3485,1,0,0,0,3490,3492,1,0,0,0,3491,3493,3,618,309,0,3492,3491,
        1,0,0,0,3492,3493,1,0,0,0,3493,215,1,0,0,0,3494,3496,5,42,0,0,3495,
        3497,5,102,0,0,3496,3495,1,0,0,0,3496,3497,1,0,0,0,3497,3499,1,0,
        0,0,3498,3500,5,552,0,0,3499,3498,1,0,0,0,3499,3500,1,0,0,0,3500,
        3502,1,0,0,0,3501,3503,5,75,0,0,3502,3501,1,0,0,0,3502,3503,1,0,
        0,0,3503,3504,1,0,0,0,3504,3505,5,65,0,0,3505,3511,3,532,266,0,3506,
        3507,5,125,0,0,3507,3508,5,1120,0,0,3508,3509,3,590,295,0,3509,3510,
        5,1121,0,0,3510,3512,1,0,0,0,3511,3506,1,0,0,0,3511,3512,1,0,0,0,
        3512,3515,1,0,0,0,3513,3514,5,184,0,0,3514,3516,3,660,330,0,3515,
        3513,1,0,0,0,3515,3516,1,0,0,0,3516,3518,1,0,0,0,3517,3519,3,232,
        116,0,3518,3517,1,0,0,0,3518,3519,1,0,0,0,3519,3522,1,0,0,0,3520,
        3521,5,95,0,0,3521,3523,3,284,142,0,3522,3520,1,0,0,0,3522,3523,
        1,0,0,0,3523,217,1,0,0,0,3524,3526,5,42,0,0,3525,3527,5,102,0,0,
        3526,3525,1,0,0,0,3526,3527,1,0,0,0,3527,3529,1,0,0,0,3528,3530,
        5,552,0,0,3529,3528,1,0,0,0,3529,3530,1,0,0,0,3530,3532,1,0,0,0,
        3531,3533,5,75,0,0,3532,3531,1,0,0,0,3532,3533,1,0,0,0,3533,3573,
        1,0,0,0,3534,3537,3,532,266,0,3535,3536,5,1119,0,0,3536,3538,5,1104,
        0,0,3537,3535,1,0,0,0,3537,3538,1,0,0,0,3538,3547,1,0,0,0,3539,3540,
        5,1122,0,0,3540,3543,3,532,266,0,3541,3542,5,1119,0,0,3542,3544,
        5,1104,0,0,3543,3541,1,0,0,0,3543,3544,1,0,0,0,3544,3546,1,0,0,0,
        3545,3539,1,0,0,0,3546,3549,1,0,0,0,3547,3545,1,0,0,0,3547,3548,
        1,0,0,0,3548,3550,1,0,0,0,3549,3547,1,0,0,0,3550,3551,5,65,0,0,3551,
        3552,3,236,118,0,3552,3574,1,0,0,0,3553,3554,5,65,0,0,3554,3557,
        3,532,266,0,3555,3556,5,1119,0,0,3556,3558,5,1104,0,0,3557,3555,
        1,0,0,0,3557,3558,1,0,0,0,3558,3567,1,0,0,0,3559,3560,5,1122,0,0,
        3560,3563,3,532,266,0,3561,3562,5,1119,0,0,3562,3564,5,1104,0,0,
        3563,3561,1,0,0,0,3563,3564,1,0,0,0,3564,3566,1,0,0,0,3565,3559,
        1,0,0,0,3566,3569,1,0,0,0,3567,3565,1,0,0,0,3567,3568,1,0,0,0,3568,
        3570,1,0,0,0,3569,3567,1,0,0,0,3570,3571,5,181,0,0,3571,3572,3,236,
        118,0,3572,3574,1,0,0,0,3573,3534,1,0,0,0,3573,3553,1,0,0,0,3574,
        3577,1,0,0,0,3575,3576,5,184,0,0,3576,3578,3,660,330,0,3577,3575,
        1,0,0,0,3577,3578,1,0,0,0,3578,219,1,0,0,0,3579,3580,5,430,0,0,3580,
        3581,3,532,266,0,3581,3586,5,526,0,0,3582,3584,5,12,0,0,3583,3582,
        1,0,0,0,3583,3584,1,0,0,0,3584,3585,1,0,0,0,3585,3587,3,558,279,
        0,3586,3583,1,0,0,0,3586,3587,1,0,0,0,3587,221,1,0,0,0,3588,3589,
        5,430,0,0,3589,3590,3,532,266,0,3590,3591,5,130,0,0,3591,3598,3,
        558,279,0,3592,3593,3,668,334,0,3593,3594,5,1120,0,0,3594,3595,3,
        600,300,0,3595,3596,5,1121,0,0,3596,3599,1,0,0,0,3597,3599,7,48,
        0,0,3598,3592,1,0,0,0,3598,3597,1,0,0,0,3599,3602,1,0,0,0,3600,3601,
        5,184,0,0,3601,3603,3,660,330,0,3602,3600,1,0,0,0,3602,3603,1,0,
        0,0,3603,3606,1,0,0,0,3604,3605,5,95,0,0,3605,3607,3,284,142,0,3606,
        3604,1,0,0,0,3606,3607,1,0,0,0,3607,223,1,0,0,0,3608,3609,5,430,
        0,0,3609,3610,3,532,266,0,3610,3611,5,130,0,0,3611,3614,7,49,0,0,
        3612,3613,5,184,0,0,3613,3615,3,660,330,0,3614,3612,1,0,0,0,3614,
        3615,1,0,0,0,3615,3618,1,0,0,0,3616,3617,5,95,0,0,3617,3619,3,284,
        142,0,3618,3616,1,0,0,0,3618,3619,1,0,0,0,3619,225,1,0,0,0,3620,
        3621,5,430,0,0,3621,3622,3,532,266,0,3622,3623,5,352,0,0,3623,227,
        1,0,0,0,3624,3626,5,178,0,0,3625,3627,5,102,0,0,3626,3625,1,0,0,
        0,3626,3627,1,0,0,0,3627,3629,1,0,0,0,3628,3630,5,75,0,0,3629,3628,
        1,0,0,0,3629,3630,1,0,0,0,3630,3631,1,0,0,0,3631,3636,3,532,266,
        0,3632,3634,5,12,0,0,3633,3632,1,0,0,0,3633,3634,1,0,0,0,3634,3635,
        1,0,0,0,3635,3637,3,558,279,0,3636,3633,1,0,0,0,3636,3637,1,0,0,
        0,3637,3638,1,0,0,0,3638,3639,5,149,0,0,3639,3644,3,210,105,0,3640,
        3641,5,1122,0,0,3641,3643,3,210,105,0,3642,3640,1,0,0,0,3643,3646,
        1,0,0,0,3644,3642,1,0,0,0,3644,3645,1,0,0,0,3645,3649,1,0,0,0,3646,
        3644,1,0,0,0,3647,3648,5,184,0,0,3648,3650,3,660,330,0,3649,3647,
        1,0,0,0,3649,3650,1,0,0,0,3650,3652,1,0,0,0,3651,3653,3,232,116,
        0,3652,3651,1,0,0,0,3652,3653,1,0,0,0,3653,3655,1,0,0,0,3654,3656,
        3,282,141,0,3655,3654,1,0,0,0,3655,3656,1,0,0,0,3656,229,1,0,0,0,
        3657,3659,5,178,0,0,3658,3660,5,102,0,0,3659,3658,1,0,0,0,3659,3660,
        1,0,0,0,3660,3662,1,0,0,0,3661,3663,5,75,0,0,3662,3661,1,0,0,0,3662,
        3663,1,0,0,0,3663,3664,1,0,0,0,3664,3665,3,236,118,0,3665,3666,5,
        149,0,0,3666,3671,3,210,105,0,3667,3668,5,1122,0,0,3668,3670,3,210,
        105,0,3669,3667,1,0,0,0,3670,3673,1,0,0,0,3671,3669,1,0,0,0,3671,
        3672,1,0,0,0,3672,3676,1,0,0,0,3673,3671,1,0,0,0,3674,3675,5,184,
        0,0,3675,3677,3,660,330,0,3676,3674,1,0,0,0,3676,3677,1,0,0,0,3677,
        231,1,0,0,0,3678,3679,5,120,0,0,3679,3680,5,18,0,0,3680,3685,3,234,
        117,0,3681,3682,5,1122,0,0,3682,3684,3,234,117,0,3683,3681,1,0,0,
        0,3684,3687,1,0,0,0,3685,3683,1,0,0,0,3685,3686,1,0,0,0,3686,233,
        1,0,0,0,3687,3685,1,0,0,0,3688,3690,3,660,330,0,3689,3691,7,50,0,
        0,3690,3689,1,0,0,0,3690,3691,1,0,0,0,3691,235,1,0,0,0,3692,3697,
        3,238,119,0,3693,3694,5,1122,0,0,3694,3696,3,238,119,0,3695,3693,
        1,0,0,0,3696,3699,1,0,0,0,3697,3695,1,0,0,0,3697,3698,1,0,0,0,3698,
        237,1,0,0,0,3699,3697,1,0,0,0,3700,3704,3,240,120,0,3701,3703,3,
        246,123,0,3702,3701,1,0,0,0,3703,3706,1,0,0,0,3704,3702,1,0,0,0,
        3704,3705,1,0,0,0,3705,3718,1,0,0,0,3706,3704,1,0,0,0,3707,3708,
        5,1120,0,0,3708,3712,3,240,120,0,3709,3711,3,246,123,0,3710,3709,
        1,0,0,0,3711,3714,1,0,0,0,3712,3710,1,0,0,0,3712,3713,1,0,0,0,3713,
        3715,1,0,0,0,3714,3712,1,0,0,0,3715,3716,5,1121,0,0,3716,3718,1,
        0,0,0,3717,3700,1,0,0,0,3717,3707,1,0,0,0,3718,239,1,0,0,0,3719,
        3725,3,532,266,0,3720,3721,5,125,0,0,3721,3722,5,1120,0,0,3722,3723,
        3,590,295,0,3723,3724,5,1121,0,0,3724,3726,1,0,0,0,3725,3720,1,0,
        0,0,3725,3726,1,0,0,0,3726,3731,1,0,0,0,3727,3729,5,12,0,0,3728,
        3727,1,0,0,0,3728,3729,1,0,0,0,3729,3730,1,0,0,0,3730,3732,3,558,
        279,0,3731,3728,1,0,0,0,3731,3732,1,0,0,0,3732,3741,1,0,0,0,3733,
        3738,3,242,121,0,3734,3735,5,1122,0,0,3735,3737,3,242,121,0,3736,
        3734,1,0,0,0,3737,3740,1,0,0,0,3738,3736,1,0,0,0,3738,3739,1,0,0,
        0,3739,3742,1,0,0,0,3740,3738,1,0,0,0,3741,3733,1,0,0,0,3741,3742,
        1,0,0,0,3742,3760,1,0,0,0,3743,3749,3,204,102,0,3744,3745,5,1120,
        0,0,3745,3746,3,204,102,0,3746,3747,5,1121,0,0,3747,3749,1,0,0,0,
        3748,3743,1,0,0,0,3748,3744,1,0,0,0,3749,3751,1,0,0,0,3750,3752,
        5,12,0,0,3751,3750,1,0,0,0,3751,3752,1,0,0,0,3752,3753,1,0,0,0,3753,
        3754,3,558,279,0,3754,3760,1,0,0,0,3755,3756,5,1120,0,0,3756,3757,
        3,236,118,0,3757,3758,5,1121,0,0,3758,3760,1,0,0,0,3759,3719,1,0,
        0,0,3759,3748,1,0,0,0,3759,3755,1,0,0,0,3760,241,1,0,0,0,3761,3762,
        7,51,0,0,3762,3765,7,22,0,0,3763,3764,5,62,0,0,3764,3766,3,244,122,
        0,3765,3763,1,0,0,0,3765,3766,1,0,0,0,3766,3767,1,0,0,0,3767,3768,
        5,1120,0,0,3768,3769,3,590,295,0,3769,3770,5,1121,0,0,3770,243,1,
        0,0,0,3771,3777,5,87,0,0,3772,3773,5,120,0,0,3773,3777,5,18,0,0,
        3774,3775,5,70,0,0,3775,3777,5,18,0,0,3776,3771,1,0,0,0,3776,3772,
        1,0,0,0,3776,3774,1,0,0,0,3777,245,1,0,0,0,3778,3780,7,52,0,0,3779,
        3778,1,0,0,0,3779,3780,1,0,0,0,3780,3781,1,0,0,0,3781,3782,5,87,
        0,0,3782,3790,3,240,120,0,3783,3784,5,114,0,0,3784,3791,3,660,330,
        0,3785,3786,5,181,0,0,3786,3787,5,1120,0,0,3787,3788,3,590,295,0,
        3788,3789,5,1121,0,0,3789,3791,1,0,0,0,3790,3783,1,0,0,0,3790,3785,
        1,0,0,0,3790,3791,1,0,0,0,3791,3823,1,0,0,0,3792,3793,5,165,0,0,
        3793,3796,3,240,120,0,3794,3795,5,114,0,0,3795,3797,3,660,330,0,
        3796,3794,1,0,0,0,3796,3797,1,0,0,0,3797,3823,1,0,0,0,3798,3800,
        7,53,0,0,3799,3801,5,123,0,0,3800,3799,1,0,0,0,3800,3801,1,0,0,0,
        3801,3802,1,0,0,0,3802,3803,5,87,0,0,3803,3811,3,240,120,0,3804,
        3805,5,114,0,0,3805,3812,3,660,330,0,3806,3807,5,181,0,0,3807,3808,
        5,1120,0,0,3808,3809,3,590,295,0,3809,3810,5,1121,0,0,3810,3812,
        1,0,0,0,3811,3804,1,0,0,0,3811,3806,1,0,0,0,3812,3823,1,0,0,0,3813,
        3818,5,109,0,0,3814,3816,7,53,0,0,3815,3817,5,123,0,0,3816,3815,
        1,0,0,0,3816,3817,1,0,0,0,3817,3819,1,0,0,0,3818,3814,1,0,0,0,3818,
        3819,1,0,0,0,3819,3820,1,0,0,0,3820,3821,5,87,0,0,3821,3823,3,240,
        120,0,3822,3779,1,0,0,0,3822,3792,1,0,0,0,3822,3798,1,0,0,0,3822,
        3813,1,0,0,0,3823,247,1,0,0,0,3824,3825,5,1120,0,0,3825,3826,3,252,
        126,0,3826,3827,5,1121,0,0,3827,3833,1,0,0,0,3828,3829,5,1120,0,
        0,3829,3830,3,248,124,0,3830,3831,5,1121,0,0,3831,3833,1,0,0,0,3832,
        3824,1,0,0,0,3832,3828,1,0,0,0,3833,249,1,0,0,0,3834,3835,5,1120,
        0,0,3835,3836,3,254,127,0,3836,3837,5,1121,0,0,3837,3843,1,0,0,0,
        3838,3839,5,1120,0,0,3839,3840,3,250,125,0,3840,3841,5,1121,0,0,
        3841,3843,1,0,0,0,3842,3834,1,0,0,0,3842,3838,1,0,0,0,3843,251,1,
        0,0,0,3844,3848,5,148,0,0,3845,3847,3,260,130,0,3846,3845,1,0,0,
        0,3847,3850,1,0,0,0,3848,3846,1,0,0,0,3848,3849,1,0,0,0,3849,3851,
        1,0,0,0,3850,3848,1,0,0,0,3851,3853,3,262,131,0,3852,3854,3,266,
        133,0,3853,3852,1,0,0,0,3853,3854,1,0,0,0,3854,3856,1,0,0,0,3855,
        3857,3,272,136,0,3856,3855,1,0,0,0,3856,3857,1,0,0,0,3857,3859,1,
        0,0,0,3858,3860,3,274,137,0,3859,3858,1,0,0,0,3859,3860,1,0,0,0,
        3860,3862,1,0,0,0,3861,3863,3,276,138,0,3862,3861,1,0,0,0,3862,3863,
        1,0,0,0,3863,3865,1,0,0,0,3864,3866,3,278,139,0,3865,3864,1,0,0,
        0,3865,3866,1,0,0,0,3866,3868,1,0,0,0,3867,3869,3,232,116,0,3868,
        3867,1,0,0,0,3868,3869,1,0,0,0,3869,3871,1,0,0,0,3870,3872,3,282,
        141,0,3871,3870,1,0,0,0,3871,3872,1,0,0,0,3872,3903,1,0,0,0,3873,
        3877,5,148,0,0,3874,3876,3,260,130,0,3875,3874,1,0,0,0,3876,3879,
        1,0,0,0,3877,3875,1,0,0,0,3877,3878,1,0,0,0,3878,3880,1,0,0,0,3879,
        3877,1,0,0,0,3880,3882,3,262,131,0,3881,3883,3,272,136,0,3882,3881,
        1,0,0,0,3882,3883,1,0,0,0,3883,3885,1,0,0,0,3884,3886,3,274,137,
        0,3885,3884,1,0,0,0,3885,3886,1,0,0,0,3886,3888,1,0,0,0,3887,3889,
        3,276,138,0,3888,3887,1,0,0,0,3888,3889,1,0,0,0,3889,3891,1,0,0,
        0,3890,3892,3,278,139,0,3891,3890,1,0,0,0,3891,3892,1,0,0,0,3892,
        3894,1,0,0,0,3893,3895,3,232,116,0,3894,3893,1,0,0,0,3894,3895,1,
        0,0,0,3895,3897,1,0,0,0,3896,3898,3,282,141,0,3897,3896,1,0,0,0,
        3897,3898,1,0,0,0,3898,3900,1,0,0,0,3899,3901,3,266,133,0,3900,3899,
        1,0,0,0,3900,3901,1,0,0,0,3901,3903,1,0,0,0,3902,3844,1,0,0,0,3902,
        3873,1,0,0,0,3903,253,1,0,0,0,3904,3908,5,148,0,0,3905,3907,3,260,
        130,0,3906,3905,1,0,0,0,3907,3910,1,0,0,0,3908,3906,1,0,0,0,3908,
        3909,1,0,0,0,3909,3911,1,0,0,0,3910,3908,1,0,0,0,3911,3913,3,262,
        131,0,3912,3914,3,272,136,0,3913,3912,1,0,0,0,3913,3914,1,0,0,0,
        3914,3916,1,0,0,0,3915,3917,3,274,137,0,3916,3915,1,0,0,0,3916,3917,
        1,0,0,0,3917,3919,1,0,0,0,3918,3920,3,276,138,0,3919,3918,1,0,0,
        0,3919,3920,1,0,0,0,3920,3922,1,0,0,0,3921,3923,3,278,139,0,3922,
        3921,1,0,0,0,3922,3923,1,0,0,0,3923,3925,1,0,0,0,3924,3926,3,232,
        116,0,3925,3924,1,0,0,0,3925,3926,1,0,0,0,3926,3928,1,0,0,0,3927,
        3929,3,282,141,0,3928,3927,1,0,0,0,3928,3929,1,0,0,0,3929,255,1,
        0,0,0,3930,3932,5,174,0,0,3931,3933,7,46,0,0,3932,3931,1,0,0,0,3932,
        3933,1,0,0,0,3933,3934,1,0,0,0,3934,3935,3,250,125,0,3935,257,1,
        0,0,0,3936,3938,5,174,0,0,3937,3939,7,46,0,0,3938,3937,1,0,0,0,3938,
        3939,1,0,0,0,3939,3942,1,0,0,0,3940,3943,3,254,127,0,3941,3943,3,
        250,125,0,3942,3940,1,0,0,0,3942,3941,1,0,0,0,3943,259,1,0,0,0,3944,
        3953,7,54,0,0,3945,3953,5,72,0,0,3946,3953,5,165,0,0,3947,3953,5,
        161,0,0,3948,3953,5,159,0,0,3949,3953,5,608,0,0,3950,3953,7,55,0,
        0,3951,3953,5,160,0,0,3952,3944,1,0,0,0,3952,3945,1,0,0,0,3952,3946,
        1,0,0,0,3952,3947,1,0,0,0,3952,3948,1,0,0,0,3952,3949,1,0,0,0,3952,
        3950,1,0,0,0,3952,3951,1,0,0,0,3953,261,1,0,0,0,3954,3957,5,1104,
        0,0,3955,3957,3,264,132,0,3956,3954,1,0,0,0,3956,3955,1,0,0,0,3957,
        3962,1,0,0,0,3958,3959,5,1122,0,0,3959,3961,3,264,132,0,3960,3958,
        1,0,0,0,3961,3964,1,0,0,0,3962,3960,1,0,0,0,3962,3963,1,0,0,0,3963,
        263,1,0,0,0,3964,3962,1,0,0,0,3965,3966,3,530,265,0,3966,3967,5,
        1119,0,0,3967,3968,5,1104,0,0,3968,3995,1,0,0,0,3969,3974,3,536,
        268,0,3970,3972,5,12,0,0,3971,3970,1,0,0,0,3971,3972,1,0,0,0,3972,
        3973,1,0,0,0,3973,3975,3,558,279,0,3974,3971,1,0,0,0,3974,3975,1,
        0,0,0,3975,3995,1,0,0,0,3976,3981,3,620,310,0,3977,3979,5,12,0,0,
        3978,3977,1,0,0,0,3978,3979,1,0,0,0,3979,3980,1,0,0,0,3980,3982,
        3,558,279,0,3981,3978,1,0,0,0,3981,3982,1,0,0,0,3982,3995,1,0,0,
        0,3983,3984,5,1148,0,0,3984,3986,5,1095,0,0,3985,3983,1,0,0,0,3985,
        3986,1,0,0,0,3986,3987,1,0,0,0,3987,3992,3,660,330,0,3988,3990,5,
        12,0,0,3989,3988,1,0,0,0,3989,3990,1,0,0,0,3990,3991,1,0,0,0,3991,
        3993,3,558,279,0,3992,3989,1,0,0,0,3992,3993,1,0,0,0,3993,3995,1,
        0,0,0,3994,3965,1,0,0,0,3994,3969,1,0,0,0,3994,3976,1,0,0,0,3994,
        3985,1,0,0,0,3995,265,1,0,0,0,3996,3997,5,84,0,0,3997,4002,3,212,
        106,0,3998,3999,5,1122,0,0,3999,4001,3,212,106,0,4000,3998,1,0,0,
        0,4001,4004,1,0,0,0,4002,4000,1,0,0,0,4002,4003,1,0,0,0,4003,4033,
        1,0,0,0,4004,4002,1,0,0,0,4005,4006,5,84,0,0,4006,4007,5,391,0,0,
        4007,4033,5,1135,0,0,4008,4009,5,84,0,0,4009,4010,5,124,0,0,4010,
        4014,5,1135,0,0,4011,4012,5,24,0,0,4012,4013,5,149,0,0,4013,4015,
        3,544,272,0,4014,4011,1,0,0,0,4014,4015,1,0,0,0,4015,4022,1,0,0,
        0,4016,4018,7,43,0,0,4017,4019,3,268,134,0,4018,4017,1,0,0,0,4019,
        4020,1,0,0,0,4020,4018,1,0,0,0,4020,4021,1,0,0,0,4021,4023,1,0,0,
        0,4022,4016,1,0,0,0,4022,4023,1,0,0,0,4023,4030,1,0,0,0,4024,4026,
        5,97,0,0,4025,4027,3,270,135,0,4026,4025,1,0,0,0,4027,4028,1,0,0,
        0,4028,4026,1,0,0,0,4028,4029,1,0,0,0,4029,4031,1,0,0,0,4030,4024,
        1,0,0,0,4030,4031,1,0,0,0,4031,4033,1,0,0,0,4032,3996,1,0,0,0,4032,
        4005,1,0,0,0,4032,4008,1,0,0,0,4033,267,1,0,0,0,4034,4035,5,167,
        0,0,4035,4036,5,18,0,0,4036,4047,5,1135,0,0,4037,4039,5,118,0,0,
        4038,4037,1,0,0,0,4038,4039,1,0,0,0,4039,4040,1,0,0,0,4040,4041,
        5,54,0,0,4041,4042,5,18,0,0,4042,4047,5,1135,0,0,4043,4044,5,55,
        0,0,4044,4045,5,18,0,0,4045,4047,5,1135,0,0,4046,4034,1,0,0,0,4046,
        4038,1,0,0,0,4046,4043,1,0,0,0,4047,269,1,0,0,0,4048,4049,5,164,
        0,0,4049,4050,5,18,0,0,4050,4055,5,1135,0,0,4051,4052,5,167,0,0,
        4052,4053,5,18,0,0,4053,4055,5,1135,0,0,4054,4048,1,0,0,0,4054,4051,
        1,0,0,0,4055,271,1,0,0,0,4056,4057,5,65,0,0,4057,4059,3,236,118,
        0,4058,4056,1,0,0,0,4058,4059,1,0,0,0,4059,4062,1,0,0,0,4060,4061,
        5,184,0,0,4061,4063,3,660,330,0,4062,4060,1,0,0,0,4062,4063,1,0,
        0,0,4063,273,1,0,0,0,4064,4065,5,70,0,0,4065,4066,5,18,0,0,4066,
        4071,3,280,140,0,4067,4068,5,1122,0,0,4068,4070,3,280,140,0,4069,
        4067,1,0,0,0,4070,4073,1,0,0,0,4071,4069,1,0,0,0,4071,4072,1,0,0,
        0,4072,4076,1,0,0,0,4073,4071,1,0,0,0,4074,4075,5,186,0,0,4075,4077,
        5,581,0,0,4076,4074,1,0,0,0,4076,4077,1,0,0,0,4077,275,1,0,0,0,4078,
        4079,5,71,0,0,4079,4080,3,660,330,0,4080,277,1,0,0,0,4081,4082,5,
        659,0,0,4082,4083,3,638,319,0,4083,4084,5,12,0,0,4084,4085,5,1120,
        0,0,4085,4086,3,636,318,0,4086,4096,5,1121,0,0,4087,4088,5,1122,
        0,0,4088,4089,3,638,319,0,4089,4090,5,12,0,0,4090,4091,5,1120,0,
        0,4091,4092,3,636,318,0,4092,4093,5,1121,0,0,4093,4095,1,0,0,0,4094,
        4087,1,0,0,0,4095,4098,1,0,0,0,4096,4094,1,0,0,0,4096,4097,1,0,0,
        0,4097,279,1,0,0,0,4098,4096,1,0,0,0,4099,4101,3,660,330,0,4100,
        4102,7,50,0,0,4101,4100,1,0,0,0,4101,4102,1,0,0,0,4102,281,1,0,0,
        0,4103,4114,5,95,0,0,4104,4105,3,284,142,0,4105,4106,5,1122,0,0,
        4106,4108,1,0,0,0,4107,4104,1,0,0,0,4107,4108,1,0,0,0,4108,4109,
        1,0,0,0,4109,4115,3,284,142,0,4110,4111,3,284,142,0,4111,4112,5,
        519,0,0,4112,4113,3,284,142,0,4113,4115,1,0,0,0,4114,4107,1,0,0,
        0,4114,4110,1,0,0,0,4115,283,1,0,0,0,4116,4120,3,564,282,0,4117,
        4120,3,542,271,0,4118,4120,3,560,280,0,4119,4116,1,0,0,0,4119,4117,
        1,0,0,0,4119,4118,1,0,0,0,4120,285,1,0,0,0,4121,4122,5,612,0,0,4122,
        4131,5,636,0,0,4123,4128,3,308,154,0,4124,4125,5,1122,0,0,4125,4127,
        3,308,154,0,4126,4124,1,0,0,0,4127,4130,1,0,0,0,4128,4126,1,0,0,
        0,4128,4129,1,0,0,0,4129,4132,1,0,0,0,4130,4128,1,0,0,0,4131,4123,
        1,0,0,0,4131,4132,1,0,0,0,4132,287,1,0,0,0,4133,4135,5,335,0,0,4134,
        4136,5,661,0,0,4135,4134,1,0,0,0,4135,4136,1,0,0,0,4136,289,1,0,
        0,0,4137,4139,5,360,0,0,4138,4140,5,661,0,0,4139,4138,1,0,0,0,4139,
        4140,1,0,0,0,4140,4146,1,0,0,0,4141,4143,5,10,0,0,4142,4144,5,508,
        0,0,4143,4142,1,0,0,0,4143,4144,1,0,0,0,4144,4145,1,0,0,0,4145,4147,
        5,344,0,0,4146,4141,1,0,0,0,4146,4147,1,0,0,0,4147,4152,1,0,0,0,
        4148,4150,5,508,0,0,4149,4148,1,0,0,0,4149,4150,1,0,0,0,4150,4151,
        1,0,0,0,4151,4153,5,134,0,0,4152,4149,1,0,0,0,4152,4153,1,0,0,0,
        4153,291,1,0,0,0,4154,4156,5,580,0,0,4155,4157,5,661,0,0,4156,4155,
        1,0,0,0,4156,4157,1,0,0,0,4157,4163,1,0,0,0,4158,4160,5,10,0,0,4159,
        4161,5,508,0,0,4160,4159,1,0,0,0,4160,4161,1,0,0,0,4161,4162,1,0,
        0,0,4162,4164,5,344,0,0,4163,4158,1,0,0,0,4163,4164,1,0,0,0,4164,
        4169,1,0,0,0,4165,4167,5,508,0,0,4166,4165,1,0,0,0,4166,4167,1,0,
        0,0,4167,4168,1,0,0,0,4168,4170,5,134,0,0,4169,4166,1,0,0,0,4169,
        4170,1,0,0,0,4170,293,1,0,0,0,4171,4172,5,587,0,0,4172,4173,3,558,
        279,0,4173,295,1,0,0,0,4174,4176,5,580,0,0,4175,4177,5,661,0,0,4176,
        4175,1,0,0,0,4176,4177,1,0,0,0,4177,4178,1,0,0,0,4178,4180,5,169,
        0,0,4179,4181,5,587,0,0,4180,4179,1,0,0,0,4180,4181,1,0,0,0,4181,
        4182,1,0,0,0,4182,4183,3,558,279,0,4183,297,1,0,0,0,4184,4185,5,
        134,0,0,4185,4186,5,587,0,0,4186,4187,3,558,279,0,4187,299,1,0,0,
        0,4188,4189,5,99,0,0,4189,4190,7,56,0,0,4190,4195,3,310,155,0,4191,
        4192,5,1122,0,0,4192,4194,3,310,155,0,4193,4191,1,0,0,0,4194,4197,
        1,0,0,0,4195,4193,1,0,0,0,4195,4196,1,0,0,0,4196,4199,1,0,0,0,4197,
        4195,1,0,0,0,4198,4200,3,616,308,0,4199,4198,1,0,0,0,4199,4200,1,
        0,0,0,4200,301,1,0,0,0,4201,4202,5,176,0,0,4202,4203,5,680,0,0,4203,
        303,1,0,0,0,4204,4205,5,149,0,0,4205,4206,5,331,0,0,4206,4207,5,
        1111,0,0,4207,4208,7,26,0,0,4208,305,1,0,0,0,4209,4211,5,149,0,0,
        4210,4212,7,57,0,0,4211,4210,1,0,0,0,4211,4212,1,0,0,0,4212,4213,
        1,0,0,0,4213,4214,5,636,0,0,4214,4219,3,314,157,0,4215,4216,5,1122,
        0,0,4216,4218,3,314,157,0,4217,4215,1,0,0,0,4218,4221,1,0,0,0,4219,
        4217,1,0,0,0,4219,4220,1,0,0,0,4220,307,1,0,0,0,4221,4219,1,0,0,
        0,4222,4223,5,186,0,0,4223,4224,5,368,0,0,4224,4230,5,599,0,0,4225,
        4226,5,130,0,0,4226,4230,5,187,0,0,4227,4228,5,130,0,0,4228,4230,
        5,525,0,0,4229,4222,1,0,0,0,4229,4225,1,0,0,0,4229,4227,1,0,0,0,
        4230,309,1,0,0,0,4231,4236,3,532,266,0,4232,4234,5,12,0,0,4233,4232,
        1,0,0,0,4233,4234,1,0,0,0,4234,4235,1,0,0,0,4235,4237,3,558,279,
        0,4236,4233,1,0,0,0,4236,4237,1,0,0,0,4237,4238,1,0,0,0,4238,4239,
        3,312,156,0,4239,311,1,0,0,0,4240,4242,5,130,0,0,4241,4243,5,461,
        0,0,4242,4241,1,0,0,0,4242,4243,1,0,0,0,4243,4249,1,0,0,0,4244,4246,
        5,102,0,0,4245,4244,1,0,0,0,4245,4246,1,0,0,0,4246,4247,1,0,0,0,
        4247,4249,5,187,0,0,4248,4240,1,0,0,0,4248,4245,1,0,0,0,4249,313,
        1,0,0,0,4250,4251,5,451,0,0,4251,4252,5,459,0,0,4252,4258,3,316,
        158,0,4253,4254,5,130,0,0,4254,4258,5,187,0,0,4255,4256,5,130,0,
        0,4256,4258,5,525,0,0,4257,4250,1,0,0,0,4257,4253,1,0,0,0,4257,4255,
        1,0,0,0,4258,315,1,0,0,0,4259,4260,5,776,0,0,4260,4267,5,130,0,0,
        4261,4262,5,130,0,0,4262,4267,5,777,0,0,4263,4264,5,130,0,0,4264,
        4267,5,778,0,0,4265,4267,5,779,0,0,4266,4259,1,0,0,0,4266,4261,1,
        0,0,0,4266,4263,1,0,0,0,4266,4265,1,0,0,0,4267,317,1,0,0,0,4268,
        4269,5,23,0,0,4269,4270,5,464,0,0,4270,4271,5,169,0,0,4271,4276,
        3,336,168,0,4272,4273,5,1122,0,0,4273,4275,3,336,168,0,4274,4272,
        1,0,0,0,4275,4278,1,0,0,0,4276,4274,1,0,0,0,4276,4277,1,0,0,0,4277,
        4280,1,0,0,0,4278,4276,1,0,0,0,4279,4281,3,344,172,0,4280,4279,1,
        0,0,0,4280,4281,1,0,0,0,4281,319,1,0,0,0,4282,4283,5,23,0,0,4283,
        4284,5,572,0,0,4284,4285,5,417,0,0,4285,4290,3,346,173,0,4286,4287,
        5,1122,0,0,4287,4289,3,346,173,0,4288,4286,1,0,0,0,4289,4292,1,0,
        0,0,4290,4288,1,0,0,0,4290,4291,1,0,0,0,4291,321,1,0,0,0,4292,4290,
        1,0,0,0,4293,4294,5,128,0,0,4294,4295,7,58,0,0,4295,4300,5,463,0,
        0,4296,4297,5,169,0,0,4297,4301,5,1135,0,0,4298,4299,5,14,0,0,4299,
        4301,5,1135,0,0,4300,4296,1,0,0,0,4300,4298,1,0,0,0,4301,323,1,0,
        0,0,4302,4303,5,573,0,0,4303,4304,5,464,0,0,4304,325,1,0,0,0,4305,
        4306,5,573,0,0,4306,4308,5,597,0,0,4307,4309,5,6,0,0,4308,4307,1,
        0,0,0,4308,4309,1,0,0,0,4309,4311,1,0,0,0,4310,4312,3,344,172,0,
        4311,4310,1,0,0,0,4311,4312,1,0,0,0,4312,327,1,0,0,0,4313,4314,5,
        612,0,0,4314,4323,5,597,0,0,4315,4320,3,350,175,0,4316,4317,5,1122,
        0,0,4317,4319,3,350,175,0,4318,4316,1,0,0,0,4319,4322,1,0,0,0,4320,
        4318,1,0,0,0,4320,4321,1,0,0,0,4321,4324,1,0,0,0,4322,4320,1,0,0,
        0,4323,4315,1,0,0,0,4323,4324,1,0,0,0,4324,4327,1,0,0,0,4325,4326,
        5,646,0,0,4326,4328,3,352,176,0,4327,4325,1,0,0,0,4327,4328,1,0,
        0,0,4328,4332,1,0,0,0,4329,4331,3,354,177,0,4330,4329,1,0,0,0,4331,
        4334,1,0,0,0,4332,4330,1,0,0,0,4332,4333,1,0,0,0,4333,4336,1,0,0,
        0,4334,4332,1,0,0,0,4335,4337,3,344,172,0,4336,4335,1,0,0,0,4336,
        4337,1,0,0,0,4337,329,1,0,0,0,4338,4339,5,618,0,0,4339,4348,5,597,
        0,0,4340,4345,3,350,175,0,4341,4342,5,1122,0,0,4342,4344,3,350,175,
        0,4343,4341,1,0,0,0,4344,4347,1,0,0,0,4345,4343,1,0,0,0,4345,4346,
        1,0,0,0,4346,4349,1,0,0,0,4347,4345,1,0,0,0,4348,4340,1,0,0,0,4348,
        4349,1,0,0,0,4349,331,1,0,0,0,4350,4351,5,612,0,0,4351,4352,5,429,
        0,0,4352,333,1,0,0,0,4353,4354,5,618,0,0,4354,4355,5,429,0,0,4355,
        335,1,0,0,0,4356,4357,3,338,169,0,4357,4358,5,1111,0,0,4358,4359,
        5,1135,0,0,4359,4386,1,0,0,0,4360,4361,3,340,170,0,4361,4362,5,1111,
        0,0,4362,4363,3,564,282,0,4363,4386,1,0,0,0,4364,4365,3,342,171,
        0,4365,4366,5,1111,0,0,4366,4367,7,26,0,0,4367,4386,1,0,0,0,4368,
        4369,5,468,0,0,4369,4370,5,1111,0,0,4370,4386,5,1138,0,0,4371,4372,
        5,436,0,0,4372,4373,5,1111,0,0,4373,4382,5,1120,0,0,4374,4379,3,
        558,279,0,4375,4376,5,1122,0,0,4376,4378,3,558,279,0,4377,4375,1,
        0,0,0,4378,4381,1,0,0,0,4379,4377,1,0,0,0,4379,4380,1,0,0,0,4380,
        4383,1,0,0,0,4381,4379,1,0,0,0,4382,4374,1,0,0,0,4382,4383,1,0,0,
        0,4383,4384,1,0,0,0,4384,4386,5,1121,0,0,4385,4356,1,0,0,0,4385,
        4360,1,0,0,0,4385,4364,1,0,0,0,4385,4368,1,0,0,0,4385,4371,1,0,0,
        0,4386,337,1,0,0,0,4387,4388,7,59,0,0,4388,339,1,0,0,0,4389,4390,
        7,60,0,0,4390,341,1,0,0,0,4391,4392,7,61,0,0,4392,343,1,0,0,0,4393,
        4394,5,62,0,0,4394,4395,5,346,0,0,4395,4396,5,1135,0,0,4396,345,
        1,0,0,0,4397,4398,5,565,0,0,4398,4399,5,1111,0,0,4399,4400,5,1120,
        0,0,4400,4401,3,590,295,0,4401,4402,5,1121,0,0,4402,4447,1,0,0,0,
        4403,4404,5,567,0,0,4404,4405,5,1111,0,0,4405,4406,5,1120,0,0,4406,
        4407,3,590,295,0,4407,4408,5,1121,0,0,4408,4447,1,0,0,0,4409,4410,
        5,566,0,0,4410,4411,5,1111,0,0,4411,4412,5,1120,0,0,4412,4413,3,
        592,296,0,4413,4414,5,1121,0,0,4414,4447,1,0,0,0,4415,4416,5,568,
        0,0,4416,4417,5,1111,0,0,4417,4418,5,1120,0,0,4418,4419,3,592,296,
        0,4419,4420,5,1121,0,0,4420,4447,1,0,0,0,4421,4422,5,570,0,0,4422,
        4423,5,1111,0,0,4423,4424,5,1120,0,0,4424,4425,3,602,301,0,4425,
        4426,5,1121,0,0,4426,4447,1,0,0,0,4427,4428,5,571,0,0,4428,4429,
        5,1111,0,0,4429,4430,5,1120,0,0,4430,4431,3,602,301,0,4431,4432,
        5,1121,0,0,4432,4447,1,0,0,0,4433,4434,5,569,0,0,4434,4435,5,1111,
        0,0,4435,4436,5,1120,0,0,4436,4441,3,348,174,0,4437,4438,5,1122,
        0,0,4438,4440,3,348,174,0,4439,4437,1,0,0,0,4440,4443,1,0,0,0,4441,
        4439,1,0,0,0,4441,4442,1,0,0,0,4442,4444,1,0,0,0,4443,4441,1,0,0,
        0,4444,4445,5,1121,0,0,4445,4447,1,0,0,0,4446,4397,1,0,0,0,4446,
        4403,1,0,0,0,4446,4409,1,0,0,0,4446,4415,1,0,0,0,4446,4421,1,0,0,
        0,4446,4427,1,0,0,0,4446,4433,1,0,0,0,4447,347,1,0,0,0,4448,4449,
        5,1120,0,0,4449,4450,3,532,266,0,4450,4451,5,1122,0,0,4451,4452,
        3,532,266,0,4452,4453,5,1121,0,0,4453,349,1,0,0,0,4454,4455,7,62,
        0,0,4455,351,1,0,0,0,4456,4457,7,63,0,0,4457,4458,5,1111,0,0,4458,
        4475,3,356,178,0,4459,4460,5,470,0,0,4460,4461,5,1111,0,0,4461,4462,
        5,1135,0,0,4462,4463,5,1122,0,0,4463,4464,5,471,0,0,4464,4465,5,
        1111,0,0,4465,4475,3,564,282,0,4466,4467,5,559,0,0,4467,4468,5,1111,
        0,0,4468,4469,5,1135,0,0,4469,4470,5,1122,0,0,4470,4471,5,560,0,
        0,4471,4472,5,1111,0,0,4472,4475,3,564,282,0,4473,4475,5,606,0,0,
        4474,4456,1,0,0,0,4474,4459,1,0,0,0,4474,4466,1,0,0,0,4474,4473,
        1,0,0,0,4475,353,1,0,0,0,4476,4477,5,648,0,0,4477,4478,5,1111,0,
        0,4478,4489,5,1135,0,0,4479,4480,5,536,0,0,4480,4481,5,1111,0,0,
        4481,4489,5,1135,0,0,4482,4483,5,382,0,0,4483,4484,5,1111,0,0,4484,
        4489,5,1135,0,0,4485,4486,5,539,0,0,4486,4487,5,1111,0,0,4487,4489,
        5,1135,0,0,4488,4476,1,0,0,0,4488,4479,1,0,0,0,4488,4482,1,0,0,0,
        4488,4485,1,0,0,0,4489,355,1,0,0,0,4490,4495,3,550,275,0,4491,4492,
        5,1122,0,0,4492,4494,3,550,275,0,4493,4491,1,0,0,0,4494,4497,1,0,
        0,0,4495,4493,1,0,0,0,4495,4496,1,0,0,0,4496,4500,1,0,0,0,4497,4495,
        1,0,0,0,4498,4500,5,1135,0,0,4499,4490,1,0,0,0,4499,4498,1,0,0,0,
        4500,357,1,0,0,0,4501,4502,5,664,0,0,4502,4503,7,64,0,0,4503,4505,
        3,552,276,0,4504,4506,7,65,0,0,4505,4504,1,0,0,0,4505,4506,1,0,0,
        0,4506,359,1,0,0,0,4507,4508,5,664,0,0,4508,4509,5,396,0,0,4509,
        4515,3,552,276,0,4510,4513,5,626,0,0,4511,4512,5,62,0,0,4512,4514,
        5,496,0,0,4513,4511,1,0,0,0,4513,4514,1,0,0,0,4514,4516,1,0,0,0,
        4515,4510,1,0,0,0,4515,4516,1,0,0,0,4516,361,1,0,0,0,4517,4518,5,
        664,0,0,4518,4519,5,544,0,0,4519,4520,3,552,276,0,4520,363,1,0,0,
        0,4521,4522,5,664,0,0,4522,4523,5,360,0,0,4523,4526,3,552,276,0,
        4524,4525,5,523,0,0,4525,4527,5,537,0,0,4526,4524,1,0,0,0,4526,4527,
        1,0,0,0,4527,365,1,0,0,0,4528,4529,5,664,0,0,4529,4530,5,580,0,0,
        4530,4531,3,552,276,0,4531,367,1,0,0,0,4532,4533,5,664,0,0,4533,
        4536,5,554,0,0,4534,4535,5,31,0,0,4535,4537,3,552,276,0,4536,4534,
        1,0,0,0,4536,4537,1,0,0,0,4537,369,1,0,0,0,4538,4539,5,544,0,0,4539,
        4540,3,558,279,0,4540,4543,5,65,0,0,4541,4544,5,1135,0,0,4542,4544,
        5,1148,0,0,4543,4541,1,0,0,0,4543,4542,1,0,0,0,4544,371,1,0,0,0,
        4545,4546,5,682,0,0,4546,4549,3,558,279,0,4547,4548,5,181,0,0,4548,
        4550,3,604,302,0,4549,4547,1,0,0,0,4549,4550,1,0,0,0,4550,373,1,
        0,0,0,4551,4552,7,66,0,0,4552,4553,5,544,0,0,4553,4554,3,558,279,
        0,4554,375,1,0,0,0,4555,4558,3,378,189,0,4556,4558,3,4,2,0,4557,
        4555,1,0,0,0,4557,4556,1,0,0,0,4558,377,1,0,0,0,4559,4560,3,558,
        279,0,4560,4561,5,1131,0,0,4561,4563,1,0,0,0,4562,4559,1,0,0,0,4562,
        4563,1,0,0,0,4563,4564,1,0,0,0,4564,4603,5,335,0,0,4565,4566,3,398,
        199,0,4566,4567,5,1123,0,0,4567,4569,1,0,0,0,4568,4565,1,0,0,0,4569,
        4572,1,0,0,0,4570,4568,1,0,0,0,4570,4571,1,0,0,0,4571,4578,1,0,0,
        0,4572,4570,1,0,0,0,4573,4574,3,400,200,0,4574,4575,5,1123,0,0,4575,
        4577,1,0,0,0,4576,4573,1,0,0,0,4577,4580,1,0,0,0,4578,4576,1,0,0,
        0,4578,4579,1,0,0,0,4579,4586,1,0,0,0,4580,4578,1,0,0,0,4581,4582,
        3,402,201,0,4582,4583,5,1123,0,0,4583,4585,1,0,0,0,4584,4581,1,0,
        0,0,4585,4588,1,0,0,0,4586,4584,1,0,0,0,4586,4587,1,0,0,0,4587,4594,
        1,0,0,0,4588,4586,1,0,0,0,4589,4590,3,404,202,0,4590,4591,5,1123,
        0,0,4591,4593,1,0,0,0,4592,4589,1,0,0,0,4593,4596,1,0,0,0,4594,4592,
        1,0,0,0,4594,4595,1,0,0,0,4595,4600,1,0,0,0,4596,4594,1,0,0,0,4597,
        4599,3,408,204,0,4598,4597,1,0,0,0,4599,4602,1,0,0,0,4600,4598,1,
        0,0,0,4600,4601,1,0,0,0,4601,4604,1,0,0,0,4602,4600,1,0,0,0,4603,
        4570,1,0,0,0,4603,4604,1,0,0,0,4604,4605,1,0,0,0,4605,4607,5,396,
        0,0,4606,4608,3,558,279,0,4607,4606,1,0,0,0,4607,4608,1,0,0,0,4608,
        379,1,0,0,0,4609,4612,5,21,0,0,4610,4613,3,558,279,0,4611,4613,3,
        660,330,0,4612,4610,1,0,0,0,4612,4611,1,0,0,0,4612,4613,1,0,0,0,
        4613,4615,1,0,0,0,4614,4616,3,410,205,0,4615,4614,1,0,0,0,4616,4617,
        1,0,0,0,4617,4615,1,0,0,0,4617,4618,1,0,0,0,4618,4625,1,0,0,0,4619,
        4621,5,51,0,0,4620,4622,3,408,204,0,4621,4620,1,0,0,0,4622,4623,
        1,0,0,0,4623,4621,1,0,0,0,4623,4624,1,0,0,0,4624,4626,1,0,0,0,4625,
        4619,1,0,0,0,4625,4626,1,0,0,0,4626,4627,1,0,0,0,4627,4628,5,396,
        0,0,4628,4629,5,21,0,0,4629,381,1,0,0,0,4630,4631,5,74,0,0,4631,
        4632,3,660,330,0,4632,4634,5,168,0,0,4633,4635,3,408,204,0,4634,
        4633,1,0,0,0,4635,4636,1,0,0,0,4636,4634,1,0,0,0,4636,4637,1,0,0,
        0,4637,4641,1,0,0,0,4638,4640,3,412,206,0,4639,4638,1,0,0,0,4640,
        4643,1,0,0,0,4641,4639,1,0,0,0,4641,4642,1,0,0,0,4642,4650,1,0,0,
        0,4643,4641,1,0,0,0,4644,4646,5,51,0,0,4645,4647,3,408,204,0,4646,
        4645,1,0,0,0,4647,4648,1,0,0,0,4648,4646,1,0,0,0,4648,4649,1,0,0,
        0,4649,4651,1,0,0,0,4650,4644,1,0,0,0,4650,4651,1,0,0,0,4651,4652,
        1,0,0,0,4652,4653,5,396,0,0,4653,4654,5,74,0,0,4654,383,1,0,0,0,
        4655,4656,5,86,0,0,4656,4657,3,558,279,0,4657,385,1,0,0,0,4658,4659,
        5,92,0,0,4659,4660,3,558,279,0,4660,387,1,0,0,0,4661,4662,3,558,
        279,0,4662,4663,5,1131,0,0,4663,4665,1,0,0,0,4664,4661,1,0,0,0,4664,
        4665,1,0,0,0,4665,4666,1,0,0,0,4666,4668,5,101,0,0,4667,4669,3,408,
        204,0,4668,4667,1,0,0,0,4669,4670,1,0,0,0,4670,4668,1,0,0,0,4670,
        4671,1,0,0,0,4671,4672,1,0,0,0,4672,4673,5,396,0,0,4673,4675,5,101,
        0,0,4674,4676,3,558,279,0,4675,4674,1,0,0,0,4675,4676,1,0,0,0,4676,
        389,1,0,0,0,4677,4678,3,558,279,0,4678,4679,5,1131,0,0,4679,4681,
        1,0,0,0,4680,4677,1,0,0,0,4680,4681,1,0,0,0,4681,4682,1,0,0,0,4682,
        4684,5,136,0,0,4683,4685,3,408,204,0,4684,4683,1,0,0,0,4685,4686,
        1,0,0,0,4686,4684,1,0,0,0,4686,4687,1,0,0,0,4687,4688,1,0,0,0,4688,
        4689,5,646,0,0,4689,4690,3,660,330,0,4690,4691,5,396,0,0,4691,4693,
        5,136,0,0,4692,4694,3,558,279,0,4693,4692,1,0,0,0,4693,4694,1,0,
        0,0,4694,391,1,0,0,0,4695,4696,5,142,0,0,4696,4697,3,660,330,0,4697,
        393,1,0,0,0,4698,4699,3,558,279,0,4699,4700,5,1131,0,0,4700,4702,
        1,0,0,0,4701,4698,1,0,0,0,4701,4702,1,0,0,0,4702,4703,1,0,0,0,4703,
        4704,5,185,0,0,4704,4705,3,660,330,0,4705,4707,5,390,0,0,4706,4708,
        3,408,204,0,4707,4706,1,0,0,0,4708,4709,1,0,0,0,4709,4707,1,0,0,
        0,4709,4710,1,0,0,0,4710,4711,1,0,0,0,4711,4712,5,396,0,0,4712,4714,
        5,185,0,0,4713,4715,3,558,279,0,4714,4713,1,0,0,0,4714,4715,1,0,
        0,0,4715,395,1,0,0,0,4716,4717,5,352,0,0,4717,4732,3,558,279,0,4718,
        4723,5,61,0,0,4719,4721,5,507,0,0,4720,4719,1,0,0,0,4720,4721,1,
        0,0,0,4721,4722,1,0,0,0,4722,4724,5,65,0,0,4723,4720,1,0,0,0,4723,
        4724,1,0,0,0,4724,4725,1,0,0,0,4725,4726,3,558,279,0,4726,4727,5,
        84,0,0,4727,4728,3,590,295,0,4728,4732,1,0,0,0,4729,4730,5,526,0,
        0,4730,4732,3,558,279,0,4731,4716,1,0,0,0,4731,4718,1,0,0,0,4731,
        4729,1,0,0,0,4732,397,1,0,0,0,4733,4734,5,39,0,0,4734,4735,3,590,
        295,0,4735,4738,3,578,289,0,4736,4737,5,40,0,0,4737,4739,3,660,330,
        0,4738,4736,1,0,0,0,4738,4739,1,0,0,0,4739,399,1,0,0,0,4740,4741,
        5,39,0,0,4741,4742,3,558,279,0,4742,4743,5,28,0,0,4743,4750,5,62,
        0,0,4744,4751,3,564,282,0,4745,4747,5,157,0,0,4746,4748,5,652,0,
        0,4747,4746,1,0,0,0,4747,4748,1,0,0,0,4748,4749,1,0,0,0,4749,4751,
        5,1135,0,0,4750,4744,1,0,0,0,4750,4745,1,0,0,0,4751,401,1,0,0,0,
        4752,4753,5,39,0,0,4753,4754,3,558,279,0,4754,4755,5,36,0,0,4755,
        4756,5,62,0,0,4756,4757,3,204,102,0,4757,403,1,0,0,0,4758,4759,5,
        39,0,0,4759,4760,7,67,0,0,4760,4761,5,430,0,0,4761,4762,5,62,0,0,
        4762,4767,3,406,203,0,4763,4764,5,1122,0,0,4764,4766,3,406,203,0,
        4765,4763,1,0,0,0,4766,4769,1,0,0,0,4767,4765,1,0,0,0,4767,4768,
        1,0,0,0,4768,4770,1,0,0,0,4769,4767,1,0,0,0,4770,4771,3,376,188,
        0,4771,405,1,0,0,0,4772,4784,3,564,282,0,4773,4775,5,157,0,0,4774,
        4776,5,652,0,0,4775,4774,1,0,0,0,4775,4776,1,0,0,0,4776,4777,1,0,
        0,0,4777,4784,5,1135,0,0,4778,4784,3,558,279,0,4779,4784,5,158,0,
        0,4780,4781,5,110,0,0,4781,4784,5,423,0,0,4782,4784,5,156,0,0,4783,
        4772,1,0,0,0,4783,4773,1,0,0,0,4783,4778,1,0,0,0,4783,4779,1,0,0,
        0,4783,4780,1,0,0,0,4783,4782,1,0,0,0,4784,407,1,0,0,0,4785,4788,
        3,18,9,0,4786,4788,3,4,2,0,4787,4785,1,0,0,0,4787,4786,1,0,0,0,4788,
        4789,1,0,0,0,4789,4790,5,1123,0,0,4790,409,1,0,0,0,4791,4794,5,183,
        0,0,4792,4795,3,576,288,0,4793,4795,3,660,330,0,4794,4792,1,0,0,
        0,4794,4793,1,0,0,0,4795,4796,1,0,0,0,4796,4798,5,168,0,0,4797,4799,
        3,408,204,0,4798,4797,1,0,0,0,4799,4800,1,0,0,0,4800,4798,1,0,0,
        0,4800,4801,1,0,0,0,4801,411,1,0,0,0,4802,4803,5,52,0,0,4803,4804,
        3,660,330,0,4804,4806,5,168,0,0,4805,4807,3,408,204,0,4806,4805,
        1,0,0,0,4807,4808,1,0,0,0,4808,4806,1,0,0,0,4808,4809,1,0,0,0,4809,
        413,1,0,0,0,4810,4811,5,7,0,0,4811,4812,5,648,0,0,4812,4817,3,434,
        217,0,4813,4814,5,1122,0,0,4814,4816,3,434,217,0,4815,4813,1,0,0,
        0,4816,4819,1,0,0,0,4817,4815,1,0,0,0,4817,4818,1,0,0,0,4818,4865,
        1,0,0,0,4819,4817,1,0,0,0,4820,4821,5,7,0,0,4821,4823,5,648,0,0,
        4822,4824,3,612,306,0,4823,4822,1,0,0,0,4823,4824,1,0,0,0,4824,4825,
        1,0,0,0,4825,4830,3,436,218,0,4826,4827,5,1122,0,0,4827,4829,3,436,
        218,0,4828,4826,1,0,0,0,4829,4832,1,0,0,0,4830,4828,1,0,0,0,4830,
        4831,1,0,0,0,4831,4847,1,0,0,0,4832,4830,1,0,0,0,4833,4845,5,138,
        0,0,4834,4846,5,516,0,0,4835,4842,3,438,219,0,4836,4838,5,10,0,0,
        4837,4836,1,0,0,0,4837,4838,1,0,0,0,4838,4839,1,0,0,0,4839,4841,
        3,438,219,0,4840,4837,1,0,0,0,4841,4844,1,0,0,0,4842,4840,1,0,0,
        0,4842,4843,1,0,0,0,4843,4846,1,0,0,0,4844,4842,1,0,0,0,4845,4834,
        1,0,0,0,4845,4835,1,0,0,0,4846,4848,1,0,0,0,4847,4833,1,0,0,0,4847,
        4848,1,0,0,0,4848,4855,1,0,0,0,4849,4851,5,186,0,0,4850,4852,3,440,
        220,0,4851,4850,1,0,0,0,4852,4853,1,0,0,0,4853,4851,1,0,0,0,4853,
        4854,1,0,0,0,4854,4856,1,0,0,0,4855,4849,1,0,0,0,4855,4856,1,0,0,
        0,4856,4861,1,0,0,0,4857,4860,3,442,221,0,4858,4860,3,444,222,0,
        4859,4857,1,0,0,0,4859,4858,1,0,0,0,4860,4863,1,0,0,0,4861,4859,
        1,0,0,0,4861,4862,1,0,0,0,4862,4865,1,0,0,0,4863,4861,1,0,0,0,4864,
        4810,1,0,0,0,4864,4820,1,0,0,0,4865,415,1,0,0,0,4866,4867,5,32,0,
        0,4867,4868,5,648,0,0,4868,4873,3,436,218,0,4869,4870,5,1122,0,0,
        4870,4872,3,436,218,0,4871,4869,1,0,0,0,4872,4875,1,0,0,0,4873,4871,
        1,0,0,0,4873,4874,1,0,0,0,4874,4921,1,0,0,0,4875,4873,1,0,0,0,4876,
        4877,5,32,0,0,4877,4879,5,648,0,0,4878,4880,3,614,307,0,4879,4878,
        1,0,0,0,4879,4880,1,0,0,0,4880,4881,1,0,0,0,4881,4886,3,436,218,
        0,4882,4883,5,1122,0,0,4883,4885,3,436,218,0,4884,4882,1,0,0,0,4885,
        4888,1,0,0,0,4886,4884,1,0,0,0,4886,4887,1,0,0,0,4887,4903,1,0,0,
        0,4888,4886,1,0,0,0,4889,4901,5,138,0,0,4890,4902,5,516,0,0,4891,
        4898,3,438,219,0,4892,4894,5,10,0,0,4893,4892,1,0,0,0,4893,4894,
        1,0,0,0,4894,4895,1,0,0,0,4895,4897,3,438,219,0,4896,4893,1,0,0,
        0,4897,4900,1,0,0,0,4898,4896,1,0,0,0,4898,4899,1,0,0,0,4899,4902,
        1,0,0,0,4900,4898,1,0,0,0,4901,4890,1,0,0,0,4901,4891,1,0,0,0,4902,
        4904,1,0,0,0,4903,4889,1,0,0,0,4903,4904,1,0,0,0,4904,4911,1,0,0,
        0,4905,4907,5,186,0,0,4906,4908,3,440,220,0,4907,4906,1,0,0,0,4908,
        4909,1,0,0,0,4909,4907,1,0,0,0,4909,4910,1,0,0,0,4910,4912,1,0,0,
        0,4911,4905,1,0,0,0,4911,4912,1,0,0,0,4912,4917,1,0,0,0,4913,4916,
        3,442,221,0,4914,4916,3,444,222,0,4915,4913,1,0,0,0,4915,4914,1,
        0,0,0,4916,4919,1,0,0,0,4917,4915,1,0,0,0,4917,4918,1,0,0,0,4918,
        4921,1,0,0,0,4919,4917,1,0,0,0,4920,4866,1,0,0,0,4920,4876,1,0,0,
        0,4921,417,1,0,0,0,4922,4923,5,49,0,0,4923,4925,5,648,0,0,4924,4926,
        3,612,306,0,4925,4924,1,0,0,0,4925,4926,1,0,0,0,4926,4927,1,0,0,
        0,4927,4932,3,540,270,0,4928,4929,5,1122,0,0,4929,4931,3,540,270,
        0,4930,4928,1,0,0,0,4931,4934,1,0,0,0,4932,4930,1,0,0,0,4932,4933,
        1,0,0,0,4933,419,1,0,0,0,4934,4932,1,0,0,0,4935,4936,5,69,0,0,4936,
        4941,3,446,223,0,4937,4938,5,1122,0,0,4938,4940,3,446,223,0,4939,
        4937,1,0,0,0,4940,4943,1,0,0,0,4941,4939,1,0,0,0,4941,4942,1,0,0,
        0,4942,4944,1,0,0,0,4943,4941,1,0,0,0,4944,4946,5,114,0,0,4945,4947,
        7,68,0,0,4946,4945,1,0,0,0,4946,4947,1,0,0,0,4947,4948,1,0,0,0,4948,
        4949,3,450,225,0,4949,4950,5,169,0,0,4950,4955,3,436,218,0,4951,
        4952,5,1122,0,0,4952,4954,3,436,218,0,4953,4951,1,0,0,0,4954,4957,
        1,0,0,0,4955,4953,1,0,0,0,4955,4956,1,0,0,0,4956,4972,1,0,0,0,4957,
        4955,1,0,0,0,4958,4970,5,138,0,0,4959,4971,5,516,0,0,4960,4967,3,
        438,219,0,4961,4963,5,10,0,0,4962,4961,1,0,0,0,4962,4963,1,0,0,0,
        4963,4964,1,0,0,0,4964,4966,3,438,219,0,4965,4962,1,0,0,0,4966,4969,
        1,0,0,0,4967,4965,1,0,0,0,4967,4968,1,0,0,0,4968,4971,1,0,0,0,4969,
        4967,1,0,0,0,4970,4959,1,0,0,0,4970,4960,1,0,0,0,4971,4973,1,0,0,
        0,4972,4958,1,0,0,0,4972,4973,1,0,0,0,4973,4983,1,0,0,0,4974,4980,
        5,186,0,0,4975,4976,5,69,0,0,4976,4979,5,116,0,0,4977,4979,3,440,
        220,0,4978,4975,1,0,0,0,4978,4977,1,0,0,0,4979,4982,1,0,0,0,4980,
        4978,1,0,0,0,4980,4981,1,0,0,0,4981,4984,1,0,0,0,4982,4980,1,0,0,
        0,4983,4974,1,0,0,0,4983,4984,1,0,0,0,4984,4991,1,0,0,0,4985,4986,
        5,12,0,0,4986,4987,3,540,270,0,4987,4988,5,186,0,0,4988,4989,5,579,
        0,0,4989,4990,3,422,211,0,4990,4992,1,0,0,0,4991,4985,1,0,0,0,4991,
        4992,1,0,0,0,4992,5029,1,0,0,0,4993,4996,5,69,0,0,4994,4997,3,540,
        270,0,4995,4997,3,558,279,0,4996,4994,1,0,0,0,4996,4995,1,0,0,0,
        4997,5005,1,0,0,0,4998,5001,5,1122,0,0,4999,5002,3,540,270,0,5000,
        5002,3,558,279,0,5001,4999,1,0,0,0,5001,5000,1,0,0,0,5002,5004,1,
        0,0,0,5003,4998,1,0,0,0,5004,5007,1,0,0,0,5005,5003,1,0,0,0,5005,
        5006,1,0,0,0,5006,5008,1,0,0,0,5007,5005,1,0,0,0,5008,5011,5,169,
        0,0,5009,5012,3,540,270,0,5010,5012,3,558,279,0,5011,5009,1,0,0,
        0,5011,5010,1,0,0,0,5012,5020,1,0,0,0,5013,5016,5,1122,0,0,5014,
        5017,3,540,270,0,5015,5017,3,558,279,0,5016,5014,1,0,0,0,5016,5015,
        1,0,0,0,5017,5019,1,0,0,0,5018,5013,1,0,0,0,5019,5022,1,0,0,0,5020,
        5018,1,0,0,0,5020,5021,1,0,0,0,5021,5026,1,0,0,0,5022,5020,1,0,0,
        0,5023,5024,5,186,0,0,5024,5025,5,703,0,0,5025,5027,5,116,0,0,5026,
        5023,1,0,0,0,5026,5027,1,0,0,0,5027,5029,1,0,0,0,5028,4935,1,0,0,
        0,5028,4993,1,0,0,0,5029,421,1,0,0,0,5030,5053,5,40,0,0,5031,5053,
        5,516,0,0,5032,5042,5,6,0,0,5033,5034,5,56,0,0,5034,5039,3,540,270,
        0,5035,5036,5,1122,0,0,5036,5038,3,540,270,0,5037,5035,1,0,0,0,5038,
        5041,1,0,0,0,5039,5037,1,0,0,0,5039,5040,1,0,0,0,5040,5043,1,0,0,
        0,5041,5039,1,0,0,0,5042,5033,1,0,0,0,5042,5043,1,0,0,0,5043,5053,
        1,0,0,0,5044,5049,3,540,270,0,5045,5046,5,1122,0,0,5046,5048,3,540,
        270,0,5047,5045,1,0,0,0,5048,5051,1,0,0,0,5049,5047,1,0,0,0,5049,
        5050,1,0,0,0,5050,5053,1,0,0,0,5051,5049,1,0,0,0,5052,5030,1,0,0,
        0,5052,5031,1,0,0,0,5052,5032,1,0,0,0,5052,5044,1,0,0,0,5053,423,
        1,0,0,0,5054,5055,5,69,0,0,5055,5056,5,550,0,0,5056,5057,5,114,0,
        0,5057,5058,3,540,270,0,5058,5059,5,169,0,0,5059,5064,3,540,270,
        0,5060,5061,5,1122,0,0,5061,5063,3,540,270,0,5062,5060,1,0,0,0,5063,
        5066,1,0,0,0,5064,5062,1,0,0,0,5064,5065,1,0,0,0,5065,5070,1,0,0,
        0,5066,5064,1,0,0,0,5067,5068,5,186,0,0,5068,5069,5,69,0,0,5069,
        5071,5,116,0,0,5070,5067,1,0,0,0,5070,5071,1,0,0,0,5071,425,1,0,
        0,0,5072,5073,5,135,0,0,5073,5074,5,648,0,0,5074,5079,3,452,226,
        0,5075,5076,5,1122,0,0,5076,5078,3,452,226,0,5077,5075,1,0,0,0,5078,
        5081,1,0,0,0,5079,5077,1,0,0,0,5079,5080,1,0,0,0,5080,427,1,0,0,
        0,5081,5079,1,0,0,0,5082,5083,5,143,0,0,5083,5088,3,446,223,0,5084,
        5085,5,1122,0,0,5085,5087,3,446,223,0,5086,5084,1,0,0,0,5087,5090,
        1,0,0,0,5088,5086,1,0,0,0,5088,5089,1,0,0,0,5089,5091,1,0,0,0,5090,
        5088,1,0,0,0,5091,5093,5,114,0,0,5092,5094,7,68,0,0,5093,5092,1,
        0,0,0,5093,5094,1,0,0,0,5094,5095,1,0,0,0,5095,5096,3,450,225,0,
        5096,5097,5,65,0,0,5097,5102,3,540,270,0,5098,5099,5,1122,0,0,5099,
        5101,3,540,270,0,5100,5098,1,0,0,0,5101,5104,1,0,0,0,5102,5100,1,
        0,0,0,5102,5103,1,0,0,0,5103,5147,1,0,0,0,5104,5102,1,0,0,0,5105,
        5106,5,143,0,0,5106,5108,5,6,0,0,5107,5109,5,688,0,0,5108,5107,1,
        0,0,0,5108,5109,1,0,0,0,5109,5110,1,0,0,0,5110,5111,5,1122,0,0,5111,
        5112,5,69,0,0,5112,5113,5,116,0,0,5113,5114,5,65,0,0,5114,5119,3,
        540,270,0,5115,5116,5,1122,0,0,5116,5118,3,540,270,0,5117,5115,1,
        0,0,0,5118,5121,1,0,0,0,5119,5117,1,0,0,0,5119,5120,1,0,0,0,5120,
        5147,1,0,0,0,5121,5119,1,0,0,0,5122,5123,5,143,0,0,5123,5128,3,558,
        279,0,5124,5125,5,1122,0,0,5125,5127,3,558,279,0,5126,5124,1,0,0,
        0,5127,5130,1,0,0,0,5128,5126,1,0,0,0,5128,5129,1,0,0,0,5129,5131,
        1,0,0,0,5130,5128,1,0,0,0,5131,5134,5,65,0,0,5132,5135,3,540,270,
        0,5133,5135,3,558,279,0,5134,5132,1,0,0,0,5134,5133,1,0,0,0,5135,
        5143,1,0,0,0,5136,5139,5,1122,0,0,5137,5140,3,540,270,0,5138,5140,
        3,558,279,0,5139,5137,1,0,0,0,5139,5138,1,0,0,0,5140,5142,1,0,0,
        0,5141,5136,1,0,0,0,5142,5145,1,0,0,0,5143,5141,1,0,0,0,5143,5144,
        1,0,0,0,5144,5147,1,0,0,0,5145,5143,1,0,0,0,5146,5082,1,0,0,0,5146,
        5105,1,0,0,0,5146,5122,1,0,0,0,5147,429,1,0,0,0,5148,5149,5,143,
        0,0,5149,5150,5,550,0,0,5150,5151,5,114,0,0,5151,5152,3,540,270,
        0,5152,5153,5,65,0,0,5153,5158,3,540,270,0,5154,5155,5,1122,0,0,
        5155,5157,3,540,270,0,5156,5154,1,0,0,0,5157,5160,1,0,0,0,5158,5156,
        1,0,0,0,5158,5159,1,0,0,0,5159,431,1,0,0,0,5160,5158,1,0,0,0,5161,
        5162,5,149,0,0,5162,5165,5,536,0,0,5163,5164,5,62,0,0,5164,5166,
        3,540,270,0,5165,5163,1,0,0,0,5165,5166,1,0,0,0,5166,5167,1,0,0,
        0,5167,5170,5,1111,0,0,5168,5171,3,654,327,0,5169,5171,5,1135,0,
        0,5170,5168,1,0,0,0,5170,5169,1,0,0,0,5171,433,1,0,0,0,5172,5173,
        3,540,270,0,5173,5174,3,442,221,0,5174,435,1,0,0,0,5175,5176,3,540,
        270,0,5176,5177,5,435,0,0,5177,5178,5,18,0,0,5178,5179,5,536,0,0,
        5179,5180,5,1135,0,0,5180,5204,1,0,0,0,5181,5182,3,540,270,0,5182,
        5185,5,435,0,0,5183,5184,5,186,0,0,5184,5186,3,556,278,0,5185,5183,
        1,0,0,0,5185,5186,1,0,0,0,5186,5187,1,0,0,0,5187,5188,5,18,0,0,5188,
        5192,5,1135,0,0,5189,5190,5,141,0,0,5190,5191,5,34,0,0,5191,5193,
        5,536,0,0,5192,5189,1,0,0,0,5192,5193,1,0,0,0,5193,5204,1,0,0,0,
        5194,5195,3,540,270,0,5195,5196,5,435,0,0,5196,5197,5,186,0,0,5197,
        5200,3,556,278,0,5198,5199,5,12,0,0,5199,5201,5,1135,0,0,5200,5198,
        1,0,0,0,5200,5201,1,0,0,0,5201,5204,1,0,0,0,5202,5204,3,540,270,
        0,5203,5175,1,0,0,0,5203,5181,1,0,0,0,5203,5194,1,0,0,0,5203,5202,
        1,0,0,0,5204,437,1,0,0,0,5205,5214,5,162,0,0,5206,5214,5,663,0,0,
        5207,5208,5,349,0,0,5208,5214,5,1135,0,0,5209,5210,5,452,0,0,5210,
        5214,5,1135,0,0,5211,5212,5,623,0,0,5212,5214,5,1135,0,0,5213,5205,
        1,0,0,0,5213,5206,1,0,0,0,5213,5207,1,0,0,0,5213,5209,1,0,0,0,5213,
        5211,1,0,0,0,5214,439,1,0,0,0,5215,5216,5,486,0,0,5216,5224,3,564,
        282,0,5217,5218,5,489,0,0,5218,5224,3,564,282,0,5219,5220,5,485,
        0,0,5220,5224,3,564,282,0,5221,5222,5,490,0,0,5222,5224,3,564,282,
        0,5223,5215,1,0,0,0,5223,5217,1,0,0,0,5223,5219,1,0,0,0,5223,5221,
        1,0,0,0,5224,441,1,0,0,0,5225,5226,5,536,0,0,5226,5233,5,409,0,0,
        5227,5234,5,40,0,0,5228,5234,5,506,0,0,5229,5230,5,83,0,0,5230,5231,
        3,564,282,0,5231,5232,5,674,0,0,5232,5234,1,0,0,0,5233,5227,1,0,
        0,0,5233,5228,1,0,0,0,5233,5229,1,0,0,0,5233,5234,1,0,0,0,5234,443,
        1,0,0,0,5235,5236,5,323,0,0,5236,5237,7,69,0,0,5237,445,1,0,0,0,
        5238,5243,3,448,224,0,5239,5240,5,1120,0,0,5240,5241,3,590,295,0,
        5241,5242,5,1121,0,0,5242,5244,1,0,0,0,5243,5239,1,0,0,0,5243,5244,
        1,0,0,0,5244,447,1,0,0,0,5245,5247,5,6,0,0,5246,5248,5,688,0,0,5247,
        5246,1,0,0,0,5247,5248,1,0,0,0,5248,5331,1,0,0,0,5249,5251,5,7,0,
        0,5250,5252,5,681,0,0,5251,5250,1,0,0,0,5251,5252,1,0,0,0,5252,5331,
        1,0,0,0,5253,5261,5,32,0,0,5254,5255,5,632,0,0,5255,5262,5,680,0,
        0,5256,5262,5,681,0,0,5257,5262,5,654,0,0,5258,5262,5,648,0,0,5259,
        5262,5,630,0,0,5260,5262,5,579,0,0,5261,5254,1,0,0,0,5261,5256,1,
        0,0,0,5261,5257,1,0,0,0,5261,5258,1,0,0,0,5261,5259,1,0,0,0,5261,
        5260,1,0,0,0,5261,5262,1,0,0,0,5262,5331,1,0,0,0,5263,5331,5,42,
        0,0,5264,5266,5,49,0,0,5265,5267,5,579,0,0,5266,5265,1,0,0,0,5266,
        5267,1,0,0,0,5267,5331,1,0,0,0,5268,5331,5,404,0,0,5269,5331,5,682,
        0,0,5270,5331,5,683,0,0,5271,5272,5,69,0,0,5272,5331,5,116,0,0,5273,
        5331,5,78,0,0,5274,5331,5,82,0,0,5275,5276,5,99,0,0,5276,5331,5,
        680,0,0,5277,5331,5,684,0,0,5278,5331,5,550,0,0,5279,5331,5,132,
        0,0,5280,5331,5,685,0,0,5281,5282,5,572,0,0,5282,5331,7,70,0,0,5283,
        5331,5,148,0,0,5284,5285,5,151,0,0,5285,5331,7,71,0,0,5286,5331,
        5,686,0,0,5287,5331,5,687,0,0,5288,5331,5,171,0,0,5289,5331,5,178,
        0,0,5290,5331,5,179,0,0,5291,5331,5,689,0,0,5292,5331,5,690,0,0,
        5293,5331,5,691,0,0,5294,5331,5,692,0,0,5295,5331,5,693,0,0,5296,
        5331,5,694,0,0,5297,5331,5,695,0,0,5298,5331,5,696,0,0,5299,5331,
        5,697,0,0,5300,5331,5,698,0,0,5301,5331,5,699,0,0,5302,5331,5,700,
        0,0,5303,5331,5,701,0,0,5304,5331,5,702,0,0,5305,5331,5,704,0,0,
        5306,5331,5,705,0,0,5307,5331,5,706,0,0,5308,5331,5,707,0,0,5309,
        5331,5,708,0,0,5310,5331,5,709,0,0,5311,5331,5,710,0,0,5312,5331,
        5,711,0,0,5313,5331,5,712,0,0,5314,5331,5,713,0,0,5315,5331,5,714,
        0,0,5316,5331,5,715,0,0,5317,5331,5,716,0,0,5318,5331,5,717,0,0,
        5319,5331,5,718,0,0,5320,5331,5,1053,0,0,5321,5331,5,719,0,0,5322,
        5331,5,720,0,0,5323,5331,5,721,0,0,5324,5331,5,722,0,0,5325,5331,
        5,1089,0,0,5326,5331,5,1090,0,0,5327,5331,5,1091,0,0,5328,5331,5,
        1092,0,0,5329,5331,5,1094,0,0,5330,5245,1,0,0,0,5330,5249,1,0,0,
        0,5330,5253,1,0,0,0,5330,5263,1,0,0,0,5330,5264,1,0,0,0,5330,5268,
        1,0,0,0,5330,5269,1,0,0,0,5330,5270,1,0,0,0,5330,5271,1,0,0,0,5330,
        5273,1,0,0,0,5330,5274,1,0,0,0,5330,5275,1,0,0,0,5330,5277,1,0,0,
        0,5330,5278,1,0,0,0,5330,5279,1,0,0,0,5330,5280,1,0,0,0,5330,5281,
        1,0,0,0,5330,5283,1,0,0,0,5330,5284,1,0,0,0,5330,5286,1,0,0,0,5330,
        5287,1,0,0,0,5330,5288,1,0,0,0,5330,5289,1,0,0,0,5330,5290,1,0,0,
        0,5330,5291,1,0,0,0,5330,5292,1,0,0,0,5330,5293,1,0,0,0,5330,5294,
        1,0,0,0,5330,5295,1,0,0,0,5330,5296,1,0,0,0,5330,5297,1,0,0,0,5330,
        5298,1,0,0,0,5330,5299,1,0,0,0,5330,5300,1,0,0,0,5330,5301,1,0,0,
        0,5330,5302,1,0,0,0,5330,5303,1,0,0,0,5330,5304,1,0,0,0,5330,5305,
        1,0,0,0,5330,5306,1,0,0,0,5330,5307,1,0,0,0,5330,5308,1,0,0,0,5330,
        5309,1,0,0,0,5330,5310,1,0,0,0,5330,5311,1,0,0,0,5330,5312,1,0,0,
        0,5330,5313,1,0,0,0,5330,5314,1,0,0,0,5330,5315,1,0,0,0,5330,5316,
        1,0,0,0,5330,5317,1,0,0,0,5330,5318,1,0,0,0,5330,5319,1,0,0,0,5330,
        5320,1,0,0,0,5330,5321,1,0,0,0,5330,5322,1,0,0,0,5330,5323,1,0,0,
        0,5330,5324,1,0,0,0,5330,5325,1,0,0,0,5330,5326,1,0,0,0,5330,5327,
        1,0,0,0,5330,5328,1,0,0,0,5330,5329,1,0,0,0,5331,449,1,0,0,0,5332,
        5349,5,1104,0,0,5333,5334,5,1104,0,0,5334,5335,5,1119,0,0,5335,5349,
        5,1104,0,0,5336,5337,3,558,279,0,5337,5338,5,1119,0,0,5338,5339,
        5,1104,0,0,5339,5349,1,0,0,0,5340,5341,3,558,279,0,5341,5342,5,1119,
        0,0,5342,5343,3,558,279,0,5343,5349,1,0,0,0,5344,5345,3,558,279,
        0,5345,5346,3,562,281,0,5346,5349,1,0,0,0,5347,5349,3,558,279,0,
        5348,5332,1,0,0,0,5348,5333,1,0,0,0,5348,5336,1,0,0,0,5348,5340,
        1,0,0,0,5348,5344,1,0,0,0,5348,5347,1,0,0,0,5349,451,1,0,0,0,5350,
        5351,3,540,270,0,5351,5352,5,169,0,0,5352,5353,3,540,270,0,5353,
        453,1,0,0,0,5354,5356,5,9,0,0,5355,5357,7,72,0,0,5356,5355,1,0,0,
        0,5356,5357,1,0,0,0,5357,5358,1,0,0,0,5358,5359,7,56,0,0,5359,5377,
        3,592,296,0,5360,5361,5,178,0,0,5361,5362,5,73,0,0,5362,5363,5,114,
        0,0,5363,5368,3,536,268,0,5364,5365,5,1122,0,0,5365,5367,3,536,268,
        0,5366,5364,1,0,0,0,5367,5370,1,0,0,0,5368,5366,1,0,0,0,5368,5369,
        1,0,0,0,5369,5375,1,0,0,0,5370,5368,1,0,0,0,5371,5372,5,186,0,0,
        5372,5373,3,564,282,0,5373,5374,5,17,0,0,5374,5376,1,0,0,0,5375,
        5371,1,0,0,0,5375,5376,1,0,0,0,5376,5378,1,0,0,0,5377,5360,1,0,0,
        0,5377,5378,1,0,0,0,5378,5390,1,0,0,0,5379,5380,5,49,0,0,5380,5381,
        5,73,0,0,5381,5382,5,114,0,0,5382,5387,3,536,268,0,5383,5384,5,1122,
        0,0,5384,5386,3,536,268,0,5385,5383,1,0,0,0,5386,5389,1,0,0,0,5387,
        5385,1,0,0,0,5387,5388,1,0,0,0,5388,5391,1,0,0,0,5389,5387,1,0,0,
        0,5390,5379,1,0,0,0,5390,5391,1,0,0,0,5391,455,1,0,0,0,5392,5393,
        5,25,0,0,5393,5394,5,166,0,0,5394,5398,3,592,296,0,5395,5397,3,464,
        232,0,5396,5395,1,0,0,0,5397,5400,1,0,0,0,5398,5396,1,0,0,0,5398,
        5399,1,0,0,0,5399,457,1,0,0,0,5400,5398,1,0,0,0,5401,5402,5,347,
        0,0,5402,5403,5,166,0,0,5403,5405,3,592,296,0,5404,5406,7,73,0,0,
        5405,5404,1,0,0,0,5405,5406,1,0,0,0,5406,459,1,0,0,0,5407,5409,5,
        115,0,0,5408,5410,7,72,0,0,5409,5408,1,0,0,0,5409,5410,1,0,0,0,5410,
        5411,1,0,0,0,5411,5412,7,56,0,0,5412,5414,3,592,296,0,5413,5415,
        3,616,308,0,5414,5413,1,0,0,0,5414,5415,1,0,0,0,5415,461,1,0,0,0,
        5416,5418,5,564,0,0,5417,5419,7,72,0,0,5418,5417,1,0,0,0,5418,5419,
        1,0,0,0,5419,5420,1,0,0,0,5420,5421,5,166,0,0,5421,5423,3,592,296,
        0,5422,5424,5,552,0,0,5423,5422,1,0,0,0,5423,5424,1,0,0,0,5424,5426,
        1,0,0,0,5425,5427,5,411,0,0,5426,5425,1,0,0,0,5426,5427,1,0,0,0,
        5427,5429,1,0,0,0,5428,5430,5,649,0,0,5429,5428,1,0,0,0,5429,5430,
        1,0,0,0,5430,463,1,0,0,0,5431,5432,5,62,0,0,5432,5439,5,647,0,0,
        5433,5439,5,552,0,0,5434,5439,5,413,0,0,5435,5439,5,491,0,0,5436,
        5439,5,411,0,0,5437,5439,5,345,0,0,5438,5431,1,0,0,0,5438,5433,1,
        0,0,0,5438,5434,1,0,0,0,5438,5435,1,0,0,0,5438,5436,1,0,0,0,5438,
        5437,1,0,0,0,5439,465,1,0,0,0,5440,5442,5,32,0,0,5441,5443,5,326,
        0,0,5442,5441,1,0,0,0,5442,5443,1,0,0,0,5443,5444,1,0,0,0,5444,5445,
        5,425,0,0,5445,5446,3,558,279,0,5446,5447,5,578,0,0,5447,5448,7,
        74,0,0,5448,5449,5,602,0,0,5449,5450,5,1135,0,0,5450,467,1,0,0,0,
        5451,5452,5,443,0,0,5452,5453,5,538,0,0,5453,5454,3,558,279,0,5454,
        5455,5,602,0,0,5455,5456,5,1135,0,0,5456,469,1,0,0,0,5457,5458,5,
        644,0,0,5458,5459,5,538,0,0,5459,5460,3,558,279,0,5460,471,1,0,0,
        0,5461,5462,5,149,0,0,5462,5463,3,476,238,0,5463,5466,7,75,0,0,5464,
        5467,3,660,330,0,5465,5467,5,114,0,0,5466,5464,1,0,0,0,5466,5465,
        1,0,0,0,5467,5477,1,0,0,0,5468,5469,5,1122,0,0,5469,5470,3,476,238,
        0,5470,5473,7,75,0,0,5471,5474,3,660,330,0,5472,5474,5,114,0,0,5473,
        5471,1,0,0,0,5473,5472,1,0,0,0,5474,5476,1,0,0,0,5475,5468,1,0,0,
        0,5476,5479,1,0,0,0,5477,5475,1,0,0,0,5477,5478,1,0,0,0,5478,5514,
        1,0,0,0,5479,5477,1,0,0,0,5480,5481,5,149,0,0,5481,5484,3,64,32,
        0,5482,5485,3,544,272,0,5483,5485,5,40,0,0,5484,5482,1,0,0,0,5484,
        5483,1,0,0,0,5485,5514,1,0,0,0,5486,5487,5,149,0,0,5487,5494,5,504,
        0,0,5488,5491,3,544,272,0,5489,5490,5,26,0,0,5490,5492,3,546,273,
        0,5491,5489,1,0,0,0,5491,5492,1,0,0,0,5492,5495,1,0,0,0,5493,5495,
        5,40,0,0,5494,5488,1,0,0,0,5494,5493,1,0,0,0,5495,5514,1,0,0,0,5496,
        5514,3,432,216,0,5497,5514,3,306,153,0,5498,5514,3,304,152,0,5499,
        5500,5,149,0,0,5500,5501,3,530,265,0,5501,5502,7,75,0,0,5502,5510,
        3,660,330,0,5503,5504,5,1122,0,0,5504,5505,3,530,265,0,5505,5506,
        7,75,0,0,5506,5507,3,660,330,0,5507,5509,1,0,0,0,5508,5503,1,0,0,
        0,5509,5512,1,0,0,0,5510,5508,1,0,0,0,5510,5511,1,0,0,0,5511,5514,
        1,0,0,0,5512,5510,1,0,0,0,5513,5461,1,0,0,0,5513,5480,1,0,0,0,5513,
        5486,1,0,0,0,5513,5496,1,0,0,0,5513,5497,1,0,0,0,5513,5498,1,0,0,
        0,5513,5499,1,0,0,0,5514,473,1,0,0,0,5515,5516,5,151,0,0,5516,5517,
        7,58,0,0,5517,5669,5,463,0,0,5518,5519,5,151,0,0,5519,5520,7,76,
        0,0,5520,5523,5,405,0,0,5521,5522,5,77,0,0,5522,5524,5,1135,0,0,
        5523,5521,1,0,0,0,5523,5524,1,0,0,0,5524,5527,1,0,0,0,5525,5526,
        5,65,0,0,5526,5528,3,564,282,0,5527,5525,1,0,0,0,5527,5528,1,0,0,
        0,5528,5536,1,0,0,0,5529,5533,5,95,0,0,5530,5531,3,564,282,0,5531,
        5532,5,1122,0,0,5532,5534,1,0,0,0,5533,5530,1,0,0,0,5533,5534,1,
        0,0,0,5534,5535,1,0,0,0,5535,5537,3,564,282,0,5536,5529,1,0,0,0,
        5536,5537,1,0,0,0,5537,5669,1,0,0,0,5538,5539,5,151,0,0,5539,5541,
        3,478,239,0,5540,5542,3,480,240,0,5541,5540,1,0,0,0,5541,5542,1,
        0,0,0,5542,5669,1,0,0,0,5543,5545,5,151,0,0,5544,5546,5,424,0,0,
        5545,5544,1,0,0,0,5545,5546,1,0,0,0,5546,5547,1,0,0,0,5547,5548,
        7,43,0,0,5548,5549,7,77,0,0,5549,5552,3,532,266,0,5550,5551,7,77,
        0,0,5551,5553,3,558,279,0,5552,5550,1,0,0,0,5552,5553,1,0,0,0,5553,
        5555,1,0,0,0,5554,5556,3,480,240,0,5555,5554,1,0,0,0,5555,5556,1,
        0,0,0,5556,5669,1,0,0,0,5557,5558,5,151,0,0,5558,5559,5,32,0,0,5559,
        5561,7,0,0,0,5560,5562,3,614,307,0,5561,5560,1,0,0,0,5561,5562,1,
        0,0,0,5562,5563,1,0,0,0,5563,5669,3,558,279,0,5564,5565,5,151,0,
        0,5565,5566,5,32,0,0,5566,5567,7,78,0,0,5567,5669,3,530,265,0,5568,
        5569,5,151,0,0,5569,5570,5,32,0,0,5570,5571,5,648,0,0,5571,5669,
        3,540,270,0,5572,5573,5,151,0,0,5573,5574,5,398,0,0,5574,5575,3,
        548,274,0,5575,5576,7,79,0,0,5576,5669,1,0,0,0,5577,5578,5,151,0,
        0,5578,5669,3,482,241,0,5579,5580,5,151,0,0,5580,5588,7,80,0,0,5581,
        5585,5,95,0,0,5582,5583,3,564,282,0,5583,5584,5,1122,0,0,5584,5586,
        1,0,0,0,5585,5582,1,0,0,0,5585,5586,1,0,0,0,5586,5587,1,0,0,0,5587,
        5589,3,564,282,0,5588,5581,1,0,0,0,5588,5589,1,0,0,0,5589,5669,1,
        0,0,0,5590,5591,5,151,0,0,5591,5592,5,281,0,0,5592,5593,5,1120,0,
        0,5593,5594,5,1104,0,0,5594,5595,5,1121,0,0,5595,5669,7,80,0,0,5596,
        5597,5,151,0,0,5597,5600,3,484,242,0,5598,5599,7,77,0,0,5599,5601,
        3,558,279,0,5600,5598,1,0,0,0,5600,5601,1,0,0,0,5601,5603,1,0,0,
        0,5602,5604,3,480,240,0,5603,5602,1,0,0,0,5603,5604,1,0,0,0,5604,
        5669,1,0,0,0,5605,5606,5,151,0,0,5606,5607,7,81,0,0,5607,5608,5,
        355,0,0,5608,5669,3,530,265,0,5609,5610,5,151,0,0,5610,5613,5,428,
        0,0,5611,5612,5,62,0,0,5612,5614,3,540,270,0,5613,5611,1,0,0,0,5613,
        5614,1,0,0,0,5614,5669,1,0,0,0,5615,5616,5,151,0,0,5616,5617,7,82,
        0,0,5617,5618,7,77,0,0,5618,5621,3,532,266,0,5619,5620,7,77,0,0,
        5620,5622,3,558,279,0,5621,5619,1,0,0,0,5621,5622,1,0,0,0,5622,5625,
        1,0,0,0,5623,5624,5,184,0,0,5624,5626,3,660,330,0,5625,5623,1,0,
        0,0,5625,5626,1,0,0,0,5626,5669,1,0,0,0,5627,5628,5,151,0,0,5628,
        5629,5,526,0,0,5629,5632,5,680,0,0,5630,5631,7,77,0,0,5631,5633,
        3,558,279,0,5632,5630,1,0,0,0,5632,5633,1,0,0,0,5633,5635,1,0,0,
        0,5634,5636,3,480,240,0,5635,5634,1,0,0,0,5635,5636,1,0,0,0,5636,
        5669,1,0,0,0,5637,5638,5,151,0,0,5638,5639,5,548,0,0,5639,5644,3,
        486,243,0,5640,5641,5,1122,0,0,5641,5643,3,486,243,0,5642,5640,1,
        0,0,0,5643,5646,1,0,0,0,5644,5642,1,0,0,0,5644,5645,1,0,0,0,5645,
        5650,1,0,0,0,5646,5644,1,0,0,0,5647,5648,5,62,0,0,5648,5649,5,551,
        0,0,5649,5651,3,564,282,0,5650,5647,1,0,0,0,5650,5651,1,0,0,0,5651,
        5652,1,0,0,0,5652,5656,5,95,0,0,5653,5654,3,564,282,0,5654,5655,
        5,1122,0,0,5655,5657,1,0,0,0,5656,5653,1,0,0,0,5656,5657,1,0,0,0,
        5657,5658,1,0,0,0,5658,5659,3,564,282,0,5659,5669,1,0,0,0,5660,5661,
        5,151,0,0,5661,5662,5,597,0,0,5662,5666,5,617,0,0,5663,5664,5,62,
        0,0,5664,5665,5,346,0,0,5665,5667,5,1135,0,0,5666,5663,1,0,0,0,5666,
        5667,1,0,0,0,5667,5669,1,0,0,0,5668,5515,1,0,0,0,5668,5518,1,0,0,
        0,5668,5538,1,0,0,0,5668,5543,1,0,0,0,5668,5557,1,0,0,0,5668,5564,
        1,0,0,0,5668,5568,1,0,0,0,5668,5572,1,0,0,0,5668,5577,1,0,0,0,5668,
        5579,1,0,0,0,5668,5590,1,0,0,0,5668,5596,1,0,0,0,5668,5605,1,0,0,
        0,5668,5609,1,0,0,0,5668,5615,1,0,0,0,5668,5627,1,0,0,0,5668,5637,
        1,0,0,0,5668,5660,1,0,0,0,5669,475,1,0,0,0,5670,5681,5,1148,0,0,
        5671,5681,5,1149,0,0,5672,5673,5,1124,0,0,5673,5675,5,1124,0,0,5674,
        5672,1,0,0,0,5674,5675,1,0,0,0,5675,5676,1,0,0,0,5676,5678,7,83,
        0,0,5677,5674,1,0,0,0,5677,5678,1,0,0,0,5678,5679,1,0,0,0,5679,5681,
        3,558,279,0,5680,5670,1,0,0,0,5680,5671,1,0,0,0,5680,5677,1,0,0,
        0,5681,477,1,0,0,0,5682,5683,5,24,0,0,5683,5696,5,149,0,0,5684,5696,
        5,821,0,0,5685,5696,5,38,0,0,5686,5696,5,147,0,0,5687,5688,5,425,
        0,0,5688,5696,5,617,0,0,5689,5690,5,127,0,0,5690,5696,5,617,0,0,
        5691,5693,7,57,0,0,5692,5691,1,0,0,0,5692,5693,1,0,0,0,5693,5694,
        1,0,0,0,5694,5696,7,84,0,0,5695,5682,1,0,0,0,5695,5684,1,0,0,0,5695,
        5685,1,0,0,0,5695,5686,1,0,0,0,5695,5687,1,0,0,0,5695,5689,1,0,0,
        0,5695,5692,1,0,0,0,5696,479,1,0,0,0,5697,5698,5,94,0,0,5698,5702,
        5,1135,0,0,5699,5700,5,184,0,0,5700,5702,3,660,330,0,5701,5697,1,
        0,0,0,5701,5699,1,0,0,0,5702,481,1,0,0,0,5703,5705,5,619,0,0,5704,
        5703,1,0,0,0,5704,5705,1,0,0,0,5705,5706,1,0,0,0,5706,5721,5,399,
        0,0,5707,5708,5,464,0,0,5708,5721,5,617,0,0,5709,5721,5,540,0,0,
        5710,5721,5,688,0,0,5711,5713,5,424,0,0,5712,5711,1,0,0,0,5712,5713,
        1,0,0,0,5713,5714,1,0,0,0,5714,5721,5,547,0,0,5715,5721,5,549,0,
        0,5716,5717,5,597,0,0,5717,5721,5,434,0,0,5718,5721,5,330,0,0,5719,
        5721,5,374,0,0,5720,5704,1,0,0,0,5720,5707,1,0,0,0,5720,5709,1,0,
        0,0,5720,5710,1,0,0,0,5720,5712,1,0,0,0,5720,5715,1,0,0,0,5720,5716,
        1,0,0,0,5720,5718,1,0,0,0,5720,5719,1,0,0,0,5721,483,1,0,0,0,5722,
        5731,5,405,0,0,5723,5724,5,166,0,0,5724,5731,5,617,0,0,5725,5727,
        5,424,0,0,5726,5725,1,0,0,0,5726,5727,1,0,0,0,5727,5728,1,0,0,0,
        5728,5731,5,680,0,0,5729,5731,5,638,0,0,5730,5722,1,0,0,0,5730,5723,
        1,0,0,0,5730,5726,1,0,0,0,5730,5729,1,0,0,0,5731,485,1,0,0,0,5732,
        5745,5,6,0,0,5733,5734,5,338,0,0,5734,5745,5,448,0,0,5735,5736,5,
        373,0,0,5736,5745,5,628,0,0,5737,5745,5,376,0,0,5738,5745,5,450,
        0,0,5739,5745,5,769,0,0,5740,5741,5,531,0,0,5741,5745,5,414,0,0,
        5742,5745,5,604,0,0,5743,5745,5,627,0,0,5744,5732,1,0,0,0,5744,5733,
        1,0,0,0,5744,5735,1,0,0,0,5744,5737,1,0,0,0,5744,5738,1,0,0,0,5744,
        5739,1,0,0,0,5744,5740,1,0,0,0,5744,5742,1,0,0,0,5744,5743,1,0,0,
        0,5745,487,1,0,0,0,5746,5747,5,336,0,0,5747,5748,5,1135,0,0,5748,
        489,1,0,0,0,5749,5750,5,342,0,0,5750,5751,5,78,0,0,5751,5756,3,502,
        251,0,5752,5753,5,1122,0,0,5753,5755,3,502,251,0,5754,5752,1,0,0,
        0,5755,5758,1,0,0,0,5756,5754,1,0,0,0,5756,5757,1,0,0,0,5757,5766,
        1,0,0,0,5758,5756,1,0,0,0,5759,5760,5,125,0,0,5760,5763,5,1120,0,
        0,5761,5764,3,590,295,0,5762,5764,5,6,0,0,5763,5761,1,0,0,0,5763,
        5762,1,0,0,0,5764,5765,1,0,0,0,5765,5767,5,1121,0,0,5766,5759,1,
        0,0,0,5766,5767,1,0,0,0,5767,5768,1,0,0,0,5768,5769,5,77,0,0,5769,
        5770,3,558,279,0,5770,491,1,0,0,0,5771,5773,5,420,0,0,5772,5774,
        7,72,0,0,5773,5772,1,0,0,0,5773,5774,1,0,0,0,5774,5775,1,0,0,0,5775,
        5780,3,504,252,0,5776,5777,5,1122,0,0,5777,5779,3,504,252,0,5778,
        5776,1,0,0,0,5779,5782,1,0,0,0,5780,5778,1,0,0,0,5780,5781,1,0,0,
        0,5781,493,1,0,0,0,5782,5780,1,0,0,0,5783,5785,5,90,0,0,5784,5786,
        7,85,0,0,5785,5784,1,0,0,0,5785,5786,1,0,0,0,5786,5793,1,0,0,0,5787,
        5789,3,564,282,0,5788,5787,1,0,0,0,5789,5790,1,0,0,0,5790,5788,1,
        0,0,0,5790,5791,1,0,0,0,5791,5794,1,0,0,0,5792,5794,3,542,271,0,
        5793,5788,1,0,0,0,5793,5792,1,0,0,0,5794,495,1,0,0,0,5795,5796,5,
        98,0,0,5796,5797,5,78,0,0,5797,5798,5,84,0,0,5798,5799,5,342,0,0,
        5799,5804,3,508,254,0,5800,5801,5,1122,0,0,5801,5803,3,508,254,0,
        5802,5800,1,0,0,0,5803,5806,1,0,0,0,5804,5802,1,0,0,0,5804,5805,
        1,0,0,0,5805,497,1,0,0,0,5806,5804,1,0,0,0,5807,5808,5,573,0,0,5808,
        5809,5,551,0,0,5809,5810,5,342,0,0,5810,499,1,0,0,0,5811,5812,5,
        686,0,0,5812,501,1,0,0,0,5813,5821,3,532,266,0,5814,5816,7,22,0,
        0,5815,5814,1,0,0,0,5815,5816,1,0,0,0,5816,5817,1,0,0,0,5817,5818,
        5,1120,0,0,5818,5819,3,590,295,0,5819,5820,5,1121,0,0,5820,5822,
        1,0,0,0,5821,5815,1,0,0,0,5821,5822,1,0,0,0,5822,503,1,0,0,0,5823,
        5842,5,385,0,0,5824,5842,5,434,0,0,5825,5827,7,86,0,0,5826,5825,
        1,0,0,0,5826,5827,1,0,0,0,5827,5828,1,0,0,0,5828,5842,5,463,0,0,
        5829,5842,5,527,0,0,5830,5842,5,688,0,0,5831,5832,5,551,0,0,5832,
        5842,5,342,0,0,5833,5842,5,617,0,0,5834,5842,5,650,0,0,5835,5839,
        5,680,0,0,5836,5837,5,186,0,0,5837,5838,5,130,0,0,5838,5840,5,99,
        0,0,5839,5836,1,0,0,0,5839,5840,1,0,0,0,5840,5842,1,0,0,0,5841,5823,
        1,0,0,0,5841,5824,1,0,0,0,5841,5826,1,0,0,0,5841,5829,1,0,0,0,5841,
        5830,1,0,0,0,5841,5831,1,0,0,0,5841,5833,1,0,0,0,5841,5834,1,0,0,
        0,5841,5835,1,0,0,0,5842,5856,1,0,0,0,5843,5844,5,558,0,0,5844,5846,
        5,463,0,0,5845,5847,3,344,172,0,5846,5845,1,0,0,0,5846,5847,1,0,
        0,0,5847,5856,1,0,0,0,5848,5850,7,56,0,0,5849,5851,3,592,296,0,5850,
        5849,1,0,0,0,5850,5851,1,0,0,0,5851,5853,1,0,0,0,5852,5854,3,506,
        253,0,5853,5852,1,0,0,0,5853,5854,1,0,0,0,5854,5856,1,0,0,0,5855,
        5841,1,0,0,0,5855,5843,1,0,0,0,5855,5848,1,0,0,0,5856,505,1,0,0,
        0,5857,5858,5,186,0,0,5858,5859,5,130,0,0,5859,5863,5,99,0,0,5860,
        5861,5,62,0,0,5861,5863,5,410,0,0,5862,5857,1,0,0,0,5862,5860,1,
        0,0,0,5863,507,1,0,0,0,5864,5872,3,532,266,0,5865,5866,5,125,0,0,
        5866,5869,5,1120,0,0,5867,5870,3,590,295,0,5868,5870,5,6,0,0,5869,
        5867,1,0,0,0,5869,5868,1,0,0,0,5870,5871,1,0,0,0,5871,5873,5,1121,
        0,0,5872,5865,1,0,0,0,5872,5873,1,0,0,0,5873,5881,1,0,0,0,5874,5876,
        7,22,0,0,5875,5874,1,0,0,0,5875,5876,1,0,0,0,5876,5877,1,0,0,0,5877,
        5878,5,1120,0,0,5878,5879,3,590,295,0,5879,5880,5,1121,0,0,5880,
        5882,1,0,0,0,5881,5875,1,0,0,0,5881,5882,1,0,0,0,5882,5885,1,0,0,
        0,5883,5884,5,75,0,0,5884,5886,5,457,0,0,5885,5883,1,0,0,0,5885,
        5886,1,0,0,0,5886,509,1,0,0,0,5887,5888,7,87,0,0,5888,5891,3,532,
        266,0,5889,5892,3,558,279,0,5890,5892,5,1135,0,0,5891,5889,1,0,0,
        0,5891,5890,1,0,0,0,5891,5892,1,0,0,0,5892,511,1,0,0,0,5893,5897,
        7,87,0,0,5894,5895,7,88,0,0,5895,5896,5,1111,0,0,5896,5898,7,89,
        0,0,5897,5894,1,0,0,0,5897,5898,1,0,0,0,5898,5899,1,0,0,0,5899,5900,
        3,528,264,0,5900,513,1,0,0,0,5901,5902,5,432,0,0,5902,5903,5,1135,
        0,0,5903,515,1,0,0,0,5904,5905,5,180,0,0,5905,5906,3,558,279,0,5906,
        517,1,0,0,0,5907,5915,5,152,0,0,5908,5910,5,157,0,0,5909,5911,5,
        652,0,0,5910,5909,1,0,0,0,5910,5911,1,0,0,0,5911,5912,1,0,0,0,5912,
        5916,3,568,284,0,5913,5916,5,1143,0,0,5914,5916,5,1144,0,0,5915,
        5908,1,0,0,0,5915,5913,1,0,0,0,5915,5914,1,0,0,0,5916,5926,1,0,0,
        0,5917,5918,5,149,0,0,5918,5923,3,522,261,0,5919,5920,5,1122,0,0,
        5920,5922,3,522,261,0,5921,5919,1,0,0,0,5922,5925,1,0,0,0,5923,5921,
        1,0,0,0,5923,5924,1,0,0,0,5924,5927,1,0,0,0,5925,5923,1,0,0,0,5926,
        5917,1,0,0,0,5926,5927,1,0,0,0,5927,519,1,0,0,0,5928,5936,5,139,
        0,0,5929,5931,5,157,0,0,5930,5932,5,652,0,0,5931,5930,1,0,0,0,5931,
        5932,1,0,0,0,5932,5933,1,0,0,0,5933,5937,3,568,284,0,5934,5937,5,
        1143,0,0,5935,5937,5,1144,0,0,5936,5929,1,0,0,0,5936,5934,1,0,0,
        0,5936,5935,1,0,0,0,5936,5937,1,0,0,0,5937,5947,1,0,0,0,5938,5939,
        5,149,0,0,5939,5944,3,522,261,0,5940,5941,5,1122,0,0,5941,5943,3,
        522,261,0,5942,5940,1,0,0,0,5943,5946,1,0,0,0,5944,5942,1,0,0,0,
        5944,5945,1,0,0,0,5945,5948,1,0,0,0,5946,5944,1,0,0,0,5947,5938,
        1,0,0,0,5947,5948,1,0,0,0,5948,521,1,0,0,0,5949,5950,7,90,0,0,5950,
        5955,5,1111,0,0,5951,5956,3,568,284,0,5952,5956,5,1136,0,0,5953,
        5956,3,542,271,0,5954,5956,3,560,280,0,5955,5951,1,0,0,0,5955,5952,
        1,0,0,0,5955,5953,1,0,0,0,5955,5954,1,0,0,0,5956,523,1,0,0,0,5957,
        5959,5,68,0,0,5958,5960,7,91,0,0,5959,5958,1,0,0,0,5959,5960,1,0,
        0,0,5960,5961,1,0,0,0,5961,5993,5,46,0,0,5962,5963,3,476,238,0,5963,
        5964,5,1111,0,0,5964,5972,7,92,0,0,5965,5966,5,1122,0,0,5966,5967,
        3,476,238,0,5967,5968,5,1111,0,0,5968,5969,7,92,0,0,5969,5971,1,
        0,0,0,5970,5965,1,0,0,0,5971,5974,1,0,0,0,5972,5970,1,0,0,0,5972,
        5973,1,0,0,0,5973,5994,1,0,0,0,5974,5972,1,0,0,0,5975,5978,5,28,
        0,0,5976,5979,3,564,282,0,5977,5979,3,476,238,0,5978,5976,1,0,0,
        0,5978,5977,1,0,0,0,5979,5980,1,0,0,0,5980,5981,3,476,238,0,5981,
        5982,5,1111,0,0,5982,5990,3,526,263,0,5983,5984,5,1122,0,0,5984,
        5985,3,476,238,0,5985,5986,5,1111,0,0,5986,5987,3,526,263,0,5987,
        5989,1,0,0,0,5988,5983,1,0,0,0,5989,5992,1,0,0,0,5990,5988,1,0,0,
        0,5990,5991,1,0,0,0,5991,5994,1,0,0,0,5992,5990,1,0,0,0,5993,5962,
        1,0,0,0,5993,5975,1,0,0,0,5994,525,1,0,0,0,5995,5996,7,93,0,0,5996,
        527,1,0,0,0,5997,6003,3,204,102,0,5998,6003,3,190,95,0,5999,6003,
        3,196,98,0,6000,6003,3,202,101,0,6001,6003,3,206,103,0,6002,5997,
        1,0,0,0,6002,5998,1,0,0,0,6002,5999,1,0,0,0,6002,6000,1,0,0,0,6002,
        6001,1,0,0,0,6003,6008,1,0,0,0,6004,6005,5,62,0,0,6005,6006,5,367,
        0,0,6006,6008,3,558,279,0,6007,6002,1,0,0,0,6007,6004,1,0,0,0,6008,
        529,1,0,0,0,6009,6013,3,558,279,0,6010,6014,5,1142,0,0,6011,6012,
        5,1119,0,0,6012,6014,3,558,279,0,6013,6010,1,0,0,0,6013,6011,1,0,
        0,0,6013,6014,1,0,0,0,6014,531,1,0,0,0,6015,6016,3,530,265,0,6016,
        533,1,0,0,0,6017,6020,3,540,270,0,6018,6020,3,558,279,0,6019,6017,
        1,0,0,0,6019,6018,1,0,0,0,6020,535,1,0,0,0,6021,6026,3,558,279,0,
        6022,6024,3,562,281,0,6023,6025,3,562,281,0,6024,6023,1,0,0,0,6024,
        6025,1,0,0,0,6025,6027,1,0,0,0,6026,6022,1,0,0,0,6026,6027,1,0,0,
        0,6027,6034,1,0,0,0,6028,6029,9,0,0,0,6029,6031,3,562,281,0,6030,
        6032,3,562,281,0,6031,6030,1,0,0,0,6031,6032,1,0,0,0,6032,6034,1,
        0,0,0,6033,6021,1,0,0,0,6033,6028,1,0,0,0,6034,537,1,0,0,0,6035,
        6038,3,558,279,0,6036,6038,5,1135,0,0,6037,6035,1,0,0,0,6037,6036,
        1,0,0,0,6038,6043,1,0,0,0,6039,6040,5,1120,0,0,6040,6041,3,564,282,
        0,6041,6042,5,1121,0,0,6042,6044,1,0,0,0,6043,6039,1,0,0,0,6043,
        6044,1,0,0,0,6044,6047,1,0,0,0,6045,6047,3,660,330,0,6046,6037,1,
        0,0,0,6046,6045,1,0,0,0,6047,6049,1,0,0,0,6048,6050,7,50,0,0,6049,
        6048,1,0,0,0,6049,6050,1,0,0,0,6050,539,1,0,0,0,6051,6058,5,1145,
        0,0,6052,6058,5,1147,0,0,6053,6058,5,1143,0,0,6054,6058,5,1135,0,
        0,6055,6058,5,703,0,0,6056,6058,3,688,344,0,6057,6051,1,0,0,0,6057,
        6052,1,0,0,0,6057,6053,1,0,0,0,6057,6054,1,0,0,0,6057,6055,1,0,0,
        0,6057,6056,1,0,0,0,6058,541,1,0,0,0,6059,6060,7,94,0,0,6060,543,
        1,0,0,0,6061,6066,5,220,0,0,6062,6066,3,678,339,0,6063,6066,5,1135,
        0,0,6064,6066,5,1132,0,0,6065,6061,1,0,0,0,6065,6062,1,0,0,0,6065,
        6063,1,0,0,0,6065,6064,1,0,0,0,6066,545,1,0,0,0,6067,6070,3,558,
        279,0,6068,6070,5,1135,0,0,6069,6067,1,0,0,0,6069,6068,1,0,0,0,6070,
        547,1,0,0,0,6071,6072,7,95,0,0,6072,549,1,0,0,0,6073,6074,3,564,
        282,0,6074,6075,5,1108,0,0,6075,6076,3,564,282,0,6076,6077,5,1108,
        0,0,6077,6078,3,564,282,0,6078,6079,5,1108,0,0,6079,6080,3,564,282,
        0,6080,6081,5,1108,0,0,6081,6087,3,564,282,0,6082,6083,5,1131,0,
        0,6083,6084,3,564,282,0,6084,6085,5,1108,0,0,6085,6086,3,564,282,
        0,6086,6088,1,0,0,0,6087,6082,1,0,0,0,6088,6089,1,0,0,0,6089,6087,
        1,0,0,0,6089,6090,1,0,0,0,6090,551,1,0,0,0,6091,6098,3,554,277,0,
        6092,6093,5,1122,0,0,6093,6096,3,554,277,0,6094,6095,5,1122,0,0,
        6095,6097,3,564,282,0,6096,6094,1,0,0,0,6096,6097,1,0,0,0,6097,6099,
        1,0,0,0,6098,6092,1,0,0,0,6098,6099,1,0,0,0,6099,553,1,0,0,0,6100,
        6108,5,1135,0,0,6101,6108,5,1140,0,0,6102,6104,5,1137,0,0,6103,6102,
        1,0,0,0,6104,6105,1,0,0,0,6105,6103,1,0,0,0,6105,6106,1,0,0,0,6106,
        6108,1,0,0,0,6107,6100,1,0,0,0,6107,6101,1,0,0,0,6107,6103,1,0,0,
        0,6108,555,1,0,0,0,6109,6112,3,558,279,0,6110,6112,5,1135,0,0,6111,
        6109,1,0,0,0,6111,6110,1,0,0,0,6112,557,1,0,0,0,6113,6117,3,560,
        280,0,6114,6117,5,1144,0,0,6115,6117,5,1132,0,0,6116,6113,1,0,0,
        0,6116,6114,1,0,0,0,6116,6115,1,0,0,0,6117,559,1,0,0,0,6118,6128,
        5,1143,0,0,6119,6128,3,678,339,0,6120,6128,3,680,340,0,6121,6128,
        3,548,274,0,6122,6128,3,682,341,0,6123,6128,3,684,342,0,6124,6128,
        3,686,343,0,6125,6128,3,688,344,0,6126,6128,3,690,345,0,6127,6118,
        1,0,0,0,6127,6119,1,0,0,0,6127,6120,1,0,0,0,6127,6121,1,0,0,0,6127,
        6122,1,0,0,0,6127,6123,1,0,0,0,6127,6124,1,0,0,0,6127,6125,1,0,0,
        0,6127,6126,1,0,0,0,6128,561,1,0,0,0,6129,6133,5,1142,0,0,6130,6131,
        5,1119,0,0,6131,6133,3,558,279,0,6132,6129,1,0,0,0,6132,6130,1,0,
        0,0,6133,563,1,0,0,0,6134,6135,7,96,0,0,6135,565,1,0,0,0,6136,6139,
        5,1133,0,0,6137,6139,3,564,282,0,6138,6136,1,0,0,0,6138,6137,1,0,
        0,0,6139,567,1,0,0,0,6140,6142,5,1141,0,0,6141,6140,1,0,0,0,6141,
        6142,1,0,0,0,6142,6143,1,0,0,0,6143,6146,5,1135,0,0,6144,6146,5,
        1134,0,0,6145,6141,1,0,0,0,6145,6144,1,0,0,0,6146,6148,1,0,0,0,6147,
        6149,5,1135,0,0,6148,6147,1,0,0,0,6149,6150,1,0,0,0,6150,6148,1,
        0,0,0,6150,6151,1,0,0,0,6151,6164,1,0,0,0,6152,6154,5,1141,0,0,6153,
        6152,1,0,0,0,6153,6154,1,0,0,0,6154,6155,1,0,0,0,6155,6158,5,1135,
        0,0,6156,6158,5,1134,0,0,6157,6153,1,0,0,0,6157,6156,1,0,0,0,6158,
        6161,1,0,0,0,6159,6160,5,26,0,0,6160,6162,3,546,273,0,6161,6159,
        1,0,0,0,6161,6162,1,0,0,0,6162,6164,1,0,0,0,6163,6145,1,0,0,0,6163,
        6157,1,0,0,0,6164,569,1,0,0,0,6165,6166,7,97,0,0,6166,571,1,0,0,
        0,6167,6169,5,1141,0,0,6168,6167,1,0,0,0,6168,6169,1,0,0,0,6169,
        6170,1,0,0,0,6170,6171,5,1137,0,0,6171,573,1,0,0,0,6172,6174,5,110,
        0,0,6173,6172,1,0,0,0,6173,6174,1,0,0,0,6174,6175,1,0,0,0,6175,6176,
        7,98,0,0,6176,575,1,0,0,0,6177,6190,3,568,284,0,6178,6190,3,564,
        282,0,6179,6180,5,1108,0,0,6180,6190,3,564,282,0,6181,6190,3,572,
        286,0,6182,6190,3,570,285,0,6183,6190,5,1138,0,0,6184,6190,5,1140,
        0,0,6185,6187,5,110,0,0,6186,6185,1,0,0,0,6186,6187,1,0,0,0,6187,
        6188,1,0,0,0,6188,6190,7,98,0,0,6189,6177,1,0,0,0,6189,6178,1,0,
        0,0,6189,6179,1,0,0,0,6189,6181,1,0,0,0,6189,6182,1,0,0,0,6189,6183,
        1,0,0,0,6189,6184,1,0,0,0,6189,6186,1,0,0,0,6190,577,1,0,0,0,6191,
        6193,7,99,0,0,6192,6194,5,232,0,0,6193,6192,1,0,0,0,6193,6194,1,
        0,0,0,6194,6196,1,0,0,0,6195,6197,3,584,292,0,6196,6195,1,0,0,0,
        6196,6197,1,0,0,0,6197,6199,1,0,0,0,6198,6200,5,220,0,0,6199,6198,
        1,0,0,0,6199,6200,1,0,0,0,6200,6204,1,0,0,0,6201,6202,3,64,32,0,
        6202,6203,3,544,272,0,6203,6205,1,0,0,0,6204,6201,1,0,0,0,6204,6205,
        1,0,0,0,6205,6209,1,0,0,0,6206,6207,5,26,0,0,6207,6210,3,546,273,
        0,6208,6210,5,220,0,0,6209,6206,1,0,0,0,6209,6208,1,0,0,0,6209,6210,
        1,0,0,0,6210,6314,1,0,0,0,6211,6212,5,219,0,0,6212,6214,7,100,0,
        0,6213,6215,3,584,292,0,6214,6213,1,0,0,0,6214,6215,1,0,0,0,6215,
        6217,1,0,0,0,6216,6218,5,220,0,0,6217,6216,1,0,0,0,6217,6218,1,0,
        0,0,6218,6314,1,0,0,0,6219,6220,5,505,0,0,6220,6222,5,217,0,0,6221,
        6223,3,584,292,0,6222,6221,1,0,0,0,6222,6223,1,0,0,0,6223,6225,1,
        0,0,0,6224,6226,5,220,0,0,6225,6224,1,0,0,0,6225,6226,1,0,0,0,6226,
        6314,1,0,0,0,6227,6228,5,219,0,0,6228,6229,7,101,0,0,6229,6231,5,
        232,0,0,6230,6232,3,584,292,0,6231,6230,1,0,0,0,6231,6232,1,0,0,
        0,6232,6234,1,0,0,0,6233,6235,5,220,0,0,6234,6233,1,0,0,0,6234,6235,
        1,0,0,0,6235,6314,1,0,0,0,6236,6238,7,102,0,0,6237,6239,3,584,292,
        0,6238,6237,1,0,0,0,6238,6239,1,0,0,0,6239,6243,1,0,0,0,6240,6242,
        7,103,0,0,6241,6240,1,0,0,0,6242,6245,1,0,0,0,6243,6241,1,0,0,0,
        6243,6244,1,0,0,0,6244,6314,1,0,0,0,6245,6243,1,0,0,0,6246,6248,
        5,202,0,0,6247,6249,3,586,293,0,6248,6247,1,0,0,0,6248,6249,1,0,
        0,0,6249,6253,1,0,0,0,6250,6252,7,103,0,0,6251,6250,1,0,0,0,6252,
        6255,1,0,0,0,6253,6251,1,0,0,0,6253,6254,1,0,0,0,6254,6314,1,0,0,
        0,6255,6253,1,0,0,0,6256,6258,5,203,0,0,6257,6259,5,204,0,0,6258,
        6257,1,0,0,0,6258,6259,1,0,0,0,6259,6261,1,0,0,0,6260,6262,3,586,
        293,0,6261,6260,1,0,0,0,6261,6262,1,0,0,0,6262,6266,1,0,0,0,6263,
        6265,7,103,0,0,6264,6263,1,0,0,0,6265,6268,1,0,0,0,6266,6264,1,0,
        0,0,6266,6267,1,0,0,0,6267,6314,1,0,0,0,6268,6266,1,0,0,0,6269,6271,
        7,104,0,0,6270,6272,3,588,294,0,6271,6270,1,0,0,0,6271,6272,1,0,
        0,0,6272,6276,1,0,0,0,6273,6275,7,103,0,0,6274,6273,1,0,0,0,6275,
        6278,1,0,0,0,6276,6274,1,0,0,0,6276,6277,1,0,0,0,6277,6314,1,0,0,
        0,6278,6276,1,0,0,0,6279,6314,7,105,0,0,6280,6282,7,106,0,0,6281,
        6283,3,584,292,0,6282,6281,1,0,0,0,6282,6283,1,0,0,0,6283,6314,1,
        0,0,0,6284,6285,7,107,0,0,6285,6287,3,580,290,0,6286,6288,5,220,
        0,0,6287,6286,1,0,0,0,6287,6288,1,0,0,0,6288,6292,1,0,0,0,6289,6290,
        3,64,32,0,6290,6291,3,544,272,0,6291,6293,1,0,0,0,6292,6289,1,0,
        0,0,6292,6293,1,0,0,0,6293,6314,1,0,0,0,6294,6314,7,108,0,0,6295,
        6297,5,225,0,0,6296,6298,5,217,0,0,6297,6296,1,0,0,0,6297,6298,1,
        0,0,0,6298,6300,1,0,0,0,6299,6301,5,220,0,0,6300,6299,1,0,0,0,6300,
        6301,1,0,0,0,6301,6305,1,0,0,0,6302,6303,3,64,32,0,6303,6304,3,544,
        272,0,6304,6306,1,0,0,0,6305,6302,1,0,0,0,6305,6306,1,0,0,0,6306,
        6309,1,0,0,0,6307,6308,5,26,0,0,6308,6310,3,546,273,0,6309,6307,
        1,0,0,0,6309,6310,1,0,0,0,6310,6314,1,0,0,0,6311,6312,5,225,0,0,
        6312,6314,5,221,0,0,6313,6191,1,0,0,0,6313,6211,1,0,0,0,6313,6219,
        1,0,0,0,6313,6227,1,0,0,0,6313,6236,1,0,0,0,6313,6246,1,0,0,0,6313,
        6256,1,0,0,0,6313,6269,1,0,0,0,6313,6279,1,0,0,0,6313,6280,1,0,0,
        0,6313,6284,1,0,0,0,6313,6294,1,0,0,0,6313,6295,1,0,0,0,6313,6311,
        1,0,0,0,6314,579,1,0,0,0,6315,6316,5,1120,0,0,6316,6321,5,1135,0,
        0,6317,6318,5,1122,0,0,6318,6320,5,1135,0,0,6319,6317,1,0,0,0,6320,
        6323,1,0,0,0,6321,6319,1,0,0,0,6321,6322,1,0,0,0,6322,6324,1,0,0,
        0,6323,6321,1,0,0,0,6324,6325,5,1121,0,0,6325,581,1,0,0,0,6326,6328,
        7,109,0,0,6327,6329,3,584,292,0,6328,6327,1,0,0,0,6328,6329,1,0,
        0,0,6329,6349,1,0,0,0,6330,6332,5,216,0,0,6331,6333,3,584,292,0,
        6332,6331,1,0,0,0,6332,6333,1,0,0,0,6333,6337,1,0,0,0,6334,6335,
        3,64,32,0,6335,6336,3,544,272,0,6336,6338,1,0,0,0,6337,6334,1,0,
        0,0,6337,6338,1,0,0,0,6338,6349,1,0,0,0,6339,6349,7,110,0,0,6340,
        6342,5,208,0,0,6341,6343,3,588,294,0,6342,6341,1,0,0,0,6342,6343,
        1,0,0,0,6343,6349,1,0,0,0,6344,6346,7,111,0,0,6345,6347,5,200,0,
        0,6346,6345,1,0,0,0,6346,6347,1,0,0,0,6347,6349,1,0,0,0,6348,6326,
        1,0,0,0,6348,6330,1,0,0,0,6348,6339,1,0,0,0,6348,6340,1,0,0,0,6348,
        6344,1,0,0,0,6349,6351,1,0,0,0,6350,6352,5,11,0,0,6351,6350,1,0,
        0,0,6351,6352,1,0,0,0,6352,583,1,0,0,0,6353,6354,5,1120,0,0,6354,
        6355,3,564,282,0,6355,6356,5,1121,0,0,6356,585,1,0,0,0,6357,6358,
        5,1120,0,0,6358,6359,3,564,282,0,6359,6360,5,1122,0,0,6360,6361,
        3,564,282,0,6361,6362,5,1121,0,0,6362,587,1,0,0,0,6363,6364,5,1120,
        0,0,6364,6367,3,564,282,0,6365,6366,5,1122,0,0,6366,6368,3,564,282,
        0,6367,6365,1,0,0,0,6367,6368,1,0,0,0,6368,6369,1,0,0,0,6369,6370,
        5,1121,0,0,6370,589,1,0,0,0,6371,6376,3,558,279,0,6372,6373,5,1122,
        0,0,6373,6375,3,558,279,0,6374,6372,1,0,0,0,6375,6378,1,0,0,0,6376,
        6374,1,0,0,0,6376,6377,1,0,0,0,6377,591,1,0,0,0,6378,6376,1,0,0,
        0,6379,6384,3,532,266,0,6380,6381,5,1122,0,0,6381,6383,3,532,266,
        0,6382,6380,1,0,0,0,6383,6386,1,0,0,0,6384,6382,1,0,0,0,6384,6385,
        1,0,0,0,6385,593,1,0,0,0,6386,6384,1,0,0,0,6387,6388,5,1120,0,0,
        6388,6393,3,538,269,0,6389,6390,5,1122,0,0,6390,6392,3,538,269,0,
        6391,6389,1,0,0,0,6392,6395,1,0,0,0,6393,6391,1,0,0,0,6393,6394,
        1,0,0,0,6394,6396,1,0,0,0,6395,6393,1,0,0,0,6396,6397,5,1121,0,0,
        6397,595,1,0,0,0,6398,6403,3,660,330,0,6399,6400,5,1122,0,0,6400,
        6402,3,660,330,0,6401,6399,1,0,0,0,6402,6405,1,0,0,0,6403,6401,1,
        0,0,0,6403,6404,1,0,0,0,6404,597,1,0,0,0,6405,6403,1,0,0,0,6406,
        6411,3,610,305,0,6407,6408,5,1122,0,0,6408,6410,3,610,305,0,6409,
        6407,1,0,0,0,6410,6413,1,0,0,0,6411,6409,1,0,0,0,6411,6412,1,0,0,
        0,6412,599,1,0,0,0,6413,6411,1,0,0,0,6414,6419,3,576,288,0,6415,
        6416,5,1122,0,0,6416,6418,3,576,288,0,6417,6415,1,0,0,0,6418,6421,
        1,0,0,0,6419,6417,1,0,0,0,6419,6420,1,0,0,0,6420,601,1,0,0,0,6421,
        6419,1,0,0,0,6422,6427,5,1135,0,0,6423,6424,5,1122,0,0,6424,6426,
        5,1135,0,0,6425,6423,1,0,0,0,6426,6429,1,0,0,0,6427,6425,1,0,0,0,
        6427,6428,1,0,0,0,6428,603,1,0,0,0,6429,6427,1,0,0,0,6430,6435,5,
        1148,0,0,6431,6432,5,1122,0,0,6432,6434,5,1148,0,0,6433,6431,1,0,
        0,0,6434,6437,1,0,0,0,6435,6433,1,0,0,0,6435,6436,1,0,0,0,6436,605,
        1,0,0,0,6437,6435,1,0,0,0,6438,6474,5,112,0,0,6439,6440,5,22,0,0,
        6440,6441,5,1120,0,0,6441,6442,3,660,330,0,6442,6443,5,12,0,0,6443,
        6444,3,582,291,0,6444,6445,5,1121,0,0,6445,6474,1,0,0,0,6446,6448,
        3,666,333,0,6447,6446,1,0,0,0,6447,6448,1,0,0,0,6448,6449,1,0,0,
        0,6449,6474,3,576,288,0,6450,6454,3,608,304,0,6451,6452,5,114,0,
        0,6452,6453,5,178,0,0,6453,6455,3,608,304,0,6454,6451,1,0,0,0,6454,
        6455,1,0,0,0,6455,6474,1,0,0,0,6456,6457,5,1120,0,0,6457,6458,3,
        660,330,0,6458,6459,5,1121,0,0,6459,6474,1,0,0,0,6460,6461,7,112,
        0,0,6461,6462,5,1120,0,0,6462,6463,3,530,265,0,6463,6464,5,1121,
        0,0,6464,6474,1,0,0,0,6465,6466,5,1120,0,0,6466,6467,7,113,0,0,6467,
        6468,5,652,0,0,6468,6469,5,62,0,0,6469,6470,3,530,265,0,6470,6471,
        5,1121,0,0,6471,6474,1,0,0,0,6472,6474,3,660,330,0,6473,6438,1,0,
        0,0,6473,6439,1,0,0,0,6473,6447,1,0,0,0,6473,6450,1,0,0,0,6473,6456,
        1,0,0,0,6473,6460,1,0,0,0,6473,6465,1,0,0,0,6473,6472,1,0,0,0,6474,
        607,1,0,0,0,6475,6481,7,114,0,0,6476,6478,5,1120,0,0,6477,6479,3,
        564,282,0,6478,6477,1,0,0,0,6478,6479,1,0,0,0,6479,6480,1,0,0,0,
        6480,6482,5,1121,0,0,6481,6476,1,0,0,0,6481,6482,1,0,0,0,6482,6490,
        1,0,0,0,6483,6484,5,314,0,0,6484,6486,5,1120,0,0,6485,6487,3,564,
        282,0,6486,6485,1,0,0,0,6486,6487,1,0,0,0,6487,6488,1,0,0,0,6488,
        6490,5,1121,0,0,6489,6475,1,0,0,0,6489,6483,1,0,0,0,6490,609,1,0,
        0,0,6491,6494,3,660,330,0,6492,6494,5,40,0,0,6493,6491,1,0,0,0,6493,
        6492,1,0,0,0,6494,611,1,0,0,0,6495,6496,5,74,0,0,6496,6497,5,57,
        0,0,6497,613,1,0,0,0,6498,6499,5,74,0,0,6499,6500,5,110,0,0,6500,
        6501,5,57,0,0,6501,615,1,0,0,0,6502,6503,5,657,0,0,6503,6506,3,564,
        282,0,6504,6506,5,514,0,0,6505,6502,1,0,0,0,6505,6504,1,0,0,0,6506,
        617,1,0,0,0,6507,6511,3,616,308,0,6508,6509,5,153,0,0,6509,6511,
        5,100,0,0,6510,6507,1,0,0,0,6510,6508,1,0,0,0,6511,619,1,0,0,0,6512,
        6531,3,622,311,0,6513,6531,3,630,315,0,6514,6531,3,632,316,0,6515,
        6516,3,652,326,0,6516,6518,5,1120,0,0,6517,6519,3,656,328,0,6518,
        6517,1,0,0,0,6518,6519,1,0,0,0,6519,6520,1,0,0,0,6520,6521,5,1121,
        0,0,6521,6531,1,0,0,0,6522,6523,3,530,265,0,6523,6525,5,1120,0,0,
        6524,6526,3,656,328,0,6525,6524,1,0,0,0,6525,6526,1,0,0,0,6526,6527,
        1,0,0,0,6527,6528,5,1121,0,0,6528,6531,1,0,0,0,6529,6531,3,654,327,
        0,6530,6512,1,0,0,0,6530,6513,1,0,0,0,6530,6514,1,0,0,0,6530,6515,
        1,0,0,0,6530,6522,1,0,0,0,6530,6529,1,0,0,0,6531,621,1,0,0,0,6532,
        6535,7,115,0,0,6533,6534,5,1120,0,0,6534,6536,5,1121,0,0,6535,6533,
        1,0,0,0,6535,6536,1,0,0,0,6536,6725,1,0,0,0,6537,6538,5,31,0,0,6538,
        6539,5,1120,0,0,6539,6540,3,660,330,0,6540,6541,5,1122,0,0,6541,
        6542,3,582,291,0,6542,6543,5,1121,0,0,6543,6725,1,0,0,0,6544,6545,
        5,31,0,0,6545,6546,5,1120,0,0,6546,6547,3,660,330,0,6547,6548,5,
        181,0,0,6548,6549,3,544,272,0,6549,6550,5,1121,0,0,6550,6725,1,0,
        0,0,6551,6552,5,22,0,0,6552,6553,5,1120,0,0,6553,6554,3,660,330,
        0,6554,6555,5,12,0,0,6555,6556,3,582,291,0,6556,6557,5,1121,0,0,
        6557,6725,1,0,0,0,6558,6559,5,182,0,0,6559,6560,5,1120,0,0,6560,
        6561,3,536,268,0,6561,6562,5,1121,0,0,6562,6725,1,0,0,0,6563,6564,
        5,21,0,0,6564,6566,3,660,330,0,6565,6567,3,624,312,0,6566,6565,1,
        0,0,0,6567,6568,1,0,0,0,6568,6566,1,0,0,0,6568,6569,1,0,0,0,6569,
        6572,1,0,0,0,6570,6571,5,51,0,0,6571,6573,3,658,329,0,6572,6570,
        1,0,0,0,6572,6573,1,0,0,0,6573,6574,1,0,0,0,6574,6575,5,396,0,0,
        6575,6725,1,0,0,0,6576,6578,5,21,0,0,6577,6579,3,624,312,0,6578,
        6577,1,0,0,0,6579,6580,1,0,0,0,6580,6578,1,0,0,0,6580,6581,1,0,0,
        0,6581,6584,1,0,0,0,6582,6583,5,51,0,0,6583,6585,3,658,329,0,6584,
        6582,1,0,0,0,6584,6585,1,0,0,0,6585,6586,1,0,0,0,6586,6587,5,396,
        0,0,6587,6725,1,0,0,0,6588,6589,5,216,0,0,6589,6590,5,1120,0,0,6590,
        6593,3,656,328,0,6591,6592,5,181,0,0,6592,6594,3,544,272,0,6593,
        6591,1,0,0,0,6593,6594,1,0,0,0,6594,6595,1,0,0,0,6595,6596,5,1121,
        0,0,6596,6725,1,0,0,0,6597,6598,5,315,0,0,6598,6601,5,1120,0,0,6599,
        6602,3,568,284,0,6600,6602,3,660,330,0,6601,6599,1,0,0,0,6601,6600,
        1,0,0,0,6602,6603,1,0,0,0,6603,6606,5,77,0,0,6604,6607,3,568,284,
        0,6605,6607,3,660,330,0,6606,6604,1,0,0,0,6606,6605,1,0,0,0,6607,
        6608,1,0,0,0,6608,6609,5,1121,0,0,6609,6725,1,0,0,0,6610,6611,7,
        116,0,0,6611,6614,5,1120,0,0,6612,6615,3,568,284,0,6613,6615,3,660,
        330,0,6614,6612,1,0,0,0,6614,6613,1,0,0,0,6615,6616,1,0,0,0,6616,
        6619,5,65,0,0,6617,6620,3,564,282,0,6618,6620,3,660,330,0,6619,6617,
        1,0,0,0,6619,6618,1,0,0,0,6620,6626,1,0,0,0,6621,6624,5,62,0,0,6622,
        6625,3,564,282,0,6623,6625,3,660,330,0,6624,6622,1,0,0,0,6624,6623,
        1,0,0,0,6625,6627,1,0,0,0,6626,6621,1,0,0,0,6626,6627,1,0,0,0,6627,
        6628,1,0,0,0,6628,6629,5,1121,0,0,6629,6725,1,0,0,0,6630,6631,5,
        319,0,0,6631,6632,5,1120,0,0,6632,6635,7,117,0,0,6633,6636,3,568,
        284,0,6634,6636,3,660,330,0,6635,6633,1,0,0,0,6635,6634,1,0,0,0,
        6635,6636,1,0,0,0,6636,6637,1,0,0,0,6637,6640,5,65,0,0,6638,6641,
        3,568,284,0,6639,6641,3,660,330,0,6640,6638,1,0,0,0,6640,6639,1,
        0,0,0,6641,6642,1,0,0,0,6642,6643,5,1121,0,0,6643,6725,1,0,0,0,6644,
        6645,5,319,0,0,6645,6648,5,1120,0,0,6646,6649,3,568,284,0,6647,6649,
        3,660,330,0,6648,6646,1,0,0,0,6648,6647,1,0,0,0,6649,6650,1,0,0,
        0,6650,6653,5,65,0,0,6651,6654,3,568,284,0,6652,6654,3,660,330,0,
        6653,6651,1,0,0,0,6653,6652,1,0,0,0,6654,6655,1,0,0,0,6655,6656,
        5,1121,0,0,6656,6725,1,0,0,0,6657,6658,5,1078,0,0,6658,6661,5,1120,
        0,0,6659,6662,3,568,284,0,6660,6662,3,660,330,0,6661,6659,1,0,0,
        0,6661,6660,1,0,0,0,6662,6669,1,0,0,0,6663,6664,5,12,0,0,6664,6665,
        7,118,0,0,6665,6666,5,1120,0,0,6666,6667,3,564,282,0,6667,6668,5,
        1121,0,0,6668,6670,1,0,0,0,6669,6663,1,0,0,0,6669,6670,1,0,0,0,6670,
        6672,1,0,0,0,6671,6673,3,626,313,0,6672,6671,1,0,0,0,6672,6673,1,
        0,0,0,6673,6674,1,0,0,0,6674,6675,5,1121,0,0,6675,6725,1,0,0,0,6676,
        6677,5,312,0,0,6677,6678,5,1120,0,0,6678,6679,3,74,37,0,6679,6682,
        5,65,0,0,6680,6683,3,568,284,0,6681,6683,3,660,330,0,6682,6680,1,
        0,0,0,6682,6681,1,0,0,0,6683,6684,1,0,0,0,6684,6685,5,1121,0,0,6685,
        6725,1,0,0,0,6686,6687,5,877,0,0,6687,6688,5,1120,0,0,6688,6689,
        7,119,0,0,6689,6690,5,1122,0,0,6690,6691,3,568,284,0,6691,6692,5,
        1121,0,0,6692,6725,1,0,0,0,6693,6694,5,254,0,0,6694,6695,5,1120,
        0,0,6695,6696,3,660,330,0,6696,6697,5,1122,0,0,6697,6700,3,660,330,
        0,6698,6699,5,577,0,0,6699,6701,3,582,291,0,6700,6698,1,0,0,0,6700,
        6701,1,0,0,0,6701,6710,1,0,0,0,6702,6707,5,112,0,0,6703,6707,5,400,
        0,0,6704,6705,5,40,0,0,6705,6707,3,606,303,0,6706,6702,1,0,0,0,6706,
        6703,1,0,0,0,6706,6704,1,0,0,0,6707,6708,1,0,0,0,6708,6709,5,114,
        0,0,6709,6711,5,53,0,0,6710,6706,1,0,0,0,6710,6711,1,0,0,0,6711,
        6720,1,0,0,0,6712,6717,5,112,0,0,6713,6717,5,400,0,0,6714,6715,5,
        40,0,0,6715,6717,3,606,303,0,6716,6712,1,0,0,0,6716,6713,1,0,0,0,
        6716,6714,1,0,0,0,6717,6718,1,0,0,0,6718,6719,5,114,0,0,6719,6721,
        5,400,0,0,6720,6716,1,0,0,0,6720,6721,1,0,0,0,6721,6722,1,0,0,0,
        6722,6723,5,1121,0,0,6723,6725,1,0,0,0,6724,6532,1,0,0,0,6724,6537,
        1,0,0,0,6724,6544,1,0,0,0,6724,6551,1,0,0,0,6724,6558,1,0,0,0,6724,
        6563,1,0,0,0,6724,6576,1,0,0,0,6724,6588,1,0,0,0,6724,6597,1,0,0,
        0,6724,6610,1,0,0,0,6724,6630,1,0,0,0,6724,6644,1,0,0,0,6724,6657,
        1,0,0,0,6724,6676,1,0,0,0,6724,6686,1,0,0,0,6724,6693,1,0,0,0,6725,
        623,1,0,0,0,6726,6727,5,183,0,0,6727,6728,3,658,329,0,6728,6729,
        5,168,0,0,6729,6730,3,658,329,0,6730,625,1,0,0,0,6731,6732,5,459,
        0,0,6732,6737,3,628,314,0,6733,6734,5,1122,0,0,6734,6736,3,628,314,
        0,6735,6733,1,0,0,0,6736,6739,1,0,0,0,6737,6735,1,0,0,0,6737,6738,
        1,0,0,0,6738,6746,1,0,0,0,6739,6737,1,0,0,0,6740,6741,5,459,0,0,
        6741,6742,3,564,282,0,6742,6743,5,1108,0,0,6743,6744,3,564,282,0,
        6744,6746,1,0,0,0,6745,6731,1,0,0,0,6745,6740,1,0,0,0,6746,627,1,
        0,0,0,6747,6749,3,564,282,0,6748,6750,7,120,0,0,6749,6748,1,0,0,
        0,6749,6750,1,0,0,0,6750,629,1,0,0,0,6751,6752,7,121,0,0,6752,6754,
        5,1120,0,0,6753,6755,7,46,0,0,6754,6753,1,0,0,0,6754,6755,1,0,0,
        0,6755,6756,1,0,0,0,6756,6757,3,658,329,0,6757,6759,5,1121,0,0,6758,
        6760,3,634,317,0,6759,6758,1,0,0,0,6759,6760,1,0,0,0,6760,6811,1,
        0,0,0,6761,6762,5,281,0,0,6762,6770,5,1120,0,0,6763,6771,5,1104,
        0,0,6764,6766,5,6,0,0,6765,6764,1,0,0,0,6765,6766,1,0,0,0,6766,6767,
        1,0,0,0,6767,6771,3,658,329,0,6768,6769,5,47,0,0,6769,6771,3,656,
        328,0,6770,6763,1,0,0,0,6770,6765,1,0,0,0,6770,6768,1,0,0,0,6771,
        6772,1,0,0,0,6772,6774,5,1121,0,0,6773,6775,3,634,317,0,6774,6773,
        1,0,0,0,6774,6775,1,0,0,0,6775,6811,1,0,0,0,6776,6777,7,122,0,0,
        6777,6779,5,1120,0,0,6778,6780,5,6,0,0,6779,6778,1,0,0,0,6779,6780,
        1,0,0,0,6780,6781,1,0,0,0,6781,6782,3,658,329,0,6782,6784,5,1121,
        0,0,6783,6785,3,634,317,0,6784,6783,1,0,0,0,6784,6785,1,0,0,0,6785,
        6811,1,0,0,0,6786,6787,5,285,0,0,6787,6789,5,1120,0,0,6788,6790,
        5,47,0,0,6789,6788,1,0,0,0,6789,6790,1,0,0,0,6790,6791,1,0,0,0,6791,
        6802,3,656,328,0,6792,6793,5,120,0,0,6793,6794,5,18,0,0,6794,6799,
        3,234,117,0,6795,6796,5,1122,0,0,6796,6798,3,234,117,0,6797,6795,
        1,0,0,0,6798,6801,1,0,0,0,6799,6797,1,0,0,0,6799,6800,1,0,0,0,6800,
        6803,1,0,0,0,6801,6799,1,0,0,0,6802,6792,1,0,0,0,6802,6803,1,0,0,
        0,6803,6806,1,0,0,0,6804,6805,5,150,0,0,6805,6807,5,1135,0,0,6806,
        6804,1,0,0,0,6806,6807,1,0,0,0,6807,6808,1,0,0,0,6808,6809,5,1121,
        0,0,6809,6811,1,0,0,0,6810,6751,1,0,0,0,6810,6761,1,0,0,0,6810,6776,
        1,0,0,0,6810,6786,1,0,0,0,6811,631,1,0,0,0,6812,6813,7,123,0,0,6813,
        6814,5,1120,0,0,6814,6817,3,660,330,0,6815,6816,5,1122,0,0,6816,
        6818,3,564,282,0,6817,6815,1,0,0,0,6817,6818,1,0,0,0,6818,6821,1,
        0,0,0,6819,6820,5,1122,0,0,6820,6822,3,564,282,0,6821,6819,1,0,0,
        0,6821,6822,1,0,0,0,6822,6823,1,0,0,0,6823,6824,5,1121,0,0,6824,
        6825,3,634,317,0,6825,6851,1,0,0,0,6826,6827,7,124,0,0,6827,6828,
        5,1120,0,0,6828,6829,3,660,330,0,6829,6830,5,1121,0,0,6830,6831,
        3,634,317,0,6831,6851,1,0,0,0,6832,6833,7,125,0,0,6833,6834,5,1120,
        0,0,6834,6835,5,1121,0,0,6835,6851,3,634,317,0,6836,6837,5,292,0,
        0,6837,6838,5,1120,0,0,6838,6839,3,660,330,0,6839,6840,5,1122,0,
        0,6840,6841,3,564,282,0,6841,6842,5,1121,0,0,6842,6843,3,634,317,
        0,6843,6851,1,0,0,0,6844,6845,5,291,0,0,6845,6846,5,1120,0,0,6846,
        6847,3,564,282,0,6847,6848,5,1121,0,0,6848,6849,3,634,317,0,6849,
        6851,1,0,0,0,6850,6812,1,0,0,0,6850,6826,1,0,0,0,6850,6832,1,0,0,
        0,6850,6836,1,0,0,0,6850,6844,1,0,0,0,6851,633,1,0,0,0,6852,6859,
        5,122,0,0,6853,6855,5,1120,0,0,6854,6856,3,636,318,0,6855,6854,1,
        0,0,0,6855,6856,1,0,0,0,6856,6857,1,0,0,0,6857,6860,5,1121,0,0,6858,
        6860,3,638,319,0,6859,6853,1,0,0,0,6859,6858,1,0,0,0,6860,635,1,
        0,0,0,6861,6863,3,638,319,0,6862,6861,1,0,0,0,6862,6863,1,0,0,0,
        6863,6865,1,0,0,0,6864,6866,3,650,325,0,6865,6864,1,0,0,0,6865,6866,
        1,0,0,0,6866,6868,1,0,0,0,6867,6869,3,232,116,0,6868,6867,1,0,0,
        0,6868,6869,1,0,0,0,6869,6871,1,0,0,0,6870,6872,3,640,320,0,6871,
        6870,1,0,0,0,6871,6872,1,0,0,0,6872,637,1,0,0,0,6873,6874,3,558,
        279,0,6874,639,1,0,0,0,6875,6876,3,642,321,0,6876,6877,3,644,322,
        0,6877,641,1,0,0,0,6878,6879,7,126,0,0,6879,643,1,0,0,0,6880,6883,
        3,648,324,0,6881,6883,3,646,323,0,6882,6880,1,0,0,0,6882,6881,1,
        0,0,0,6883,645,1,0,0,0,6884,6885,5,15,0,0,6885,6886,3,648,324,0,
        6886,6887,5,10,0,0,6887,6888,3,648,324,0,6888,647,1,0,0,0,6889,6890,
        5,34,0,0,6890,6897,5,583,0,0,6891,6892,5,640,0,0,6892,6897,7,127,
        0,0,6893,6894,3,660,330,0,6894,6895,7,127,0,0,6895,6897,1,0,0,0,
        6896,6889,1,0,0,0,6896,6891,1,0,0,0,6896,6893,1,0,0,0,6897,649,1,
        0,0,0,6898,6899,5,125,0,0,6899,6900,5,18,0,0,6900,6905,3,660,330,
        0,6901,6902,5,1122,0,0,6902,6904,3,660,330,0,6903,6901,1,0,0,0,6904,
        6907,1,0,0,0,6905,6903,1,0,0,0,6905,6906,1,0,0,0,6906,651,1,0,0,
        0,6907,6905,1,0,0,0,6908,6932,3,690,345,0,6909,6932,5,724,0,0,6910,
        6932,5,308,0,0,6911,6932,5,304,0,0,6912,6932,5,305,0,0,6913,6932,
        5,306,0,0,6914,6932,5,309,0,0,6915,6932,5,310,0,0,6916,6932,5,311,
        0,0,6917,6932,5,74,0,0,6918,6932,5,82,0,0,6919,6932,5,307,0,0,6920,
        6932,5,313,0,0,6921,6932,5,495,0,0,6922,6932,5,314,0,0,6923,6932,
        5,137,0,0,6924,6932,5,316,0,0,6925,6932,5,317,0,0,6926,6932,5,318,
        0,0,6927,6932,5,319,0,0,6928,6932,5,320,0,0,6929,6932,5,321,0,0,
        6930,6932,5,322,0,0,6931,6908,1,0,0,0,6931,6909,1,0,0,0,6931,6910,
        1,0,0,0,6931,6911,1,0,0,0,6931,6912,1,0,0,0,6931,6913,1,0,0,0,6931,
        6914,1,0,0,0,6931,6915,1,0,0,0,6931,6916,1,0,0,0,6931,6917,1,0,0,
        0,6931,6918,1,0,0,0,6931,6919,1,0,0,0,6931,6920,1,0,0,0,6931,6921,
        1,0,0,0,6931,6922,1,0,0,0,6931,6923,1,0,0,0,6931,6924,1,0,0,0,6931,
        6925,1,0,0,0,6931,6926,1,0,0,0,6931,6927,1,0,0,0,6931,6928,1,0,0,
        0,6931,6929,1,0,0,0,6931,6930,1,0,0,0,6932,653,1,0,0,0,6933,6934,
        7,128,0,0,6934,6935,5,1120,0,0,6935,6936,3,658,329,0,6936,6937,5,
        1121,0,0,6937,655,1,0,0,0,6938,6943,3,576,288,0,6939,6943,3,536,
        268,0,6940,6943,3,620,310,0,6941,6943,3,660,330,0,6942,6938,1,0,
        0,0,6942,6939,1,0,0,0,6942,6940,1,0,0,0,6942,6941,1,0,0,0,6943,6953,
        1,0,0,0,6944,6949,5,1122,0,0,6945,6950,3,576,288,0,6946,6950,3,536,
        268,0,6947,6950,3,620,310,0,6948,6950,3,660,330,0,6949,6945,1,0,
        0,0,6949,6946,1,0,0,0,6949,6947,1,0,0,0,6949,6948,1,0,0,0,6950,6952,
        1,0,0,0,6951,6944,1,0,0,0,6952,6955,1,0,0,0,6953,6951,1,0,0,0,6953,
        6954,1,0,0,0,6954,657,1,0,0,0,6955,6953,1,0,0,0,6956,6961,3,576,
        288,0,6957,6961,3,536,268,0,6958,6961,3,620,310,0,6959,6961,3,660,
        330,0,6960,6956,1,0,0,0,6960,6957,1,0,0,0,6960,6958,1,0,0,0,6960,
        6959,1,0,0,0,6961,659,1,0,0,0,6962,6963,6,330,-1,0,6963,6964,7,129,
        0,0,6964,6974,3,660,330,4,6965,6966,3,662,331,0,6966,6968,5,85,0,
        0,6967,6969,5,110,0,0,6968,6967,1,0,0,0,6968,6969,1,0,0,0,6969,6970,
        1,0,0,0,6970,6971,7,130,0,0,6971,6974,1,0,0,0,6972,6974,3,662,331,
        0,6973,6962,1,0,0,0,6973,6965,1,0,0,0,6973,6972,1,0,0,0,6974,6981,
        1,0,0,0,6975,6976,10,3,0,0,6976,6977,3,670,335,0,6977,6978,3,660,
        330,4,6978,6980,1,0,0,0,6979,6975,1,0,0,0,6980,6983,1,0,0,0,6981,
        6979,1,0,0,0,6981,6982,1,0,0,0,6982,661,1,0,0,0,6983,6981,1,0,0,
        0,6984,6987,6,331,-1,0,6985,6986,5,1148,0,0,6986,6988,5,1095,0,0,
        6987,6985,1,0,0,0,6987,6988,1,0,0,0,6988,6989,1,0,0,0,6989,6990,
        3,664,332,0,6990,7055,1,0,0,0,6991,6992,10,8,0,0,6992,6993,3,668,
        334,0,6993,6994,3,662,331,9,6994,7054,1,0,0,0,6995,6997,10,6,0,0,
        6996,6998,5,110,0,0,6997,6996,1,0,0,0,6997,6998,1,0,0,0,6998,6999,
        1,0,0,0,6999,7000,5,15,0,0,7000,7001,3,662,331,0,7001,7002,5,10,
        0,0,7002,7003,3,662,331,7,7003,7054,1,0,0,0,7004,7005,10,5,0,0,7005,
        7006,5,603,0,0,7006,7007,5,94,0,0,7007,7054,3,662,331,6,7008,7010,
        10,3,0,0,7009,7011,5,110,0,0,7010,7009,1,0,0,0,7010,7011,1,0,0,0,
        7011,7012,1,0,0,0,7012,7013,7,131,0,0,7013,7054,3,662,331,4,7014,
        7016,10,10,0,0,7015,7017,5,110,0,0,7016,7015,1,0,0,0,7016,7017,1,
        0,0,0,7017,7018,1,0,0,0,7018,7019,5,77,0,0,7019,7022,5,1120,0,0,
        7020,7023,3,204,102,0,7021,7023,3,596,298,0,7022,7020,1,0,0,0,7022,
        7021,1,0,0,0,7023,7024,1,0,0,0,7024,7025,5,1121,0,0,7025,7054,1,
        0,0,0,7026,7027,10,9,0,0,7027,7028,5,85,0,0,7028,7054,3,574,287,
        0,7029,7030,10,7,0,0,7030,7031,3,668,334,0,7031,7032,7,132,0,0,7032,
        7033,5,1120,0,0,7033,7034,3,204,102,0,7034,7035,5,1121,0,0,7035,
        7054,1,0,0,0,7036,7038,10,4,0,0,7037,7039,5,110,0,0,7038,7037,1,
        0,0,0,7038,7039,1,0,0,0,7039,7040,1,0,0,0,7040,7041,5,94,0,0,7041,
        7044,3,662,331,0,7042,7043,5,402,0,0,7043,7045,5,1135,0,0,7044,7042,
        1,0,0,0,7044,7045,1,0,0,0,7045,7054,1,0,0,0,7046,7047,10,1,0,0,7047,
        7048,5,492,0,0,7048,7049,5,520,0,0,7049,7050,5,1120,0,0,7050,7051,
        3,662,331,0,7051,7052,5,1121,0,0,7052,7054,1,0,0,0,7053,6991,1,0,
        0,0,7053,6995,1,0,0,0,7053,7004,1,0,0,0,7053,7008,1,0,0,0,7053,7014,
        1,0,0,0,7053,7026,1,0,0,0,7053,7029,1,0,0,0,7053,7036,1,0,0,0,7053,
        7046,1,0,0,0,7054,7057,1,0,0,0,7055,7053,1,0,0,0,7055,7056,1,0,0,
        0,7056,663,1,0,0,0,7057,7055,1,0,0,0,7058,7059,6,332,-1,0,7059,7104,
        3,576,288,0,7060,7104,3,536,268,0,7061,7104,3,620,310,0,7062,7104,
        3,542,271,0,7063,7064,3,666,333,0,7064,7065,3,664,332,10,7065,7104,
        1,0,0,0,7066,7067,5,220,0,0,7067,7104,3,664,332,9,7068,7069,5,1120,
        0,0,7069,7074,3,660,330,0,7070,7071,5,1122,0,0,7071,7073,3,660,330,
        0,7072,7070,1,0,0,0,7073,7076,1,0,0,0,7074,7072,1,0,0,0,7074,7075,
        1,0,0,0,7075,7077,1,0,0,0,7076,7074,1,0,0,0,7077,7078,5,1121,0,0,
        7078,7104,1,0,0,0,7079,7080,5,583,0,0,7080,7081,5,1120,0,0,7081,
        7084,3,660,330,0,7082,7083,5,1122,0,0,7083,7085,3,660,330,0,7084,
        7082,1,0,0,0,7085,7086,1,0,0,0,7086,7084,1,0,0,0,7086,7087,1,0,0,
        0,7087,7088,1,0,0,0,7088,7089,5,1121,0,0,7089,7104,1,0,0,0,7090,
        7091,5,57,0,0,7091,7092,5,1120,0,0,7092,7093,3,204,102,0,7093,7094,
        5,1121,0,0,7094,7104,1,0,0,0,7095,7096,5,1120,0,0,7096,7097,3,204,
        102,0,7097,7098,5,1121,0,0,7098,7104,1,0,0,0,7099,7100,5,83,0,0,
        7100,7101,3,660,330,0,7101,7102,3,74,37,0,7102,7104,1,0,0,0,7103,
        7058,1,0,0,0,7103,7060,1,0,0,0,7103,7061,1,0,0,0,7103,7062,1,0,0,
        0,7103,7063,1,0,0,0,7103,7066,1,0,0,0,7103,7068,1,0,0,0,7103,7079,
        1,0,0,0,7103,7090,1,0,0,0,7103,7095,1,0,0,0,7103,7099,1,0,0,0,7104,
        7122,1,0,0,0,7105,7106,10,3,0,0,7106,7107,3,672,336,0,7107,7108,
        3,664,332,4,7108,7121,1,0,0,0,7109,7110,10,2,0,0,7110,7111,3,674,
        337,0,7111,7112,3,664,332,3,7112,7121,1,0,0,0,7113,7114,10,1,0,0,
        7114,7115,3,676,338,0,7115,7116,3,664,332,2,7116,7121,1,0,0,0,7117,
        7118,10,12,0,0,7118,7119,5,26,0,0,7119,7121,3,546,273,0,7120,7105,
        1,0,0,0,7120,7109,1,0,0,0,7120,7113,1,0,0,0,7120,7117,1,0,0,0,7121,
        7124,1,0,0,0,7122,7120,1,0,0,0,7122,7123,1,0,0,0,7123,665,1,0,0,
        0,7124,7122,1,0,0,0,7125,7126,7,133,0,0,7126,667,1,0,0,0,7127,7142,
        5,1111,0,0,7128,7142,5,1112,0,0,7129,7142,5,1113,0,0,7130,7131,5,
        1113,0,0,7131,7142,5,1111,0,0,7132,7133,5,1112,0,0,7133,7142,5,1111,
        0,0,7134,7135,5,1113,0,0,7135,7142,5,1112,0,0,7136,7137,5,1114,0,
        0,7137,7142,5,1111,0,0,7138,7139,5,1113,0,0,7139,7140,5,1111,0,0,
        7140,7142,5,1112,0,0,7141,7127,1,0,0,0,7141,7128,1,0,0,0,7141,7129,
        1,0,0,0,7141,7130,1,0,0,0,7141,7132,1,0,0,0,7141,7134,1,0,0,0,7141,
        7136,1,0,0,0,7141,7138,1,0,0,0,7142,669,1,0,0,0,7143,7151,5,10,0,
        0,7144,7145,5,1117,0,0,7145,7151,5,1117,0,0,7146,7151,5,188,0,0,
        7147,7151,5,119,0,0,7148,7149,5,1116,0,0,7149,7151,5,1116,0,0,7150,
        7143,1,0,0,0,7150,7144,1,0,0,0,7150,7146,1,0,0,0,7150,7147,1,0,0,
        0,7150,7148,1,0,0,0,7151,671,1,0,0,0,7152,7153,5,1113,0,0,7153,7160,
        5,1113,0,0,7154,7155,5,1112,0,0,7155,7160,5,1112,0,0,7156,7160,5,
        1117,0,0,7157,7160,5,1118,0,0,7158,7160,5,1116,0,0,7159,7152,1,0,
        0,0,7159,7154,1,0,0,0,7159,7156,1,0,0,0,7159,7157,1,0,0,0,7159,7158,
        1,0,0,0,7160,673,1,0,0,0,7161,7162,7,134,0,0,7162,675,1,0,0,0,7163,
        7164,5,1108,0,0,7164,7169,5,1112,0,0,7165,7166,5,1108,0,0,7166,7167,
        5,1112,0,0,7167,7169,5,1112,0,0,7168,7163,1,0,0,0,7168,7165,1,0,
        0,0,7169,677,1,0,0,0,7170,7171,7,135,0,0,7171,679,1,0,0,0,7172,7173,
        7,136,0,0,7173,681,1,0,0,0,7174,7175,7,137,0,0,7175,683,1,0,0,0,
        7176,7177,7,138,0,0,7177,685,1,0,0,0,7178,7179,7,139,0,0,7179,687,
        1,0,0,0,7180,7181,7,140,0,0,7181,689,1,0,0,0,7182,7183,7,141,0,0,
        7183,691,1,0,0,0,1054,693,697,704,707,710,712,718,721,724,733,778,
        790,801,818,823,835,862,871,876,882,887,891,900,903,906,910,918,
        921,924,930,934,940,945,950,955,958,960,972,975,979,982,986,989,
        993,996,999,1003,1006,1010,1016,1022,1028,1035,1042,1048,1054,1063,
        1068,1075,1082,1099,1107,1110,1114,1124,1129,1132,1136,1140,1144,
        1149,1152,1155,1158,1161,1168,1171,1175,1181,1186,1189,1192,1194,
        1205,1209,1212,1226,1229,1233,1236,1240,1243,1247,1250,1254,1257,
        1260,1264,1267,1271,1278,1281,1294,1300,1311,1316,1324,1333,1338,
        1341,1346,1354,1358,1363,1367,1372,1375,1379,1384,1386,1391,1396,
        1404,1412,1417,1425,1428,1431,1435,1439,1442,1446,1449,1456,1464,
        1466,1473,1479,1487,1490,1497,1500,1502,1508,1514,1531,1538,1545,
        1557,1562,1571,1573,1576,1589,1602,1607,1623,1631,1641,1647,1659,
        1662,1667,1680,1687,1694,1696,1703,1707,1709,1714,1717,1723,1728,
        1730,1734,1737,1740,1746,1751,1753,1758,1765,1767,1774,1779,1783,
        1786,1794,1802,1804,1812,1816,1819,1825,1830,1833,1839,1842,1846,
        1849,1853,1858,1863,1868,1872,1876,1880,1884,1888,1892,1897,1902,
        1907,1913,1918,1923,1929,1934,1939,1944,1949,1954,1959,1964,1971,
        1976,1981,1986,1992,2000,2006,2018,2025,2027,2035,2040,2043,2051,
        2057,2073,2085,2087,2090,2098,2104,2110,2123,2130,2139,2144,2155,
        2164,2169,2181,2188,2197,2202,2214,2221,2230,2235,2242,2251,2256,
        2258,2263,2271,2280,2284,2287,2291,2296,2302,2308,2313,2318,2323,
        2328,2331,2336,2341,2351,2355,2362,2367,2370,2375,2378,2382,2386,
        2394,2413,2416,2419,2423,2433,2446,2453,2456,2461,2468,2471,2474,
        2485,2488,2492,2500,2503,2508,2516,2522,2526,2531,2537,2541,2546,
        2551,2554,2561,2565,2568,2579,2587,2590,2593,2599,2605,2607,2612,
        2615,2621,2627,2629,2633,2636,2639,2645,2651,2654,2660,2666,2668,
        2673,2676,2684,2686,2695,2700,2708,2712,2715,2723,2733,2738,2741,
        2748,2752,2755,2759,2764,2784,2791,2800,2804,2816,2819,2828,2840,
        2848,2856,2863,2870,2877,2892,2905,2911,2917,2923,2929,2935,2941,
        2946,2953,2960,2967,2972,2975,2977,2981,2994,3001,3008,3014,3018,
        3022,3025,3032,3035,3040,3047,3054,3058,3063,3070,3083,3086,3091,
        3096,3100,3106,3110,3114,3117,3124,3134,3139,3146,3150,3157,3160,
        3164,3173,3177,3180,3183,3189,3192,3198,3207,3210,3221,3224,3229,
        3232,3237,3247,3252,3258,3260,3266,3268,3274,3282,3287,3295,3298,
        3303,3306,3311,3319,3327,3333,3341,3346,3354,3357,3361,3364,3372,
        3378,3387,3390,3394,3398,3404,3408,3412,3414,3417,3420,3423,3429,
        3433,3436,3439,3442,3445,3447,3451,3457,3463,3468,3471,3477,3481,
        3489,3492,3496,3499,3502,3511,3515,3518,3522,3526,3529,3532,3537,
        3543,3547,3557,3563,3567,3573,3577,3583,3586,3598,3602,3606,3614,
        3618,3626,3629,3633,3636,3644,3649,3652,3655,3659,3662,3671,3676,
        3685,3690,3697,3704,3712,3717,3725,3728,3731,3738,3741,3748,3751,
        3759,3765,3776,3779,3790,3796,3800,3811,3816,3818,3822,3832,3842,
        3848,3853,3856,3859,3862,3865,3868,3871,3877,3882,3885,3888,3891,
        3894,3897,3900,3902,3908,3913,3916,3919,3922,3925,3928,3932,3938,
        3942,3952,3956,3962,3971,3974,3978,3981,3985,3989,3992,3994,4002,
        4014,4020,4022,4028,4030,4032,4038,4046,4054,4058,4062,4071,4076,
        4096,4101,4107,4114,4119,4128,4131,4135,4139,4143,4146,4149,4152,
        4156,4160,4163,4166,4169,4176,4180,4195,4199,4211,4219,4229,4233,
        4236,4242,4245,4248,4257,4266,4276,4280,4290,4300,4308,4311,4320,
        4323,4327,4332,4336,4345,4348,4379,4382,4385,4441,4446,4474,4488,
        4495,4499,4505,4513,4515,4526,4536,4543,4549,4557,4562,4570,4578,
        4586,4594,4600,4603,4607,4612,4617,4623,4625,4636,4641,4648,4650,
        4664,4670,4675,4680,4686,4693,4701,4709,4714,4720,4723,4731,4738,
        4747,4750,4767,4775,4783,4787,4794,4800,4808,4817,4823,4830,4837,
        4842,4845,4847,4853,4855,4859,4861,4864,4873,4879,4886,4893,4898,
        4901,4903,4909,4911,4915,4917,4920,4925,4932,4941,4946,4955,4962,
        4967,4970,4972,4978,4980,4983,4991,4996,5001,5005,5011,5016,5020,
        5026,5028,5039,5042,5049,5052,5064,5070,5079,5088,5093,5102,5108,
        5119,5128,5134,5139,5143,5146,5158,5165,5170,5185,5192,5200,5203,
        5213,5223,5233,5243,5247,5251,5261,5266,5330,5348,5356,5368,5375,
        5377,5387,5390,5398,5405,5409,5414,5418,5423,5426,5429,5438,5442,
        5466,5473,5477,5484,5491,5494,5510,5513,5523,5527,5533,5536,5541,
        5545,5552,5555,5561,5585,5588,5600,5603,5613,5621,5625,5632,5635,
        5644,5650,5656,5666,5668,5674,5677,5680,5692,5695,5701,5704,5712,
        5720,5726,5730,5744,5756,5763,5766,5773,5780,5785,5790,5793,5804,
        5815,5821,5826,5839,5841,5846,5850,5853,5855,5862,5869,5872,5875,
        5881,5885,5891,5897,5910,5915,5923,5926,5931,5936,5944,5947,5955,
        5959,5972,5978,5990,5993,6002,6007,6013,6019,6024,6026,6031,6033,
        6037,6043,6046,6049,6057,6065,6069,6089,6096,6098,6105,6107,6111,
        6116,6127,6132,6138,6141,6145,6150,6153,6157,6161,6163,6168,6173,
        6186,6189,6193,6196,6199,6204,6209,6214,6217,6222,6225,6231,6234,
        6238,6243,6248,6253,6258,6261,6266,6271,6276,6282,6287,6292,6297,
        6300,6305,6309,6313,6321,6328,6332,6337,6342,6346,6348,6351,6367,
        6376,6384,6393,6403,6411,6419,6427,6435,6447,6454,6473,6478,6481,
        6486,6489,6493,6505,6510,6518,6525,6530,6535,6568,6572,6580,6584,
        6593,6601,6606,6614,6619,6624,6626,6635,6640,6648,6653,6661,6669,
        6672,6682,6700,6706,6710,6716,6720,6724,6737,6745,6749,6754,6759,
        6765,6770,6774,6779,6784,6789,6799,6802,6806,6810,6817,6821,6850,
        6855,6859,6862,6865,6868,6871,6882,6896,6905,6931,6942,6949,6953,
        6960,6968,6973,6981,6987,6997,7010,7016,7022,7038,7044,7053,7055,
        7074,7086,7103,7120,7122,7141,7150,7159,7168
    ]

class MySqlParser ( Parser ):

    grammarFileName = "MySqlParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
                     "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", 
                     "'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", 
                     "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
                     "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
                     "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", 
                     "'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", 
                     "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", 
                     "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
                     "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", 
                     "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", "'ENCLOSED'", 
                     "'ESCAPED'", "'EXCEPT'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", 
                     "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
                     "'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", 
                     "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", 
                     "'IF'", "'IGNORE'", "'IGNORED'", "'IN'", "'INDEX'", 
                     "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", 
                     "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", 
                     "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", 
                     "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
                     "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
                     "'MINVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
                     "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", 
                     "'OPTIONAL'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
                     "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", 
                     "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
                     "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", 
                     "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", 
                     "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", "'RIGHT'", 
                     "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", 
                     "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SKIP'", "'SPATIAL'", 
                     "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", 
                     "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", 
                     "'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", 
                     "'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", 
                     "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", 
                     "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", 
                     "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
                     "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", 
                     "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", "'INT'", 
                     "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", 
                     "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", 
                     "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
                     "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", 
                     "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", 
                     "'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", 
                     "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", 
                     "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", 
                     "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
                     "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
                     "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
                     "'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'", 
                     "'JSON_QUOTE'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", 
                     "'JSON_EXTRACT'", "'JSON_KEYS'", "'JSON_OVERLAPS'", 
                     "'JSON_SEARCH'", "'JSON_VALUE'", "'JSON_ARRAY_APPEND'", 
                     "'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", 
                     "'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", 
                     "'JSON_REPLACE'", "'JSON_SET'", "'JSON_UNQUOTE'", "'JSON_DEPTH'", 
                     "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", "'JSON_TABLE'", 
                     "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
                     "'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", 
                     "'JSON_ARRAYAGG'", "'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", 
                     "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'CUME_DIST'", 
                     "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", 
                     "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", 
                     "'NTILE'", "'NTH_VALUE'", "'PERCENT_RANK'", "'RANK'", 
                     "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
                     "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", 
                     "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
                     "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
                     "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", 
                     "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
                     "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
                     "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", 
                     "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
                     "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", 
                     "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", 
                     "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
                     "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
                     "'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", 
                     "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", 
                     "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", 
                     "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", 
                     "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
                     "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
                     "'CPU'", "'CYCLE'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", 
                     "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", 
                     "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", 
                     "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
                     "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", 
                     "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
                     "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
                     "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
                     "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", 
                     "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", 
                     "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", 
                     "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
                     "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INCREMENT'", "'INDEXES'", 
                     "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", 
                     "'INSTANCE'", "'INSTANT'", "'INVISIBLE'", "'INVOKER'", 
                     "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
                     "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", 
                     "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", 
                     "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
                     "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
                     "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
                     "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
                     "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", 
                     "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
                     "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
                     "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
                     "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
                     "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", 
                     "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", 
                     "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
                     "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
                     "'NO'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", 
                     "'NOMINVALUE'", "'NOWAIT'", "'NODEGROUP'", "'NONE'", 
                     "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", 
                     "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
                     "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", 
                     "'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", 
                     "'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", 
                     "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
                     "'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", 
                     "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
                     "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'RECURSIVE'", 
                     "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
                     "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", 
                     "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
                     "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", 
                     "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
                     "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", 
                     "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", 
                     "'RETURNS'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
                     "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", 
                     "'SCHEDULE'", "'SECURITY'", "'SEQUENCE'", "'SERVER'", 
                     "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", 
                     "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", 
                     "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
                     "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", 
                     "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", 
                     "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
                     "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", 
                     "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", 
                     "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
                     "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TABLE_TYPE'", 
                     "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
                     "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", 
                     "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
                     "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
                     "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
                     "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", 
                     "'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", 
                     "'WRAPPER'", "'X509'", "'XA'", "'XML'", "'YES'", "'EUR'", 
                     "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
                     "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", 
                     "'SECOND'", "'MICROSECOND'", "'TABLES'", "'ROUTINE'", 
                     "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'", 
                     "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
                     "'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", 
                     "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", "'CONNECTION_ADMIN'", 
                     "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", "'FIREWALL_USER'", 
                     "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
                     "'FLUSH_USER_RESOURCES'", "'ADMIN'", "'GROUP_REPLICATION_ADMIN'", 
                     "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", 
                     "'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", "'PERSIST_RO_VARIABLES_ADMIN'", 
                     "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", 
                     "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
                     "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", "<INVALID>", 
                     "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
                     "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", 
                     "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", "'BIG5'", 
                     "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", 
                     "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
                     "'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", 
                     "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", 
                     "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", 
                     "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", 
                     "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", 
                     "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
                     "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
                     "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
                     "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
                     "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", 
                     "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
                     "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
                     "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", 
                     "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", 
                     "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
                     "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", 
                     "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", 
                     "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
                     "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", 
                     "'CHARACTER_LENGTH'", "'CHARSET'", "'CHAR_LENGTH'", 
                     "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'", 
                     "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
                     "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", 
                     "'CREATE_ASYMMETRIC_PUB_KEY'", "'CREATE_DH_PARAMETERS'", 
                     "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", "'DATE_FORMAT'", 
                     "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
                     "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", 
                     "'DIMENSION'", "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", 
                     "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", "'ENVELOPE'", "'EQUALS'", 
                     "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
                     "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
                     "'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", 
                     "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", 
                     "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
                     "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
                     "'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", 
                     "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", "'GTID_SUBSET'", 
                     "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
                     "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
                     "'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", 
                     "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", 
                     "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", 
                     "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
                     "'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
                     "'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", 
                     "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
                     "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", 
                     "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
                     "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", 
                     "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
                     "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", 
                     "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
                     "'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", 
                     "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", 
                     "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", 
                     "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
                     "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", 
                     "'POINTFROMTEXT'", "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", 
                     "'POLYFROMWKB'", "'POLYGONFROMTEXT'", "'POLYGONFROMWKB'", 
                     "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
                     "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", 
                     "'ROW_COUNT'", "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", 
                     "'SECONDARY_ENGINE_ATTRIBUTE'", "'SESSION_USER'", "'SHA'", 
                     "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", 
                     "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
                     "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", 
                     "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", 
                     "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
                     "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
                     "'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", 
                     "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
                     "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
                     "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
                     "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", 
                     "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", 
                     "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", 
                     "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
                     "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
                     "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
                     "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", 
                     "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", 
                     "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", 
                     "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
                     "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", 
                     "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'", 
                     "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", 
                     "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
                     "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", 
                     "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", 
                     "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", "'UPPER'", 
                     "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
                     "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
                     "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", 
                     "'YEARWEEK'", "'Y'", "'X'", "'VIA'", "'LASTVAL'", "'NEXTVAL'", 
                     "'SETVAL'", "'PREVIOUS'", "'PERSISTENT'", "'BINLOG_MONITOR'", 
                     "'BINLOG_REPLAY'", "'FEDERATED_ADMIN'", "'READ_ONLY_ADMIN'", 
                     "'REPLICA'", "'REPLICATION_MASTER_ADMIN'", "':='", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", 
                     "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", 
                     "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", 
                     "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", 
                     "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", 
                      "AND", "ARRAY", "AS", "ASC", "BEFORE", "BETWEEN", 
                      "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", 
                      "CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", 
                      "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
                      "CREATE", "CROSS", "CURRENT", "CURRENT_USER", "CURSOR", 
                      "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", 
                      "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", 
                      "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", 
                      "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", 
                      "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", 
                      "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", 
                      "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
                      "HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", 
                      "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
                      "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", 
                      "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
                      "LINES", "LOAD", "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", 
                      "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", 
                      "MAXVALUE", "MINVALUE", "MODIFIES", "NATURAL", "NOT", 
                      "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON", 
                      "OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", "OR", 
                      "ORDER", "OUT", "OVER", "OUTER", "OUTFILE", "PARTITION", 
                      "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", 
                      "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
                      "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", 
                      "RETAIN", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", 
                      "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", 
                      "SKIP_", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
                      "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
                      "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", 
                      "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", 
                      "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
                      "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", 
                      "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
                      "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", 
                      "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", 
                      "INT8", "INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", 
                      "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", "NUMERIC", 
                      "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", 
                      "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
                      "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", 
                      "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", 
                      "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
                      "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
                      "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
                      "DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", 
                      "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", 
                      "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", "JSON_VALUE", 
                      "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", 
                      "JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", 
                      "JSON_REMOVE", "JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", 
                      "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", 
                      "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
                      "JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", 
                      "JSON_ARRAYAGG", "JSON_OBJECTAGG", "AVG", "BIT_AND", 
                      "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", "DENSE_RANK", 
                      "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", 
                      "LEAD", "MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", 
                      "RANK", "ROW_NUMBER", "STD", "STDDEV", "STDDEV_POP", 
                      "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", 
                      "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", 
                      "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
                      "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
                      "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
                      "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
                      "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
                      "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
                      "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", 
                      "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING", "COALESCE", 
                      "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
                      "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", 
                      "COMPRESSION", "CONCURRENT", "CONNECT", "CONNECTION", 
                      "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
                      "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
                      "COPY", "CPU", "CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", 
                      "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
                      "DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", 
                      "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", 
                      "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", 
                      "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", 
                      "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", 
                      "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
                      "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", 
                      "FOLLOWING", "FOLLOWS", "FOUND", "FULL", "FUNCTION", 
                      "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
                      "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
                      "IGNORE_SERVER_IDS", "IMPORT", "INCREMENT", "INDEXES", 
                      "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
                      "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", "IO", 
                      "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", 
                      "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", 
                      "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
                      "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
                      "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", 
                      "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
                      "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", 
                      "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
                      "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", 
                      "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
                      "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
                      "MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", 
                      "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
                      "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", 
                      "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NOCACHE", 
                      "NOCOPY", "NOCYCLE", "NOMAXVALUE", "NOMINVALUE", "NOWAIT", 
                      "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", 
                      "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
                      "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", 
                      "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
                      "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
                      "PORT", "PRECEDES", "PRECEDING", "PREPARE", "PRESERVE", 
                      "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
                      "QUERY", "QUICK", "REBUILD", "RECOVER", "RECURSIVE", 
                      "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
                      "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
                      "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
                      "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
                      "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
                      "REPLICATION", "RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", 
                      "RETURNING", "RETURNS", "ROLE", "ROLLBACK", "ROLLUP", 
                      "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "RTREE", "SAVEPOINT", 
                      "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", "SESSION", 
                      "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", 
                      "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
                      "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
                      "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", 
                      "SQL_NO_CACHE", "SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", 
                      "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", 
                      "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", 
                      "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
                      "SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", 
                      "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
                      "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNBOUNDED", 
                      "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", 
                      "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", 
                      "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
                      "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
                      "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", 
                      "XML", "YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", 
                      "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", 
                      "SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", 
                      "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", 
                      "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", 
                      "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
                      "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
                      "FIREWALL_ADMIN", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", 
                      "FLUSH_STATUS", "FLUSH_TABLES", "FLUSH_USER_RESOURCES", 
                      "ADMIN", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
                      "INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", 
                      "PERSIST_RO_VARIABLES_ADMIN", "REPLICATION_APPLIER", 
                      "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
                      "RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", 
                      "SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", 
                      "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
                      "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", 
                      "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
                      "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
                      "EUCKR", "GB18030", "GB2312", "GBK", "GEOSTD8", "GREEK", 
                      "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
                      "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
                      "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
                      "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
                      "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", 
                      "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", 
                      "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
                      "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
                      "GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", 
                      "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", 
                      "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
                      "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
                      "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", 
                      "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", 
                      "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
                      "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
                      "CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", 
                      "COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT", 
                      "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
                      "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
                      "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", 
                      "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
                      "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
                      "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", 
                      "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", 
                      "EXP", "EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", 
                      "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
                      "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", 
                      "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
                      "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
                      "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
                      "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
                      "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", 
                      "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
                      "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", 
                      "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
                      "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", 
                      "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
                      "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", 
                      "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
                      "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", 
                      "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", 
                      "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
                      "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", 
                      "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
                      "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
                      "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", 
                      "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
                      "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", 
                      "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", 
                      "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
                      "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
                      "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", 
                      "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
                      "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", "SHA", 
                      "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", 
                      "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", 
                      "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", 
                      "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
                      "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
                      "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
                      "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", 
                      "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", 
                      "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
                      "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", 
                      "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
                      "ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", 
                      "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
                      "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", 
                      "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
                      "ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", 
                      "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
                      "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", 
                      "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
                      "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", 
                      "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", "TAN", 
                      "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
                      "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", 
                      "TO_SECONDS", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
                      "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", 
                      "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", 
                      "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
                      "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
                      "X_FUNCTION", "VIA", "LASTVAL", "NEXTVAL", "SETVAL", 
                      "PREVIOUS", "PERSISTENT", "BINLOG_MONITOR", "BINLOG_REPLAY", 
                      "FEDERATED_ADMIN", "READ_ONLY_ADMIN", "REPLICA", "REPLICATION_MASTER_ADMIN", 
                      "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
                      "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
                      "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", 
                      "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
                      "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
                      "BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", 
                      "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", 
                      "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
                      "REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", 
                      "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
                      "STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", 
                      "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
                      "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", 
                      "STRING_USER_NAME", "IP_ADDRESS", "STRING_USER_NAME_MARIADB", 
                      "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", "ENCRYPTED", 
                      "ENCRYPTION_KEY_ID" ]

    RULE_root = 0
    RULE_sqlStatements = 1
    RULE_sqlStatement = 2
    RULE_emptyStatement_ = 3
    RULE_ddlStatement = 4
    RULE_dmlStatement = 5
    RULE_transactionStatement = 6
    RULE_replicationStatement = 7
    RULE_preparedStatement = 8
    RULE_compoundStatement = 9
    RULE_administrationStatement = 10
    RULE_utilityStatement = 11
    RULE_createDatabase = 12
    RULE_createEvent = 13
    RULE_createIndex = 14
    RULE_createLogfileGroup = 15
    RULE_createProcedure = 16
    RULE_createFunction = 17
    RULE_createRole = 18
    RULE_createServer = 19
    RULE_createTable = 20
    RULE_createTablespaceInnodb = 21
    RULE_createTablespaceNdb = 22
    RULE_createTrigger = 23
    RULE_withClause = 24
    RULE_commonTableExpressions = 25
    RULE_cteName = 26
    RULE_cteColumnName = 27
    RULE_createView = 28
    RULE_createSequence = 29
    RULE_sequenceSpec = 30
    RULE_createDatabaseOption = 31
    RULE_charSet = 32
    RULE_ownerStatement = 33
    RULE_scheduleExpression = 34
    RULE_timestampValue = 35
    RULE_intervalExpr = 36
    RULE_intervalType = 37
    RULE_enableType = 38
    RULE_indexType = 39
    RULE_indexOption = 40
    RULE_procedureParameter = 41
    RULE_functionParameter = 42
    RULE_routineOption = 43
    RULE_serverOption = 44
    RULE_createDefinitions = 45
    RULE_createDefinition = 46
    RULE_columnDefinition = 47
    RULE_columnConstraint = 48
    RULE_tableConstraint = 49
    RULE_referenceDefinition = 50
    RULE_referenceAction = 51
    RULE_referenceControlType = 52
    RULE_indexColumnDefinition = 53
    RULE_tableOption = 54
    RULE_tableType = 55
    RULE_tablespaceStorage = 56
    RULE_partitionDefinitions = 57
    RULE_partitionFunctionDefinition = 58
    RULE_subpartitionFunctionDefinition = 59
    RULE_partitionDefinition = 60
    RULE_partitionDefinerAtom = 61
    RULE_partitionDefinerVector = 62
    RULE_subpartitionDefinition = 63
    RULE_partitionOption = 64
    RULE_alterDatabase = 65
    RULE_alterEvent = 66
    RULE_alterFunction = 67
    RULE_alterInstance = 68
    RULE_alterLogfileGroup = 69
    RULE_alterProcedure = 70
    RULE_alterServer = 71
    RULE_alterTable = 72
    RULE_alterTablespace = 73
    RULE_alterView = 74
    RULE_alterSequence = 75
    RULE_alterSpecification = 76
    RULE_dropDatabase = 77
    RULE_dropEvent = 78
    RULE_dropIndex = 79
    RULE_dropLogfileGroup = 80
    RULE_dropProcedure = 81
    RULE_dropFunction = 82
    RULE_dropServer = 83
    RULE_dropTable = 84
    RULE_dropTablespace = 85
    RULE_dropTrigger = 86
    RULE_dropView = 87
    RULE_dropRole = 88
    RULE_setRole = 89
    RULE_dropSequence = 90
    RULE_renameTable = 91
    RULE_renameTableClause = 92
    RULE_truncateTable = 93
    RULE_callStatement = 94
    RULE_deleteStatement = 95
    RULE_doStatement = 96
    RULE_handlerStatement = 97
    RULE_insertStatement = 98
    RULE_loadDataStatement = 99
    RULE_loadXmlStatement = 100
    RULE_replaceStatement = 101
    RULE_selectStatement = 102
    RULE_updateStatement = 103
    RULE_insertStatementValue = 104
    RULE_updatedElement = 105
    RULE_assignmentField = 106
    RULE_lockClause = 107
    RULE_singleDeleteStatement = 108
    RULE_multipleDeleteStatement = 109
    RULE_handlerOpenStatement = 110
    RULE_handlerReadIndexStatement = 111
    RULE_handlerReadStatement = 112
    RULE_handlerCloseStatement = 113
    RULE_singleUpdateStatement = 114
    RULE_multipleUpdateStatement = 115
    RULE_orderByClause = 116
    RULE_orderByExpression = 117
    RULE_tableSources = 118
    RULE_tableSource = 119
    RULE_tableSourceItem = 120
    RULE_indexHint = 121
    RULE_indexHintType = 122
    RULE_joinPart = 123
    RULE_queryExpression = 124
    RULE_queryExpressionNointo = 125
    RULE_querySpecification = 126
    RULE_querySpecificationNointo = 127
    RULE_unionParenthesis = 128
    RULE_unionStatement = 129
    RULE_selectSpec = 130
    RULE_selectElements = 131
    RULE_selectElement = 132
    RULE_selectIntoExpression = 133
    RULE_selectFieldsInto = 134
    RULE_selectLinesInto = 135
    RULE_fromClause = 136
    RULE_groupByClause = 137
    RULE_havingClause = 138
    RULE_windowClause = 139
    RULE_groupByItem = 140
    RULE_limitClause = 141
    RULE_limitClauseAtom = 142
    RULE_startTransaction = 143
    RULE_beginWork = 144
    RULE_commitWork = 145
    RULE_rollbackWork = 146
    RULE_savepointStatement = 147
    RULE_rollbackStatement = 148
    RULE_releaseStatement = 149
    RULE_lockTables = 150
    RULE_unlockTables = 151
    RULE_setAutocommitStatement = 152
    RULE_setTransactionStatement = 153
    RULE_transactionMode = 154
    RULE_lockTableElement = 155
    RULE_lockAction = 156
    RULE_transactionOption = 157
    RULE_transactionLevel = 158
    RULE_changeMaster = 159
    RULE_changeReplicationFilter = 160
    RULE_purgeBinaryLogs = 161
    RULE_resetMaster = 162
    RULE_resetSlave = 163
    RULE_startSlave = 164
    RULE_stopSlave = 165
    RULE_startGroupReplication = 166
    RULE_stopGroupReplication = 167
    RULE_masterOption = 168
    RULE_stringMasterOption = 169
    RULE_decimalMasterOption = 170
    RULE_boolMasterOption = 171
    RULE_channelOption = 172
    RULE_replicationFilter = 173
    RULE_tablePair = 174
    RULE_threadType = 175
    RULE_untilOption = 176
    RULE_connectionOption = 177
    RULE_gtuidSet = 178
    RULE_xaStartTransaction = 179
    RULE_xaEndTransaction = 180
    RULE_xaPrepareStatement = 181
    RULE_xaCommitWork = 182
    RULE_xaRollbackWork = 183
    RULE_xaRecoverWork = 184
    RULE_prepareStatement = 185
    RULE_executeStatement = 186
    RULE_deallocatePrepare = 187
    RULE_routineBody = 188
    RULE_blockStatement = 189
    RULE_caseStatement = 190
    RULE_ifStatement = 191
    RULE_iterateStatement = 192
    RULE_leaveStatement = 193
    RULE_loopStatement = 194
    RULE_repeatStatement = 195
    RULE_returnStatement = 196
    RULE_whileStatement = 197
    RULE_cursorStatement = 198
    RULE_declareVariable = 199
    RULE_declareCondition = 200
    RULE_declareCursor = 201
    RULE_declareHandler = 202
    RULE_handlerConditionValue = 203
    RULE_procedureSqlStatement = 204
    RULE_caseAlternative = 205
    RULE_elifAlternative = 206
    RULE_alterUser = 207
    RULE_createUser = 208
    RULE_dropUser = 209
    RULE_grantStatement = 210
    RULE_roleOption = 211
    RULE_grantProxy = 212
    RULE_renameUser = 213
    RULE_revokeStatement = 214
    RULE_revokeProxy = 215
    RULE_setPasswordStatement = 216
    RULE_userSpecification = 217
    RULE_userAuthOption = 218
    RULE_tlsOption = 219
    RULE_userResourceOption = 220
    RULE_userPasswordOption = 221
    RULE_userLockOption = 222
    RULE_privelegeClause = 223
    RULE_privilege = 224
    RULE_privilegeLevel = 225
    RULE_renameUserClause = 226
    RULE_analyzeTable = 227
    RULE_checkTable = 228
    RULE_checksumTable = 229
    RULE_optimizeTable = 230
    RULE_repairTable = 231
    RULE_checkTableOption = 232
    RULE_createUdfunction = 233
    RULE_installPlugin = 234
    RULE_uninstallPlugin = 235
    RULE_setStatement = 236
    RULE_showStatement = 237
    RULE_variableClause = 238
    RULE_showCommonEntity = 239
    RULE_showFilter = 240
    RULE_showGlobalInfoClause = 241
    RULE_showSchemaEntity = 242
    RULE_showProfileType = 243
    RULE_binlogStatement = 244
    RULE_cacheIndexStatement = 245
    RULE_flushStatement = 246
    RULE_killStatement = 247
    RULE_loadIndexIntoCache = 248
    RULE_resetStatement = 249
    RULE_shutdownStatement = 250
    RULE_tableIndexes = 251
    RULE_flushOption = 252
    RULE_flushTableOption = 253
    RULE_loadedTableIndexes = 254
    RULE_simpleDescribeStatement = 255
    RULE_fullDescribeStatement = 256
    RULE_helpStatement = 257
    RULE_useStatement = 258
    RULE_signalStatement = 259
    RULE_resignalStatement = 260
    RULE_signalConditionInformation = 261
    RULE_diagnosticsStatement = 262
    RULE_diagnosticsConditionInformationName = 263
    RULE_describeObjectClause = 264
    RULE_fullId = 265
    RULE_tableName = 266
    RULE_roleName = 267
    RULE_fullColumnName = 268
    RULE_indexColumnName = 269
    RULE_userName = 270
    RULE_mysqlVariable = 271
    RULE_charsetName = 272
    RULE_collationName = 273
    RULE_engineName = 274
    RULE_uuidSet = 275
    RULE_xid = 276
    RULE_xuidStringId = 277
    RULE_authPlugin = 278
    RULE_uid = 279
    RULE_simpleId = 280
    RULE_dottedId = 281
    RULE_decimalLiteral = 282
    RULE_fileSizeLiteral = 283
    RULE_stringLiteral = 284
    RULE_booleanLiteral = 285
    RULE_hexadecimalLiteral = 286
    RULE_nullNotnull = 287
    RULE_constant = 288
    RULE_dataType = 289
    RULE_collectionOptions = 290
    RULE_convertedDataType = 291
    RULE_lengthOneDimension = 292
    RULE_lengthTwoDimension = 293
    RULE_lengthTwoOptionalDimension = 294
    RULE_uidList = 295
    RULE_tables = 296
    RULE_indexColumnNames = 297
    RULE_expressions = 298
    RULE_expressionsWithDefaults = 299
    RULE_constants = 300
    RULE_simpleStrings = 301
    RULE_userVariables = 302
    RULE_defaultValue = 303
    RULE_currentTimestamp = 304
    RULE_expressionOrDefault = 305
    RULE_ifExists = 306
    RULE_ifNotExists = 307
    RULE_waitNowaitClause = 308
    RULE_lockOption = 309
    RULE_functionCall = 310
    RULE_specificFunction = 311
    RULE_caseFuncAlternative = 312
    RULE_levelsInWeightString = 313
    RULE_levelInWeightListElement = 314
    RULE_aggregateWindowedFunction = 315
    RULE_nonAggregateWindowedFunction = 316
    RULE_overClause = 317
    RULE_windowSpec = 318
    RULE_windowName = 319
    RULE_frameClause = 320
    RULE_frameUnits = 321
    RULE_frameExtent = 322
    RULE_frameBetween = 323
    RULE_frameRange = 324
    RULE_partitionClause = 325
    RULE_scalarFunctionName = 326
    RULE_passwordFunctionClause = 327
    RULE_functionArgs = 328
    RULE_functionArg = 329
    RULE_expression = 330
    RULE_predicate = 331
    RULE_expressionAtom = 332
    RULE_unaryOperator = 333
    RULE_comparisonOperator = 334
    RULE_logicalOperator = 335
    RULE_bitOperator = 336
    RULE_mathOperator = 337
    RULE_jsonOperator = 338
    RULE_charsetNameBase = 339
    RULE_transactionLevelBase = 340
    RULE_privilegesBase = 341
    RULE_intervalTypeBase = 342
    RULE_dataTypeBase = 343
    RULE_keywordsCanBeId = 344
    RULE_functionNameBase = 345

    ruleNames =  [ "root", "sqlStatements", "sqlStatement", "emptyStatement_", 
                   "ddlStatement", "dmlStatement", "transactionStatement", 
                   "replicationStatement", "preparedStatement", "compoundStatement", 
                   "administrationStatement", "utilityStatement", "createDatabase", 
                   "createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
                   "createFunction", "createRole", "createServer", "createTable", 
                   "createTablespaceInnodb", "createTablespaceNdb", "createTrigger", 
                   "withClause", "commonTableExpressions", "cteName", "cteColumnName", 
                   "createView", "createSequence", "sequenceSpec", "createDatabaseOption", 
                   "charSet", "ownerStatement", "scheduleExpression", "timestampValue", 
                   "intervalExpr", "intervalType", "enableType", "indexType", 
                   "indexOption", "procedureParameter", "functionParameter", 
                   "routineOption", "serverOption", "createDefinitions", 
                   "createDefinition", "columnDefinition", "columnConstraint", 
                   "tableConstraint", "referenceDefinition", "referenceAction", 
                   "referenceControlType", "indexColumnDefinition", "tableOption", 
                   "tableType", "tablespaceStorage", "partitionDefinitions", 
                   "partitionFunctionDefinition", "subpartitionFunctionDefinition", 
                   "partitionDefinition", "partitionDefinerAtom", "partitionDefinerVector", 
                   "subpartitionDefinition", "partitionOption", "alterDatabase", 
                   "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
                   "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
                   "alterView", "alterSequence", "alterSpecification", "dropDatabase", 
                   "dropEvent", "dropIndex", "dropLogfileGroup", "dropProcedure", 
                   "dropFunction", "dropServer", "dropTable", "dropTablespace", 
                   "dropTrigger", "dropView", "dropRole", "setRole", "dropSequence", 
                   "renameTable", "renameTableClause", "truncateTable", 
                   "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
                   "insertStatement", "loadDataStatement", "loadXmlStatement", 
                   "replaceStatement", "selectStatement", "updateStatement", 
                   "insertStatementValue", "updatedElement", "assignmentField", 
                   "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
                   "handlerOpenStatement", "handlerReadIndexStatement", 
                   "handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
                   "multipleUpdateStatement", "orderByClause", "orderByExpression", 
                   "tableSources", "tableSource", "tableSourceItem", "indexHint", 
                   "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
                   "querySpecification", "querySpecificationNointo", "unionParenthesis", 
                   "unionStatement", "selectSpec", "selectElements", "selectElement", 
                   "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
                   "fromClause", "groupByClause", "havingClause", "windowClause", 
                   "groupByItem", "limitClause", "limitClauseAtom", "startTransaction", 
                   "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
                   "rollbackStatement", "releaseStatement", "lockTables", 
                   "unlockTables", "setAutocommitStatement", "setTransactionStatement", 
                   "transactionMode", "lockTableElement", "lockAction", 
                   "transactionOption", "transactionLevel", "changeMaster", 
                   "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
                   "resetSlave", "startSlave", "stopSlave", "startGroupReplication", 
                   "stopGroupReplication", "masterOption", "stringMasterOption", 
                   "decimalMasterOption", "boolMasterOption", "channelOption", 
                   "replicationFilter", "tablePair", "threadType", "untilOption", 
                   "connectionOption", "gtuidSet", "xaStartTransaction", 
                   "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
                   "xaRollbackWork", "xaRecoverWork", "prepareStatement", 
                   "executeStatement", "deallocatePrepare", "routineBody", 
                   "blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
                   "leaveStatement", "loopStatement", "repeatStatement", 
                   "returnStatement", "whileStatement", "cursorStatement", 
                   "declareVariable", "declareCondition", "declareCursor", 
                   "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
                   "caseAlternative", "elifAlternative", "alterUser", "createUser", 
                   "dropUser", "grantStatement", "roleOption", "grantProxy", 
                   "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
                   "userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
                   "userPasswordOption", "userLockOption", "privelegeClause", 
                   "privilege", "privilegeLevel", "renameUserClause", "analyzeTable", 
                   "checkTable", "checksumTable", "optimizeTable", "repairTable", 
                   "checkTableOption", "createUdfunction", "installPlugin", 
                   "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
                   "showCommonEntity", "showFilter", "showGlobalInfoClause", 
                   "showSchemaEntity", "showProfileType", "binlogStatement", 
                   "cacheIndexStatement", "flushStatement", "killStatement", 
                   "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
                   "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
                   "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", 
                   "useStatement", "signalStatement", "resignalStatement", 
                   "signalConditionInformation", "diagnosticsStatement", 
                   "diagnosticsConditionInformationName", "describeObjectClause", 
                   "fullId", "tableName", "roleName", "fullColumnName", 
                   "indexColumnName", "userName", "mysqlVariable", "charsetName", 
                   "collationName", "engineName", "uuidSet", "xid", "xuidStringId", 
                   "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
                   "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
                   "hexadecimalLiteral", "nullNotnull", "constant", "dataType", 
                   "collectionOptions", "convertedDataType", "lengthOneDimension", 
                   "lengthTwoDimension", "lengthTwoOptionalDimension", "uidList", 
                   "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
                   "constants", "simpleStrings", "userVariables", "defaultValue", 
                   "currentTimestamp", "expressionOrDefault", "ifExists", 
                   "ifNotExists", "waitNowaitClause", "lockOption", "functionCall", 
                   "specificFunction", "caseFuncAlternative", "levelsInWeightString", 
                   "levelInWeightListElement", "aggregateWindowedFunction", 
                   "nonAggregateWindowedFunction", "overClause", "windowSpec", 
                   "windowName", "frameClause", "frameUnits", "frameExtent", 
                   "frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
                   "passwordFunctionClause", "functionArgs", "functionArg", 
                   "expression", "predicate", "expressionAtom", "unaryOperator", 
                   "comparisonOperator", "logicalOperator", "bitOperator", 
                   "mathOperator", "jsonOperator", "charsetNameBase", "transactionLevelBase", 
                   "privilegesBase", "intervalTypeBase", "dataTypeBase", 
                   "keywordsCanBeId", "functionNameBase" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_MYSQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    ADD=5
    ALL=6
    ALTER=7
    ALWAYS=8
    ANALYZE=9
    AND=10
    ARRAY=11
    AS=12
    ASC=13
    BEFORE=14
    BETWEEN=15
    BOTH=16
    BUCKETS=17
    BY=18
    CALL=19
    CASCADE=20
    CASE=21
    CAST=22
    CHANGE=23
    CHARACTER=24
    CHECK=25
    COLLATE=26
    COLUMN=27
    CONDITION=28
    CONSTRAINT=29
    CONTINUE=30
    CONVERT=31
    CREATE=32
    CROSS=33
    CURRENT=34
    CURRENT_USER=35
    CURSOR=36
    DATABASE=37
    DATABASES=38
    DECLARE=39
    DEFAULT=40
    DELAYED=41
    DELETE=42
    DESC=43
    DESCRIBE=44
    DETERMINISTIC=45
    DIAGNOSTICS=46
    DISTINCT=47
    DISTINCTROW=48
    DROP=49
    EACH=50
    ELSE=51
    ELSEIF=52
    EMPTY=53
    ENCLOSED=54
    ESCAPED=55
    EXCEPT=56
    EXISTS=57
    EXIT=58
    EXPLAIN=59
    FALSE=60
    FETCH=61
    FOR=62
    FORCE=63
    FOREIGN=64
    FROM=65
    FULLTEXT=66
    GENERATED=67
    GET=68
    GRANT=69
    GROUP=70
    HAVING=71
    HIGH_PRIORITY=72
    HISTOGRAM=73
    IF=74
    IGNORE=75
    IGNORED=76
    IN=77
    INDEX=78
    INFILE=79
    INNER=80
    INOUT=81
    INSERT=82
    INTERVAL=83
    INTO=84
    IS=85
    ITERATE=86
    JOIN=87
    KEY=88
    KEYS=89
    KILL=90
    LEADING=91
    LEAVE=92
    LEFT=93
    LIKE=94
    LIMIT=95
    LINEAR=96
    LINES=97
    LOAD=98
    LOCK=99
    LOCKED=100
    LOOP=101
    LOW_PRIORITY=102
    MASTER_BIND=103
    MASTER_SSL_VERIFY_SERVER_CERT=104
    MATCH=105
    MAXVALUE=106
    MINVALUE=107
    MODIFIES=108
    NATURAL=109
    NOT=110
    NO_WRITE_TO_BINLOG=111
    NULL_LITERAL=112
    NUMBER=113
    ON=114
    OPTIMIZE=115
    OPTION=116
    OPTIONAL=117
    OPTIONALLY=118
    OR=119
    ORDER=120
    OUT=121
    OVER=122
    OUTER=123
    OUTFILE=124
    PARTITION=125
    PRIMARY=126
    PROCEDURE=127
    PURGE=128
    RANGE=129
    READ=130
    READS=131
    REFERENCES=132
    REGEXP=133
    RELEASE=134
    RENAME=135
    REPEAT=136
    REPLACE=137
    REQUIRE=138
    RESIGNAL=139
    RESTRICT=140
    RETAIN=141
    RETURN=142
    REVOKE=143
    RIGHT=144
    RLIKE=145
    SCHEMA=146
    SCHEMAS=147
    SELECT=148
    SET=149
    SEPARATOR=150
    SHOW=151
    SIGNAL=152
    SKIP_=153
    SPATIAL=154
    SQL=155
    SQLEXCEPTION=156
    SQLSTATE=157
    SQLWARNING=158
    SQL_BIG_RESULT=159
    SQL_CALC_FOUND_ROWS=160
    SQL_SMALL_RESULT=161
    SSL=162
    STACKED=163
    STARTING=164
    STRAIGHT_JOIN=165
    TABLE=166
    TERMINATED=167
    THEN=168
    TO=169
    TRAILING=170
    TRIGGER=171
    TRUE=172
    UNDO=173
    UNION=174
    UNIQUE=175
    UNLOCK=176
    UNSIGNED=177
    UPDATE=178
    USAGE=179
    USE=180
    USING=181
    VALUES=182
    WHEN=183
    WHERE=184
    WHILE=185
    WITH=186
    WRITE=187
    XOR=188
    ZEROFILL=189
    TINYINT=190
    SMALLINT=191
    MEDIUMINT=192
    MIDDLEINT=193
    INT=194
    INT1=195
    INT2=196
    INT3=197
    INT4=198
    INT8=199
    INTEGER=200
    BIGINT=201
    REAL=202
    DOUBLE=203
    PRECISION=204
    FLOAT=205
    FLOAT4=206
    FLOAT8=207
    DECIMAL=208
    DEC=209
    NUMERIC=210
    DATE=211
    TIME=212
    TIMESTAMP=213
    DATETIME=214
    YEAR=215
    CHAR=216
    VARCHAR=217
    NVARCHAR=218
    NATIONAL=219
    BINARY=220
    VARBINARY=221
    TINYBLOB=222
    BLOB=223
    MEDIUMBLOB=224
    LONG=225
    LONGBLOB=226
    TINYTEXT=227
    TEXT=228
    MEDIUMTEXT=229
    LONGTEXT=230
    ENUM=231
    VARYING=232
    SERIAL=233
    YEAR_MONTH=234
    DAY_HOUR=235
    DAY_MINUTE=236
    DAY_SECOND=237
    HOUR_MINUTE=238
    HOUR_SECOND=239
    MINUTE_SECOND=240
    SECOND_MICROSECOND=241
    MINUTE_MICROSECOND=242
    HOUR_MICROSECOND=243
    DAY_MICROSECOND=244
    JSON_ARRAY=245
    JSON_OBJECT=246
    JSON_QUOTE=247
    JSON_CONTAINS=248
    JSON_CONTAINS_PATH=249
    JSON_EXTRACT=250
    JSON_KEYS=251
    JSON_OVERLAPS=252
    JSON_SEARCH=253
    JSON_VALUE=254
    JSON_ARRAY_APPEND=255
    JSON_ARRAY_INSERT=256
    JSON_INSERT=257
    JSON_MERGE=258
    JSON_MERGE_PATCH=259
    JSON_MERGE_PRESERVE=260
    JSON_REMOVE=261
    JSON_REPLACE=262
    JSON_SET=263
    JSON_UNQUOTE=264
    JSON_DEPTH=265
    JSON_LENGTH=266
    JSON_TYPE=267
    JSON_VALID=268
    JSON_TABLE=269
    JSON_SCHEMA_VALID=270
    JSON_SCHEMA_VALIDATION_REPORT=271
    JSON_PRETTY=272
    JSON_STORAGE_FREE=273
    JSON_STORAGE_SIZE=274
    JSON_ARRAYAGG=275
    JSON_OBJECTAGG=276
    AVG=277
    BIT_AND=278
    BIT_OR=279
    BIT_XOR=280
    COUNT=281
    CUME_DIST=282
    DENSE_RANK=283
    FIRST_VALUE=284
    GROUP_CONCAT=285
    LAG=286
    LAST_VALUE=287
    LEAD=288
    MAX=289
    MIN=290
    NTILE=291
    NTH_VALUE=292
    PERCENT_RANK=293
    RANK=294
    ROW_NUMBER=295
    STD=296
    STDDEV=297
    STDDEV_POP=298
    STDDEV_SAMP=299
    SUM=300
    VAR_POP=301
    VAR_SAMP=302
    VARIANCE=303
    CURRENT_DATE=304
    CURRENT_TIME=305
    CURRENT_TIMESTAMP=306
    LOCALTIME=307
    CURDATE=308
    CURTIME=309
    DATE_ADD=310
    DATE_SUB=311
    EXTRACT=312
    LOCALTIMESTAMP=313
    NOW=314
    POSITION=315
    SUBSTR=316
    SUBSTRING=317
    SYSDATE=318
    TRIM=319
    UTC_DATE=320
    UTC_TIME=321
    UTC_TIMESTAMP=322
    ACCOUNT=323
    ACTION=324
    AFTER=325
    AGGREGATE=326
    ALGORITHM=327
    ANY=328
    AT=329
    AUTHORS=330
    AUTOCOMMIT=331
    AUTOEXTEND_SIZE=332
    AUTO_INCREMENT=333
    AVG_ROW_LENGTH=334
    BEGIN=335
    BINLOG=336
    BIT=337
    BLOCK=338
    BOOL=339
    BOOLEAN=340
    BTREE=341
    CACHE=342
    CASCADED=343
    CHAIN=344
    CHANGED=345
    CHANNEL=346
    CHECKSUM=347
    PAGE_CHECKSUM=348
    CIPHER=349
    CLASS_ORIGIN=350
    CLIENT=351
    CLOSE=352
    CLUSTERING=353
    COALESCE=354
    CODE=355
    COLUMNS=356
    COLUMN_FORMAT=357
    COLUMN_NAME=358
    COMMENT=359
    COMMIT=360
    COMPACT=361
    COMPLETION=362
    COMPRESSED=363
    COMPRESSION=364
    CONCURRENT=365
    CONNECT=366
    CONNECTION=367
    CONSISTENT=368
    CONSTRAINT_CATALOG=369
    CONSTRAINT_SCHEMA=370
    CONSTRAINT_NAME=371
    CONTAINS=372
    CONTEXT=373
    CONTRIBUTORS=374
    COPY=375
    CPU=376
    CYCLE=377
    CURSOR_NAME=378
    DATA=379
    DATAFILE=380
    DEALLOCATE=381
    DEFAULT_AUTH=382
    DEFINER=383
    DELAY_KEY_WRITE=384
    DES_KEY_FILE=385
    DIRECTORY=386
    DISABLE=387
    DISCARD=388
    DISK=389
    DO=390
    DUMPFILE=391
    DUPLICATE=392
    DYNAMIC=393
    ENABLE=394
    ENCRYPTION=395
    END=396
    ENDS=397
    ENGINE=398
    ENGINES=399
    ERROR=400
    ERRORS=401
    ESCAPE=402
    EVEN=403
    EVENT=404
    EVENTS=405
    EVERY=406
    EXCHANGE=407
    EXCLUSIVE=408
    EXPIRE=409
    EXPORT=410
    EXTENDED=411
    EXTENT_SIZE=412
    FAST=413
    FAULTS=414
    FIELDS=415
    FILE_BLOCK_SIZE=416
    FILTER=417
    FIRST=418
    FIXED=419
    FLUSH=420
    FOLLOWING=421
    FOLLOWS=422
    FOUND=423
    FULL=424
    FUNCTION=425
    GENERAL=426
    GLOBAL=427
    GRANTS=428
    GROUP_REPLICATION=429
    HANDLER=430
    HASH=431
    HELP=432
    HOST=433
    HOSTS=434
    IDENTIFIED=435
    IGNORE_SERVER_IDS=436
    IMPORT=437
    INCREMENT=438
    INDEXES=439
    INITIAL_SIZE=440
    INPLACE=441
    INSERT_METHOD=442
    INSTALL=443
    INSTANCE=444
    INSTANT=445
    INVISIBLE=446
    INVOKER=447
    IO=448
    IO_THREAD=449
    IPC=450
    ISOLATION=451
    ISSUER=452
    JSON=453
    KEY_BLOCK_SIZE=454
    LANGUAGE=455
    LAST=456
    LEAVES=457
    LESS=458
    LEVEL=459
    LIST=460
    LOCAL=461
    LOGFILE=462
    LOGS=463
    MASTER=464
    MASTER_AUTO_POSITION=465
    MASTER_CONNECT_RETRY=466
    MASTER_DELAY=467
    MASTER_HEARTBEAT_PERIOD=468
    MASTER_HOST=469
    MASTER_LOG_FILE=470
    MASTER_LOG_POS=471
    MASTER_PASSWORD=472
    MASTER_PORT=473
    MASTER_RETRY_COUNT=474
    MASTER_SSL=475
    MASTER_SSL_CA=476
    MASTER_SSL_CAPATH=477
    MASTER_SSL_CERT=478
    MASTER_SSL_CIPHER=479
    MASTER_SSL_CRL=480
    MASTER_SSL_CRLPATH=481
    MASTER_SSL_KEY=482
    MASTER_TLS_VERSION=483
    MASTER_USER=484
    MAX_CONNECTIONS_PER_HOUR=485
    MAX_QUERIES_PER_HOUR=486
    MAX_ROWS=487
    MAX_SIZE=488
    MAX_UPDATES_PER_HOUR=489
    MAX_USER_CONNECTIONS=490
    MEDIUM=491
    MEMBER=492
    MERGE=493
    MESSAGE_TEXT=494
    MID=495
    MIGRATE=496
    MIN_ROWS=497
    MODE=498
    MODIFY=499
    MUTEX=500
    MYSQL=501
    MYSQL_ERRNO=502
    NAME=503
    NAMES=504
    NCHAR=505
    NEVER=506
    NEXT=507
    NO=508
    NOCACHE=509
    NOCOPY=510
    NOCYCLE=511
    NOMAXVALUE=512
    NOMINVALUE=513
    NOWAIT=514
    NODEGROUP=515
    NONE=516
    ODBC=517
    OFFLINE=518
    OFFSET=519
    OF=520
    OJ=521
    OLD_PASSWORD=522
    ONE=523
    ONLINE=524
    ONLY=525
    OPEN=526
    OPTIMIZER_COSTS=527
    OPTIONS=528
    OWNER=529
    PACK_KEYS=530
    PAGE=531
    PARSER=532
    PARTIAL=533
    PARTITIONING=534
    PARTITIONS=535
    PASSWORD=536
    PHASE=537
    PLUGIN=538
    PLUGIN_DIR=539
    PLUGINS=540
    PORT=541
    PRECEDES=542
    PRECEDING=543
    PREPARE=544
    PRESERVE=545
    PREV=546
    PROCESSLIST=547
    PROFILE=548
    PROFILES=549
    PROXY=550
    QUERY=551
    QUICK=552
    REBUILD=553
    RECOVER=554
    RECURSIVE=555
    REDO_BUFFER_SIZE=556
    REDUNDANT=557
    RELAY=558
    RELAY_LOG_FILE=559
    RELAY_LOG_POS=560
    RELAYLOG=561
    REMOVE=562
    REORGANIZE=563
    REPAIR=564
    REPLICATE_DO_DB=565
    REPLICATE_DO_TABLE=566
    REPLICATE_IGNORE_DB=567
    REPLICATE_IGNORE_TABLE=568
    REPLICATE_REWRITE_DB=569
    REPLICATE_WILD_DO_TABLE=570
    REPLICATE_WILD_IGNORE_TABLE=571
    REPLICATION=572
    RESET=573
    RESTART=574
    RESUME=575
    RETURNED_SQLSTATE=576
    RETURNING=577
    RETURNS=578
    ROLE=579
    ROLLBACK=580
    ROLLUP=581
    ROTATE=582
    ROW=583
    ROWS=584
    ROW_FORMAT=585
    RTREE=586
    SAVEPOINT=587
    SCHEDULE=588
    SECURITY=589
    SEQUENCE=590
    SERVER=591
    SESSION=592
    SHARE=593
    SHARED=594
    SIGNED=595
    SIMPLE=596
    SLAVE=597
    SLOW=598
    SNAPSHOT=599
    SOCKET=600
    SOME=601
    SONAME=602
    SOUNDS=603
    SOURCE=604
    SQL_AFTER_GTIDS=605
    SQL_AFTER_MTS_GAPS=606
    SQL_BEFORE_GTIDS=607
    SQL_BUFFER_RESULT=608
    SQL_CACHE=609
    SQL_NO_CACHE=610
    SQL_THREAD=611
    START=612
    STARTS=613
    STATS_AUTO_RECALC=614
    STATS_PERSISTENT=615
    STATS_SAMPLE_PAGES=616
    STATUS=617
    STOP=618
    STORAGE=619
    STORED=620
    STRING=621
    SUBCLASS_ORIGIN=622
    SUBJECT=623
    SUBPARTITION=624
    SUBPARTITIONS=625
    SUSPEND=626
    SWAPS=627
    SWITCHES=628
    TABLE_NAME=629
    TABLESPACE=630
    TABLE_TYPE=631
    TEMPORARY=632
    TEMPTABLE=633
    THAN=634
    TRADITIONAL=635
    TRANSACTION=636
    TRANSACTIONAL=637
    TRIGGERS=638
    TRUNCATE=639
    UNBOUNDED=640
    UNDEFINED=641
    UNDOFILE=642
    UNDO_BUFFER_SIZE=643
    UNINSTALL=644
    UNKNOWN=645
    UNTIL=646
    UPGRADE=647
    USER=648
    USE_FRM=649
    USER_RESOURCES=650
    VALIDATION=651
    VALUE=652
    VARIABLES=653
    VIEW=654
    VIRTUAL=655
    VISIBLE=656
    WAIT=657
    WARNINGS=658
    WINDOW=659
    WITHOUT=660
    WORK=661
    WRAPPER=662
    X509=663
    XA=664
    XML=665
    YES=666
    EUR=667
    USA=668
    JIS=669
    ISO=670
    INTERNAL=671
    QUARTER=672
    MONTH=673
    DAY=674
    HOUR=675
    MINUTE=676
    WEEK=677
    SECOND=678
    MICROSECOND=679
    TABLES=680
    ROUTINE=681
    EXECUTE=682
    FILE=683
    PROCESS=684
    RELOAD=685
    SHUTDOWN=686
    SUPER=687
    PRIVILEGES=688
    APPLICATION_PASSWORD_ADMIN=689
    AUDIT_ADMIN=690
    BACKUP_ADMIN=691
    BINLOG_ADMIN=692
    BINLOG_ENCRYPTION_ADMIN=693
    CLONE_ADMIN=694
    CONNECTION_ADMIN=695
    ENCRYPTION_KEY_ADMIN=696
    FIREWALL_ADMIN=697
    FIREWALL_USER=698
    FLUSH_OPTIMIZER_COSTS=699
    FLUSH_STATUS=700
    FLUSH_TABLES=701
    FLUSH_USER_RESOURCES=702
    ADMIN=703
    GROUP_REPLICATION_ADMIN=704
    INNODB_REDO_LOG_ARCHIVE=705
    INNODB_REDO_LOG_ENABLE=706
    NDB_STORED_USER=707
    PASSWORDLESS_USER_ADMIN=708
    PERSIST_RO_VARIABLES_ADMIN=709
    REPLICATION_APPLIER=710
    REPLICATION_SLAVE_ADMIN=711
    RESOURCE_GROUP_ADMIN=712
    RESOURCE_GROUP_USER=713
    ROLE_ADMIN=714
    SERVICE_CONNECTION_ADMIN=715
    SESSION_VARIABLES_ADMIN=716
    SET_USER_ID=717
    SHOW_ROUTINE=718
    SYSTEM_VARIABLES_ADMIN=719
    TABLE_ENCRYPTION_ADMIN=720
    VERSION_TOKEN_ADMIN=721
    XA_RECOVER_ADMIN=722
    ARMSCII8=723
    ASCII=724
    BIG5=725
    CP1250=726
    CP1251=727
    CP1256=728
    CP1257=729
    CP850=730
    CP852=731
    CP866=732
    CP932=733
    DEC8=734
    EUCJPMS=735
    EUCKR=736
    GB18030=737
    GB2312=738
    GBK=739
    GEOSTD8=740
    GREEK=741
    HEBREW=742
    HP8=743
    KEYBCS2=744
    KOI8R=745
    KOI8U=746
    LATIN1=747
    LATIN2=748
    LATIN5=749
    LATIN7=750
    MACCE=751
    MACROMAN=752
    SJIS=753
    SWE7=754
    TIS620=755
    UCS2=756
    UJIS=757
    UTF16=758
    UTF16LE=759
    UTF32=760
    UTF8=761
    UTF8MB3=762
    UTF8MB4=763
    ARCHIVE=764
    BLACKHOLE=765
    CSV=766
    FEDERATED=767
    INNODB=768
    MEMORY=769
    MRG_MYISAM=770
    MYISAM=771
    NDB=772
    NDBCLUSTER=773
    PERFORMANCE_SCHEMA=774
    TOKUDB=775
    REPEATABLE=776
    COMMITTED=777
    UNCOMMITTED=778
    SERIALIZABLE=779
    GEOMETRYCOLLECTION=780
    GEOMCOLLECTION=781
    GEOMETRY=782
    LINESTRING=783
    MULTILINESTRING=784
    MULTIPOINT=785
    MULTIPOLYGON=786
    POINT=787
    POLYGON=788
    ABS=789
    ACOS=790
    ADDDATE=791
    ADDTIME=792
    AES_DECRYPT=793
    AES_ENCRYPT=794
    AREA=795
    ASBINARY=796
    ASIN=797
    ASTEXT=798
    ASWKB=799
    ASWKT=800
    ASYMMETRIC_DECRYPT=801
    ASYMMETRIC_DERIVE=802
    ASYMMETRIC_ENCRYPT=803
    ASYMMETRIC_SIGN=804
    ASYMMETRIC_VERIFY=805
    ATAN=806
    ATAN2=807
    BENCHMARK=808
    BIN=809
    BIT_COUNT=810
    BIT_LENGTH=811
    BUFFER=812
    CATALOG_NAME=813
    CEIL=814
    CEILING=815
    CENTROID=816
    CHARACTER_LENGTH=817
    CHARSET=818
    CHAR_LENGTH=819
    COERCIBILITY=820
    COLLATION=821
    COMPRESS=822
    CONCAT=823
    CONCAT_WS=824
    CONNECTION_ID=825
    CONV=826
    CONVERT_TZ=827
    COS=828
    COT=829
    CRC32=830
    CREATE_ASYMMETRIC_PRIV_KEY=831
    CREATE_ASYMMETRIC_PUB_KEY=832
    CREATE_DH_PARAMETERS=833
    CREATE_DIGEST=834
    CROSSES=835
    DATEDIFF=836
    DATE_FORMAT=837
    DAYNAME=838
    DAYOFMONTH=839
    DAYOFWEEK=840
    DAYOFYEAR=841
    DECODE=842
    DEGREES=843
    DES_DECRYPT=844
    DES_ENCRYPT=845
    DIMENSION=846
    DISJOINT=847
    ELT=848
    ENCODE=849
    ENCRYPT=850
    ENDPOINT=851
    ENGINE_ATTRIBUTE=852
    ENVELOPE=853
    EQUALS=854
    EXP=855
    EXPORT_SET=856
    EXTERIORRING=857
    EXTRACTVALUE=858
    FIELD=859
    FIND_IN_SET=860
    FLOOR=861
    FORMAT=862
    FOUND_ROWS=863
    FROM_BASE64=864
    FROM_DAYS=865
    FROM_UNIXTIME=866
    GEOMCOLLFROMTEXT=867
    GEOMCOLLFROMWKB=868
    GEOMETRYCOLLECTIONFROMTEXT=869
    GEOMETRYCOLLECTIONFROMWKB=870
    GEOMETRYFROMTEXT=871
    GEOMETRYFROMWKB=872
    GEOMETRYN=873
    GEOMETRYTYPE=874
    GEOMFROMTEXT=875
    GEOMFROMWKB=876
    GET_FORMAT=877
    GET_LOCK=878
    GLENGTH=879
    GREATEST=880
    GTID_SUBSET=881
    GTID_SUBTRACT=882
    HEX=883
    IFNULL=884
    INET6_ATON=885
    INET6_NTOA=886
    INET_ATON=887
    INET_NTOA=888
    INSTR=889
    INTERIORRINGN=890
    INTERSECTS=891
    ISCLOSED=892
    ISEMPTY=893
    ISNULL=894
    ISSIMPLE=895
    IS_FREE_LOCK=896
    IS_IPV4=897
    IS_IPV4_COMPAT=898
    IS_IPV4_MAPPED=899
    IS_IPV6=900
    IS_USED_LOCK=901
    LAST_INSERT_ID=902
    LCASE=903
    LEAST=904
    LENGTH=905
    LINEFROMTEXT=906
    LINEFROMWKB=907
    LINESTRINGFROMTEXT=908
    LINESTRINGFROMWKB=909
    LN=910
    LOAD_FILE=911
    LOCATE=912
    LOG=913
    LOG10=914
    LOG2=915
    LOWER=916
    LPAD=917
    LTRIM=918
    MAKEDATE=919
    MAKETIME=920
    MAKE_SET=921
    MASTER_POS_WAIT=922
    MBRCONTAINS=923
    MBRDISJOINT=924
    MBREQUAL=925
    MBRINTERSECTS=926
    MBROVERLAPS=927
    MBRTOUCHES=928
    MBRWITHIN=929
    MD5=930
    MLINEFROMTEXT=931
    MLINEFROMWKB=932
    MONTHNAME=933
    MPOINTFROMTEXT=934
    MPOINTFROMWKB=935
    MPOLYFROMTEXT=936
    MPOLYFROMWKB=937
    MULTILINESTRINGFROMTEXT=938
    MULTILINESTRINGFROMWKB=939
    MULTIPOINTFROMTEXT=940
    MULTIPOINTFROMWKB=941
    MULTIPOLYGONFROMTEXT=942
    MULTIPOLYGONFROMWKB=943
    NAME_CONST=944
    NULLIF=945
    NUMGEOMETRIES=946
    NUMINTERIORRINGS=947
    NUMPOINTS=948
    OCT=949
    OCTET_LENGTH=950
    ORD=951
    OVERLAPS=952
    PERIOD_ADD=953
    PERIOD_DIFF=954
    PI=955
    POINTFROMTEXT=956
    POINTFROMWKB=957
    POINTN=958
    POLYFROMTEXT=959
    POLYFROMWKB=960
    POLYGONFROMTEXT=961
    POLYGONFROMWKB=962
    POW=963
    POWER=964
    QUOTE=965
    RADIANS=966
    RAND=967
    RANDOM_BYTES=968
    RELEASE_LOCK=969
    REVERSE=970
    ROUND=971
    ROW_COUNT=972
    RPAD=973
    RTRIM=974
    SEC_TO_TIME=975
    SECONDARY_ENGINE_ATTRIBUTE=976
    SESSION_USER=977
    SHA=978
    SHA1=979
    SHA2=980
    SCHEMA_NAME=981
    SIGN=982
    SIN=983
    SLEEP=984
    SOUNDEX=985
    SQL_THREAD_WAIT_AFTER_GTIDS=986
    SQRT=987
    SRID=988
    STARTPOINT=989
    STRCMP=990
    STR_TO_DATE=991
    ST_AREA=992
    ST_ASBINARY=993
    ST_ASTEXT=994
    ST_ASWKB=995
    ST_ASWKT=996
    ST_BUFFER=997
    ST_CENTROID=998
    ST_CONTAINS=999
    ST_CROSSES=1000
    ST_DIFFERENCE=1001
    ST_DIMENSION=1002
    ST_DISJOINT=1003
    ST_DISTANCE=1004
    ST_ENDPOINT=1005
    ST_ENVELOPE=1006
    ST_EQUALS=1007
    ST_EXTERIORRING=1008
    ST_GEOMCOLLFROMTEXT=1009
    ST_GEOMCOLLFROMTXT=1010
    ST_GEOMCOLLFROMWKB=1011
    ST_GEOMETRYCOLLECTIONFROMTEXT=1012
    ST_GEOMETRYCOLLECTIONFROMWKB=1013
    ST_GEOMETRYFROMTEXT=1014
    ST_GEOMETRYFROMWKB=1015
    ST_GEOMETRYN=1016
    ST_GEOMETRYTYPE=1017
    ST_GEOMFROMTEXT=1018
    ST_GEOMFROMWKB=1019
    ST_INTERIORRINGN=1020
    ST_INTERSECTION=1021
    ST_INTERSECTS=1022
    ST_ISCLOSED=1023
    ST_ISEMPTY=1024
    ST_ISSIMPLE=1025
    ST_LINEFROMTEXT=1026
    ST_LINEFROMWKB=1027
    ST_LINESTRINGFROMTEXT=1028
    ST_LINESTRINGFROMWKB=1029
    ST_NUMGEOMETRIES=1030
    ST_NUMINTERIORRING=1031
    ST_NUMINTERIORRINGS=1032
    ST_NUMPOINTS=1033
    ST_OVERLAPS=1034
    ST_POINTFROMTEXT=1035
    ST_POINTFROMWKB=1036
    ST_POINTN=1037
    ST_POLYFROMTEXT=1038
    ST_POLYFROMWKB=1039
    ST_POLYGONFROMTEXT=1040
    ST_POLYGONFROMWKB=1041
    ST_SRID=1042
    ST_STARTPOINT=1043
    ST_SYMDIFFERENCE=1044
    ST_TOUCHES=1045
    ST_UNION=1046
    ST_WITHIN=1047
    ST_X=1048
    ST_Y=1049
    SUBDATE=1050
    SUBSTRING_INDEX=1051
    SUBTIME=1052
    SYSTEM_USER=1053
    TAN=1054
    TIMEDIFF=1055
    TIMESTAMPADD=1056
    TIMESTAMPDIFF=1057
    TIME_FORMAT=1058
    TIME_TO_SEC=1059
    TOUCHES=1060
    TO_BASE64=1061
    TO_DAYS=1062
    TO_SECONDS=1063
    UCASE=1064
    UNCOMPRESS=1065
    UNCOMPRESSED_LENGTH=1066
    UNHEX=1067
    UNIX_TIMESTAMP=1068
    UPDATEXML=1069
    UPPER=1070
    UUID=1071
    UUID_SHORT=1072
    VALIDATE_PASSWORD_STRENGTH=1073
    VERSION=1074
    WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1075
    WEEKDAY=1076
    WEEKOFYEAR=1077
    WEIGHT_STRING=1078
    WITHIN=1079
    YEARWEEK=1080
    Y_FUNCTION=1081
    X_FUNCTION=1082
    VIA=1083
    LASTVAL=1084
    NEXTVAL=1085
    SETVAL=1086
    PREVIOUS=1087
    PERSISTENT=1088
    BINLOG_MONITOR=1089
    BINLOG_REPLAY=1090
    FEDERATED_ADMIN=1091
    READ_ONLY_ADMIN=1092
    REPLICA=1093
    REPLICATION_MASTER_ADMIN=1094
    VAR_ASSIGN=1095
    PLUS_ASSIGN=1096
    MINUS_ASSIGN=1097
    MULT_ASSIGN=1098
    DIV_ASSIGN=1099
    MOD_ASSIGN=1100
    AND_ASSIGN=1101
    XOR_ASSIGN=1102
    OR_ASSIGN=1103
    STAR=1104
    DIVIDE=1105
    MODULE=1106
    PLUS=1107
    MINUS=1108
    DIV=1109
    MOD=1110
    EQUAL_SYMBOL=1111
    GREATER_SYMBOL=1112
    LESS_SYMBOL=1113
    EXCLAMATION_SYMBOL=1114
    BIT_NOT_OP=1115
    BIT_OR_OP=1116
    BIT_AND_OP=1117
    BIT_XOR_OP=1118
    DOT=1119
    LR_BRACKET=1120
    RR_BRACKET=1121
    COMMA=1122
    SEMI=1123
    AT_SIGN=1124
    ZERO_DECIMAL=1125
    ONE_DECIMAL=1126
    TWO_DECIMAL=1127
    SINGLE_QUOTE_SYMB=1128
    DOUBLE_QUOTE_SYMB=1129
    REVERSE_QUOTE_SYMB=1130
    COLON_SYMB=1131
    CHARSET_REVERSE_QOUTE_STRING=1132
    FILESIZE_LITERAL=1133
    START_NATIONAL_STRING_LITERAL=1134
    STRING_LITERAL=1135
    DECIMAL_LITERAL=1136
    HEXADECIMAL_LITERAL=1137
    REAL_LITERAL=1138
    NULL_SPEC_LITERAL=1139
    BIT_STRING=1140
    STRING_CHARSET_NAME=1141
    DOT_ID=1142
    ID=1143
    REVERSE_QUOTE_ID=1144
    STRING_USER_NAME=1145
    IP_ADDRESS=1146
    STRING_USER_NAME_MARIADB=1147
    LOCAL_ID=1148
    GLOBAL_ID=1149
    ERROR_RECONGNIGION=1150
    ENCRYPTED=1151
    ENCRYPTION_KEY_ID=1152

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MySqlParser.EOF, 0)

        def sqlStatements(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementsContext,0)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.MINUS)
            else:
                return self.getToken(MySqlParser.MINUS, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)




    def root(self):

        localctx = MySqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.ALTER) | (1 << MySqlParser.ANALYZE) | (1 << MySqlParser.CALL) | (1 << MySqlParser.CHANGE) | (1 << MySqlParser.CHECK) | (1 << MySqlParser.CREATE) | (1 << MySqlParser.DELETE) | (1 << MySqlParser.DESC) | (1 << MySqlParser.DESCRIBE) | (1 << MySqlParser.DROP) | (1 << MySqlParser.EXPLAIN))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (MySqlParser.GET - 68)) | (1 << (MySqlParser.GRANT - 68)) | (1 << (MySqlParser.INSERT - 68)) | (1 << (MySqlParser.KILL - 68)) | (1 << (MySqlParser.LOAD - 68)) | (1 << (MySqlParser.LOCK - 68)) | (1 << (MySqlParser.OPTIMIZE - 68)) | (1 << (MySqlParser.PURGE - 68)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (MySqlParser.RELEASE - 134)) | (1 << (MySqlParser.RENAME - 134)) | (1 << (MySqlParser.REPLACE - 134)) | (1 << (MySqlParser.RESIGNAL - 134)) | (1 << (MySqlParser.REVOKE - 134)) | (1 << (MySqlParser.SELECT - 134)) | (1 << (MySqlParser.SET - 134)) | (1 << (MySqlParser.SHOW - 134)) | (1 << (MySqlParser.SIGNAL - 134)) | (1 << (MySqlParser.UNLOCK - 134)) | (1 << (MySqlParser.UPDATE - 134)) | (1 << (MySqlParser.USE - 134)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (MySqlParser.BEGIN - 335)) | (1 << (MySqlParser.BINLOG - 335)) | (1 << (MySqlParser.CACHE - 335)) | (1 << (MySqlParser.CHECKSUM - 335)) | (1 << (MySqlParser.COMMIT - 335)) | (1 << (MySqlParser.DEALLOCATE - 335)) | (1 << (MySqlParser.DO - 335)))) != 0) or ((((_la - 420)) & ~0x3f) == 0 and ((1 << (_la - 420)) & ((1 << (MySqlParser.FLUSH - 420)) | (1 << (MySqlParser.HANDLER - 420)) | (1 << (MySqlParser.HELP - 420)) | (1 << (MySqlParser.INSTALL - 420)))) != 0) or ((((_la - 544)) & ~0x3f) == 0 and ((1 << (_la - 544)) & ((1 << (MySqlParser.PREPARE - 544)) | (1 << (MySqlParser.REPAIR - 544)) | (1 << (MySqlParser.RESET - 544)) | (1 << (MySqlParser.ROLLBACK - 544)) | (1 << (MySqlParser.SAVEPOINT - 544)))) != 0) or ((((_la - 612)) & ~0x3f) == 0 and ((1 << (_la - 612)) & ((1 << (MySqlParser.START - 612)) | (1 << (MySqlParser.STOP - 612)) | (1 << (MySqlParser.TRUNCATE - 612)) | (1 << (MySqlParser.UNINSTALL - 612)) | (1 << (MySqlParser.XA - 612)))) != 0) or _la==MySqlParser.EXECUTE or _la==MySqlParser.SHUTDOWN or _la==MySqlParser.LR_BRACKET or _la==MySqlParser.SEMI:
                self.state = 692
                self.sqlStatements()


            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.MINUS:
                self.state = 695
                self.match(MySqlParser.MINUS)
                self.state = 696
                self.match(MySqlParser.MINUS)


            self.state = 699
            self.match(MySqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SqlStatementContext,i)


        def emptyStatement_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.EmptyStatement_Context)
            else:
                return self.getTypedRuleContext(MySqlParser.EmptyStatement_Context,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SEMI)
            else:
                return self.getToken(MySqlParser.SEMI, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.MINUS)
            else:
                return self.getToken(MySqlParser.MINUS, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_sqlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatements" ):
                listener.enterSqlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatements" ):
                listener.exitSqlStatements(self)




    def sqlStatements(self):

        localctx = MySqlParser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 710
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.LR_BRACKET]:
                        self.state = 701
                        self.sqlStatement()
                        self.state = 704
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.MINUS:
                            self.state = 702
                            self.match(MySqlParser.MINUS)
                            self.state = 703
                            self.match(MySqlParser.MINUS)


                        self.state = 707
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                        if la_ == 1:
                            self.state = 706
                            self.match(MySqlParser.SEMI)


                        pass
                    elif token in [MySqlParser.SEMI]:
                        self.state = 709
                        self.emptyStatement_()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.LR_BRACKET]:
                self.state = 715
                self.sqlStatement()
                self.state = 721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.MINUS:
                        self.state = 716
                        self.match(MySqlParser.MINUS)
                        self.state = 717
                        self.match(MySqlParser.MINUS)


                    self.state = 720
                    self.match(MySqlParser.SEMI)


                pass
            elif token in [MySqlParser.SEMI]:
                self.state = 723
                self.emptyStatement_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(MySqlParser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(MySqlParser.DmlStatementContext,0)


        def transactionStatement(self):
            return self.getTypedRuleContext(MySqlParser.TransactionStatementContext,0)


        def replicationStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplicationStatementContext,0)


        def preparedStatement(self):
            return self.getTypedRuleContext(MySqlParser.PreparedStatementContext,0)


        def administrationStatement(self):
            return self.getTypedRuleContext(MySqlParser.AdministrationStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(MySqlParser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)




    def sqlStatement(self):

        localctx = MySqlParser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sqlStatement)
        try:
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.ddlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.dmlStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 728
                self.transactionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 729
                self.replicationStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 730
                self.preparedStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 731
                self.administrationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 732
                self.utilityStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatement_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(MySqlParser.SEMI, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_emptyStatement_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement_" ):
                listener.enterEmptyStatement_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement_" ):
                listener.exitEmptyStatement_(self)




    def emptyStatement_(self):

        localctx = MySqlParser.EmptyStatement_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_emptyStatement_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(MySqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(MySqlParser.CreateDatabaseContext,0)


        def createEvent(self):
            return self.getTypedRuleContext(MySqlParser.CreateEventContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(MySqlParser.CreateIndexContext,0)


        def createLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.CreateLogfileGroupContext,0)


        def createProcedure(self):
            return self.getTypedRuleContext(MySqlParser.CreateProcedureContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(MySqlParser.CreateFunctionContext,0)


        def createServer(self):
            return self.getTypedRuleContext(MySqlParser.CreateServerContext,0)


        def createTable(self):
            return self.getTypedRuleContext(MySqlParser.CreateTableContext,0)


        def createTablespaceInnodb(self):
            return self.getTypedRuleContext(MySqlParser.CreateTablespaceInnodbContext,0)


        def createTablespaceNdb(self):
            return self.getTypedRuleContext(MySqlParser.CreateTablespaceNdbContext,0)


        def createTrigger(self):
            return self.getTypedRuleContext(MySqlParser.CreateTriggerContext,0)


        def createView(self):
            return self.getTypedRuleContext(MySqlParser.CreateViewContext,0)


        def createRole(self):
            return self.getTypedRuleContext(MySqlParser.CreateRoleContext,0)


        def createSequence(self):
            return self.getTypedRuleContext(MySqlParser.CreateSequenceContext,0)


        def alterDatabase(self):
            return self.getTypedRuleContext(MySqlParser.AlterDatabaseContext,0)


        def alterEvent(self):
            return self.getTypedRuleContext(MySqlParser.AlterEventContext,0)


        def alterFunction(self):
            return self.getTypedRuleContext(MySqlParser.AlterFunctionContext,0)


        def alterInstance(self):
            return self.getTypedRuleContext(MySqlParser.AlterInstanceContext,0)


        def alterLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.AlterLogfileGroupContext,0)


        def alterProcedure(self):
            return self.getTypedRuleContext(MySqlParser.AlterProcedureContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(MySqlParser.AlterServerContext,0)


        def alterTable(self):
            return self.getTypedRuleContext(MySqlParser.AlterTableContext,0)


        def alterTablespace(self):
            return self.getTypedRuleContext(MySqlParser.AlterTablespaceContext,0)


        def alterView(self):
            return self.getTypedRuleContext(MySqlParser.AlterViewContext,0)


        def alterSequence(self):
            return self.getTypedRuleContext(MySqlParser.AlterSequenceContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(MySqlParser.DropDatabaseContext,0)


        def dropEvent(self):
            return self.getTypedRuleContext(MySqlParser.DropEventContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(MySqlParser.DropIndexContext,0)


        def dropLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.DropLogfileGroupContext,0)


        def dropProcedure(self):
            return self.getTypedRuleContext(MySqlParser.DropProcedureContext,0)


        def dropFunction(self):
            return self.getTypedRuleContext(MySqlParser.DropFunctionContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(MySqlParser.DropServerContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(MySqlParser.DropTableContext,0)


        def dropTablespace(self):
            return self.getTypedRuleContext(MySqlParser.DropTablespaceContext,0)


        def dropTrigger(self):
            return self.getTypedRuleContext(MySqlParser.DropTriggerContext,0)


        def dropView(self):
            return self.getTypedRuleContext(MySqlParser.DropViewContext,0)


        def dropRole(self):
            return self.getTypedRuleContext(MySqlParser.DropRoleContext,0)


        def dropSequence(self):
            return self.getTypedRuleContext(MySqlParser.DropSequenceContext,0)


        def setRole(self):
            return self.getTypedRuleContext(MySqlParser.SetRoleContext,0)


        def renameTable(self):
            return self.getTypedRuleContext(MySqlParser.RenameTableContext,0)


        def truncateTable(self):
            return self.getTypedRuleContext(MySqlParser.TruncateTableContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)




    def ddlStatement(self):

        localctx = MySqlParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ddlStatement)
        try:
            self.state = 778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.createEvent()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 739
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 740
                self.createLogfileGroup()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 741
                self.createProcedure()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 742
                self.createFunction()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 743
                self.createServer()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 744
                self.createTable()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 745
                self.createTablespaceInnodb()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 746
                self.createTablespaceNdb()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 747
                self.createTrigger()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 748
                self.createView()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 749
                self.createRole()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 750
                self.createSequence()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 751
                self.alterDatabase()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 752
                self.alterEvent()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 753
                self.alterFunction()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 754
                self.alterInstance()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 755
                self.alterLogfileGroup()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 756
                self.alterProcedure()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 757
                self.alterServer()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 758
                self.alterTable()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 759
                self.alterTablespace()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 760
                self.alterView()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 761
                self.alterSequence()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 762
                self.dropDatabase()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 763
                self.dropEvent()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 764
                self.dropIndex()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 765
                self.dropLogfileGroup()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 766
                self.dropProcedure()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 767
                self.dropFunction()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 768
                self.dropServer()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 769
                self.dropTable()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 770
                self.dropTablespace()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 771
                self.dropTrigger()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 772
                self.dropView()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 773
                self.dropRole()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 774
                self.dropSequence()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 775
                self.setRole()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 776
                self.renameTable()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 777
                self.truncateTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(MySqlParser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.DeleteStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplaceStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(MySqlParser.CallStatementContext,0)


        def loadDataStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoadDataStatementContext,0)


        def loadXmlStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoadXmlStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(MySqlParser.DoStatementContext,0)


        def handlerStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)




    def dmlStatement(self):

        localctx = MySqlParser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_dmlStatement)
        try:
            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.insertStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 782
                self.updateStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 783
                self.deleteStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 784
                self.replaceStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 785
                self.callStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 786
                self.loadDataStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 787
                self.loadXmlStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 788
                self.doStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 789
                self.handlerStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransaction(self):
            return self.getTypedRuleContext(MySqlParser.StartTransactionContext,0)


        def beginWork(self):
            return self.getTypedRuleContext(MySqlParser.BeginWorkContext,0)


        def commitWork(self):
            return self.getTypedRuleContext(MySqlParser.CommitWorkContext,0)


        def rollbackWork(self):
            return self.getTypedRuleContext(MySqlParser.RollbackWorkContext,0)


        def savepointStatement(self):
            return self.getTypedRuleContext(MySqlParser.SavepointStatementContext,0)


        def rollbackStatement(self):
            return self.getTypedRuleContext(MySqlParser.RollbackStatementContext,0)


        def releaseStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReleaseStatementContext,0)


        def lockTables(self):
            return self.getTypedRuleContext(MySqlParser.LockTablesContext,0)


        def unlockTables(self):
            return self.getTypedRuleContext(MySqlParser.UnlockTablesContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_transactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStatement" ):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStatement" ):
                listener.exitTransactionStatement(self)




    def transactionStatement(self):

        localctx = MySqlParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transactionStatement)
        try:
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.startTransaction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.beginWork()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 794
                self.commitWork()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 795
                self.rollbackWork()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 796
                self.savepointStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 797
                self.rollbackStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 798
                self.releaseStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 799
                self.lockTables()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 800
                self.unlockTables()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def changeMaster(self):
            return self.getTypedRuleContext(MySqlParser.ChangeMasterContext,0)


        def changeReplicationFilter(self):
            return self.getTypedRuleContext(MySqlParser.ChangeReplicationFilterContext,0)


        def purgeBinaryLogs(self):
            return self.getTypedRuleContext(MySqlParser.PurgeBinaryLogsContext,0)


        def resetMaster(self):
            return self.getTypedRuleContext(MySqlParser.ResetMasterContext,0)


        def resetSlave(self):
            return self.getTypedRuleContext(MySqlParser.ResetSlaveContext,0)


        def startSlave(self):
            return self.getTypedRuleContext(MySqlParser.StartSlaveContext,0)


        def stopSlave(self):
            return self.getTypedRuleContext(MySqlParser.StopSlaveContext,0)


        def startGroupReplication(self):
            return self.getTypedRuleContext(MySqlParser.StartGroupReplicationContext,0)


        def stopGroupReplication(self):
            return self.getTypedRuleContext(MySqlParser.StopGroupReplicationContext,0)


        def xaStartTransaction(self):
            return self.getTypedRuleContext(MySqlParser.XaStartTransactionContext,0)


        def xaEndTransaction(self):
            return self.getTypedRuleContext(MySqlParser.XaEndTransactionContext,0)


        def xaPrepareStatement(self):
            return self.getTypedRuleContext(MySqlParser.XaPrepareStatementContext,0)


        def xaCommitWork(self):
            return self.getTypedRuleContext(MySqlParser.XaCommitWorkContext,0)


        def xaRollbackWork(self):
            return self.getTypedRuleContext(MySqlParser.XaRollbackWorkContext,0)


        def xaRecoverWork(self):
            return self.getTypedRuleContext(MySqlParser.XaRecoverWorkContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_replicationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationStatement" ):
                listener.enterReplicationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationStatement" ):
                listener.exitReplicationStatement(self)




    def replicationStatement(self):

        localctx = MySqlParser.ReplicationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_replicationStatement)
        try:
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 803
                self.changeMaster()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.changeReplicationFilter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 805
                self.purgeBinaryLogs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 806
                self.resetMaster()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 807
                self.resetSlave()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 808
                self.startSlave()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 809
                self.stopSlave()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 810
                self.startGroupReplication()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 811
                self.stopGroupReplication()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 812
                self.xaStartTransaction()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 813
                self.xaEndTransaction()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 814
                self.xaPrepareStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 815
                self.xaCommitWork()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 816
                self.xaRollbackWork()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 817
                self.xaRecoverWork()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prepareStatement(self):
            return self.getTypedRuleContext(MySqlParser.PrepareStatementContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(MySqlParser.ExecuteStatementContext,0)


        def deallocatePrepare(self):
            return self.getTypedRuleContext(MySqlParser.DeallocatePrepareContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_preparedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparedStatement" ):
                listener.enterPreparedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparedStatement" ):
                listener.exitPreparedStatement(self)




    def preparedStatement(self):

        localctx = MySqlParser.PreparedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_preparedStatement)
        try:
            self.state = 823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.PREPARE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.prepareStatement()
                pass
            elif token in [MySqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.executeStatement()
                pass
            elif token in [MySqlParser.DROP, MySqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 822
                self.deallocatePrepare()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(MySqlParser.BlockStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(MySqlParser.CaseStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(MySqlParser.IfStatementContext,0)


        def leaveStatement(self):
            return self.getTypedRuleContext(MySqlParser.LeaveStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoopStatementContext,0)


        def repeatStatement(self):
            return self.getTypedRuleContext(MySqlParser.RepeatStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(MySqlParser.WhileStatementContext,0)


        def iterateStatement(self):
            return self.getTypedRuleContext(MySqlParser.IterateStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReturnStatementContext,0)


        def cursorStatement(self):
            return self.getTypedRuleContext(MySqlParser.CursorStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = MySqlParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compoundStatement)
        try:
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.caseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 827
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 828
                self.leaveStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 829
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 830
                self.repeatStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 831
                self.whileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 832
                self.iterateStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 833
                self.returnStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 834
                self.cursorStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdministrationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUser(self):
            return self.getTypedRuleContext(MySqlParser.AlterUserContext,0)


        def createUser(self):
            return self.getTypedRuleContext(MySqlParser.CreateUserContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(MySqlParser.DropUserContext,0)


        def grantStatement(self):
            return self.getTypedRuleContext(MySqlParser.GrantStatementContext,0)


        def grantProxy(self):
            return self.getTypedRuleContext(MySqlParser.GrantProxyContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(MySqlParser.RenameUserContext,0)


        def revokeStatement(self):
            return self.getTypedRuleContext(MySqlParser.RevokeStatementContext,0)


        def revokeProxy(self):
            return self.getTypedRuleContext(MySqlParser.RevokeProxyContext,0)


        def analyzeTable(self):
            return self.getTypedRuleContext(MySqlParser.AnalyzeTableContext,0)


        def checkTable(self):
            return self.getTypedRuleContext(MySqlParser.CheckTableContext,0)


        def checksumTable(self):
            return self.getTypedRuleContext(MySqlParser.ChecksumTableContext,0)


        def optimizeTable(self):
            return self.getTypedRuleContext(MySqlParser.OptimizeTableContext,0)


        def repairTable(self):
            return self.getTypedRuleContext(MySqlParser.RepairTableContext,0)


        def createUdfunction(self):
            return self.getTypedRuleContext(MySqlParser.CreateUdfunctionContext,0)


        def installPlugin(self):
            return self.getTypedRuleContext(MySqlParser.InstallPluginContext,0)


        def uninstallPlugin(self):
            return self.getTypedRuleContext(MySqlParser.UninstallPluginContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(MySqlParser.ShowStatementContext,0)


        def binlogStatement(self):
            return self.getTypedRuleContext(MySqlParser.BinlogStatementContext,0)


        def cacheIndexStatement(self):
            return self.getTypedRuleContext(MySqlParser.CacheIndexStatementContext,0)


        def flushStatement(self):
            return self.getTypedRuleContext(MySqlParser.FlushStatementContext,0)


        def killStatement(self):
            return self.getTypedRuleContext(MySqlParser.KillStatementContext,0)


        def loadIndexIntoCache(self):
            return self.getTypedRuleContext(MySqlParser.LoadIndexIntoCacheContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(MySqlParser.ResetStatementContext,0)


        def shutdownStatement(self):
            return self.getTypedRuleContext(MySqlParser.ShutdownStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_administrationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdministrationStatement" ):
                listener.enterAdministrationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdministrationStatement" ):
                listener.exitAdministrationStatement(self)




    def administrationStatement(self):

        localctx = MySqlParser.AdministrationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_administrationStatement)
        try:
            self.state = 862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.alterUser()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.createUser()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 839
                self.dropUser()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 840
                self.grantStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 841
                self.grantProxy()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 842
                self.renameUser()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 843
                self.revokeStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 844
                self.revokeProxy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 845
                self.analyzeTable()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 846
                self.checkTable()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 847
                self.checksumTable()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 848
                self.optimizeTable()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 849
                self.repairTable()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 850
                self.createUdfunction()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 851
                self.installPlugin()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 852
                self.uninstallPlugin()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 853
                self.setStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 854
                self.showStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 855
                self.binlogStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 856
                self.cacheIndexStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 857
                self.flushStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 858
                self.killStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 859
                self.loadIndexIntoCache()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 860
                self.resetStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 861
                self.shutdownStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDescribeStatement(self):
            return self.getTypedRuleContext(MySqlParser.SimpleDescribeStatementContext,0)


        def fullDescribeStatement(self):
            return self.getTypedRuleContext(MySqlParser.FullDescribeStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(MySqlParser.HelpStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MySqlParser.UseStatementContext,0)


        def signalStatement(self):
            return self.getTypedRuleContext(MySqlParser.SignalStatementContext,0)


        def resignalStatement(self):
            return self.getTypedRuleContext(MySqlParser.ResignalStatementContext,0)


        def diagnosticsStatement(self):
            return self.getTypedRuleContext(MySqlParser.DiagnosticsStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)




    def utilityStatement(self):

        localctx = MySqlParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_utilityStatement)
        try:
            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.simpleDescribeStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.fullDescribeStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 866
                self.helpStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 867
                self.useStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 868
                self.signalStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 869
                self.resignalStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 870
                self.diagnosticsStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)




    def createDatabase(self):

        localctx = MySqlParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(MySqlParser.CREATE)
            self.state = 874
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 875
                self.ifNotExists()


            self.state = 878
            self.uid()
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.CHARACTER) | (1 << MySqlParser.COLLATE) | (1 << MySqlParser.DEFAULT))) != 0) or _la==MySqlParser.CHAR or _la==MySqlParser.CHARSET:
                self.state = 879
                self.createDatabaseOption()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(MySqlParser.ScheduleExpressionContext,0)


        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def enableType(self):
            return self.getTypedRuleContext(MySqlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateEvent" ):
                listener.enterCreateEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateEvent" ):
                listener.exitCreateEvent(self)




    def createEvent(self):

        localctx = MySqlParser.CreateEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(MySqlParser.CREATE)
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 886
                self.ownerStatement()


            self.state = 889
            self.match(MySqlParser.EVENT)
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 890
                self.ifNotExists()


            self.state = 893
            self.fullId()
            self.state = 894
            self.match(MySqlParser.ON)
            self.state = 895
            self.match(MySqlParser.SCHEDULE)
            self.state = 896
            self.scheduleExpression()
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ON:
                self.state = 897
                self.match(MySqlParser.ON)
                self.state = 898
                self.match(MySqlParser.COMPLETION)
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 899
                    self.match(MySqlParser.NOT)


                self.state = 902
                self.match(MySqlParser.PRESERVE)


            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DISABLE or _la==MySqlParser.ENABLE:
                self.state = 905
                self.enableType()


            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 908
                self.match(MySqlParser.COMMENT)
                self.state = 909
                self.match(MySqlParser.STRING_LITERAL)


            self.state = 912
            self.match(MySqlParser.DO)
            self.state = 913
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.indexCategory = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)


        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)


        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ALGORITHM)
            else:
                return self.getToken(MySqlParser.ALGORITHM, i)

        def LOCK(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOCK)
            else:
                return self.getToken(MySqlParser.LOCK, i)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)

        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)

        def INPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.INPLACE)
            else:
                return self.getToken(MySqlParser.INPLACE, i)

        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COPY)
            else:
                return self.getToken(MySqlParser.COPY, i)

        def NOCOPY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NOCOPY)
            else:
                return self.getToken(MySqlParser.NOCOPY, i)

        def INSTANT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.INSTANT)
            else:
                return self.getToken(MySqlParser.INSTANT, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NONE)
            else:
                return self.getToken(MySqlParser.NONE, i)

        def SHARED(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SHARED)
            else:
                return self.getToken(MySqlParser.SHARED, i)

        def EXCLUSIVE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EXCLUSIVE)
            else:
                return self.getToken(MySqlParser.EXCLUSIVE, i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)




    def createIndex(self):

        localctx = MySqlParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(MySqlParser.CREATE)
            self.state = 918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OR:
                self.state = 916
                self.match(MySqlParser.OR)
                self.state = 917
                self.match(MySqlParser.REPLACE)


            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE:
                self.state = 920
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL or _la==MySqlParser.UNIQUE:
                self.state = 923
                localctx.indexCategory = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL or _la==MySqlParser.UNIQUE):
                    localctx.indexCategory = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 926
            self.match(MySqlParser.INDEX)
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 927
                self.match(MySqlParser.IF)
                self.state = 928
                self.match(MySqlParser.NOT)
                self.state = 929
                self.match(MySqlParser.EXISTS)


            self.state = 932
            self.uid()
            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.USING:
                self.state = 933
                self.indexType()


            self.state = 936
            self.match(MySqlParser.ON)
            self.state = 937
            self.tableName()
            self.state = 938
            self.indexColumnNames()
            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOWAIT or _la==MySqlParser.WAIT:
                self.state = 939
                self.waitNowaitClause()


            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.IGNORED or _la==MySqlParser.NOT or _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.CLUSTERING or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                self.state = 942
                self.indexOption()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 960
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 958
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.ALGORITHM]:
                        self.state = 948
                        self.match(MySqlParser.ALGORITHM)
                        self.state = 950
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.EQUAL_SYMBOL:
                            self.state = 949
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 952
                        localctx.algType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.COPY or _la==MySqlParser.INPLACE or _la==MySqlParser.INSTANT or _la==MySqlParser.NOCOPY):
                            localctx.algType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [MySqlParser.LOCK]:
                        self.state = 953
                        self.match(MySqlParser.LOCK)
                        self.state = 955
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.EQUAL_SYMBOL:
                            self.state = 954
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 957
                        localctx.lockType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.EXCLUSIVE or _la==MySqlParser.NONE or _la==MySqlParser.SHARED):
                            localctx.lockType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 962
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.undoFile = None # Token
            self.initSize = None # FileSizeLiteralContext
            self.undoSize = None # FileSizeLiteralContext
            self.redoSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.REDO_BUFFER_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLogfileGroup" ):
                listener.enterCreateLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLogfileGroup" ):
                listener.exitCreateLogfileGroup(self)




    def createLogfileGroup(self):

        localctx = MySqlParser.CreateLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_createLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(MySqlParser.CREATE)
            self.state = 964
            self.match(MySqlParser.LOGFILE)
            self.state = 965
            self.match(MySqlParser.GROUP)
            self.state = 966
            self.uid()
            self.state = 967
            self.match(MySqlParser.ADD)
            self.state = 968
            self.match(MySqlParser.UNDOFILE)
            self.state = 969
            localctx.undoFile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 970
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 971
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 974
                localctx.initSize = self.fileSizeLiteral()


            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.UNDO_BUFFER_SIZE:
                self.state = 977
                self.match(MySqlParser.UNDO_BUFFER_SIZE)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 978
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 981
                localctx.undoSize = self.fileSizeLiteral()


            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.REDO_BUFFER_SIZE:
                self.state = 984
                self.match(MySqlParser.REDO_BUFFER_SIZE)
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 985
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 988
                localctx.redoSize = self.fileSizeLiteral()


            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NODEGROUP:
                self.state = 991
                self.match(MySqlParser.NODEGROUP)
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 992
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 995
                self.uid()


            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 998
                self.match(MySqlParser.WAIT)


            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 1001
                self.match(MySqlParser.COMMENT)
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1002
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1005
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)


            self.state = 1008
            self.match(MySqlParser.ENGINE)
            self.state = 1010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 1009
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 1012
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateProcedure" ):
                listener.enterCreateProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateProcedure" ):
                listener.exitCreateProcedure(self)




    def createProcedure(self):

        localctx = MySqlParser.CreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_createProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.match(MySqlParser.CREATE)
            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 1015
                self.ownerStatement()


            self.state = 1018
            self.match(MySqlParser.PROCEDURE)
            self.state = 1019
            self.fullId()
            self.state = 1020
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.IN - 70)) | (1 << (MySqlParser.INOUT - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)) | (1 << (MySqlParser.OUT - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                self.state = 1021
                self.procedureParameter()


            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 1024
                self.match(MySqlParser.COMMA)
                self.state = 1025
                self.procedureParameter()
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1031
            self.match(MySqlParser.RR_BRACKET)
            self.state = 1035
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1032
                    self.routineOption() 
                self.state = 1037
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 1038
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReturnStatementContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)




    def createFunction(self):

        localctx = MySqlParser.CreateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(MySqlParser.CREATE)
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 1041
                self.ownerStatement()


            self.state = 1044
            self.match(MySqlParser.FUNCTION)
            self.state = 1045
            self.fullId()
            self.state = 1046
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                self.state = 1047
                self.functionParameter()


            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 1050
                self.match(MySqlParser.COMMA)
                self.state = 1051
                self.functionParameter()
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1057
            self.match(MySqlParser.RR_BRACKET)
            self.state = 1058
            self.match(MySqlParser.RETURNS)
            self.state = 1059
            self.dataType()
            self.state = 1063
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1060
                    self.routineOption() 
                self.state = 1065
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.BUCKETS, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DIAGNOSTICS, MySqlParser.DROP, MySqlParser.EXCEPT, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LEFT, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIMIZE, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.LR_BRACKET, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                self.state = 1066
                self.routineBody()
                pass
            elif token in [MySqlParser.RETURN]:
                self.state = 1067
                self.returnStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def roleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoleNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoleNameContext,i)


        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)




    def createRole(self):

        localctx = MySqlParser.CreateRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_createRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.match(MySqlParser.CREATE)
            self.state = 1071
            self.match(MySqlParser.ROLE)
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 1072
                self.match(MySqlParser.IF)
                self.state = 1073
                self.match(MySqlParser.NOT)
                self.state = 1074
                self.match(MySqlParser.EXISTS)


            self.state = 1077
            self.roleName()
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 1078
                self.match(MySqlParser.COMMA)
                self.state = 1079
                self.roleName()
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.wrapperName = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def WRAPPER(self):
            return self.getToken(MySqlParser.WRAPPER, 0)

        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ServerOptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateServer" ):
                listener.enterCreateServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateServer" ):
                listener.exitCreateServer(self)




    def createServer(self):

        localctx = MySqlParser.CreateServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_createServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(MySqlParser.CREATE)
            self.state = 1086
            self.match(MySqlParser.SERVER)
            self.state = 1087
            self.uid()
            self.state = 1088
            self.match(MySqlParser.FOREIGN)
            self.state = 1089
            self.match(MySqlParser.DATA)
            self.state = 1090
            self.match(MySqlParser.WRAPPER)
            self.state = 1091
            localctx.wrapperName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MYSQL or _la==MySqlParser.STRING_LITERAL):
                localctx.wrapperName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1092
            self.match(MySqlParser.OPTIONS)
            self.state = 1093
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1094
            self.serverOption()
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 1095
                self.match(MySqlParser.COMMA)
                self.state = 1096
                self.serverOption()
                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1102
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CopyCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateTableContext
            super().__init__(parser)
            self.parenthesisTable = None # TableNameContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def OR(self):
            return self.getToken(MySqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyCreateTable" ):
                listener.enterCopyCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyCreateTable" ):
                listener.exitCopyCreateTable(self)


    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.CreateDefinitionsContext,0)

        def OR(self):
            return self.getToken(MySqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)


    class QueryCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateTableContext
            super().__init__(parser)
            self.keyViolate = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def OR(self):
            return self.getToken(MySqlParser.OR, 0)
        def REPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.REPLACE)
            else:
                return self.getToken(MySqlParser.REPLACE, i)
        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.CreateDefinitionsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryCreateTable" ):
                listener.enterQueryCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryCreateTable" ):
                listener.exitQueryCreateTable(self)



    def createTable(self):

        localctx = MySqlParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.state = 1194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CopyCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.match(MySqlParser.CREATE)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.OR:
                    self.state = 1105
                    self.match(MySqlParser.OR)
                    self.state = 1106
                    self.match(MySqlParser.REPLACE)


                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.TEMPORARY:
                    self.state = 1109
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1112
                self.match(MySqlParser.TABLE)
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 1113
                    self.ifNotExists()


                self.state = 1116
                self.tableName()
                self.state = 1124
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.LIKE]:
                    self.state = 1117
                    self.match(MySqlParser.LIKE)
                    self.state = 1118
                    self.tableName()
                    pass
                elif token in [MySqlParser.LR_BRACKET]:
                    self.state = 1119
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1120
                    self.match(MySqlParser.LIKE)
                    self.state = 1121
                    localctx.parenthesisTable = self.tableName()
                    self.state = 1122
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = MySqlParser.QueryCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.match(MySqlParser.CREATE)
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.OR:
                    self.state = 1127
                    self.match(MySqlParser.OR)
                    self.state = 1128
                    self.match(MySqlParser.REPLACE)


                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.TEMPORARY:
                    self.state = 1131
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1134
                self.match(MySqlParser.TABLE)
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 1135
                    self.ifNotExists()


                self.state = 1138
                self.tableName()
                self.state = 1140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 1139
                    self.createDefinitions()


                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (MySqlParser.CHARACTER - 24)) | (1 << (MySqlParser.COLLATE - 24)) | (1 << (MySqlParser.DEFAULT - 24)) | (1 << (MySqlParser.INDEX - 24)))) != 0) or _la==MySqlParser.UNION or _la==MySqlParser.CHAR or ((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (MySqlParser.AUTOEXTEND_SIZE - 332)) | (1 << (MySqlParser.AUTO_INCREMENT - 332)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 332)) | (1 << (MySqlParser.CHECKSUM - 332)) | (1 << (MySqlParser.PAGE_CHECKSUM - 332)) | (1 << (MySqlParser.COMMENT - 332)) | (1 << (MySqlParser.COMPRESSION - 332)) | (1 << (MySqlParser.CONNECTION - 332)) | (1 << (MySqlParser.DATA - 332)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 332)) | (1 << (MySqlParser.ENCRYPTION - 332)))) != 0) or ((((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & ((1 << (MySqlParser.ENGINE - 398)) | (1 << (MySqlParser.INSERT_METHOD - 398)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 398)))) != 0) or ((((_la - 487)) & ~0x3f) == 0 and ((1 << (_la - 487)) & ((1 << (MySqlParser.MAX_ROWS - 487)) | (1 << (MySqlParser.MIN_ROWS - 487)) | (1 << (MySqlParser.PACK_KEYS - 487)) | (1 << (MySqlParser.PASSWORD - 487)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (MySqlParser.ROW_FORMAT - 585)) | (1 << (MySqlParser.START - 585)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 585)) | (1 << (MySqlParser.STATS_PERSISTENT - 585)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 585)) | (1 << (MySqlParser.STORAGE - 585)) | (1 << (MySqlParser.TABLESPACE - 585)) | (1 << (MySqlParser.TABLE_TYPE - 585)))) != 0) or _la==MySqlParser.CHARSET or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                    self.state = 1142
                    self.tableOption()
                    self.state = 1149
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (MySqlParser.CHARACTER - 24)) | (1 << (MySqlParser.COLLATE - 24)) | (1 << (MySqlParser.DEFAULT - 24)) | (1 << (MySqlParser.INDEX - 24)))) != 0) or _la==MySqlParser.UNION or _la==MySqlParser.CHAR or ((((_la - 332)) & ~0x3f) == 0 and ((1 << (_la - 332)) & ((1 << (MySqlParser.AUTOEXTEND_SIZE - 332)) | (1 << (MySqlParser.AUTO_INCREMENT - 332)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 332)) | (1 << (MySqlParser.CHECKSUM - 332)) | (1 << (MySqlParser.PAGE_CHECKSUM - 332)) | (1 << (MySqlParser.COMMENT - 332)) | (1 << (MySqlParser.COMPRESSION - 332)) | (1 << (MySqlParser.CONNECTION - 332)) | (1 << (MySqlParser.DATA - 332)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 332)) | (1 << (MySqlParser.ENCRYPTION - 332)))) != 0) or ((((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & ((1 << (MySqlParser.ENGINE - 398)) | (1 << (MySqlParser.INSERT_METHOD - 398)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 398)))) != 0) or ((((_la - 487)) & ~0x3f) == 0 and ((1 << (_la - 487)) & ((1 << (MySqlParser.MAX_ROWS - 487)) | (1 << (MySqlParser.MIN_ROWS - 487)) | (1 << (MySqlParser.PACK_KEYS - 487)) | (1 << (MySqlParser.PASSWORD - 487)))) != 0) or ((((_la - 585)) & ~0x3f) == 0 and ((1 << (_la - 585)) & ((1 << (MySqlParser.ROW_FORMAT - 585)) | (1 << (MySqlParser.START - 585)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 585)) | (1 << (MySqlParser.STATS_PERSISTENT - 585)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 585)) | (1 << (MySqlParser.STORAGE - 585)) | (1 << (MySqlParser.TABLESPACE - 585)) | (1 << (MySqlParser.TABLE_TYPE - 585)))) != 0) or _la==MySqlParser.CHARSET or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE or _la==MySqlParser.COMMA:
                        self.state = 1144
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.COMMA:
                            self.state = 1143
                            self.match(MySqlParser.COMMA)


                        self.state = 1146
                        self.tableOption()
                        self.state = 1151
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PARTITION:
                    self.state = 1154
                    self.partitionDefinitions()


                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE:
                    self.state = 1157
                    localctx.keyViolate = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE):
                        localctx.keyViolate = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 1160
                    self.match(MySqlParser.AS)


                self.state = 1163
                self.selectStatement()
                pass

            elif la_ == 3:
                localctx = MySqlParser.ColumnCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1165
                self.match(MySqlParser.CREATE)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.OR:
                    self.state = 1166
                    self.match(MySqlParser.OR)
                    self.state = 1167
                    self.match(MySqlParser.REPLACE)


                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.TEMPORARY:
                    self.state = 1170
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1173
                self.match(MySqlParser.TABLE)
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 1174
                    self.ifNotExists()


                self.state = 1177
                self.tableName()
                self.state = 1178
                self.createDefinitions()
                self.state = 1189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 1179
                    self.tableOption()
                    self.state = 1186
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1181
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySqlParser.COMMA:
                                self.state = 1180
                                self.match(MySqlParser.COMMA)


                            self.state = 1183
                            self.tableOption() 
                        self.state = 1188
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,79,self._ctx)



                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PARTITION:
                    self.state = 1191
                    self.partitionDefinitions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceInnodbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.fileBlockSize = None # FileSizeLiteralContext

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.FILE_BLOCK_SIZE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_createTablespaceInnodb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceInnodb" ):
                listener.enterCreateTablespaceInnodb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceInnodb" ):
                listener.exitCreateTablespaceInnodb(self)




    def createTablespaceInnodb(self):

        localctx = MySqlParser.CreateTablespaceInnodbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_createTablespaceInnodb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(MySqlParser.CREATE)
            self.state = 1197
            self.match(MySqlParser.TABLESPACE)
            self.state = 1198
            self.uid()
            self.state = 1199
            self.match(MySqlParser.ADD)
            self.state = 1200
            self.match(MySqlParser.DATAFILE)
            self.state = 1201
            localctx.datafile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FILE_BLOCK_SIZE:
                self.state = 1202
                self.match(MySqlParser.FILE_BLOCK_SIZE)
                self.state = 1203
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1204
                localctx.fileBlockSize = self.fileSizeLiteral()


            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ENGINE:
                self.state = 1207
                self.match(MySqlParser.ENGINE)
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1208
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1211
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceNdbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.extentSize = None # FileSizeLiteralContext
            self.initialSize = None # FileSizeLiteralContext
            self.autoextendSize = None # FileSizeLiteralContext
            self.maxSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def EXTENT_SIZE(self):
            return self.getToken(MySqlParser.EXTENT_SIZE, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)

        def MAX_SIZE(self):
            return self.getToken(MySqlParser.MAX_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createTablespaceNdb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceNdb" ):
                listener.enterCreateTablespaceNdb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceNdb" ):
                listener.exitCreateTablespaceNdb(self)




    def createTablespaceNdb(self):

        localctx = MySqlParser.CreateTablespaceNdbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createTablespaceNdb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(MySqlParser.CREATE)
            self.state = 1215
            self.match(MySqlParser.TABLESPACE)
            self.state = 1216
            self.uid()
            self.state = 1217
            self.match(MySqlParser.ADD)
            self.state = 1218
            self.match(MySqlParser.DATAFILE)
            self.state = 1219
            localctx.datafile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 1220
            self.match(MySqlParser.USE)
            self.state = 1221
            self.match(MySqlParser.LOGFILE)
            self.state = 1222
            self.match(MySqlParser.GROUP)
            self.state = 1223
            self.uid()
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENT_SIZE:
                self.state = 1224
                self.match(MySqlParser.EXTENT_SIZE)
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1225
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1228
                localctx.extentSize = self.fileSizeLiteral()


            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 1231
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1232
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1235
                localctx.initialSize = self.fileSizeLiteral()


            self.state = 1243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AUTOEXTEND_SIZE:
                self.state = 1238
                self.match(MySqlParser.AUTOEXTEND_SIZE)
                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1239
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1242
                localctx.autoextendSize = self.fileSizeLiteral()


            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.MAX_SIZE:
                self.state = 1245
                self.match(MySqlParser.MAX_SIZE)
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1246
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1249
                localctx.maxSize = self.fileSizeLiteral()


            self.state = 1257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NODEGROUP:
                self.state = 1252
                self.match(MySqlParser.NODEGROUP)
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1253
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1256
                self.uid()


            self.state = 1260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 1259
                self.match(MySqlParser.WAIT)


            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 1262
                self.match(MySqlParser.COMMENT)
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1263
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1266
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)


            self.state = 1269
            self.match(MySqlParser.ENGINE)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 1270
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 1273
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.thisTrigger = None # FullIdContext
            self.triggerTime = None # Token
            self.triggerEvent = None # Token
            self.triggerPlace = None # Token
            self.otherTrigger = None # FullIdContext

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def EACH(self):
            return self.getToken(MySqlParser.EACH, 0)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def BEFORE(self):
            return self.getToken(MySqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def FOLLOWS(self):
            return self.getToken(MySqlParser.FOLLOWS, 0)

        def PRECEDES(self):
            return self.getToken(MySqlParser.PRECEDES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTrigger" ):
                listener.enterCreateTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTrigger" ):
                listener.exitCreateTrigger(self)




    def createTrigger(self):

        localctx = MySqlParser.CreateTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_createTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(MySqlParser.CREATE)
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OR:
                self.state = 1276
                self.match(MySqlParser.OR)
                self.state = 1277
                self.match(MySqlParser.REPLACE)


            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 1280
                self.ownerStatement()


            self.state = 1283
            self.match(MySqlParser.TRIGGER)
            self.state = 1284
            localctx.thisTrigger = self.fullId()
            self.state = 1285
            localctx.triggerTime = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BEFORE or _la==MySqlParser.AFTER):
                localctx.triggerTime = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1286
            localctx.triggerEvent = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DELETE or _la==MySqlParser.INSERT or _la==MySqlParser.UPDATE):
                localctx.triggerEvent = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1287
            self.match(MySqlParser.ON)
            self.state = 1288
            self.tableName()
            self.state = 1289
            self.match(MySqlParser.FOR)
            self.state = 1290
            self.match(MySqlParser.EACH)
            self.state = 1291
            self.match(MySqlParser.ROW)
            self.state = 1294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 1292
                localctx.triggerPlace = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FOLLOWS or _la==MySqlParser.PRECEDES):
                    localctx.triggerPlace = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1293
                localctx.otherTrigger = self.fullId()


            self.state = 1296
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def commonTableExpressions(self):
            return self.getTypedRuleContext(MySqlParser.CommonTableExpressionsContext,0)


        def RECURSIVE(self):
            return self.getToken(MySqlParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)




    def withClause(self):

        localctx = MySqlParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(MySqlParser.WITH)
            self.state = 1300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1299
                self.match(MySqlParser.RECURSIVE)


            self.state = 1302
            self.commonTableExpressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonTableExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cteName(self):
            return self.getTypedRuleContext(MySqlParser.CteNameContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def dmlStatement(self):
            return self.getTypedRuleContext(MySqlParser.DmlStatementContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def cteColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CteColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CteColumnNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def commonTableExpressions(self):
            return self.getTypedRuleContext(MySqlParser.CommonTableExpressionsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_commonTableExpressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonTableExpressions" ):
                listener.enterCommonTableExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonTableExpressions" ):
                listener.exitCommonTableExpressions(self)




    def commonTableExpressions(self):

        localctx = MySqlParser.CommonTableExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_commonTableExpressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.cteName()
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 1305
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1306
                self.cteColumnName()
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 1307
                    self.match(MySqlParser.COMMA)
                    self.state = 1308
                    self.cteColumnName()
                    self.state = 1313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1314
                self.match(MySqlParser.RR_BRACKET)


            self.state = 1318
            self.match(MySqlParser.AS)
            self.state = 1319
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1320
            self.dmlStatement()
            self.state = 1321
            self.match(MySqlParser.RR_BRACKET)
            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMA:
                self.state = 1322
                self.match(MySqlParser.COMMA)
                self.state = 1323
                self.commonTableExpressions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CteNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_cteName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCteName" ):
                listener.enterCteName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCteName" ):
                listener.exitCteName(self)




    def cteName(self):

        localctx = MySqlParser.CteNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cteName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CteColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_cteColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCteColumnName" ):
                listener.enterCteColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCteColumnName" ):
                listener.exitCteColumnName(self)




    def cteColumnName(self):

        localctx = MySqlParser.CteColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_cteColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOption = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def withClause(self):
            return self.getTypedRuleContext(MySqlParser.WithClauseContext,0)


        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)




    def createView(self):

        localctx = MySqlParser.CreateViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_createView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(MySqlParser.CREATE)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OR:
                self.state = 1331
                self.match(MySqlParser.OR)
                self.state = 1332
                self.match(MySqlParser.REPLACE)


            self.state = 1338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALGORITHM:
                self.state = 1335
                self.match(MySqlParser.ALGORITHM)
                self.state = 1336
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1337
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.MERGE or _la==MySqlParser.TEMPTABLE or _la==MySqlParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 1340
                self.ownerStatement()


            self.state = 1346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SQL:
                self.state = 1343
                self.match(MySqlParser.SQL)
                self.state = 1344
                self.match(MySqlParser.SECURITY)
                self.state = 1345
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFINER or _la==MySqlParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1348
            self.match(MySqlParser.VIEW)
            self.state = 1349
            self.fullId()
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 1350
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1351
                self.uidList()
                self.state = 1352
                self.match(MySqlParser.RR_BRACKET)


            self.state = 1356
            self.match(MySqlParser.AS)
            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 1357
                self.withClause()


            self.state = 1360
            self.selectStatement()
            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 1361
                self.match(MySqlParser.WITH)
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL:
                    self.state = 1362
                    localctx.checkOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL):
                        localctx.checkOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1365
                self.match(MySqlParser.CHECK)
                self.state = 1366
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(MySqlParser.SEQUENCE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def sequenceSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SequenceSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SequenceSpecContext,i)


        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSequence" ):
                listener.enterCreateSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSequence" ):
                listener.exitCreateSequence(self)




    def createSequence(self):

        localctx = MySqlParser.CreateSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_createSequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.match(MySqlParser.CREATE)
            self.state = 1372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OR:
                self.state = 1370
                self.match(MySqlParser.OR)
                self.state = 1371
                self.match(MySqlParser.REPLACE)


            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.TEMPORARY:
                self.state = 1374
                self.match(MySqlParser.TEMPORARY)


            self.state = 1377
            self.match(MySqlParser.SEQUENCE)
            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 1378
                self.ifNotExists()


            self.state = 1381
            self.fullId()
            self.state = 1386
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1384
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                    if la_ == 1:
                        self.state = 1382
                        self.sequenceSpec()
                        pass

                    elif la_ == 2:
                        self.state = 1383
                        self.tableOption()
                        pass

             
                self.state = 1388
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SequenceSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(MySqlParser.INCREMENT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def MINVALUE(self):
            return self.getToken(MySqlParser.MINVALUE, 0)

        def NO(self):
            return self.getToken(MySqlParser.NO, 0)

        def NOMINVALUE(self):
            return self.getToken(MySqlParser.NOMINVALUE, 0)

        def MAXVALUE(self):
            return self.getToken(MySqlParser.MAXVALUE, 0)

        def NOMAXVALUE(self):
            return self.getToken(MySqlParser.NOMAXVALUE, 0)

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(MySqlParser.NOCACHE, 0)

        def CYCLE(self):
            return self.getToken(MySqlParser.CYCLE, 0)

        def NOCYCLE(self):
            return self.getToken(MySqlParser.NOCYCLE, 0)

        def RESTART(self):
            return self.getToken(MySqlParser.RESTART, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_sequenceSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequenceSpec" ):
                listener.enterSequenceSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequenceSpec" ):
                listener.exitSequenceSpec(self)




    def sequenceSpec(self):

        localctx = MySqlParser.SequenceSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_sequenceSpec)
        self._la = 0 # Token type
        try:
            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1389
                self.match(MySqlParser.INCREMENT)
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.BY or _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1390
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.BY or _la==MySqlParser.EQUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1393
                self.decimalLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1394
                self.match(MySqlParser.MINVALUE)
                self.state = 1396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1395
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1398
                self.decimalLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1399
                self.match(MySqlParser.NO)
                self.state = 1400
                self.match(MySqlParser.MINVALUE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1401
                self.match(MySqlParser.NOMINVALUE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1402
                self.match(MySqlParser.MAXVALUE)
                self.state = 1404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1403
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1406
                self.decimalLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1407
                self.match(MySqlParser.NO)
                self.state = 1408
                self.match(MySqlParser.MAXVALUE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1409
                self.match(MySqlParser.NOMAXVALUE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1410
                self.match(MySqlParser.START)
                self.state = 1412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH or _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1411
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.WITH or _la==MySqlParser.EQUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1414
                self.decimalLiteral()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1415
                self.match(MySqlParser.CACHE)
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1416
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1419
                self.decimalLiteral()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1420
                self.match(MySqlParser.NOCACHE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1421
                self.match(MySqlParser.CYCLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1422
                self.match(MySqlParser.NOCYCLE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1423
                self.match(MySqlParser.RESTART)
                self.state = 1425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH or _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1424
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.WITH or _la==MySqlParser.EQUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1427
                self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_createDatabaseOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseOption" ):
                listener.enterCreateDatabaseOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseOption" ):
                listener.exitCreateDatabaseOption(self)




    def createDatabaseOption(self):

        localctx = MySqlParser.CreateDatabaseOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_createDatabaseOption)
        self._la = 0 # Token type
        try:
            self.state = 1449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1430
                    self.match(MySqlParser.DEFAULT)


                self.state = 1433
                self.charSet()
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1434
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1439
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BINARY, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL]:
                    self.state = 1437
                    self.charsetName()
                    pass
                elif token in [MySqlParser.DEFAULT]:
                    self.state = 1438
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1441
                    self.match(MySqlParser.DEFAULT)


                self.state = 1444
                self.match(MySqlParser.COLLATE)
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1445
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1448
                self.collationName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_charSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharSet" ):
                listener.enterCharSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharSet" ):
                listener.exitCharSet(self)




    def charSet(self):

        localctx = MySqlParser.CharSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_charSet)
        try:
            self.state = 1456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1451
                self.match(MySqlParser.CHARACTER)
                self.state = 1452
                self.match(MySqlParser.SET)
                pass
            elif token in [MySqlParser.CHARSET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1453
                self.match(MySqlParser.CHARSET)
                pass
            elif token in [MySqlParser.CHAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1454
                self.match(MySqlParser.CHAR)
                self.state = 1455
                self.match(MySqlParser.SET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OwnerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def CURRENT_USER(self):
            return self.getToken(MySqlParser.CURRENT_USER, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ownerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwnerStatement" ):
                listener.enterOwnerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwnerStatement" ):
                listener.exitOwnerStatement(self)




    def ownerStatement(self):

        localctx = MySqlParser.OwnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ownerStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.match(MySqlParser.DEFINER)
            self.state = 1459
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 1466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.SERIAL, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.MEMORY, MySqlParser.CATALOG_NAME, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SCHEMA_NAME, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.STRING_USER_NAME, MySqlParser.STRING_USER_NAME_MARIADB, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                self.state = 1460
                self.userName()
                pass
            elif token in [MySqlParser.CURRENT_USER]:
                self.state = 1461
                self.match(MySqlParser.CURRENT_USER)
                self.state = 1464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 1462
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1463
                    self.match(MySqlParser.RR_BRACKET)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_scheduleExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PreciseScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ScheduleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(MySqlParser.AT, 0)
        def timestampValue(self):
            return self.getTypedRuleContext(MySqlParser.TimestampValueContext,0)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreciseSchedule" ):
                listener.enterPreciseSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreciseSchedule" ):
                listener.exitPreciseSchedule(self)


    class IntervalScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ScheduleExpressionContext
            super().__init__(parser)
            self.startTimestamp = None # TimestampValueContext
            self._intervalExpr = None # IntervalExprContext
            self.startIntervals = list() # of IntervalExprContexts
            self.endTimestamp = None # TimestampValueContext
            self.endIntervals = list() # of IntervalExprContexts
            self.copyFrom(ctx)

        def EVERY(self):
            return self.getToken(MySqlParser.EVERY, 0)
        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def STARTS(self):
            return self.getToken(MySqlParser.STARTS, 0)
        def ENDS(self):
            return self.getToken(MySqlParser.ENDS, 0)
        def timestampValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TimestampValueContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TimestampValueContext,i)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalSchedule" ):
                listener.enterIntervalSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalSchedule" ):
                listener.exitIntervalSchedule(self)



    def scheduleExpression(self):

        localctx = MySqlParser.ScheduleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_scheduleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.AT]:
                localctx = MySqlParser.PreciseScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1468
                self.match(MySqlParser.AT)
                self.state = 1469
                self.timestampValue()
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.PLUS:
                    self.state = 1470
                    self.intervalExpr()
                    self.state = 1475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.EVERY]:
                localctx = MySqlParser.IntervalScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1476
                self.match(MySqlParser.EVERY)
                self.state = 1479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1477
                    self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1478
                    self.expression(0)
                    pass


                self.state = 1481
                self.intervalType()
                self.state = 1490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STARTS:
                    self.state = 1482
                    self.match(MySqlParser.STARTS)
                    self.state = 1483
                    localctx.startTimestamp = self.timestampValue()
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.PLUS:
                        self.state = 1484
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.startIntervals.append(localctx._intervalExpr)
                        self.state = 1489
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ENDS:
                    self.state = 1492
                    self.match(MySqlParser.ENDS)
                    self.state = 1493
                    localctx.endTimestamp = self.timestampValue()
                    self.state = 1497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.PLUS:
                        self.state = 1494
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.endIntervals.append(localctx._intervalExpr)
                        self.state = 1499
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_timestampValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampValue" ):
                listener.enterTimestampValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampValue" ):
                listener.exitTimestampValue(self)




    def timestampValue(self):

        localctx = MySqlParser.TimestampValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_timestampValue)
        try:
            self.state = 1508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1504
                self.match(MySqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1505
                self.stringLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1506
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1507
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)

        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_intervalExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)




    def intervalExpr(self):

        localctx = MySqlParser.IntervalExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_intervalExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.match(MySqlParser.PLUS)
            self.state = 1511
            self.match(MySqlParser.INTERVAL)
            self.state = 1514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 1512
                self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 1513
                self.expression(0)
                pass


            self.state = 1516
            self.intervalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeBaseContext,0)


        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def YEAR_MONTH(self):
            return self.getToken(MySqlParser.YEAR_MONTH, 0)

        def DAY_HOUR(self):
            return self.getToken(MySqlParser.DAY_HOUR, 0)

        def DAY_MINUTE(self):
            return self.getToken(MySqlParser.DAY_MINUTE, 0)

        def DAY_SECOND(self):
            return self.getToken(MySqlParser.DAY_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(MySqlParser.HOUR_MINUTE, 0)

        def HOUR_SECOND(self):
            return self.getToken(MySqlParser.HOUR_SECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(MySqlParser.MINUTE_SECOND, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(MySqlParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(MySqlParser.MINUTE_MICROSECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(MySqlParser.HOUR_MICROSECOND, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(MySqlParser.DAY_MICROSECOND, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_intervalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)




    def intervalType(self):

        localctx = MySqlParser.IntervalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_intervalType)
        try:
            self.state = 1531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self.intervalTypeBase()
                pass
            elif token in [MySqlParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1519
                self.match(MySqlParser.YEAR)
                pass
            elif token in [MySqlParser.YEAR_MONTH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1520
                self.match(MySqlParser.YEAR_MONTH)
                pass
            elif token in [MySqlParser.DAY_HOUR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1521
                self.match(MySqlParser.DAY_HOUR)
                pass
            elif token in [MySqlParser.DAY_MINUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1522
                self.match(MySqlParser.DAY_MINUTE)
                pass
            elif token in [MySqlParser.DAY_SECOND]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1523
                self.match(MySqlParser.DAY_SECOND)
                pass
            elif token in [MySqlParser.HOUR_MINUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1524
                self.match(MySqlParser.HOUR_MINUTE)
                pass
            elif token in [MySqlParser.HOUR_SECOND]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1525
                self.match(MySqlParser.HOUR_SECOND)
                pass
            elif token in [MySqlParser.MINUTE_SECOND]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1526
                self.match(MySqlParser.MINUTE_SECOND)
                pass
            elif token in [MySqlParser.SECOND_MICROSECOND]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1527
                self.match(MySqlParser.SECOND_MICROSECOND)
                pass
            elif token in [MySqlParser.MINUTE_MICROSECOND]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1528
                self.match(MySqlParser.MINUTE_MICROSECOND)
                pass
            elif token in [MySqlParser.HOUR_MICROSECOND]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1529
                self.match(MySqlParser.HOUR_MICROSECOND)
                pass
            elif token in [MySqlParser.DAY_MICROSECOND]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1530
                self.match(MySqlParser.DAY_MICROSECOND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_enableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableType" ):
                listener.enterEnableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableType" ):
                listener.exitEnableType(self)




    def enableType(self):

        localctx = MySqlParser.EnableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_enableType)
        try:
            self.state = 1538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1533
                self.match(MySqlParser.ENABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1534
                self.match(MySqlParser.DISABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1535
                self.match(MySqlParser.DISABLE)
                self.state = 1536
                self.match(MySqlParser.ON)
                self.state = 1537
                self.match(MySqlParser.SLAVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def BTREE(self):
            return self.getToken(MySqlParser.BTREE, 0)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)

        def RTREE(self):
            return self.getToken(MySqlParser.RTREE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)




    def indexType(self):

        localctx = MySqlParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self.match(MySqlParser.USING)
            self.state = 1541
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BTREE or _la==MySqlParser.HASH or _la==MySqlParser.RTREE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)


        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def PARSER(self):
            return self.getToken(MySqlParser.PARSER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)

        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0)

        def SECONDARY_ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0)

        def CLUSTERING(self):
            return self.getToken(MySqlParser.CLUSTERING, 0)

        def YES(self):
            return self.getToken(MySqlParser.YES, 0)

        def NO(self):
            return self.getToken(MySqlParser.NO, 0)

        def IGNORED(self):
            return self.getToken(MySqlParser.IGNORED, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOption" ):
                listener.enterIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOption" ):
                listener.exitIndexOption(self)




    def indexOption(self):

        localctx = MySqlParser.IndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_indexOption)
        self._la = 0 # Token type
        try:
            self.state = 1573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.KEY_BLOCK_SIZE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1543
                self.match(MySqlParser.KEY_BLOCK_SIZE)
                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1544
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1547
                self.fileSizeLiteral()
                pass
            elif token in [MySqlParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1548
                self.indexType()
                pass
            elif token in [MySqlParser.WITH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1549
                self.match(MySqlParser.WITH)
                self.state = 1550
                self.match(MySqlParser.PARSER)
                self.state = 1551
                self.uid()
                pass
            elif token in [MySqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1552
                self.match(MySqlParser.COMMENT)
                self.state = 1553
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.INVISIBLE, MySqlParser.VISIBLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1554
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INVISIBLE or _la==MySqlParser.VISIBLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.ENGINE_ATTRIBUTE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1555
                self.match(MySqlParser.ENGINE_ATTRIBUTE)
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1556
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1559
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.SECONDARY_ENGINE_ATTRIBUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1560
                self.match(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE)
                self.state = 1562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1561
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1564
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.CLUSTERING]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1565
                self.match(MySqlParser.CLUSTERING)
                self.state = 1566
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1567
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO or _la==MySqlParser.YES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.IGNORED, MySqlParser.NOT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1571
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.IGNORED]:
                    self.state = 1568
                    self.match(MySqlParser.IGNORED)
                    pass
                elif token in [MySqlParser.NOT]:
                    self.state = 1569
                    self.match(MySqlParser.NOT)
                    self.state = 1570
                    self.match(MySqlParser.IGNORED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def OUT(self):
            return self.getToken(MySqlParser.OUT, 0)

        def INOUT(self):
            return self.getToken(MySqlParser.INOUT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)




    def procedureParameter(self):

        localctx = MySqlParser.ProcedureParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_procedureParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (MySqlParser.IN - 77)) | (1 << (MySqlParser.INOUT - 77)) | (1 << (MySqlParser.OUT - 77)))) != 0):
                self.state = 1575
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (MySqlParser.IN - 77)) | (1 << (MySqlParser.INOUT - 77)) | (1 << (MySqlParser.OUT - 77)))) != 0)):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1578
            self.uid()
            self.state = 1579
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)




    def functionParameter(self):

        localctx = MySqlParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.uid()
            self.state = 1582
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_routineOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RoutineBehaviorContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(MySqlParser.DETERMINISTIC, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBehavior" ):
                listener.enterRoutineBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBehavior" ):
                listener.exitRoutineBehavior(self)


    class RoutineLanguageContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LANGUAGE(self):
            return self.getToken(MySqlParser.LANGUAGE, 0)
        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineLanguage" ):
                listener.enterRoutineLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineLanguage" ):
                listener.exitRoutineLanguage(self)


    class RoutineCommentContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineComment" ):
                listener.enterRoutineComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineComment" ):
                listener.exitRoutineComment(self)


    class RoutineSecurityContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.context = None # Token
            self.copyFrom(ctx)

        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)
        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineSecurity" ):
                listener.enterRoutineSecurity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineSecurity" ):
                listener.exitRoutineSecurity(self)


    class RoutineDataContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(MySqlParser.CONTAINS, 0)
        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)
        def NO(self):
            return self.getToken(MySqlParser.NO, 0)
        def READS(self):
            return self.getToken(MySqlParser.READS, 0)
        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def MODIFIES(self):
            return self.getToken(MySqlParser.MODIFIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineData" ):
                listener.enterRoutineData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineData" ):
                listener.exitRoutineData(self)



    def routineOption(self):

        localctx = MySqlParser.RoutineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_routineOption)
        self._la = 0 # Token type
        try:
            self.state = 1607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.COMMENT]:
                localctx = MySqlParser.RoutineCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.match(MySqlParser.COMMENT)
                self.state = 1585
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.LANGUAGE]:
                localctx = MySqlParser.RoutineLanguageContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1586
                self.match(MySqlParser.LANGUAGE)
                self.state = 1587
                self.match(MySqlParser.SQL)
                pass
            elif token in [MySqlParser.DETERMINISTIC, MySqlParser.NOT]:
                localctx = MySqlParser.RoutineBehaviorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 1588
                    self.match(MySqlParser.NOT)


                self.state = 1591
                self.match(MySqlParser.DETERMINISTIC)
                pass
            elif token in [MySqlParser.MODIFIES, MySqlParser.READS, MySqlParser.CONTAINS, MySqlParser.NO]:
                localctx = MySqlParser.RoutineDataContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1602
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.CONTAINS]:
                    self.state = 1592
                    self.match(MySqlParser.CONTAINS)
                    self.state = 1593
                    self.match(MySqlParser.SQL)
                    pass
                elif token in [MySqlParser.NO]:
                    self.state = 1594
                    self.match(MySqlParser.NO)
                    self.state = 1595
                    self.match(MySqlParser.SQL)
                    pass
                elif token in [MySqlParser.READS]:
                    self.state = 1596
                    self.match(MySqlParser.READS)
                    self.state = 1597
                    self.match(MySqlParser.SQL)
                    self.state = 1598
                    self.match(MySqlParser.DATA)
                    pass
                elif token in [MySqlParser.MODIFIES]:
                    self.state = 1599
                    self.match(MySqlParser.MODIFIES)
                    self.state = 1600
                    self.match(MySqlParser.SQL)
                    self.state = 1601
                    self.match(MySqlParser.DATA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.SQL]:
                localctx = MySqlParser.RoutineSecurityContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1604
                self.match(MySqlParser.SQL)
                self.state = 1605
                self.match(MySqlParser.SECURITY)
                self.state = 1606
                localctx.context = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFINER or _la==MySqlParser.INVOKER):
                    localctx.context = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOST(self):
            return self.getToken(MySqlParser.HOST, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def SOCKET(self):
            return self.getToken(MySqlParser.SOCKET, 0)

        def OWNER(self):
            return self.getToken(MySqlParser.OWNER, 0)

        def PORT(self):
            return self.getToken(MySqlParser.PORT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_serverOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOption" ):
                listener.enterServerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOption" ):
                listener.exitServerOption(self)




    def serverOption(self):

        localctx = MySqlParser.ServerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_serverOption)
        try:
            self.state = 1623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.HOST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1609
                self.match(MySqlParser.HOST)
                self.state = 1610
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.DATABASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                self.match(MySqlParser.DATABASE)
                self.state = 1612
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.USER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1613
                self.match(MySqlParser.USER)
                self.state = 1614
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PASSWORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1615
                self.match(MySqlParser.PASSWORD)
                self.state = 1616
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.SOCKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1617
                self.match(MySqlParser.SOCKET)
                self.state = 1618
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.OWNER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1619
                self.match(MySqlParser.OWNER)
                self.state = 1620
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PORT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1621
                self.match(MySqlParser.PORT)
                self.state = 1622
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)




    def createDefinitions(self):

        localctx = MySqlParser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1626
            self.createDefinition()
            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 1627
                self.match(MySqlParser.COMMA)
                self.state = 1628
                self.createDefinition()
                self.state = 1633
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1634
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)


    class ConstraintDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableConstraint(self):
            return self.getTypedRuleContext(MySqlParser.TableConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintDeclaration" ):
                listener.enterConstraintDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintDeclaration" ):
                listener.exitConstraintDeclaration(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)



    def createDefinition(self):

        localctx = MySqlParser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_createDefinition)
        try:
            self.state = 1641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                localctx = MySqlParser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1636
                self.uid()
                self.state = 1637
                self.columnDefinition()
                pass
            elif token in [MySqlParser.CHECK, MySqlParser.CONSTRAINT, MySqlParser.FOREIGN, MySqlParser.PRIMARY, MySqlParser.UNIQUE]:
                localctx = MySqlParser.ConstraintDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1639
                self.tableConstraint()
                pass
            elif token in [MySqlParser.FULLTEXT, MySqlParser.INDEX, MySqlParser.KEY, MySqlParser.SPATIAL]:
                localctx = MySqlParser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1640
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = MySqlParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_columnDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            self.dataType()
            self.state = 1647
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1644
                    self.columnConstraint() 
                self.state = 1649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StorageColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.storageval = None # Token
            self.copyFrom(ctx)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)
        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)
        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageColumnConstraint" ):
                listener.enterStorageColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageColumnConstraint" ):
                listener.exitStorageColumnConstraint(self)


    class VisibilityColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)
        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityColumnConstraint" ):
                listener.enterVisibilityColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityColumnConstraint" ):
                listener.exitVisibilityColumnConstraint(self)


    class AutoIncrementColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)
        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)
        def currentTimestamp(self):
            return self.getTypedRuleContext(MySqlParser.CurrentTimestampContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutoIncrementColumnConstraint" ):
                listener.enterAutoIncrementColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutoIncrementColumnConstraint" ):
                listener.exitAutoIncrementColumnConstraint(self)


    class CommentColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumnConstraint" ):
                listener.enterCommentColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumnConstraint" ):
                listener.exitCommentColumnConstraint(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)


    class SerialDefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIAL(self):
            return self.getToken(MySqlParser.SERIAL, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerialDefaultColumnConstraint" ):
                listener.enterSerialDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerialDefaultColumnConstraint" ):
                listener.exitSerialDefaultColumnConstraint(self)


    class GeneratedColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def GENERATED(self):
            return self.getToken(MySqlParser.GENERATED, 0)
        def ALWAYS(self):
            return self.getToken(MySqlParser.ALWAYS, 0)
        def VIRTUAL(self):
            return self.getToken(MySqlParser.VIRTUAL, 0)
        def STORED(self):
            return self.getToken(MySqlParser.STORED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratedColumnConstraint" ):
                listener.enterGeneratedColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratedColumnConstraint" ):
                listener.exitGeneratedColumnConstraint(self)


    class FormatColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.colformat = None # Token
            self.copyFrom(ctx)

        def COLUMN_FORMAT(self):
            return self.getToken(MySqlParser.COLUMN_FORMAT, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormatColumnConstraint" ):
                listener.enterFormatColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormatColumnConstraint" ):
                listener.exitFormatColumnConstraint(self)


    class CollateColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateColumnConstraint" ):
                listener.enterCollateColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateColumnConstraint" ):
                listener.exitCollateColumnConstraint(self)


    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)


    class CheckColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckColumnConstraint" ):
                listener.enterCheckColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckColumnConstraint" ):
                listener.exitCheckColumnConstraint(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(MySqlParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)


    class DefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultColumnConstraint" ):
                listener.enterDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultColumnConstraint" ):
                listener.exitDefaultColumnConstraint(self)


    class ReferenceColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceColumnConstraint" ):
                listener.enterReferenceColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceColumnConstraint" ):
                listener.exitReferenceColumnConstraint(self)



    def columnConstraint(self):

        localctx = MySqlParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.NOT, MySqlParser.NULL_LITERAL, MySqlParser.NULL_SPEC_LITERAL]:
                localctx = MySqlParser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1650
                self.nullNotnull()
                pass
            elif token in [MySqlParser.DEFAULT]:
                localctx = MySqlParser.DefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1651
                self.match(MySqlParser.DEFAULT)
                self.state = 1652
                self.defaultValue()
                pass
            elif token in [MySqlParser.VISIBLE]:
                localctx = MySqlParser.VisibilityColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1653
                self.match(MySqlParser.VISIBLE)
                pass
            elif token in [MySqlParser.INVISIBLE]:
                localctx = MySqlParser.VisibilityColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1654
                self.match(MySqlParser.INVISIBLE)
                pass
            elif token in [MySqlParser.ON, MySqlParser.AUTO_INCREMENT]:
                localctx = MySqlParser.AutoIncrementColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1659
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.AUTO_INCREMENT]:
                    self.state = 1655
                    self.match(MySqlParser.AUTO_INCREMENT)
                    pass
                elif token in [MySqlParser.ON]:
                    self.state = 1656
                    self.match(MySqlParser.ON)
                    self.state = 1657
                    self.match(MySqlParser.UPDATE)
                    self.state = 1658
                    self.currentTimestamp()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.KEY, MySqlParser.PRIMARY]:
                localctx = MySqlParser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRIMARY:
                    self.state = 1661
                    self.match(MySqlParser.PRIMARY)


                self.state = 1664
                self.match(MySqlParser.KEY)
                pass
            elif token in [MySqlParser.UNIQUE]:
                localctx = MySqlParser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1665
                self.match(MySqlParser.UNIQUE)
                self.state = 1667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1666
                    self.match(MySqlParser.KEY)


                pass
            elif token in [MySqlParser.COMMENT]:
                localctx = MySqlParser.CommentColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1669
                self.match(MySqlParser.COMMENT)
                self.state = 1670
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.COLUMN_FORMAT]:
                localctx = MySqlParser.FormatColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1671
                self.match(MySqlParser.COLUMN_FORMAT)
                self.state = 1672
                localctx.colformat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.DYNAMIC or _la==MySqlParser.FIXED):
                    localctx.colformat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.STORAGE]:
                localctx = MySqlParser.StorageColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1673
                self.match(MySqlParser.STORAGE)
                self.state = 1674
                localctx.storageval = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.DISK or _la==MySqlParser.MEMORY):
                    localctx.storageval = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.REFERENCES]:
                localctx = MySqlParser.ReferenceColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1675
                self.referenceDefinition()
                pass
            elif token in [MySqlParser.COLLATE]:
                localctx = MySqlParser.CollateColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1676
                self.match(MySqlParser.COLLATE)
                self.state = 1677
                self.collationName()
                pass
            elif token in [MySqlParser.AS, MySqlParser.GENERATED]:
                localctx = MySqlParser.GeneratedColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.GENERATED:
                    self.state = 1678
                    self.match(MySqlParser.GENERATED)
                    self.state = 1679
                    self.match(MySqlParser.ALWAYS)


                self.state = 1682
                self.match(MySqlParser.AS)
                self.state = 1683
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1684
                self.expression(0)
                self.state = 1685
                self.match(MySqlParser.RR_BRACKET)
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STORED or _la==MySqlParser.VIRTUAL:
                    self.state = 1686
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.STORED or _la==MySqlParser.VIRTUAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [MySqlParser.SERIAL]:
                localctx = MySqlParser.SerialDefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1689
                self.match(MySqlParser.SERIAL)
                self.state = 1690
                self.match(MySqlParser.DEFAULT)
                self.state = 1691
                self.match(MySqlParser.VALUE)
                pass
            elif token in [MySqlParser.CHECK, MySqlParser.CONSTRAINT]:
                localctx = MySqlParser.CheckColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1692
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                        self.state = 1693
                        localctx.name = self.uid()




                self.state = 1698
                self.match(MySqlParser.CHECK)
                self.state = 1699
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1700
                self.expression(0)
                self.state = 1701
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniqueKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.index = None # UidContext
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyTableConstraint" ):
                listener.enterUniqueKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyTableConstraint" ):
                listener.exitUniqueKeyTableConstraint(self)


    class CheckTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableConstraint" ):
                listener.enterCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableConstraint" ):
                listener.exitCheckTableConstraint(self)


    class PrimaryKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyTableConstraint" ):
                listener.enterPrimaryKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyTableConstraint" ):
                listener.exitPrimaryKeyTableConstraint(self)


    class ForeignKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeignKeyTableConstraint" ):
                listener.enterForeignKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeignKeyTableConstraint" ):
                listener.exitForeignKeyTableConstraint(self)



    def tableConstraint(self):

        localctx = MySqlParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_tableConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PrimaryKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1705
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                        self.state = 1706
                        localctx.name = self.uid()




                self.state = 1711
                self.match(MySqlParser.PRIMARY)
                self.state = 1712
                self.match(MySqlParser.KEY)
                self.state = 1714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 1713
                    localctx.index = self.uid()


                self.state = 1717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 1716
                    self.indexType()


                self.state = 1719
                self.indexColumnNames()
                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.IGNORED or _la==MySqlParser.NOT or _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.CLUSTERING or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                    self.state = 1720
                    self.indexOption()
                    self.state = 1725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.UniqueKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1726
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                        self.state = 1727
                        localctx.name = self.uid()




                self.state = 1732
                self.match(MySqlParser.UNIQUE)
                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 1733
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 1736
                    localctx.index = self.uid()


                self.state = 1740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 1739
                    self.indexType()


                self.state = 1742
                self.indexColumnNames()
                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.IGNORED or _la==MySqlParser.NOT or _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.CLUSTERING or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                    self.state = 1743
                    self.indexOption()
                    self.state = 1748
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = MySqlParser.ForeignKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1749
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1751
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                        self.state = 1750
                        localctx.name = self.uid()




                self.state = 1755
                self.match(MySqlParser.FOREIGN)
                self.state = 1756
                self.match(MySqlParser.KEY)
                self.state = 1758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 1757
                    localctx.index = self.uid()


                self.state = 1760
                self.indexColumnNames()
                self.state = 1761
                self.referenceDefinition()
                pass

            elif la_ == 4:
                localctx = MySqlParser.CheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1763
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                        self.state = 1764
                        localctx.name = self.uid()




                self.state = 1769
                self.match(MySqlParser.CHECK)
                self.state = 1770
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1771
                self.expression(0)
                self.state = 1772
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchType = None # Token

        def REFERENCES(self):
            return self.getToken(MySqlParser.REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)


        def MATCH(self):
            return self.getToken(MySqlParser.MATCH, 0)

        def referenceAction(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceActionContext,0)


        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def PARTIAL(self):
            return self.getToken(MySqlParser.PARTIAL, 0)

        def SIMPLE(self):
            return self.getToken(MySqlParser.SIMPLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceDefinition" ):
                listener.enterReferenceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceDefinition" ):
                listener.exitReferenceDefinition(self)




    def referenceDefinition(self):

        localctx = MySqlParser.ReferenceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_referenceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1776
            self.match(MySqlParser.REFERENCES)
            self.state = 1777
            self.tableName()
            self.state = 1779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1778
                self.indexColumnNames()


            self.state = 1783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.MATCH:
                self.state = 1781
                self.match(MySqlParser.MATCH)
                self.state = 1782
                localctx.matchType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULL or _la==MySqlParser.PARTIAL or _la==MySqlParser.SIMPLE):
                    localctx.matchType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1785
                self.referenceAction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onDelete = None # ReferenceControlTypeContext
            self.onUpdate = None # ReferenceControlTypeContext

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def referenceControlType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ReferenceControlTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ReferenceControlTypeContext,i)


        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceAction" ):
                listener.enterReferenceAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceAction" ):
                listener.exitReferenceAction(self)




    def referenceAction(self):

        localctx = MySqlParser.ReferenceActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_referenceAction)
        try:
            self.state = 1804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1788
                self.match(MySqlParser.ON)
                self.state = 1789
                self.match(MySqlParser.DELETE)
                self.state = 1790
                localctx.onDelete = self.referenceControlType()
                self.state = 1794
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1791
                    self.match(MySqlParser.ON)
                    self.state = 1792
                    self.match(MySqlParser.UPDATE)
                    self.state = 1793
                    localctx.onUpdate = self.referenceControlType()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1796
                self.match(MySqlParser.ON)
                self.state = 1797
                self.match(MySqlParser.UPDATE)
                self.state = 1798
                localctx.onUpdate = self.referenceControlType()
                self.state = 1802
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1799
                    self.match(MySqlParser.ON)
                    self.state = 1800
                    self.match(MySqlParser.DELETE)
                    self.state = 1801
                    localctx.onDelete = self.referenceControlType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceControlTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NO(self):
            return self.getToken(MySqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(MySqlParser.ACTION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceControlType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceControlType" ):
                listener.enterReferenceControlType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceControlType" ):
                listener.exitReferenceControlType(self)




    def referenceControlType(self):

        localctx = MySqlParser.ReferenceControlTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_referenceControlType)
        try:
            self.state = 1812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.RESTRICT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1806
                self.match(MySqlParser.RESTRICT)
                pass
            elif token in [MySqlParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1807
                self.match(MySqlParser.CASCADE)
                pass
            elif token in [MySqlParser.SET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1808
                self.match(MySqlParser.SET)
                self.state = 1809
                self.match(MySqlParser.NULL_LITERAL)
                pass
            elif token in [MySqlParser.NO]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1810
                self.match(MySqlParser.NO)
                self.state = 1811
                self.match(MySqlParser.ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecialIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialIndexDeclaration" ):
                listener.enterSpecialIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialIndexDeclaration" ):
                listener.exitSpecialIndexDeclaration(self)


    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)



    def indexColumnDefinition(self):

        localctx = MySqlParser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.INDEX, MySqlParser.KEY]:
                localctx = MySqlParser.SimpleIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1814
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 1815
                    self.uid()


                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 1818
                    self.indexType()


                self.state = 1821
                self.indexColumnNames()
                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.IGNORED or _la==MySqlParser.NOT or _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.CLUSTERING or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                    self.state = 1822
                    self.indexOption()
                    self.state = 1827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.FULLTEXT, MySqlParser.SPATIAL]:
                localctx = MySqlParser.SpecialIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1828
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 1829
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 1832
                    self.uid()


                self.state = 1835
                self.indexColumnNames()
                self.state = 1839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.IGNORED or _la==MySqlParser.NOT or _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.CLUSTERING or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                    self.state = 1836
                    self.indexOption()
                    self.state = 1841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableOptionEngineContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEngine" ):
                listener.enterTableOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEngine" ):
                listener.exitTableOptionEngine(self)


    class TableOptionMaxRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMaxRows" ):
                listener.enterTableOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMaxRows" ):
                listener.exitTableOptionMaxRows(self)


    class TableOptionCollateContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCollate" ):
                listener.enterTableOptionCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCollate" ):
                listener.exitTableOptionCollate(self)


    class TableOptionPersistentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_PERSISTENT(self):
            return self.getToken(MySqlParser.STATS_PERSISTENT, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPersistent" ):
                listener.enterTableOptionPersistent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPersistent" ):
                listener.exitTableOptionPersistent(self)


    class TableOptionTablespaceContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def tablespaceStorage(self):
            return self.getTypedRuleContext(MySqlParser.TablespaceStorageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTablespace" ):
                listener.enterTableOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTablespace" ):
                listener.exitTableOptionTablespace(self)


    class TableOptionAutoextendSizeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAutoextendSize" ):
                listener.enterTableOptionAutoextendSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAutoextendSize" ):
                listener.exitTableOptionAutoextendSize(self)


    class TableOptionStartTransactionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START(self):
            return self.getToken(MySqlParser.START, 0)
        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionStartTransaction" ):
                listener.enterTableOptionStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionStartTransaction" ):
                listener.exitTableOptionStartTransaction(self)


    class TableOptionPackKeysContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def PACK_KEYS(self):
            return self.getToken(MySqlParser.PACK_KEYS, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPackKeys" ):
                listener.enterTableOptionPackKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPackKeys" ):
                listener.exitTableOptionPackKeys(self)


    class TableOptionPasswordContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPassword" ):
                listener.enterTableOptionPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPassword" ):
                listener.exitTableOptionPassword(self)


    class TableOptionUnionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionUnion" ):
                listener.enterTableOptionUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionUnion" ):
                listener.exitTableOptionUnion(self)


    class TableOptionSamplePageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionSamplePage" ):
                listener.enterTableOptionSamplePage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionSamplePage" ):
                listener.exitTableOptionSamplePage(self)


    class TableOptionCharsetContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCharset" ):
                listener.enterTableOptionCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCharset" ):
                listener.exitTableOptionCharset(self)


    class TableOptionIndexDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionIndexDirectory" ):
                listener.enterTableOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionIndexDirectory" ):
                listener.exitTableOptionIndexDirectory(self)


    class TableOptionTableTypeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE_TYPE(self):
            return self.getToken(MySqlParser.TABLE_TYPE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def tableType(self):
            return self.getTypedRuleContext(MySqlParser.TableTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTableType" ):
                listener.enterTableOptionTableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTableType" ):
                listener.exitTableOptionTableType(self)


    class TableOptionKeyBlockSizeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)
        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionKeyBlockSize" ):
                listener.enterTableOptionKeyBlockSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionKeyBlockSize" ):
                listener.exitTableOptionKeyBlockSize(self)


    class TableOptionEncryptionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENCRYPTION(self):
            return self.getToken(MySqlParser.ENCRYPTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEncryption" ):
                listener.enterTableOptionEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEncryption" ):
                listener.exitTableOptionEncryption(self)


    class TableOptionDataDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDataDirectory" ):
                listener.enterTableOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDataDirectory" ):
                listener.exitTableOptionDataDirectory(self)


    class TableOptionRecalculationContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_AUTO_RECALC(self):
            return self.getToken(MySqlParser.STATS_AUTO_RECALC, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRecalculation" ):
                listener.enterTableOptionRecalculation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRecalculation" ):
                listener.exitTableOptionRecalculation(self)


    class TableOptionAutoIncrementContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAutoIncrement" ):
                listener.enterTableOptionAutoIncrement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAutoIncrement" ):
                listener.exitTableOptionAutoIncrement(self)


    class TableOptionChecksumContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)
        def PAGE_CHECKSUM(self):
            return self.getToken(MySqlParser.PAGE_CHECKSUM, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionChecksum" ):
                listener.enterTableOptionChecksum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionChecksum" ):
                listener.exitTableOptionChecksum(self)


    class TableOptionDelayContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def DELAY_KEY_WRITE(self):
            return self.getToken(MySqlParser.DELAY_KEY_WRITE, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDelay" ):
                listener.enterTableOptionDelay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDelay" ):
                listener.exitTableOptionDelay(self)


    class TableOptionConnectionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionConnection" ):
                listener.enterTableOptionConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionConnection" ):
                listener.exitTableOptionConnection(self)


    class TableOptionSecondaryEngineAttributeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SECONDARY_ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionSecondaryEngineAttribute" ):
                listener.enterTableOptionSecondaryEngineAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionSecondaryEngineAttribute" ):
                listener.exitTableOptionSecondaryEngineAttribute(self)


    class TableOptionCommentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionComment" ):
                listener.enterTableOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionComment" ):
                listener.exitTableOptionComment(self)


    class TableOptionAverageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AVG_ROW_LENGTH(self):
            return self.getToken(MySqlParser.AVG_ROW_LENGTH, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAverage" ):
                listener.enterTableOptionAverage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAverage" ):
                listener.exitTableOptionAverage(self)


    class TableOptionRowFormatContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.rowFormat = None # Token
            self.copyFrom(ctx)

        def ROW_FORMAT(self):
            return self.getToken(MySqlParser.ROW_FORMAT, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def COMPRESSED(self):
            return self.getToken(MySqlParser.COMPRESSED, 0)
        def REDUNDANT(self):
            return self.getToken(MySqlParser.REDUNDANT, 0)
        def COMPACT(self):
            return self.getToken(MySqlParser.COMPACT, 0)
        def ID(self):
            return self.getToken(MySqlParser.ID, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRowFormat" ):
                listener.enterTableOptionRowFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRowFormat" ):
                listener.exitTableOptionRowFormat(self)


    class TableOptionCompressionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMPRESSION(self):
            return self.getToken(MySqlParser.COMPRESSION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def ID(self):
            return self.getToken(MySqlParser.ID, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCompression" ):
                listener.enterTableOptionCompression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCompression" ):
                listener.exitTableOptionCompression(self)


    class TableOptionInsertMethodContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.insertMethod = None # Token
            self.copyFrom(ctx)

        def INSERT_METHOD(self):
            return self.getToken(MySqlParser.INSERT_METHOD, 0)
        def NO(self):
            return self.getToken(MySqlParser.NO, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionInsertMethod" ):
                listener.enterTableOptionInsertMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionInsertMethod" ):
                listener.exitTableOptionInsertMethod(self)


    class TableOptionEngineAttributeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEngineAttribute" ):
                listener.enterTableOptionEngineAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEngineAttribute" ):
                listener.exitTableOptionEngineAttribute(self)


    class TableOptionMinRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMinRows" ):
                listener.enterTableOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMinRows" ):
                listener.exitTableOptionMinRows(self)



    def tableOption(self):

        localctx = MySqlParser.TableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_tableOption)
        self._la = 0 # Token type
        try:
            self.state = 2006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.TableOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1844
                self.match(MySqlParser.ENGINE)
                self.state = 1846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1845
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONNECT or ((((_la - 764)) & ~0x3f) == 0 and ((1 << (_la - 764)) & ((1 << (MySqlParser.ARCHIVE - 764)) | (1 << (MySqlParser.BLACKHOLE - 764)) | (1 << (MySqlParser.CSV - 764)) | (1 << (MySqlParser.FEDERATED - 764)) | (1 << (MySqlParser.INNODB - 764)) | (1 << (MySqlParser.MEMORY - 764)) | (1 << (MySqlParser.MRG_MYISAM - 764)) | (1 << (MySqlParser.MYISAM - 764)) | (1 << (MySqlParser.NDB - 764)) | (1 << (MySqlParser.NDBCLUSTER - 764)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 764)) | (1 << (MySqlParser.TOKUDB - 764)))) != 0) or ((((_la - 1135)) & ~0x3f) == 0 and ((1 << (_la - 1135)) & ((1 << (MySqlParser.STRING_LITERAL - 1135)) | (1 << (MySqlParser.ID - 1135)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1135)))) != 0):
                    self.state = 1848
                    self.engineName()


                pass

            elif la_ == 2:
                localctx = MySqlParser.TableOptionEngineAttributeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1851
                self.match(MySqlParser.ENGINE_ATTRIBUTE)
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1852
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1855
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = MySqlParser.TableOptionAutoextendSizeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1856
                self.match(MySqlParser.AUTOEXTEND_SIZE)
                self.state = 1858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1857
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1860
                self.decimalLiteral()
                pass

            elif la_ == 4:
                localctx = MySqlParser.TableOptionAutoIncrementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1861
                self.match(MySqlParser.AUTO_INCREMENT)
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1862
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1865
                self.decimalLiteral()
                pass

            elif la_ == 5:
                localctx = MySqlParser.TableOptionAverageContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1866
                self.match(MySqlParser.AVG_ROW_LENGTH)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1867
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1870
                self.decimalLiteral()
                pass

            elif la_ == 6:
                localctx = MySqlParser.TableOptionCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1871
                    self.match(MySqlParser.DEFAULT)


                self.state = 1874
                self.charSet()
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1875
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1880
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BINARY, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL]:
                    self.state = 1878
                    self.charsetName()
                    pass
                elif token in [MySqlParser.DEFAULT]:
                    self.state = 1879
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                localctx = MySqlParser.TableOptionChecksumContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1882
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CHECKSUM or _la==MySqlParser.PAGE_CHECKSUM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1883
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1886
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 8:
                localctx = MySqlParser.TableOptionCollateContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1887
                    self.match(MySqlParser.DEFAULT)


                self.state = 1890
                self.match(MySqlParser.COLLATE)
                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1891
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1894
                self.collationName()
                pass

            elif la_ == 9:
                localctx = MySqlParser.TableOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1895
                self.match(MySqlParser.COMMENT)
                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1896
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1899
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 10:
                localctx = MySqlParser.TableOptionCompressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1900
                self.match(MySqlParser.COMPRESSION)
                self.state = 1902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1901
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1904
                _la = self._input.LA(1)
                if not(_la==MySqlParser.STRING_LITERAL or _la==MySqlParser.ID):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 11:
                localctx = MySqlParser.TableOptionConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1905
                self.match(MySqlParser.CONNECTION)
                self.state = 1907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1906
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1909
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 12:
                localctx = MySqlParser.TableOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1910
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.DATA):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1911
                self.match(MySqlParser.DIRECTORY)
                self.state = 1913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1912
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1915
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 13:
                localctx = MySqlParser.TableOptionDelayContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1916
                self.match(MySqlParser.DELAY_KEY_WRITE)
                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1917
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1920
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 14:
                localctx = MySqlParser.TableOptionEncryptionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1921
                self.match(MySqlParser.ENCRYPTION)
                self.state = 1923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1922
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1925
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 15:
                localctx = MySqlParser.TableOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1926
                self.match(MySqlParser.INDEX)
                self.state = 1927
                self.match(MySqlParser.DIRECTORY)
                self.state = 1929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1928
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1931
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 16:
                localctx = MySqlParser.TableOptionInsertMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1932
                self.match(MySqlParser.INSERT_METHOD)
                self.state = 1934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1933
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1936
                localctx.insertMethod = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FIRST or _la==MySqlParser.LAST or _la==MySqlParser.NO):
                    localctx.insertMethod = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 17:
                localctx = MySqlParser.TableOptionKeyBlockSizeContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1937
                self.match(MySqlParser.KEY_BLOCK_SIZE)
                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1938
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1941
                self.fileSizeLiteral()
                pass

            elif la_ == 18:
                localctx = MySqlParser.TableOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1942
                self.match(MySqlParser.MAX_ROWS)
                self.state = 1944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1943
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1946
                self.decimalLiteral()
                pass

            elif la_ == 19:
                localctx = MySqlParser.TableOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1947
                self.match(MySqlParser.MIN_ROWS)
                self.state = 1949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1948
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1951
                self.decimalLiteral()
                pass

            elif la_ == 20:
                localctx = MySqlParser.TableOptionPackKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1952
                self.match(MySqlParser.PACK_KEYS)
                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1953
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1956
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                localctx = MySqlParser.TableOptionPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1957
                self.match(MySqlParser.PASSWORD)
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1958
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1961
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 22:
                localctx = MySqlParser.TableOptionRowFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1962
                self.match(MySqlParser.ROW_FORMAT)
                self.state = 1964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1963
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1966
                localctx.rowFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or ((((_la - 361)) & ~0x3f) == 0 and ((1 << (_la - 361)) & ((1 << (MySqlParser.COMPACT - 361)) | (1 << (MySqlParser.COMPRESSED - 361)) | (1 << (MySqlParser.DYNAMIC - 361)) | (1 << (MySqlParser.FIXED - 361)))) != 0) or _la==MySqlParser.REDUNDANT or _la==MySqlParser.ID):
                    localctx.rowFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                localctx = MySqlParser.TableOptionStartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1967
                self.match(MySqlParser.START)
                self.state = 1968
                self.match(MySqlParser.TRANSACTION)
                pass

            elif la_ == 24:
                localctx = MySqlParser.TableOptionSecondaryEngineAttributeContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1969
                self.match(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE)
                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1970
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1973
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 25:
                localctx = MySqlParser.TableOptionRecalculationContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1974
                self.match(MySqlParser.STATS_AUTO_RECALC)
                self.state = 1976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1975
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1978
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 26:
                localctx = MySqlParser.TableOptionPersistentContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1979
                self.match(MySqlParser.STATS_PERSISTENT)
                self.state = 1981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1980
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1983
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 27:
                localctx = MySqlParser.TableOptionSamplePageContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1984
                self.match(MySqlParser.STATS_SAMPLE_PAGES)
                self.state = 1986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1985
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1988
                self.decimalLiteral()
                pass

            elif la_ == 28:
                localctx = MySqlParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 1989
                self.match(MySqlParser.TABLESPACE)
                self.state = 1990
                self.uid()
                self.state = 1992
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                if la_ == 1:
                    self.state = 1991
                    self.tablespaceStorage()


                pass

            elif la_ == 29:
                localctx = MySqlParser.TableOptionTableTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 1994
                self.match(MySqlParser.TABLE_TYPE)
                self.state = 1995
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1996
                self.tableType()
                pass

            elif la_ == 30:
                localctx = MySqlParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 1997
                self.tablespaceStorage()
                pass

            elif la_ == 31:
                localctx = MySqlParser.TableOptionUnionContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 1998
                self.match(MySqlParser.UNION)
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1999
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2002
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2003
                self.tables()
                self.state = 2004
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def ODBC(self):
            return self.getToken(MySqlParser.ODBC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableType" ):
                listener.enterTableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableType" ):
                listener.exitTableType(self)




    def tableType(self):

        localctx = MySqlParser.TableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_tableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MYSQL or _la==MySqlParser.ODBC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceStorageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tablespaceStorage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceStorage" ):
                listener.enterTablespaceStorage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceStorage" ):
                listener.exitTablespaceStorage(self)




    def tablespaceStorage(self):

        localctx = MySqlParser.TablespaceStorageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_tablespaceStorage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self.match(MySqlParser.STORAGE)
            self.state = 2011
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.DISK or _la==MySqlParser.MEMORY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # DecimalLiteralContext
            self.subCount = None # DecimalLiteralContext

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BY)
            else:
                return self.getToken(MySqlParser.BY, i)

        def partitionFunctionDefinition(self):
            return self.getTypedRuleContext(MySqlParser.PartitionFunctionDefinitionContext,0)


        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def subpartitionFunctionDefinition(self):
            return self.getTypedRuleContext(MySqlParser.SubpartitionFunctionDefinitionContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def SUBPARTITIONS(self):
            return self.getToken(MySqlParser.SUBPARTITIONS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)




    def partitionDefinitions(self):

        localctx = MySqlParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2013
            self.match(MySqlParser.PARTITION)
            self.state = 2014
            self.match(MySqlParser.BY)
            self.state = 2015
            self.partitionFunctionDefinition()
            self.state = 2018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITIONS:
                self.state = 2016
                self.match(MySqlParser.PARTITIONS)
                self.state = 2017
                localctx.count = self.decimalLiteral()


            self.state = 2027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SUBPARTITION:
                self.state = 2020
                self.match(MySqlParser.SUBPARTITION)
                self.state = 2021
                self.match(MySqlParser.BY)
                self.state = 2022
                self.subpartitionFunctionDefinition()
                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.SUBPARTITIONS:
                    self.state = 2023
                    self.match(MySqlParser.SUBPARTITIONS)
                    self.state = 2024
                    localctx.subCount = self.decimalLiteral()




            self.state = 2040
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 2029
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2030
                self.partitionDefinition()
                self.state = 2035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2031
                    self.match(MySqlParser.COMMA)
                    self.state = 2032
                    self.partitionDefinition()
                    self.state = 2037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2038
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionFunctionKeyContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionKey" ):
                listener.enterPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionKey" ):
                listener.exitPartitionFunctionKey(self)


    class PartitionFunctionHashContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionHash" ):
                listener.enterPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionHash" ):
                listener.exitPartitionFunctionHash(self)


    class PartitionFunctionListContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(MySqlParser.LIST, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionList" ):
                listener.enterPartitionFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionList" ):
                listener.exitPartitionFunctionList(self)


    class PartitionFunctionRangeContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RANGE(self):
            return self.getToken(MySqlParser.RANGE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionRange" ):
                listener.enterPartitionFunctionRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionRange" ):
                listener.exitPartitionFunctionRange(self)



    def partitionFunctionDefinition(self):

        localctx = MySqlParser.PartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_partitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 2087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 2042
                    self.match(MySqlParser.LINEAR)


                self.state = 2045
                self.match(MySqlParser.HASH)
                self.state = 2046
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2047
                self.expression(0)
                self.state = 2048
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = MySqlParser.PartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 2050
                    self.match(MySqlParser.LINEAR)


                self.state = 2053
                self.match(MySqlParser.KEY)
                self.state = 2057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ALGORITHM:
                    self.state = 2054
                    self.match(MySqlParser.ALGORITHM)
                    self.state = 2055
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 2056
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.ONE_DECIMAL or _la==MySqlParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2059
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2060
                self.uidList()
                self.state = 2061
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = MySqlParser.PartitionFunctionRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2063
                self.match(MySqlParser.RANGE)
                self.state = 2073
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.LR_BRACKET]:
                    self.state = 2064
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2065
                    self.expression(0)
                    self.state = 2066
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                elif token in [MySqlParser.COLUMNS]:
                    self.state = 2068
                    self.match(MySqlParser.COLUMNS)
                    self.state = 2069
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2070
                    self.uidList()
                    self.state = 2071
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = MySqlParser.PartitionFunctionListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2075
                self.match(MySqlParser.LIST)
                self.state = 2085
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.LR_BRACKET]:
                    self.state = 2076
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2077
                    self.expression(0)
                    self.state = 2078
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                elif token in [MySqlParser.COLUMNS]:
                    self.state = 2080
                    self.match(MySqlParser.COLUMNS)
                    self.state = 2081
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2082
                    self.uidList()
                    self.state = 2083
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_subpartitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionHash" ):
                listener.enterSubPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionHash" ):
                listener.exitSubPartitionFunctionHash(self)


    class SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionKey" ):
                listener.enterSubPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionKey" ):
                listener.exitSubPartitionFunctionKey(self)



    def subpartitionFunctionDefinition(self):

        localctx = MySqlParser.SubpartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_subpartitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 2110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SubPartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 2089
                    self.match(MySqlParser.LINEAR)


                self.state = 2092
                self.match(MySqlParser.HASH)
                self.state = 2093
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2094
                self.expression(0)
                self.state = 2095
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = MySqlParser.SubPartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 2097
                    self.match(MySqlParser.LINEAR)


                self.state = 2100
                self.match(MySqlParser.KEY)
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ALGORITHM:
                    self.state = 2101
                    self.match(MySqlParser.ALGORITHM)
                    self.state = 2102
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 2103
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.ONE_DECIMAL or _la==MySqlParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2106
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2107
                self.uidList()
                self.state = 2108
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionComparisonContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def LESS(self):
            return self.getToken(MySqlParser.LESS, 0)
        def THAN(self):
            return self.getToken(MySqlParser.THAN, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionComparison" ):
                listener.enterPartitionComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionComparison" ):
                listener.exitPartitionComparison(self)


    class PartitionListAtomContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionListAtom" ):
                listener.enterPartitionListAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionListAtom" ):
                listener.exitPartitionListAtom(self)


    class PartitionListVectorContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def partitionDefinerVector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerVectorContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerVectorContext,i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionListVector" ):
                listener.enterPartitionListVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionListVector" ):
                listener.exitPartitionListVector(self)


    class PartitionSimpleContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSimple" ):
                listener.enterPartitionSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSimple" ):
                listener.exitPartitionSimple(self)



    def partitionDefinition(self):

        localctx = MySqlParser.PartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_partitionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 2258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PartitionComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2112
                self.match(MySqlParser.PARTITION)
                self.state = 2113
                self.uid()
                self.state = 2114
                self.match(MySqlParser.VALUES)
                self.state = 2115
                self.match(MySqlParser.LESS)
                self.state = 2116
                self.match(MySqlParser.THAN)
                self.state = 2117
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2118
                self.partitionDefinerAtom()
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2119
                    self.match(MySqlParser.COMMA)
                    self.state = 2120
                    self.partitionDefinerAtom()
                    self.state = 2125
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2126
                self.match(MySqlParser.RR_BRACKET)
                self.state = 2130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 359)) & ~0x3f) == 0 and ((1 << (_la - 359)) & ((1 << (MySqlParser.COMMENT - 359)) | (1 << (MySqlParser.DATA - 359)) | (1 << (MySqlParser.ENGINE - 359)))) != 0) or ((((_la - 487)) & ~0x3f) == 0 and ((1 << (_la - 487)) & ((1 << (MySqlParser.MAX_ROWS - 487)) | (1 << (MySqlParser.MIN_ROWS - 487)) | (1 << (MySqlParser.NODEGROUP - 487)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 2127
                    self.partitionOption()
                    self.state = 2132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 2133
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2134
                    self.subpartitionDefinition()
                    self.state = 2139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 2135
                        self.match(MySqlParser.COMMA)
                        self.state = 2136
                        self.subpartitionDefinition()
                        self.state = 2141
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2142
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                localctx = MySqlParser.PartitionComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2146
                self.match(MySqlParser.PARTITION)
                self.state = 2147
                self.uid()
                self.state = 2148
                self.match(MySqlParser.VALUES)
                self.state = 2149
                self.match(MySqlParser.LESS)
                self.state = 2150
                self.match(MySqlParser.THAN)
                self.state = 2151
                self.partitionDefinerAtom()
                self.state = 2155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 359)) & ~0x3f) == 0 and ((1 << (_la - 359)) & ((1 << (MySqlParser.COMMENT - 359)) | (1 << (MySqlParser.DATA - 359)) | (1 << (MySqlParser.ENGINE - 359)))) != 0) or ((((_la - 487)) & ~0x3f) == 0 and ((1 << (_la - 487)) & ((1 << (MySqlParser.MAX_ROWS - 487)) | (1 << (MySqlParser.MIN_ROWS - 487)) | (1 << (MySqlParser.NODEGROUP - 487)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 2152
                    self.partitionOption()
                    self.state = 2157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 2158
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2159
                    self.subpartitionDefinition()
                    self.state = 2164
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 2160
                        self.match(MySqlParser.COMMA)
                        self.state = 2161
                        self.subpartitionDefinition()
                        self.state = 2166
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2167
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 3:
                localctx = MySqlParser.PartitionListAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2171
                self.match(MySqlParser.PARTITION)
                self.state = 2172
                self.uid()
                self.state = 2173
                self.match(MySqlParser.VALUES)
                self.state = 2174
                self.match(MySqlParser.IN)
                self.state = 2175
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2176
                self.partitionDefinerAtom()
                self.state = 2181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2177
                    self.match(MySqlParser.COMMA)
                    self.state = 2178
                    self.partitionDefinerAtom()
                    self.state = 2183
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2184
                self.match(MySqlParser.RR_BRACKET)
                self.state = 2188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 359)) & ~0x3f) == 0 and ((1 << (_la - 359)) & ((1 << (MySqlParser.COMMENT - 359)) | (1 << (MySqlParser.DATA - 359)) | (1 << (MySqlParser.ENGINE - 359)))) != 0) or ((((_la - 487)) & ~0x3f) == 0 and ((1 << (_la - 487)) & ((1 << (MySqlParser.MAX_ROWS - 487)) | (1 << (MySqlParser.MIN_ROWS - 487)) | (1 << (MySqlParser.NODEGROUP - 487)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 2185
                    self.partitionOption()
                    self.state = 2190
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 2191
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2192
                    self.subpartitionDefinition()
                    self.state = 2197
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 2193
                        self.match(MySqlParser.COMMA)
                        self.state = 2194
                        self.subpartitionDefinition()
                        self.state = 2199
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2200
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 4:
                localctx = MySqlParser.PartitionListVectorContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2204
                self.match(MySqlParser.PARTITION)
                self.state = 2205
                self.uid()
                self.state = 2206
                self.match(MySqlParser.VALUES)
                self.state = 2207
                self.match(MySqlParser.IN)
                self.state = 2208
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2209
                self.partitionDefinerVector()
                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2210
                    self.match(MySqlParser.COMMA)
                    self.state = 2211
                    self.partitionDefinerVector()
                    self.state = 2216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2217
                self.match(MySqlParser.RR_BRACKET)
                self.state = 2221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 359)) & ~0x3f) == 0 and ((1 << (_la - 359)) & ((1 << (MySqlParser.COMMENT - 359)) | (1 << (MySqlParser.DATA - 359)) | (1 << (MySqlParser.ENGINE - 359)))) != 0) or ((((_la - 487)) & ~0x3f) == 0 and ((1 << (_la - 487)) & ((1 << (MySqlParser.MAX_ROWS - 487)) | (1 << (MySqlParser.MIN_ROWS - 487)) | (1 << (MySqlParser.NODEGROUP - 487)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 2218
                    self.partitionOption()
                    self.state = 2223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 2224
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2225
                    self.subpartitionDefinition()
                    self.state = 2230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 2226
                        self.match(MySqlParser.COMMA)
                        self.state = 2227
                        self.subpartitionDefinition()
                        self.state = 2232
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2233
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 5:
                localctx = MySqlParser.PartitionSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2237
                self.match(MySqlParser.PARTITION)
                self.state = 2238
                self.uid()
                self.state = 2242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 359)) & ~0x3f) == 0 and ((1 << (_la - 359)) & ((1 << (MySqlParser.COMMENT - 359)) | (1 << (MySqlParser.DATA - 359)) | (1 << (MySqlParser.ENGINE - 359)))) != 0) or ((((_la - 487)) & ~0x3f) == 0 and ((1 << (_la - 487)) & ((1 << (MySqlParser.MAX_ROWS - 487)) | (1 << (MySqlParser.MIN_ROWS - 487)) | (1 << (MySqlParser.NODEGROUP - 487)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 2239
                    self.partitionOption()
                    self.state = 2244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 2245
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2246
                    self.subpartitionDefinition()
                    self.state = 2251
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 2247
                        self.match(MySqlParser.COMMA)
                        self.state = 2248
                        self.subpartitionDefinition()
                        self.state = 2253
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2254
                    self.match(MySqlParser.RR_BRACKET)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def MAXVALUE(self):
            return self.getToken(MySqlParser.MAXVALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinerAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinerAtom" ):
                listener.enterPartitionDefinerAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinerAtom" ):
                listener.exitPartitionDefinerAtom(self)




    def partitionDefinerAtom(self):

        localctx = MySqlParser.PartitionDefinerAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_partitionDefinerAtom)
        try:
            self.state = 2263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2260
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2261
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2262
                self.match(MySqlParser.MAXVALUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerVectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinerVector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinerVector" ):
                listener.enterPartitionDefinerVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinerVector" ):
                listener.exitPartitionDefinerVector(self)




    def partitionDefinerVector(self):

        localctx = MySqlParser.PartitionDefinerVectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_partitionDefinerVector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2265
            self.match(MySqlParser.LR_BRACKET)
            self.state = 2266
            self.partitionDefinerAtom()
            self.state = 2269 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2267
                self.match(MySqlParser.COMMA)
                self.state = 2268
                self.partitionDefinerAtom()
                self.state = 2271 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySqlParser.COMMA):
                    break

            self.state = 2273
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_subpartitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartitionDefinition" ):
                listener.enterSubpartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartitionDefinition" ):
                listener.exitSubpartitionDefinition(self)




    def subpartitionDefinition(self):

        localctx = MySqlParser.SubpartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_subpartitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self.match(MySqlParser.SUBPARTITION)
            self.state = 2276
            self.uid()
            self.state = 2280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DEFAULT or _la==MySqlParser.INDEX or ((((_la - 359)) & ~0x3f) == 0 and ((1 << (_la - 359)) & ((1 << (MySqlParser.COMMENT - 359)) | (1 << (MySqlParser.DATA - 359)) | (1 << (MySqlParser.ENGINE - 359)))) != 0) or ((((_la - 487)) & ~0x3f) == 0 and ((1 << (_la - 487)) & ((1 << (MySqlParser.MAX_ROWS - 487)) | (1 << (MySqlParser.MIN_ROWS - 487)) | (1 << (MySqlParser.NODEGROUP - 487)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                self.state = 2277
                self.partitionOption()
                self.state = 2282
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionOptionCommentContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionComment" ):
                listener.enterPartitionOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionComment" ):
                listener.exitPartitionOptionComment(self)


    class PartitionOptionNodeGroupContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.nodegroup = None # UidContext
            self.copyFrom(ctx)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionNodeGroup" ):
                listener.enterPartitionOptionNodeGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionNodeGroup" ):
                listener.exitPartitionOptionNodeGroup(self)


    class PartitionOptionIndexDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.indexDirectory = None # Token
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionIndexDirectory" ):
                listener.enterPartitionOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionIndexDirectory" ):
                listener.exitPartitionOptionIndexDirectory(self)


    class PartitionOptionMaxRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.maxRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMaxRows" ):
                listener.enterPartitionOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMaxRows" ):
                listener.exitPartitionOptionMaxRows(self)


    class PartitionOptionTablespaceContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.tablespace = None # UidContext
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionTablespace" ):
                listener.enterPartitionOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionTablespace" ):
                listener.exitPartitionOptionTablespace(self)


    class PartitionOptionEngineContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionEngine" ):
                listener.enterPartitionOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionEngine" ):
                listener.exitPartitionOptionEngine(self)


    class PartitionOptionMinRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.minRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMinRows" ):
                listener.enterPartitionOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMinRows" ):
                listener.exitPartitionOptionMinRows(self)


    class PartitionOptionDataDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.dataDirectory = None # Token
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionDataDirectory" ):
                listener.enterPartitionOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionDataDirectory" ):
                listener.exitPartitionOptionDataDirectory(self)



    def partitionOption(self):

        localctx = MySqlParser.PartitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_partitionOption)
        self._la = 0 # Token type
        try:
            self.state = 2331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DEFAULT, MySqlParser.ENGINE, MySqlParser.STORAGE]:
                localctx = MySqlParser.PartitionOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 2283
                    self.match(MySqlParser.DEFAULT)


                self.state = 2287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STORAGE:
                    self.state = 2286
                    self.match(MySqlParser.STORAGE)


                self.state = 2289
                self.match(MySqlParser.ENGINE)
                self.state = 2291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2290
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2293
                self.engineName()
                pass
            elif token in [MySqlParser.COMMENT]:
                localctx = MySqlParser.PartitionOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2294
                self.match(MySqlParser.COMMENT)
                self.state = 2296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2295
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2298
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.DATA]:
                localctx = MySqlParser.PartitionOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2299
                self.match(MySqlParser.DATA)
                self.state = 2300
                self.match(MySqlParser.DIRECTORY)
                self.state = 2302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2301
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2304
                localctx.dataDirectory = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.INDEX]:
                localctx = MySqlParser.PartitionOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2305
                self.match(MySqlParser.INDEX)
                self.state = 2306
                self.match(MySqlParser.DIRECTORY)
                self.state = 2308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2307
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2310
                localctx.indexDirectory = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.MAX_ROWS]:
                localctx = MySqlParser.PartitionOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2311
                self.match(MySqlParser.MAX_ROWS)
                self.state = 2313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2312
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2315
                localctx.maxRows = self.decimalLiteral()
                pass
            elif token in [MySqlParser.MIN_ROWS]:
                localctx = MySqlParser.PartitionOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2316
                self.match(MySqlParser.MIN_ROWS)
                self.state = 2318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2317
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2320
                localctx.minRows = self.decimalLiteral()
                pass
            elif token in [MySqlParser.TABLESPACE]:
                localctx = MySqlParser.PartitionOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2321
                self.match(MySqlParser.TABLESPACE)
                self.state = 2323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2322
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2325
                localctx.tablespace = self.uid()
                pass
            elif token in [MySqlParser.NODEGROUP]:
                localctx = MySqlParser.PartitionOptionNodeGroupContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2326
                self.match(MySqlParser.NODEGROUP)
                self.state = 2328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2327
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2330
                localctx.nodegroup = self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterDatabase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUpgradeNameContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)
        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def NAME(self):
            return self.getToken(MySqlParser.NAME, 0)
        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUpgradeName" ):
                listener.enterAlterUpgradeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUpgradeName" ):
                listener.exitAlterUpgradeName(self)


    class AlterSimpleDatabaseContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDatabaseOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSimpleDatabase" ):
                listener.enterAlterSimpleDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSimpleDatabase" ):
                listener.exitAlterSimpleDatabase(self)



    def alterDatabase(self):

        localctx = MySqlParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterDatabase)
        self._la = 0 # Token type
        try:
            self.state = 2351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterSimpleDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2333
                self.match(MySqlParser.ALTER)
                self.state = 2334
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 2335
                    self.uid()


                self.state = 2339 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2338
                    self.createDatabaseOption()
                    self.state = 2341 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.CHARACTER) | (1 << MySqlParser.COLLATE) | (1 << MySqlParser.DEFAULT))) != 0) or _la==MySqlParser.CHAR or _la==MySqlParser.CHARSET):
                        break

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterUpgradeNameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2343
                self.match(MySqlParser.ALTER)
                self.state = 2344
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2345
                self.uid()
                self.state = 2346
                self.match(MySqlParser.UPGRADE)
                self.state = 2347
                self.match(MySqlParser.DATA)
                self.state = 2348
                self.match(MySqlParser.DIRECTORY)
                self.state = 2349
                self.match(MySqlParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(MySqlParser.ScheduleExpressionContext,0)


        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def enableType(self):
            return self.getTypedRuleContext(MySqlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterEvent" ):
                listener.enterAlterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterEvent" ):
                listener.exitAlterEvent(self)




    def alterEvent(self):

        localctx = MySqlParser.AlterEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.match(MySqlParser.ALTER)
            self.state = 2355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 2354
                self.ownerStatement()


            self.state = 2357
            self.match(MySqlParser.EVENT)
            self.state = 2358
            self.fullId()
            self.state = 2362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.state = 2359
                self.match(MySqlParser.ON)
                self.state = 2360
                self.match(MySqlParser.SCHEDULE)
                self.state = 2361
                self.scheduleExpression()


            self.state = 2370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ON:
                self.state = 2364
                self.match(MySqlParser.ON)
                self.state = 2365
                self.match(MySqlParser.COMPLETION)
                self.state = 2367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 2366
                    self.match(MySqlParser.NOT)


                self.state = 2369
                self.match(MySqlParser.PRESERVE)


            self.state = 2375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 2372
                self.match(MySqlParser.RENAME)
                self.state = 2373
                self.match(MySqlParser.TO)
                self.state = 2374
                self.fullId()


            self.state = 2378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DISABLE or _la==MySqlParser.ENABLE:
                self.state = 2377
                self.enableType()


            self.state = 2382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 2380
                self.match(MySqlParser.COMMENT)
                self.state = 2381
                self.match(MySqlParser.STRING_LITERAL)


            self.state = 2386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 2384
                self.match(MySqlParser.DO)
                self.state = 2385
                self.routineBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_alterFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterFunction" ):
                listener.enterAlterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterFunction" ):
                listener.exitAlterFunction(self)




    def alterFunction(self):

        localctx = MySqlParser.AlterFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alterFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2388
            self.match(MySqlParser.ALTER)
            self.state = 2389
            self.match(MySqlParser.FUNCTION)
            self.state = 2390
            self.fullId()
            self.state = 2394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DETERMINISTIC or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (MySqlParser.MODIFIES - 108)) | (1 << (MySqlParser.NOT - 108)) | (1 << (MySqlParser.READS - 108)) | (1 << (MySqlParser.SQL - 108)))) != 0) or _la==MySqlParser.COMMENT or _la==MySqlParser.CONTAINS or _la==MySqlParser.LANGUAGE or _la==MySqlParser.NO:
                self.state = 2391
                self.routineOption()
                self.state = 2396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterInstanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def INSTANCE(self):
            return self.getToken(MySqlParser.INSTANCE, 0)

        def ROTATE(self):
            return self.getToken(MySqlParser.ROTATE, 0)

        def INNODB(self):
            return self.getToken(MySqlParser.INNODB, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterInstance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterInstance" ):
                listener.enterAlterInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterInstance" ):
                listener.exitAlterInstance(self)




    def alterInstance(self):

        localctx = MySqlParser.AlterInstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_alterInstance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2397
            self.match(MySqlParser.ALTER)
            self.state = 2398
            self.match(MySqlParser.INSTANCE)
            self.state = 2399
            self.match(MySqlParser.ROTATE)
            self.state = 2400
            self.match(MySqlParser.INNODB)
            self.state = 2401
            self.match(MySqlParser.MASTER)
            self.state = 2402
            self.match(MySqlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroup" ):
                listener.enterAlterLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroup" ):
                listener.exitAlterLogfileGroup(self)




    def alterLogfileGroup(self):

        localctx = MySqlParser.AlterLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_alterLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2404
            self.match(MySqlParser.ALTER)
            self.state = 2405
            self.match(MySqlParser.LOGFILE)
            self.state = 2406
            self.match(MySqlParser.GROUP)
            self.state = 2407
            self.uid()
            self.state = 2408
            self.match(MySqlParser.ADD)
            self.state = 2409
            self.match(MySqlParser.UNDOFILE)
            self.state = 2410
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 2416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 2411
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 2413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2412
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2415
                self.fileSizeLiteral()


            self.state = 2419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 2418
                self.match(MySqlParser.WAIT)


            self.state = 2421
            self.match(MySqlParser.ENGINE)
            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 2422
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 2425
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_alterProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterProcedure" ):
                listener.enterAlterProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterProcedure" ):
                listener.exitAlterProcedure(self)




    def alterProcedure(self):

        localctx = MySqlParser.AlterProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_alterProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            self.match(MySqlParser.ALTER)
            self.state = 2428
            self.match(MySqlParser.PROCEDURE)
            self.state = 2429
            self.fullId()
            self.state = 2433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DETERMINISTIC or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (MySqlParser.MODIFIES - 108)) | (1 << (MySqlParser.NOT - 108)) | (1 << (MySqlParser.READS - 108)) | (1 << (MySqlParser.SQL - 108)))) != 0) or _la==MySqlParser.COMMENT or _la==MySqlParser.CONTAINS or _la==MySqlParser.LANGUAGE or _la==MySqlParser.NO:
                self.state = 2430
                self.routineOption()
                self.state = 2435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ServerOptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterServer" ):
                listener.enterAlterServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterServer" ):
                listener.exitAlterServer(self)




    def alterServer(self):

        localctx = MySqlParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_alterServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.match(MySqlParser.ALTER)
            self.state = 2437
            self.match(MySqlParser.SERVER)
            self.state = 2438
            self.uid()
            self.state = 2439
            self.match(MySqlParser.OPTIONS)
            self.state = 2440
            self.match(MySqlParser.LR_BRACKET)
            self.state = 2441
            self.serverOption()
            self.state = 2446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 2442
                self.match(MySqlParser.COMMA)
                self.state = 2443
                self.serverOption()
                self.state = 2448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2449
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def alterSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AlterSpecificationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AlterSpecificationContext,i)


        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)


        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTable" ):
                listener.enterAlterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTable" ):
                listener.exitAlterTable(self)




    def alterTable(self):

        localctx = MySqlParser.AlterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_alterTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2451
            self.match(MySqlParser.ALTER)
            self.state = 2453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE:
                self.state = 2452
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2455
                self.match(MySqlParser.IGNORE)


            self.state = 2458
            self.match(MySqlParser.TABLE)
            self.state = 2459
            self.tableName()
            self.state = 2461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOWAIT or _la==MySqlParser.WAIT:
                self.state = 2460
                self.waitNowaitClause()


            self.state = 2471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2463
                self.alterSpecification()
                self.state = 2468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2464
                    self.match(MySqlParser.COMMA)
                    self.state = 2465
                    self.alterSpecification()
                    self.state = 2470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 2473
                self.partitionDefinitions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.objectAction = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespace" ):
                listener.enterAlterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespace" ):
                listener.exitAlterTablespace(self)




    def alterTablespace(self):

        localctx = MySqlParser.AlterTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_alterTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2476
            self.match(MySqlParser.ALTER)
            self.state = 2477
            self.match(MySqlParser.TABLESPACE)
            self.state = 2478
            self.uid()
            self.state = 2479
            localctx.objectAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.ADD or _la==MySqlParser.DROP):
                localctx.objectAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2480
            self.match(MySqlParser.DATAFILE)
            self.state = 2481
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 2485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 2482
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 2483
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2484
                self.fileSizeLiteral()


            self.state = 2488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 2487
                self.match(MySqlParser.WAIT)


            self.state = 2490
            self.match(MySqlParser.ENGINE)
            self.state = 2492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 2491
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 2494
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOpt = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterView" ):
                listener.enterAlterView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterView" ):
                listener.exitAlterView(self)




    def alterView(self):

        localctx = MySqlParser.AlterViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_alterView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2496
            self.match(MySqlParser.ALTER)
            self.state = 2500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALGORITHM:
                self.state = 2497
                self.match(MySqlParser.ALGORITHM)
                self.state = 2498
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2499
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.MERGE or _la==MySqlParser.TEMPTABLE or _la==MySqlParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 2502
                self.ownerStatement()


            self.state = 2508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SQL:
                self.state = 2505
                self.match(MySqlParser.SQL)
                self.state = 2506
                self.match(MySqlParser.SECURITY)
                self.state = 2507
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFINER or _la==MySqlParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2510
            self.match(MySqlParser.VIEW)
            self.state = 2511
            self.fullId()
            self.state = 2516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 2512
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2513
                self.uidList()
                self.state = 2514
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2518
            self.match(MySqlParser.AS)
            self.state = 2519
            self.selectStatement()
            self.state = 2526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 2520
                self.match(MySqlParser.WITH)
                self.state = 2522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL:
                    self.state = 2521
                    localctx.checkOpt = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL):
                        localctx.checkOpt = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2524
                self.match(MySqlParser.CHECK)
                self.state = 2525
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(MySqlParser.SEQUENCE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def sequenceSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SequenceSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SequenceSpecContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_alterSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSequence" ):
                listener.enterAlterSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSequence" ):
                listener.exitAlterSequence(self)




    def alterSequence(self):

        localctx = MySqlParser.AlterSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_alterSequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2528
            self.match(MySqlParser.ALTER)
            self.state = 2529
            self.match(MySqlParser.SEQUENCE)
            self.state = 2531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2530
                self.ifExists()


            self.state = 2533
            self.fullId()
            self.state = 2535 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2534
                    self.sequenceSpec()

                else:
                    raise NoViableAltException(self)
                self.state = 2537 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterSpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterByDisableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDisableKeys" ):
                listener.enterAlterByDisableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDisableKeys" ):
                listener.exitAlterByDisableKeys(self)


    class AlterByDefaultCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDefaultCharset" ):
                listener.enterAlterByDefaultCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDefaultCharset" ):
                listener.exitAlterByDefaultCharset(self)


    class AlterByRenameColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRenameColumn" ):
                listener.enterAlterByRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRenameColumn" ):
                listener.exitAlterByRenameColumn(self)


    class AlterByConvertCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)
        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByConvertCharset" ):
                listener.enterAlterByConvertCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByConvertCharset" ):
                listener.exitAlterByConvertCharset(self)


    class AlterByAddPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPartition" ):
                listener.enterAlterByAddPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPartition" ):
                listener.exitAlterByAddPartition(self)


    class AlterByAddForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddForeignKey" ):
                listener.enterAlterByAddForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddForeignKey" ):
                listener.exitAlterByAddForeignKey(self)


    class AlterByRenameIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRenameIndex" ):
                listener.enterAlterByRenameIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRenameIndex" ):
                listener.exitAlterByRenameIndex(self)


    class AlterByRemovePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REMOVE(self):
            return self.getToken(MySqlParser.REMOVE, 0)
        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRemovePartitioning" ):
                listener.enterAlterByRemovePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRemovePartitioning" ):
                listener.exitAlterByRemovePartitioning(self)


    class AlterByRenameContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.renameFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRename" ):
                listener.enterAlterByRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRename" ):
                listener.exitAlterByRename(self)


    class AlterByOptimizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTIMIZE(self):
            return self.getToken(MySqlParser.OPTIMIZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOptimizePartition" ):
                listener.enterAlterByOptimizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOptimizePartition" ):
                listener.exitAlterByOptimizePartition(self)


    class AlterByImportTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportTablespace" ):
                listener.enterAlterByImportTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportTablespace" ):
                listener.exitAlterByImportTablespace(self)


    class AlterByCoalescePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(MySqlParser.COALESCE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCoalescePartition" ):
                listener.enterAlterByCoalescePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCoalescePartition" ):
                listener.exitAlterByCoalescePartition(self)


    class AlterByDropConstraintCheckContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropConstraintCheck" ):
                listener.enterAlterByDropConstraintCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropConstraintCheck" ):
                listener.exitAlterByDropConstraintCheck(self)


    class AlterByAddColumnsContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumns" ):
                listener.enterAlterByAddColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumns" ):
                listener.exitAlterByAddColumns(self)


    class AlterByAlterIndexVisibilityContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)
        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAlterIndexVisibility" ):
                listener.enterAlterByAlterIndexVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAlterIndexVisibility" ):
                listener.exitAlterByAlterIndexVisibility(self)


    class AlterByDropForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropForeignKey" ):
                listener.enterAlterByDropForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropForeignKey" ):
                listener.exitAlterByDropForeignKey(self)


    class AlterByAddCheckTableConstraintContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddCheckTableConstraint" ):
                listener.enterAlterByAddCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddCheckTableConstraint" ):
                listener.exitAlterByAddCheckTableConstraint(self)


    class AlterByRebuildPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REBUILD(self):
            return self.getToken(MySqlParser.REBUILD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRebuildPartition" ):
                listener.enterAlterByRebuildPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRebuildPartition" ):
                listener.exitAlterByRebuildPartition(self)


    class AlterByUpgradePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)
        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByUpgradePartitioning" ):
                listener.enterAlterByUpgradePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByUpgradePartitioning" ):
                listener.exitAlterByUpgradePartitioning(self)


    class AlterByRepairPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRepairPartition" ):
                listener.enterAlterByRepairPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRepairPartition" ):
                listener.exitAlterByRepairPartition(self)


    class AlterByExchangePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def EXCHANGE(self):
            return self.getToken(MySqlParser.EXCHANGE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.WITH)
            else:
                return self.getToken(MySqlParser.WITH, i)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByExchangePartition" ):
                listener.enterAlterByExchangePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByExchangePartition" ):
                listener.exitAlterByExchangePartition(self)


    class AlterByAddIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddIndex" ):
                listener.enterAlterByAddIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddIndex" ):
                listener.exitAlterByAddIndex(self)


    class AlterByDropColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)

        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropColumn" ):
                listener.enterAlterByDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropColumn" ):
                listener.exitAlterByDropColumn(self)


    class AlterByImportPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportPartition" ):
                listener.enterAlterByImportPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportPartition" ):
                listener.exitAlterByImportPartition(self)


    class AlterByChangeDefaultContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeDefault" ):
                listener.enterAlterByChangeDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeDefault" ):
                listener.exitAlterByChangeDefault(self)


    class AlterByForceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FORCE(self):
            return self.getToken(MySqlParser.FORCE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByForce" ):
                listener.enterAlterByForce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByForce" ):
                listener.exitAlterByForce(self)


    class AlterByDropPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPartition" ):
                listener.enterAlterByDropPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPartition" ):
                listener.exitAlterByDropPartition(self)


    class AlterByAddSpecialIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.keyType = None # Token
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddSpecialIndex" ):
                listener.enterAlterByAddSpecialIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddSpecialIndex" ):
                listener.exitAlterByAddSpecialIndex(self)


    class AlterByModifyColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(MySqlParser.MODIFY, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByModifyColumn" ):
                listener.enterAlterByModifyColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByModifyColumn" ):
                listener.exitAlterByModifyColumn(self)


    class AlterByTableOptionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTableOption" ):
                listener.enterAlterByTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTableOption" ):
                listener.exitAlterByTableOption(self)


    class AlterByDropPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPrimaryKey" ):
                listener.enterAlterByDropPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPrimaryKey" ):
                listener.exitAlterByDropPrimaryKey(self)


    class AlterByLockContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.lockType = None # Token
            self.copyFrom(ctx)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def SHARED(self):
            return self.getToken(MySqlParser.SHARED, 0)
        def EXCLUSIVE(self):
            return self.getToken(MySqlParser.EXCLUSIVE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByLock" ):
                listener.enterAlterByLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByLock" ):
                listener.exitAlterByLock(self)


    class AlterByDiscardPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardPartition" ):
                listener.enterAlterByDiscardPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardPartition" ):
                listener.exitAlterByDiscardPartition(self)


    class AlterByDiscardTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardTablespace" ):
                listener.enterAlterByDiscardTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardTablespace" ):
                listener.exitAlterByDiscardTablespace(self)


    class AlterByValidateContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByValidate" ):
                listener.enterAlterByValidate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByValidate" ):
                listener.exitAlterByValidate(self)


    class AlterByAddPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPrimaryKey" ):
                listener.enterAlterByAddPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPrimaryKey" ):
                listener.exitAlterByAddPrimaryKey(self)


    class AlterByCheckPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCheckPartition" ):
                listener.enterAlterByCheckPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCheckPartition" ):
                listener.exitAlterByCheckPartition(self)


    class AlterByEnableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByEnableKeys" ):
                listener.enterAlterByEnableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByEnableKeys" ):
                listener.exitAlterByEnableKeys(self)


    class AlterByReorganizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REORGANIZE(self):
            return self.getToken(MySqlParser.REORGANIZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByReorganizePartition" ):
                listener.enterAlterByReorganizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByReorganizePartition" ):
                listener.exitAlterByReorganizePartition(self)


    class AlterBySetAlgorithmContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def INSTANT(self):
            return self.getToken(MySqlParser.INSTANT, 0)
        def INPLACE(self):
            return self.getToken(MySqlParser.INPLACE, 0)
        def COPY(self):
            return self.getToken(MySqlParser.COPY, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterBySetAlgorithm" ):
                listener.enterAlterBySetAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterBySetAlgorithm" ):
                listener.exitAlterBySetAlgorithm(self)


    class AlterByAnalyzePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(MySqlParser.ANALYZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAnalyzePartition" ):
                listener.enterAlterByAnalyzePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAnalyzePartition" ):
                listener.exitAlterByAnalyzePartition(self)


    class AlterByChangeColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.afterColumn = None # UidContext
            self.copyFrom(ctx)

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)
        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeColumn" ):
                listener.enterAlterByChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeColumn" ):
                listener.exitAlterByChangeColumn(self)


    class AlterByAddUniqueKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddUniqueKey" ):
                listener.enterAlterByAddUniqueKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddUniqueKey" ):
                listener.exitAlterByAddUniqueKey(self)


    class AlterByTruncatePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTruncatePartition" ):
                listener.enterAlterByTruncatePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTruncatePartition" ):
                listener.exitAlterByTruncatePartition(self)


    class AlterByDropIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropIndex" ):
                listener.enterAlterByDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropIndex" ):
                listener.exitAlterByDropIndex(self)


    class AlterByAddColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumn" ):
                listener.enterAlterByAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumn" ):
                listener.exitAlterByAddColumn(self)


    class AlterByOrderContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOrder" ):
                listener.enterAlterByOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOrder" ):
                listener.exitAlterByOrder(self)



    def alterSpecification(self):

        localctx = MySqlParser.AlterSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_alterSpecification)
        self._la = 0 # Token type
        try:
            self.state = 2941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterByTableOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2539
                self.tableOption()
                self.state = 2546
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2541
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.COMMA:
                            self.state = 2540
                            self.match(MySqlParser.COMMA)


                        self.state = 2543
                        self.tableOption() 
                    self.state = 2548
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterByAddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2549
                self.match(MySqlParser.ADD)
                self.state = 2551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2550
                    self.match(MySqlParser.COLUMN)


                self.state = 2554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2553
                    self.ifNotExists()


                self.state = 2556
                self.uid()
                self.state = 2557
                self.columnDefinition()
                self.state = 2561
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.FIRST]:
                    self.state = 2558
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [MySqlParser.AFTER]:
                    self.state = 2559
                    self.match(MySqlParser.AFTER)
                    self.state = 2560
                    self.uid()
                    pass
                elif token in [MySqlParser.EOF, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PARTITION, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.MINUS, MySqlParser.LR_BRACKET, MySqlParser.COMMA, MySqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 3:
                localctx = MySqlParser.AlterByAddColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2563
                self.match(MySqlParser.ADD)
                self.state = 2565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2564
                    self.match(MySqlParser.COLUMN)


                self.state = 2568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2567
                    self.ifNotExists()


                self.state = 2570
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2571
                self.uid()
                self.state = 2572
                self.columnDefinition()
                self.state = 2579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2573
                    self.match(MySqlParser.COMMA)
                    self.state = 2574
                    self.uid()
                    self.state = 2575
                    self.columnDefinition()
                    self.state = 2581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2582
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = MySqlParser.AlterByAddIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2584
                self.match(MySqlParser.ADD)
                self.state = 2585
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2586
                    self.ifNotExists()


                self.state = 2590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 2589
                    self.uid()


                self.state = 2593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 2592
                    self.indexType()


                self.state = 2595
                self.indexColumnNames()
                self.state = 2599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.IGNORED or _la==MySqlParser.NOT or _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.CLUSTERING or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                    self.state = 2596
                    self.indexOption()
                    self.state = 2601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = MySqlParser.AlterByAddPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2602
                self.match(MySqlParser.ADD)
                self.state = 2607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2603
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                        self.state = 2604
                        localctx.name = self.uid()




                self.state = 2609
                self.match(MySqlParser.PRIMARY)
                self.state = 2610
                self.match(MySqlParser.KEY)
                self.state = 2612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 2611
                    localctx.index = self.uid()


                self.state = 2615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 2614
                    self.indexType()


                self.state = 2617
                self.indexColumnNames()
                self.state = 2621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.IGNORED or _la==MySqlParser.NOT or _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.CLUSTERING or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                    self.state = 2618
                    self.indexOption()
                    self.state = 2623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                localctx = MySqlParser.AlterByAddUniqueKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2624
                self.match(MySqlParser.ADD)
                self.state = 2629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2625
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                        self.state = 2626
                        localctx.name = self.uid()




                self.state = 2631
                self.match(MySqlParser.UNIQUE)
                self.state = 2633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 2632
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 2635
                    localctx.indexName = self.uid()


                self.state = 2639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 2638
                    self.indexType()


                self.state = 2641
                self.indexColumnNames()
                self.state = 2645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.IGNORED or _la==MySqlParser.NOT or _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.CLUSTERING or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                    self.state = 2642
                    self.indexOption()
                    self.state = 2647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                localctx = MySqlParser.AlterByAddSpecialIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2648
                self.match(MySqlParser.ADD)
                self.state = 2649
                localctx.keyType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL):
                    localctx.keyType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 2650
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 2653
                    self.uid()


                self.state = 2656
                self.indexColumnNames()
                self.state = 2660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.IGNORED or _la==MySqlParser.NOT or _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.CLUSTERING or _la==MySqlParser.COMMENT or _la==MySqlParser.INVISIBLE or _la==MySqlParser.KEY_BLOCK_SIZE or _la==MySqlParser.VISIBLE or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE:
                    self.state = 2657
                    self.indexOption()
                    self.state = 2662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                localctx = MySqlParser.AlterByAddForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2663
                self.match(MySqlParser.ADD)
                self.state = 2668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2664
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                        self.state = 2665
                        localctx.name = self.uid()




                self.state = 2670
                self.match(MySqlParser.FOREIGN)
                self.state = 2671
                self.match(MySqlParser.KEY)
                self.state = 2673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2672
                    self.ifNotExists()


                self.state = 2676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 2675
                    localctx.indexName = self.uid()


                self.state = 2678
                self.indexColumnNames()
                self.state = 2679
                self.referenceDefinition()
                pass

            elif la_ == 9:
                localctx = MySqlParser.AlterByAddCheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2681
                self.match(MySqlParser.ADD)
                self.state = 2686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2682
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                        self.state = 2683
                        localctx.name = self.uid()




                self.state = 2688
                self.match(MySqlParser.CHECK)
                self.state = 2689
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2690
                self.expression(0)
                self.state = 2691
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.AlterBySetAlgorithmContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2693
                self.match(MySqlParser.ALGORITHM)
                self.state = 2695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2694
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2697
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.COPY or _la==MySqlParser.INPLACE or _la==MySqlParser.INSTANT):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 11:
                localctx = MySqlParser.AlterByChangeDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2698
                self.match(MySqlParser.ALTER)
                self.state = 2700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2699
                    self.match(MySqlParser.COLUMN)


                self.state = 2702
                self.uid()
                self.state = 2708
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.SET]:
                    self.state = 2703
                    self.match(MySqlParser.SET)
                    self.state = 2704
                    self.match(MySqlParser.DEFAULT)
                    self.state = 2705
                    self.defaultValue()
                    pass
                elif token in [MySqlParser.DROP]:
                    self.state = 2706
                    self.match(MySqlParser.DROP)
                    self.state = 2707
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = MySqlParser.AlterByChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2710
                self.match(MySqlParser.CHANGE)
                self.state = 2712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2711
                    self.match(MySqlParser.COLUMN)


                self.state = 2715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2714
                    self.ifExists()


                self.state = 2717
                localctx.oldColumn = self.uid()
                self.state = 2718
                localctx.newColumn = self.uid()
                self.state = 2719
                self.columnDefinition()
                self.state = 2723
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.FIRST]:
                    self.state = 2720
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [MySqlParser.AFTER]:
                    self.state = 2721
                    self.match(MySqlParser.AFTER)
                    self.state = 2722
                    localctx.afterColumn = self.uid()
                    pass
                elif token in [MySqlParser.EOF, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PARTITION, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.MINUS, MySqlParser.LR_BRACKET, MySqlParser.COMMA, MySqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 13:
                localctx = MySqlParser.AlterByRenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2725
                self.match(MySqlParser.RENAME)
                self.state = 2726
                self.match(MySqlParser.COLUMN)
                self.state = 2727
                localctx.oldColumn = self.uid()
                self.state = 2728
                self.match(MySqlParser.TO)
                self.state = 2729
                localctx.newColumn = self.uid()
                pass

            elif la_ == 14:
                localctx = MySqlParser.AlterByLockContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2731
                self.match(MySqlParser.LOCK)
                self.state = 2733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2732
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2735
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.EXCLUSIVE or _la==MySqlParser.NONE or _la==MySqlParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = MySqlParser.AlterByModifyColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2736
                self.match(MySqlParser.MODIFY)
                self.state = 2738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2737
                    self.match(MySqlParser.COLUMN)


                self.state = 2741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2740
                    self.ifExists()


                self.state = 2743
                self.uid()
                self.state = 2744
                self.columnDefinition()
                self.state = 2748
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.FIRST]:
                    self.state = 2745
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [MySqlParser.AFTER]:
                    self.state = 2746
                    self.match(MySqlParser.AFTER)
                    self.state = 2747
                    self.uid()
                    pass
                elif token in [MySqlParser.EOF, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PARTITION, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.MINUS, MySqlParser.LR_BRACKET, MySqlParser.COMMA, MySqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 16:
                localctx = MySqlParser.AlterByDropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2750
                self.match(MySqlParser.DROP)
                self.state = 2752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2751
                    self.match(MySqlParser.COLUMN)


                self.state = 2755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2754
                    self.ifExists()


                self.state = 2757
                self.uid()
                self.state = 2759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.RESTRICT:
                    self.state = 2758
                    self.match(MySqlParser.RESTRICT)


                pass

            elif la_ == 17:
                localctx = MySqlParser.AlterByDropConstraintCheckContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2761
                self.match(MySqlParser.DROP)
                self.state = 2762
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CHECK or _la==MySqlParser.CONSTRAINT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2763
                    self.ifExists()


                self.state = 2766
                self.uid()
                pass

            elif la_ == 18:
                localctx = MySqlParser.AlterByDropPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2767
                self.match(MySqlParser.DROP)
                self.state = 2768
                self.match(MySqlParser.PRIMARY)
                self.state = 2769
                self.match(MySqlParser.KEY)
                pass

            elif la_ == 19:
                localctx = MySqlParser.AlterByRenameIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2770
                self.match(MySqlParser.RENAME)
                self.state = 2771
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2772
                self.uid()
                self.state = 2773
                self.match(MySqlParser.TO)
                self.state = 2774
                self.uid()
                pass

            elif la_ == 20:
                localctx = MySqlParser.AlterByAlterIndexVisibilityContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2776
                self.match(MySqlParser.ALTER)
                self.state = 2777
                self.match(MySqlParser.INDEX)
                self.state = 2778
                self.uid()
                self.state = 2779
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INVISIBLE or _la==MySqlParser.VISIBLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                localctx = MySqlParser.AlterByDropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2781
                self.match(MySqlParser.DROP)
                self.state = 2782
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2783
                    self.ifExists()


                self.state = 2786
                self.uid()
                pass

            elif la_ == 22:
                localctx = MySqlParser.AlterByDropForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2787
                self.match(MySqlParser.DROP)
                self.state = 2788
                self.match(MySqlParser.FOREIGN)
                self.state = 2789
                self.match(MySqlParser.KEY)
                self.state = 2791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2790
                    self.ifExists()


                self.state = 2793
                self.uid()
                pass

            elif la_ == 23:
                localctx = MySqlParser.AlterByDisableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2794
                self.match(MySqlParser.DISABLE)
                self.state = 2795
                self.match(MySqlParser.KEYS)
                pass

            elif la_ == 24:
                localctx = MySqlParser.AlterByEnableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2796
                self.match(MySqlParser.ENABLE)
                self.state = 2797
                self.match(MySqlParser.KEYS)
                pass

            elif la_ == 25:
                localctx = MySqlParser.AlterByRenameContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2798
                self.match(MySqlParser.RENAME)
                self.state = 2800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS or _la==MySqlParser.TO:
                    self.state = 2799
                    localctx.renameFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.AS or _la==MySqlParser.TO):
                        localctx.renameFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                if la_ == 1:
                    self.state = 2802
                    self.uid()
                    pass

                elif la_ == 2:
                    self.state = 2803
                    self.fullId()
                    pass


                pass

            elif la_ == 26:
                localctx = MySqlParser.AlterByOrderContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2806
                self.match(MySqlParser.ORDER)
                self.state = 2807
                self.match(MySqlParser.BY)
                self.state = 2808
                self.uidList()
                pass

            elif la_ == 27:
                localctx = MySqlParser.AlterByConvertCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2809
                self.match(MySqlParser.CONVERT)
                self.state = 2810
                self.match(MySqlParser.TO)
                self.state = 2811
                self.match(MySqlParser.CHARACTER)
                self.state = 2812
                self.match(MySqlParser.SET)
                self.state = 2813
                self.charsetName()
                self.state = 2816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLLATE:
                    self.state = 2814
                    self.match(MySqlParser.COLLATE)
                    self.state = 2815
                    self.collationName()


                pass

            elif la_ == 28:
                localctx = MySqlParser.AlterByDefaultCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 2819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 2818
                    self.match(MySqlParser.DEFAULT)


                self.state = 2821
                self.match(MySqlParser.CHARACTER)
                self.state = 2822
                self.match(MySqlParser.SET)
                self.state = 2823
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2824
                self.charsetName()
                self.state = 2828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLLATE:
                    self.state = 2825
                    self.match(MySqlParser.COLLATE)
                    self.state = 2826
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 2827
                    self.collationName()


                pass

            elif la_ == 29:
                localctx = MySqlParser.AlterByDiscardTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 2830
                self.match(MySqlParser.DISCARD)
                self.state = 2831
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 30:
                localctx = MySqlParser.AlterByImportTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 2832
                self.match(MySqlParser.IMPORT)
                self.state = 2833
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 31:
                localctx = MySqlParser.AlterByForceContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 2834
                self.match(MySqlParser.FORCE)
                pass

            elif la_ == 32:
                localctx = MySqlParser.AlterByValidateContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 2835
                localctx.validationFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.WITH or _la==MySqlParser.WITHOUT):
                    localctx.validationFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2836
                self.match(MySqlParser.VALIDATION)
                pass

            elif la_ == 33:
                localctx = MySqlParser.AlterByAddPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 2837
                self.match(MySqlParser.ADD)
                self.state = 2838
                self.match(MySqlParser.PARTITION)
                self.state = 2840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2839
                    self.ifNotExists()


                self.state = 2842
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2843
                self.partitionDefinition()
                self.state = 2848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2844
                    self.match(MySqlParser.COMMA)
                    self.state = 2845
                    self.partitionDefinition()
                    self.state = 2850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2851
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 34:
                localctx = MySqlParser.AlterByDropPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 2853
                self.match(MySqlParser.DROP)
                self.state = 2854
                self.match(MySqlParser.PARTITION)
                self.state = 2856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 2855
                    self.ifExists()


                self.state = 2858
                self.uidList()
                pass

            elif la_ == 35:
                localctx = MySqlParser.AlterByDiscardPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 2859
                self.match(MySqlParser.DISCARD)
                self.state = 2860
                self.match(MySqlParser.PARTITION)
                self.state = 2863
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 2861
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2862
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2865
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 36:
                localctx = MySqlParser.AlterByImportPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 2866
                self.match(MySqlParser.IMPORT)
                self.state = 2867
                self.match(MySqlParser.PARTITION)
                self.state = 2870
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 2868
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2869
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2872
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 37:
                localctx = MySqlParser.AlterByTruncatePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 2873
                self.match(MySqlParser.TRUNCATE)
                self.state = 2874
                self.match(MySqlParser.PARTITION)
                self.state = 2877
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 2875
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2876
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 38:
                localctx = MySqlParser.AlterByCoalescePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 2879
                self.match(MySqlParser.COALESCE)
                self.state = 2880
                self.match(MySqlParser.PARTITION)
                self.state = 2881
                self.decimalLiteral()
                pass

            elif la_ == 39:
                localctx = MySqlParser.AlterByReorganizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 2882
                self.match(MySqlParser.REORGANIZE)
                self.state = 2883
                self.match(MySqlParser.PARTITION)
                self.state = 2884
                self.uidList()
                self.state = 2885
                self.match(MySqlParser.INTO)
                self.state = 2886
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2887
                self.partitionDefinition()
                self.state = 2892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2888
                    self.match(MySqlParser.COMMA)
                    self.state = 2889
                    self.partitionDefinition()
                    self.state = 2894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2895
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 40:
                localctx = MySqlParser.AlterByExchangePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 2897
                self.match(MySqlParser.EXCHANGE)
                self.state = 2898
                self.match(MySqlParser.PARTITION)
                self.state = 2899
                self.uid()
                self.state = 2900
                self.match(MySqlParser.WITH)
                self.state = 2901
                self.match(MySqlParser.TABLE)
                self.state = 2902
                self.tableName()
                self.state = 2905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH or _la==MySqlParser.WITHOUT:
                    self.state = 2903
                    localctx.validationFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.WITH or _la==MySqlParser.WITHOUT):
                        localctx.validationFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2904
                    self.match(MySqlParser.VALIDATION)


                pass

            elif la_ == 41:
                localctx = MySqlParser.AlterByAnalyzePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 2907
                self.match(MySqlParser.ANALYZE)
                self.state = 2908
                self.match(MySqlParser.PARTITION)
                self.state = 2911
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 2909
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2910
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 42:
                localctx = MySqlParser.AlterByCheckPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 2913
                self.match(MySqlParser.CHECK)
                self.state = 2914
                self.match(MySqlParser.PARTITION)
                self.state = 2917
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 2915
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2916
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 43:
                localctx = MySqlParser.AlterByOptimizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 2919
                self.match(MySqlParser.OPTIMIZE)
                self.state = 2920
                self.match(MySqlParser.PARTITION)
                self.state = 2923
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 2921
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2922
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 44:
                localctx = MySqlParser.AlterByRebuildPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 2925
                self.match(MySqlParser.REBUILD)
                self.state = 2926
                self.match(MySqlParser.PARTITION)
                self.state = 2929
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 2927
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2928
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 45:
                localctx = MySqlParser.AlterByRepairPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 2931
                self.match(MySqlParser.REPAIR)
                self.state = 2932
                self.match(MySqlParser.PARTITION)
                self.state = 2935
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 2933
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2934
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 46:
                localctx = MySqlParser.AlterByRemovePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 2937
                self.match(MySqlParser.REMOVE)
                self.state = 2938
                self.match(MySqlParser.PARTITIONING)
                pass

            elif la_ == 47:
                localctx = MySqlParser.AlterByUpgradePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 2939
                self.match(MySqlParser.UPGRADE)
                self.state = 2940
                self.match(MySqlParser.PARTITIONING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)




    def dropDatabase(self):

        localctx = MySqlParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2943
            self.match(MySqlParser.DROP)
            self.state = 2944
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2945
                self.ifExists()


            self.state = 2948
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropEvent" ):
                listener.enterDropEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropEvent" ):
                listener.exitDropEvent(self)




    def dropEvent(self):

        localctx = MySqlParser.DropEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dropEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2950
            self.match(MySqlParser.DROP)
            self.state = 2951
            self.match(MySqlParser.EVENT)
            self.state = 2953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2952
                self.ifExists()


            self.state = 2955
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ALGORITHM)
            else:
                return self.getToken(MySqlParser.ALGORITHM, i)

        def LOCK(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOCK)
            else:
                return self.getToken(MySqlParser.LOCK, i)

        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)

        def INPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.INPLACE)
            else:
                return self.getToken(MySqlParser.INPLACE, i)

        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COPY)
            else:
                return self.getToken(MySqlParser.COPY, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NONE)
            else:
                return self.getToken(MySqlParser.NONE, i)

        def SHARED(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SHARED)
            else:
                return self.getToken(MySqlParser.SHARED, i)

        def EXCLUSIVE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EXCLUSIVE)
            else:
                return self.getToken(MySqlParser.EXCLUSIVE, i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)




    def dropIndex(self):

        localctx = MySqlParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2957
            self.match(MySqlParser.DROP)
            self.state = 2958
            self.match(MySqlParser.INDEX)
            self.state = 2960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.state = 2959
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2962
            self.uid()
            self.state = 2963
            self.match(MySqlParser.ON)
            self.state = 2964
            self.tableName()
            self.state = 2977
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,388,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2975
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.ALGORITHM]:
                        self.state = 2965
                        self.match(MySqlParser.ALGORITHM)
                        self.state = 2967
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.EQUAL_SYMBOL:
                            self.state = 2966
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 2969
                        localctx.algType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.COPY or _la==MySqlParser.INPLACE):
                            localctx.algType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [MySqlParser.LOCK]:
                        self.state = 2970
                        self.match(MySqlParser.LOCK)
                        self.state = 2972
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.EQUAL_SYMBOL:
                            self.state = 2971
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 2974
                        localctx.lockType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.EXCLUSIVE or _la==MySqlParser.NONE or _la==MySqlParser.SHARED):
                            localctx.lockType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2979
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,388,self._ctx)

            self.state = 2981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOWAIT or _la==MySqlParser.WAIT:
                self.state = 2980
                self.waitNowaitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroup" ):
                listener.enterDropLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroup" ):
                listener.exitDropLogfileGroup(self)




    def dropLogfileGroup(self):

        localctx = MySqlParser.DropLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_dropLogfileGroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2983
            self.match(MySqlParser.DROP)
            self.state = 2984
            self.match(MySqlParser.LOGFILE)
            self.state = 2985
            self.match(MySqlParser.GROUP)
            self.state = 2986
            self.uid()
            self.state = 2987
            self.match(MySqlParser.ENGINE)
            self.state = 2988
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 2989
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropProcedure" ):
                listener.enterDropProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropProcedure" ):
                listener.exitDropProcedure(self)




    def dropProcedure(self):

        localctx = MySqlParser.DropProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_dropProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2991
            self.match(MySqlParser.DROP)
            self.state = 2992
            self.match(MySqlParser.PROCEDURE)
            self.state = 2994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2993
                self.ifExists()


            self.state = 2996
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)




    def dropFunction(self):

        localctx = MySqlParser.DropFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dropFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2998
            self.match(MySqlParser.DROP)
            self.state = 2999
            self.match(MySqlParser.FUNCTION)
            self.state = 3001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 3000
                self.ifExists()


            self.state = 3003
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)




    def dropServer(self):

        localctx = MySqlParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_dropServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3005
            self.match(MySqlParser.DROP)
            self.state = 3006
            self.match(MySqlParser.SERVER)
            self.state = 3008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 3007
                self.ifExists()


            self.state = 3010
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)




    def dropTable(self):

        localctx = MySqlParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3012
            self.match(MySqlParser.DROP)
            self.state = 3014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.TEMPORARY:
                self.state = 3013
                self.match(MySqlParser.TEMPORARY)


            self.state = 3016
            self.match(MySqlParser.TABLE)
            self.state = 3018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 3017
                self.ifExists()


            self.state = 3020
            self.tables()
            self.state = 3022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOWAIT or _la==MySqlParser.WAIT:
                self.state = 3021
                self.waitNowaitClause()


            self.state = 3025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT:
                self.state = 3024
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablespace" ):
                listener.enterDropTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablespace" ):
                listener.exitDropTablespace(self)




    def dropTablespace(self):

        localctx = MySqlParser.DropTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_dropTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3027
            self.match(MySqlParser.DROP)
            self.state = 3028
            self.match(MySqlParser.TABLESPACE)
            self.state = 3029
            self.uid()
            self.state = 3035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ENGINE:
                self.state = 3030
                self.match(MySqlParser.ENGINE)
                self.state = 3032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 3031
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 3034
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTrigger" ):
                listener.enterDropTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTrigger" ):
                listener.exitDropTrigger(self)




    def dropTrigger(self):

        localctx = MySqlParser.DropTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_dropTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3037
            self.match(MySqlParser.DROP)
            self.state = 3038
            self.match(MySqlParser.TRIGGER)
            self.state = 3040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 3039
                self.ifExists()


            self.state = 3042
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)




    def dropView(self):

        localctx = MySqlParser.DropViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_dropView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3044
            self.match(MySqlParser.DROP)
            self.state = 3045
            self.match(MySqlParser.VIEW)
            self.state = 3047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 3046
                self.ifExists()


            self.state = 3049
            self.fullId()
            self.state = 3054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3050
                self.match(MySqlParser.COMMA)
                self.state = 3051
                self.fullId()
                self.state = 3056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT:
                self.state = 3057
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def roleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoleNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoleNameContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)




    def dropRole(self):

        localctx = MySqlParser.DropRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_dropRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3060
            self.match(MySqlParser.DROP)
            self.state = 3061
            self.match(MySqlParser.ROLE)
            self.state = 3063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 3062
                self.ifExists()


            self.state = 3065
            self.roleName()
            self.state = 3070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3066
                self.match(MySqlParser.COMMA)
                self.state = 3067
                self.roleName()
                self.state = 3072
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def roleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoleNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoleNameContext,i)


        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def roleOption(self):
            return self.getTypedRuleContext(MySqlParser.RoleOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_setRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)




    def setRole(self):

        localctx = MySqlParser.SetRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_setRole)
        self._la = 0 # Token type
        try:
            self.state = 3106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3073
                self.match(MySqlParser.SET)
                self.state = 3074
                self.match(MySqlParser.DEFAULT)
                self.state = 3075
                self.match(MySqlParser.ROLE)
                self.state = 3086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 3076
                    self.match(MySqlParser.NONE)
                    pass

                elif la_ == 2:
                    self.state = 3077
                    self.match(MySqlParser.ALL)
                    pass

                elif la_ == 3:
                    self.state = 3078
                    self.roleName()
                    self.state = 3083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 3079
                        self.match(MySqlParser.COMMA)
                        self.state = 3080
                        self.roleName()
                        self.state = 3085
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 3088
                self.match(MySqlParser.TO)
                self.state = 3091
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 3089
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 3090
                    self.uid()
                    pass


                self.state = 3100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3093
                    self.match(MySqlParser.COMMA)
                    self.state = 3096
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
                    if la_ == 1:
                        self.state = 3094
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 3095
                        self.uid()
                        pass


                    self.state = 3102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3103
                self.match(MySqlParser.SET)
                self.state = 3104
                self.match(MySqlParser.ROLE)
                self.state = 3105
                self.roleOption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropSequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def SEQUENCE(self):
            return self.getToken(MySqlParser.SEQUENCE, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMENT_INPUT(self):
            return self.getToken(MySqlParser.COMMENT_INPUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSequence" ):
                listener.enterDropSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSequence" ):
                listener.exitDropSequence(self)




    def dropSequence(self):

        localctx = MySqlParser.DropSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_dropSequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3108
            self.match(MySqlParser.DROP)
            self.state = 3110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.TEMPORARY:
                self.state = 3109
                self.match(MySqlParser.TEMPORARY)


            self.state = 3112
            self.match(MySqlParser.SEQUENCE)
            self.state = 3114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 3113
                self.ifExists()


            self.state = 3117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT_INPUT:
                self.state = 3116
                self.match(MySqlParser.COMMENT_INPUT)


            self.state = 3119
            self.fullId()
            self.state = 3124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3120
                self.match(MySqlParser.COMMA)
                self.state = 3121
                self.fullId()
                self.state = 3126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def renameTableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RenameTableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RenameTableClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)




    def renameTable(self):

        localctx = MySqlParser.RenameTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_renameTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3127
            self.match(MySqlParser.RENAME)
            self.state = 3128
            self.match(MySqlParser.TABLE)
            self.state = 3129
            self.renameTableClause()
            self.state = 3134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3130
                self.match(MySqlParser.COMMA)
                self.state = 3131
                self.renameTableClause()
                self.state = 3136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_renameTableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableClause" ):
                listener.enterRenameTableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableClause" ):
                listener.exitRenameTableClause(self)




    def renameTableClause(self):

        localctx = MySqlParser.RenameTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_renameTableClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3137
            self.tableName()
            self.state = 3139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOWAIT or _la==MySqlParser.WAIT:
                self.state = 3138
                self.waitNowaitClause()


            self.state = 3141
            self.match(MySqlParser.TO)
            self.state = 3142
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_truncateTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)




    def truncateTable(self):

        localctx = MySqlParser.TruncateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_truncateTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3144
            self.match(MySqlParser.TRUNCATE)
            self.state = 3146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.TABLE:
                self.state = 3145
                self.match(MySqlParser.TABLE)


            self.state = 3148
            self.tableName()
            self.state = 3150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOWAIT or _la==MySqlParser.WAIT:
                self.state = 3149
                self.waitNowaitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(MySqlParser.CALL, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def constants(self):
            return self.getTypedRuleContext(MySqlParser.ConstantsContext,0)


        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)




    def callStatement(self):

        localctx = MySqlParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_callStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3152
            self.match(MySqlParser.CALL)
            self.state = 3153
            self.fullId()
            self.state = 3160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.state = 3154
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3157
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
                if la_ == 1:
                    self.state = 3155
                    self.constants()

                elif la_ == 2:
                    self.state = 3156
                    self.expressions()


                self.state = 3159
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.SingleDeleteStatementContext,0)


        def multipleDeleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.MultipleDeleteStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = MySqlParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_deleteStatement)
        try:
            self.state = 3164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3162
                self.singleDeleteStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3163
                self.multipleDeleteStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = MySqlParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3166
            self.match(MySqlParser.DO)
            self.state = 3167
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handlerOpenStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerOpenStatementContext,0)


        def handlerReadIndexStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerReadIndexStatementContext,0)


        def handlerReadStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerReadStatementContext,0)


        def handlerCloseStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerCloseStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerStatement" ):
                listener.enterHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerStatement" ):
                listener.exitHandlerStatement(self)




    def handlerStatement(self):

        localctx = MySqlParser.HandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_handlerStatement)
        try:
            self.state = 3173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3169
                self.handlerOpenStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3170
                self.handlerReadIndexStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3171
                self.handlerReadStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3172
                self.handlerCloseStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts
            self.duplicatedFirst = None # UpdatedElementContext
            self.duplicatedElements = list() # of UpdatedElementContexts

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def DUPLICATE(self):
            return self.getToken(MySqlParser.DUPLICATE, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(MySqlParser.DELAYED, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(MySqlParser.HIGH_PRIORITY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = MySqlParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3175
            self.match(MySqlParser.INSERT)
            self.state = 3177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (MySqlParser.DELAYED - 41)) | (1 << (MySqlParser.HIGH_PRIORITY - 41)) | (1 << (MySqlParser.LOW_PRIORITY - 41)))) != 0):
                self.state = 3176
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (MySqlParser.DELAYED - 41)) | (1 << (MySqlParser.HIGH_PRIORITY - 41)) | (1 << (MySqlParser.LOW_PRIORITY - 41)))) != 0)):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3179
                self.match(MySqlParser.IGNORE)


            self.state = 3183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INTO:
                self.state = 3182
                self.match(MySqlParser.INTO)


            self.state = 3185
            self.tableName()
            self.state = 3192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 3186
                self.match(MySqlParser.PARTITION)
                self.state = 3187
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 3188
                    localctx.partitions = self.uidList()


                self.state = 3191
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT, MySqlParser.VALUES, MySqlParser.VALUE, MySqlParser.LR_BRACKET]:
                self.state = 3198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
                if la_ == 1:
                    self.state = 3194
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3195
                    localctx.columns = self.uidList()
                    self.state = 3196
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 3200
                self.insertStatementValue()
                pass
            elif token in [MySqlParser.SET]:
                self.state = 3201
                self.match(MySqlParser.SET)
                self.state = 3202
                localctx.setFirst = self.updatedElement()
                self.state = 3207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3203
                    self.match(MySqlParser.COMMA)
                    self.state = 3204
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 3209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ON:
                self.state = 3212
                self.match(MySqlParser.ON)
                self.state = 3213
                self.match(MySqlParser.DUPLICATE)
                self.state = 3214
                self.match(MySqlParser.KEY)
                self.state = 3215
                self.match(MySqlParser.UPDATE)
                self.state = 3216
                localctx.duplicatedFirst = self.updatedElement()
                self.state = 3221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3217
                    self.match(MySqlParser.COMMA)
                    self.state = 3218
                    localctx._updatedElement = self.updatedElement()
                    localctx.duplicatedElements.append(localctx._updatedElement)
                    self.state = 3223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def INFILE(self):
            return self.getToken(MySqlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)

        def LINES(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LINES)
            else:
                return self.getToken(MySqlParser.LINES, i)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IGNORE)
            else:
                return self.getToken(MySqlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)


        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)

        def ROWS(self):
            return self.getToken(MySqlParser.ROWS, 0)

        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectFieldsIntoContext,i)


        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectLinesIntoContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadDataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataStatement" ):
                listener.enterLoadDataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataStatement" ):
                listener.exitLoadDataStatement(self)




    def loadDataStatement(self):

        localctx = MySqlParser.LoadDataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_loadDataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3226
            self.match(MySqlParser.LOAD)
            self.state = 3227
            self.match(MySqlParser.DATA)
            self.state = 3229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT:
                self.state = 3228
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOCAL:
                self.state = 3231
                self.match(MySqlParser.LOCAL)


            self.state = 3234
            self.match(MySqlParser.INFILE)
            self.state = 3235
            localctx.filename = self.match(MySqlParser.STRING_LITERAL)
            self.state = 3237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE:
                self.state = 3236
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3239
            self.match(MySqlParser.INTO)
            self.state = 3240
            self.match(MySqlParser.TABLE)
            self.state = 3241
            self.tableName()
            self.state = 3247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 3242
                self.match(MySqlParser.PARTITION)
                self.state = 3243
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3244
                self.uidList()
                self.state = 3245
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CHARACTER:
                self.state = 3249
                self.match(MySqlParser.CHARACTER)
                self.state = 3250
                self.match(MySqlParser.SET)
                self.state = 3251
                localctx.charset = self.charsetName()


            self.state = 3260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS:
                self.state = 3254
                localctx.fieldsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS):
                    localctx.fieldsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3256 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3255
                    self.selectFieldsInto()
                    self.state = 3258 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.ENCLOSED or _la==MySqlParser.ESCAPED or _la==MySqlParser.OPTIONALLY or _la==MySqlParser.TERMINATED):
                        break



            self.state = 3268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LINES:
                self.state = 3262
                self.match(MySqlParser.LINES)
                self.state = 3264 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3263
                    self.selectLinesInto()
                    self.state = 3266 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.STARTING or _la==MySqlParser.TERMINATED):
                        break



            self.state = 3274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3270
                self.match(MySqlParser.IGNORE)
                self.state = 3271
                self.decimalLiteral()
                self.state = 3272
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LINES or _la==MySqlParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.state = 3276
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3277
                self.assignmentField()
                self.state = 3282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3278
                    self.match(MySqlParser.COMMA)
                    self.state = 3279
                    self.assignmentField()
                    self.state = 3284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3285
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.state = 3289
                self.match(MySqlParser.SET)
                self.state = 3290
                self.updatedElement()
                self.state = 3295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3291
                    self.match(MySqlParser.COMMA)
                    self.state = 3292
                    self.updatedElement()
                    self.state = 3297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadXmlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.tag = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def XML(self):
            return self.getToken(MySqlParser.XML, 0)

        def INFILE(self):
            return self.getToken(MySqlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ROWS)
            else:
                return self.getToken(MySqlParser.ROWS, i)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySqlParser.LESS_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(MySqlParser.GREATER_SYMBOL, 0)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IGNORE)
            else:
                return self.getToken(MySqlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def LINES(self):
            return self.getToken(MySqlParser.LINES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadXmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadXmlStatement" ):
                listener.enterLoadXmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadXmlStatement" ):
                listener.exitLoadXmlStatement(self)




    def loadXmlStatement(self):

        localctx = MySqlParser.LoadXmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_loadXmlStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3300
            self.match(MySqlParser.LOAD)
            self.state = 3301
            self.match(MySqlParser.XML)
            self.state = 3303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT:
                self.state = 3302
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOCAL:
                self.state = 3305
                self.match(MySqlParser.LOCAL)


            self.state = 3308
            self.match(MySqlParser.INFILE)
            self.state = 3309
            localctx.filename = self.match(MySqlParser.STRING_LITERAL)
            self.state = 3311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE:
                self.state = 3310
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3313
            self.match(MySqlParser.INTO)
            self.state = 3314
            self.match(MySqlParser.TABLE)
            self.state = 3315
            self.tableName()
            self.state = 3319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CHARACTER:
                self.state = 3316
                self.match(MySqlParser.CHARACTER)
                self.state = 3317
                self.match(MySqlParser.SET)
                self.state = 3318
                localctx.charset = self.charsetName()


            self.state = 3327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ROWS:
                self.state = 3321
                self.match(MySqlParser.ROWS)
                self.state = 3322
                self.match(MySqlParser.IDENTIFIED)
                self.state = 3323
                self.match(MySqlParser.BY)
                self.state = 3324
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 3325
                localctx.tag = self.match(MySqlParser.STRING_LITERAL)
                self.state = 3326
                self.match(MySqlParser.GREATER_SYMBOL)


            self.state = 3333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3329
                self.match(MySqlParser.IGNORE)
                self.state = 3330
                self.decimalLiteral()
                self.state = 3331
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LINES or _la==MySqlParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
            if la_ == 1:
                self.state = 3335
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3336
                self.assignmentField()
                self.state = 3341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3337
                    self.match(MySqlParser.COMMA)
                    self.state = 3338
                    self.assignmentField()
                    self.state = 3343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3344
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
            if la_ == 1:
                self.state = 3348
                self.match(MySqlParser.SET)
                self.state = 3349
                self.updatedElement()
                self.state = 3354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3350
                    self.match(MySqlParser.COMMA)
                    self.state = 3351
                    self.updatedElement()
                    self.state = 3356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(MySqlParser.DELAYED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_replaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceStatement" ):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceStatement" ):
                listener.exitReplaceStatement(self)




    def replaceStatement(self):

        localctx = MySqlParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_replaceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3359
            self.match(MySqlParser.REPLACE)
            self.state = 3361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DELAYED or _la==MySqlParser.LOW_PRIORITY:
                self.state = 3360
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DELAYED or _la==MySqlParser.LOW_PRIORITY):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INTO:
                self.state = 3363
                self.match(MySqlParser.INTO)


            self.state = 3366
            self.tableName()
            self.state = 3372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 3367
                self.match(MySqlParser.PARTITION)
                self.state = 3368
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3369
                localctx.partitions = self.uidList()
                self.state = 3370
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT, MySqlParser.VALUES, MySqlParser.VALUE, MySqlParser.LR_BRACKET]:
                self.state = 3378
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
                if la_ == 1:
                    self.state = 3374
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3375
                    localctx.columns = self.uidList()
                    self.state = 3376
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 3380
                self.insertStatementValue()
                pass
            elif token in [MySqlParser.SET]:
                self.state = 3381
                self.match(MySqlParser.SET)
                self.state = 3382
                localctx.setFirst = self.updatedElement()
                self.state = 3387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3383
                    self.match(MySqlParser.COMMA)
                    self.state = 3384
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 3389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)

        def unionStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UnionStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UnionStatementContext,i)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)


    class UnionParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)

        def unionParenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UnionParenthesisContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UnionParenthesisContext,i)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesisSelect" ):
                listener.enterUnionParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesisSelect" ):
                listener.exitUnionParenthesisSelect(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)


    class ParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisSelect" ):
                listener.enterParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisSelect" ):
                listener.exitParenthesisSelect(self)



    def selectStatement(self):

        localctx = MySqlParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 3447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3392
                self.querySpecification()
                self.state = 3394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
                if la_ == 1:
                    self.state = 3393
                    self.lockClause()


                pass

            elif la_ == 2:
                localctx = MySqlParser.ParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3396
                self.queryExpression()
                self.state = 3398
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
                if la_ == 1:
                    self.state = 3397
                    self.lockClause()


                pass

            elif la_ == 3:
                localctx = MySqlParser.UnionSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3400
                self.querySpecificationNointo()
                self.state = 3402 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3401
                        self.unionStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3404 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,465,self._ctx)

                self.state = 3414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.UNION:
                    self.state = 3406
                    self.match(MySqlParser.UNION)
                    self.state = 3408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                        self.state = 3407
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3412
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.SELECT]:
                        self.state = 3410
                        self.querySpecification()
                        pass
                    elif token in [MySqlParser.LR_BRACKET]:
                        self.state = 3411
                        self.queryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 3417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
                if la_ == 1:
                    self.state = 3416
                    self.orderByClause()


                self.state = 3420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIMIT:
                    self.state = 3419
                    self.limitClause()


                self.state = 3423
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
                if la_ == 1:
                    self.state = 3422
                    self.lockClause()


                pass

            elif la_ == 4:
                localctx = MySqlParser.UnionParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3425
                self.queryExpressionNointo()
                self.state = 3427 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3426
                        self.unionParenthesis()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3429 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

                self.state = 3436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.UNION:
                    self.state = 3431
                    self.match(MySqlParser.UNION)
                    self.state = 3433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                        self.state = 3432
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3435
                    self.queryExpression()


                self.state = 3439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
                if la_ == 1:
                    self.state = 3438
                    self.orderByClause()


                self.state = 3442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIMIT:
                    self.state = 3441
                    self.limitClause()


                self.state = 3445
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
                if la_ == 1:
                    self.state = 3444
                    self.lockClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleUpdateStatement(self):
            return self.getTypedRuleContext(MySqlParser.SingleUpdateStatementContext,0)


        def multipleUpdateStatement(self):
            return self.getTypedRuleContext(MySqlParser.MultipleUpdateStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = MySqlParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_updateStatement)
        try:
            self.state = 3451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3449
                self.singleUpdateStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3450
                self.multipleUpdateStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def expressionsWithDefaults(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionsWithDefaultsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)




    def insertStatementValue(self):

        localctx = MySqlParser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 3471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT, MySqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3453
                self.selectStatement()
                pass
            elif token in [MySqlParser.VALUES, MySqlParser.VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3454
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.VALUES or _la==MySqlParser.VALUE):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3455
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
                if la_ == 1:
                    self.state = 3456
                    self.expressionsWithDefaults()


                self.state = 3459
                self.match(MySqlParser.RR_BRACKET)
                self.state = 3468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3460
                    self.match(MySqlParser.COMMA)
                    self.state = 3461
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3463
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
                    if la_ == 1:
                        self.state = 3462
                        self.expressionsWithDefaults()


                    self.state = 3465
                    self.match(MySqlParser.RR_BRACKET)
                    self.state = 3470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatedElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)




    def updatedElement(self):

        localctx = MySqlParser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3473
            self.fullColumnName()
            self.state = 3474
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 3477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.state = 3475
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 3476
                self.match(MySqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_assignmentField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentField" ):
                listener.enterAssignmentField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentField" ):
                listener.exitAssignmentField(self)




    def assignmentField(self):

        localctx = MySqlParser.AssignmentFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_assignmentField)
        try:
            self.state = 3481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3479
                self.uid()
                pass
            elif token in [MySqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3480
                self.match(MySqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def SHARE(self):
            return self.getToken(MySqlParser.SHARE, 0)

        def MODE(self):
            return self.getToken(MySqlParser.MODE, 0)

        def lockOption(self):
            return self.getTypedRuleContext(MySqlParser.LockOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_lockClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockClause" ):
                listener.enterLockClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockClause" ):
                listener.exitLockClause(self)




    def lockClause(self):

        localctx = MySqlParser.LockClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_lockClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.FOR]:
                self.state = 3483
                self.match(MySqlParser.FOR)
                self.state = 3484
                self.match(MySqlParser.UPDATE)
                pass
            elif token in [MySqlParser.LOCK]:
                self.state = 3485
                self.match(MySqlParser.LOCK)
                self.state = 3486
                self.match(MySqlParser.IN)
                self.state = 3487
                self.match(MySqlParser.SHARE)
                self.state = 3488
                self.match(MySqlParser.MODE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.state = 3491
                self.lockOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)




    def singleDeleteStatement(self):

        localctx = MySqlParser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3494
            self.match(MySqlParser.DELETE)
            self.state = 3496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 3495
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.QUICK:
                self.state = 3498
                self.match(MySqlParser.QUICK)


            self.state = 3502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3501
                self.match(MySqlParser.IGNORE)


            self.state = 3504
            self.match(MySqlParser.FROM)
            self.state = 3505
            self.tableName()
            self.state = 3511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 3506
                self.match(MySqlParser.PARTITION)
                self.state = 3507
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3508
                self.uidList()
                self.state = 3509
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3513
                self.match(MySqlParser.WHERE)
                self.state = 3514
                self.expression(0)


            self.state = 3518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ORDER:
                self.state = 3517
                self.orderByClause()


            self.state = 3522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3520
                self.match(MySqlParser.LIMIT)
                self.state = 3521
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleDeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DOT)
            else:
                return self.getToken(MySqlParser.DOT, i)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STAR)
            else:
                return self.getToken(MySqlParser.STAR, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_multipleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleDeleteStatement" ):
                listener.enterMultipleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleDeleteStatement" ):
                listener.exitMultipleDeleteStatement(self)




    def multipleDeleteStatement(self):

        localctx = MySqlParser.MultipleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_multipleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3524
            self.match(MySqlParser.DELETE)
            self.state = 3526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 3525
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                self.state = 3528
                self.match(MySqlParser.QUICK)


            self.state = 3532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3531
                self.match(MySqlParser.IGNORE)


            self.state = 3573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                self.state = 3534
                self.tableName()
                self.state = 3537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DOT:
                    self.state = 3535
                    self.match(MySqlParser.DOT)
                    self.state = 3536
                    self.match(MySqlParser.STAR)


                self.state = 3547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3539
                    self.match(MySqlParser.COMMA)
                    self.state = 3540
                    self.tableName()
                    self.state = 3543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DOT:
                        self.state = 3541
                        self.match(MySqlParser.DOT)
                        self.state = 3542
                        self.match(MySqlParser.STAR)


                    self.state = 3549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3550
                self.match(MySqlParser.FROM)
                self.state = 3551
                self.tableSources()
                pass
            elif token in [MySqlParser.FROM]:
                self.state = 3553
                self.match(MySqlParser.FROM)
                self.state = 3554
                self.tableName()
                self.state = 3557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DOT:
                    self.state = 3555
                    self.match(MySqlParser.DOT)
                    self.state = 3556
                    self.match(MySqlParser.STAR)


                self.state = 3567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3559
                    self.match(MySqlParser.COMMA)
                    self.state = 3560
                    self.tableName()
                    self.state = 3563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DOT:
                        self.state = 3561
                        self.match(MySqlParser.DOT)
                        self.state = 3562
                        self.match(MySqlParser.STAR)


                    self.state = 3569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3570
                self.match(MySqlParser.USING)
                self.state = 3571
                self.tableSources()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3575
                self.match(MySqlParser.WHERE)
                self.state = 3576
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerOpenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerOpenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerOpenStatement" ):
                listener.enterHandlerOpenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerOpenStatement" ):
                listener.exitHandlerOpenStatement(self)




    def handlerOpenStatement(self):

        localctx = MySqlParser.HandlerOpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_handlerOpenStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3579
            self.match(MySqlParser.HANDLER)
            self.state = 3580
            self.tableName()
            self.state = 3581
            self.match(MySqlParser.OPEN)
            self.state = 3586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.state = 3583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3582
                    self.match(MySqlParser.AS)


                self.state = 3585
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # UidContext
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def constants(self):
            return self.getTypedRuleContext(MySqlParser.ConstantsContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,0)


        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def PREV(self):
            return self.getToken(MySqlParser.PREV, 0)

        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerReadIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadIndexStatement" ):
                listener.enterHandlerReadIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadIndexStatement" ):
                listener.exitHandlerReadIndexStatement(self)




    def handlerReadIndexStatement(self):

        localctx = MySqlParser.HandlerReadIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_handlerReadIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3588
            self.match(MySqlParser.HANDLER)
            self.state = 3589
            self.tableName()
            self.state = 3590
            self.match(MySqlParser.READ)
            self.state = 3591
            localctx.index = self.uid()
            self.state = 3598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.EQUAL_SYMBOL, MySqlParser.GREATER_SYMBOL, MySqlParser.LESS_SYMBOL, MySqlParser.EXCLAMATION_SYMBOL]:
                self.state = 3592
                self.comparisonOperator()
                self.state = 3593
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3594
                self.constants()
                self.state = 3595
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.FIRST, MySqlParser.LAST, MySqlParser.NEXT, MySqlParser.PREV]:
                self.state = 3597
                localctx.moveOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FIRST or _la==MySqlParser.LAST or _la==MySqlParser.NEXT or _la==MySqlParser.PREV):
                    localctx.moveOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3600
                self.match(MySqlParser.WHERE)
                self.state = 3601
                self.expression(0)


            self.state = 3606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3604
                self.match(MySqlParser.LIMIT)
                self.state = 3605
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerReadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadStatement" ):
                listener.enterHandlerReadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadStatement" ):
                listener.exitHandlerReadStatement(self)




    def handlerReadStatement(self):

        localctx = MySqlParser.HandlerReadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_handlerReadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3608
            self.match(MySqlParser.HANDLER)
            self.state = 3609
            self.tableName()
            self.state = 3610
            self.match(MySqlParser.READ)
            self.state = 3611
            localctx.moveOrder = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.FIRST or _la==MySqlParser.NEXT):
                localctx.moveOrder = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3612
                self.match(MySqlParser.WHERE)
                self.state = 3613
                self.expression(0)


            self.state = 3618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3616
                self.match(MySqlParser.LIMIT)
                self.state = 3617
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerCloseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerCloseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerCloseStatement" ):
                listener.enterHandlerCloseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerCloseStatement" ):
                listener.exitHandlerCloseStatement(self)




    def handlerCloseStatement(self):

        localctx = MySqlParser.HandlerCloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_handlerCloseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3620
            self.match(MySqlParser.HANDLER)
            self.state = 3621
            self.tableName()
            self.state = 3622
            self.match(MySqlParser.CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleUpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_singleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleUpdateStatement" ):
                listener.enterSingleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleUpdateStatement" ):
                listener.exitSingleUpdateStatement(self)




    def singleUpdateStatement(self):

        localctx = MySqlParser.SingleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_singleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3624
            self.match(MySqlParser.UPDATE)
            self.state = 3626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 3625
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3628
                self.match(MySqlParser.IGNORE)


            self.state = 3631
            self.tableName()
            self.state = 3636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.AS) | (1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                self.state = 3633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3632
                    self.match(MySqlParser.AS)


                self.state = 3635
                self.uid()


            self.state = 3638
            self.match(MySqlParser.SET)
            self.state = 3639
            self.updatedElement()
            self.state = 3644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3640
                self.match(MySqlParser.COMMA)
                self.state = 3641
                self.updatedElement()
                self.state = 3646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3647
                self.match(MySqlParser.WHERE)
                self.state = 3648
                self.expression(0)


            self.state = 3652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ORDER:
                self.state = 3651
                self.orderByClause()


            self.state = 3655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3654
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleUpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_multipleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleUpdateStatement" ):
                listener.enterMultipleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleUpdateStatement" ):
                listener.exitMultipleUpdateStatement(self)




    def multipleUpdateStatement(self):

        localctx = MySqlParser.MultipleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_multipleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3657
            self.match(MySqlParser.UPDATE)
            self.state = 3659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 3658
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3661
                self.match(MySqlParser.IGNORE)


            self.state = 3664
            self.tableSources()
            self.state = 3665
            self.match(MySqlParser.SET)
            self.state = 3666
            self.updatedElement()
            self.state = 3671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3667
                self.match(MySqlParser.COMMA)
                self.state = 3668
                self.updatedElement()
                self.state = 3673
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3674
                self.match(MySqlParser.WHERE)
                self.state = 3675
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.OrderByExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = MySqlParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3678
            self.match(MySqlParser.ORDER)
            self.state = 3679
            self.match(MySqlParser.BY)
            self.state = 3680
            self.orderByExpression()
            self.state = 3685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3681
                self.match(MySqlParser.COMMA)
                self.state = 3682
                self.orderByExpression()
                self.state = 3687
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)




    def orderByExpression(self):

        localctx = MySqlParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3688
            self.expression(0)
            self.state = 3690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                self.state = 3689
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableSourceContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)




    def tableSources(self):

        localctx = MySqlParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_tableSources)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3692
            self.tableSource()
            self.state = 3697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3693
                self.match(MySqlParser.COMMA)
                self.state = 3694
                self.tableSource()
                self.state = 3699
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableSourceNestedContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(MySqlParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceNested" ):
                listener.enterTableSourceNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceNested" ):
                listener.exitTableSourceNested(self)


    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(MySqlParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)



    def tableSource(self):

        localctx = MySqlParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.state = 3717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,530,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.TableSourceBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3700
                self.tableSourceItem()
                self.state = 3704
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,528,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3701
                        self.joinPart() 
                    self.state = 3706
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,528,self._ctx)

                pass

            elif la_ == 2:
                localctx = MySqlParser.TableSourceNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3707
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3708
                self.tableSourceItem()
                self.state = 3712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 33)) & ~0x3f) == 0 and ((1 << (_la - 33)) & ((1 << (MySqlParser.CROSS - 33)) | (1 << (MySqlParser.INNER - 33)) | (1 << (MySqlParser.JOIN - 33)) | (1 << (MySqlParser.LEFT - 33)))) != 0) or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & ((1 << (MySqlParser.NATURAL - 109)) | (1 << (MySqlParser.RIGHT - 109)) | (1 << (MySqlParser.STRAIGHT_JOIN - 109)))) != 0):
                    self.state = 3709
                    self.joinPart()
                    self.state = 3714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3715
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceItemContext
            super().__init__(parser)
            self.parenthesisSubquery = None # SelectStatementContext
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceItemContext
            super().__init__(parser)
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def indexHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexHintContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexHintContext,i)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)


    class TableSourcesItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourcesItem" ):
                listener.enterTableSourcesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourcesItem" ):
                listener.exitTableSourcesItem(self)



    def tableSourceItem(self):

        localctx = MySqlParser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_tableSourceItem)
        self._la = 0 # Token type
        try:
            self.state = 3759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3719
                self.tableName()
                self.state = 3725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PARTITION:
                    self.state = 3720
                    self.match(MySqlParser.PARTITION)
                    self.state = 3721
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3722
                    self.uidList()
                    self.state = 3723
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 3731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
                if la_ == 1:
                    self.state = 3728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3727
                        self.match(MySqlParser.AS)


                    self.state = 3730
                    localctx.alias = self.uid()


                self.state = 3741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                if la_ == 1:
                    self.state = 3733
                    self.indexHint()
                    self.state = 3738
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,534,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3734
                            self.match(MySqlParser.COMMA)
                            self.state = 3735
                            self.indexHint() 
                        self.state = 3740
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,534,self._ctx)



                pass

            elif la_ == 2:
                localctx = MySqlParser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3748
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
                if la_ == 1:
                    self.state = 3743
                    self.selectStatement()
                    pass

                elif la_ == 2:
                    self.state = 3744
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3745
                    localctx.parenthesisSubquery = self.selectStatement()
                    self.state = 3746
                    self.match(MySqlParser.RR_BRACKET)
                    pass


                self.state = 3751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3750
                    self.match(MySqlParser.AS)


                self.state = 3753
                localctx.alias = self.uid()
                pass

            elif la_ == 3:
                localctx = MySqlParser.TableSourcesItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3755
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3756
                self.tableSources()
                self.state = 3757
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexHintAction = None # Token
            self.keyFormat = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def FORCE(self):
            return self.getToken(MySqlParser.FORCE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def indexHintType(self):
            return self.getTypedRuleContext(MySqlParser.IndexHintTypeContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_indexHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHint" ):
                listener.enterIndexHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHint" ):
                listener.exitIndexHint(self)




    def indexHint(self):

        localctx = MySqlParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761
            localctx.indexHintAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.FORCE or _la==MySqlParser.IGNORE or _la==MySqlParser.USE):
                localctx.indexHintAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3762
            localctx.keyFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                localctx.keyFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 3763
                self.match(MySqlParser.FOR)
                self.state = 3764
                self.indexHintType()


            self.state = 3767
            self.match(MySqlParser.LR_BRACKET)
            self.state = 3768
            self.uidList()
            self.state = 3769
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexHintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintType" ):
                listener.enterIndexHintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintType" ):
                listener.exitIndexHintType(self)




    def indexHintType(self):

        localctx = MySqlParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_indexHintType)
        try:
            self.state = 3776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.JOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3771
                self.match(MySqlParser.JOIN)
                pass
            elif token in [MySqlParser.ORDER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3772
                self.match(MySqlParser.ORDER)
                self.state = 3773
                self.match(MySqlParser.BY)
                pass
            elif token in [MySqlParser.GROUP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3774
                self.match(MySqlParser.GROUP)
                self.state = 3775
                self.match(MySqlParser.BY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def INNER(self):
            return self.getToken(MySqlParser.INNER, 0)
        def CROSS(self):
            return self.getToken(MySqlParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)


    class NaturalJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NATURAL(self):
            return self.getToken(MySqlParser.NATURAL, 0)
        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(MySqlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoin" ):
                listener.enterNaturalJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoin" ):
                listener.exitNaturalJoin(self)


    class OuterJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)
        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def OUTER(self):
            return self.getToken(MySqlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoin" ):
                listener.enterOuterJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoin" ):
                listener.exitOuterJoin(self)


    class StraightJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRAIGHT_JOIN(self):
            return self.getToken(MySqlParser.STRAIGHT_JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStraightJoin" ):
                listener.enterStraightJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStraightJoin" ):
                listener.exitStraightJoin(self)



    def joinPart(self):

        localctx = MySqlParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.state = 3822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CROSS, MySqlParser.INNER, MySqlParser.JOIN]:
                localctx = MySqlParser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CROSS or _la==MySqlParser.INNER:
                    self.state = 3778
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CROSS or _la==MySqlParser.INNER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3781
                self.match(MySqlParser.JOIN)
                self.state = 3782
                self.tableSourceItem()
                self.state = 3790
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,542,self._ctx)
                if la_ == 1:
                    self.state = 3783
                    self.match(MySqlParser.ON)
                    self.state = 3784
                    self.expression(0)

                elif la_ == 2:
                    self.state = 3785
                    self.match(MySqlParser.USING)
                    self.state = 3786
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3787
                    self.uidList()
                    self.state = 3788
                    self.match(MySqlParser.RR_BRACKET)


                pass
            elif token in [MySqlParser.STRAIGHT_JOIN]:
                localctx = MySqlParser.StraightJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3792
                self.match(MySqlParser.STRAIGHT_JOIN)
                self.state = 3793
                self.tableSourceItem()
                self.state = 3796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
                if la_ == 1:
                    self.state = 3794
                    self.match(MySqlParser.ON)
                    self.state = 3795
                    self.expression(0)


                pass
            elif token in [MySqlParser.LEFT, MySqlParser.RIGHT]:
                localctx = MySqlParser.OuterJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3798
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LEFT or _la==MySqlParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.OUTER:
                    self.state = 3799
                    self.match(MySqlParser.OUTER)


                self.state = 3802
                self.match(MySqlParser.JOIN)
                self.state = 3803
                self.tableSourceItem()
                self.state = 3811
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.ON]:
                    self.state = 3804
                    self.match(MySqlParser.ON)
                    self.state = 3805
                    self.expression(0)
                    pass
                elif token in [MySqlParser.USING]:
                    self.state = 3806
                    self.match(MySqlParser.USING)
                    self.state = 3807
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3808
                    self.uidList()
                    self.state = 3809
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.NATURAL]:
                localctx = MySqlParser.NaturalJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3813
                self.match(MySqlParser.NATURAL)
                self.state = 3818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT:
                    self.state = 3814
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.LEFT or _la==MySqlParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3816
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.OUTER:
                        self.state = 3815
                        self.match(MySqlParser.OUTER)




                self.state = 3820
                self.match(MySqlParser.JOIN)
                self.state = 3821
                self.tableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)




    def queryExpression(self):

        localctx = MySqlParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_queryExpression)
        try:
            self.state = 3832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3824
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3825
                self.querySpecification()
                self.state = 3826
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3828
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3829
                self.queryExpression()
                self.state = 3830
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionNointoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_queryExpressionNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionNointo" ):
                listener.enterQueryExpressionNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionNointo" ):
                listener.exitQueryExpressionNointo(self)




    def queryExpressionNointo(self):

        localctx = MySqlParser.QueryExpressionNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_queryExpressionNointo)
        try:
            self.state = 3842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3834
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3835
                self.querySpecificationNointo()
                self.state = 3836
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3838
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3839
                self.queryExpressionNointo()
                self.state = 3840
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(MySqlParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectSpecContext,i)


        def selectIntoExpression(self):
            return self.getTypedRuleContext(MySqlParser.SelectIntoExpressionContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(MySqlParser.FromClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(MySqlParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(MySqlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(MySqlParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = MySqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.state = 3902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,567,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3844
                self.match(MySqlParser.SELECT)
                self.state = 3848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,551,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3845
                        self.selectSpec() 
                    self.state = 3850
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,551,self._ctx)

                self.state = 3851
                self.selectElements()
                self.state = 3853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INTO:
                    self.state = 3852
                    self.selectIntoExpression()


                self.state = 3856
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
                if la_ == 1:
                    self.state = 3855
                    self.fromClause()


                self.state = 3859
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
                if la_ == 1:
                    self.state = 3858
                    self.groupByClause()


                self.state = 3862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.HAVING:
                    self.state = 3861
                    self.havingClause()


                self.state = 3865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WINDOW:
                    self.state = 3864
                    self.windowClause()


                self.state = 3868
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
                if la_ == 1:
                    self.state = 3867
                    self.orderByClause()


                self.state = 3871
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,558,self._ctx)
                if la_ == 1:
                    self.state = 3870
                    self.limitClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3873
                self.match(MySqlParser.SELECT)
                self.state = 3877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,559,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3874
                        self.selectSpec() 
                    self.state = 3879
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,559,self._ctx)

                self.state = 3880
                self.selectElements()
                self.state = 3882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
                if la_ == 1:
                    self.state = 3881
                    self.fromClause()


                self.state = 3885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
                if la_ == 1:
                    self.state = 3884
                    self.groupByClause()


                self.state = 3888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.HAVING:
                    self.state = 3887
                    self.havingClause()


                self.state = 3891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WINDOW:
                    self.state = 3890
                    self.windowClause()


                self.state = 3894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
                if la_ == 1:
                    self.state = 3893
                    self.orderByClause()


                self.state = 3897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
                if la_ == 1:
                    self.state = 3896
                    self.limitClause()


                self.state = 3900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INTO:
                    self.state = 3899
                    self.selectIntoExpression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationNointoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(MySqlParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(MySqlParser.FromClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(MySqlParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(MySqlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(MySqlParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_querySpecificationNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecificationNointo" ):
                listener.enterQuerySpecificationNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecificationNointo" ):
                listener.exitQuerySpecificationNointo(self)




    def querySpecificationNointo(self):

        localctx = MySqlParser.QuerySpecificationNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_querySpecificationNointo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3904
            self.match(MySqlParser.SELECT)
            self.state = 3908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,568,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3905
                    self.selectSpec() 
                self.state = 3910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,568,self._ctx)

            self.state = 3911
            self.selectElements()
            self.state = 3913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,569,self._ctx)
            if la_ == 1:
                self.state = 3912
                self.fromClause()


            self.state = 3916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
            if la_ == 1:
                self.state = 3915
                self.groupByClause()


            self.state = 3919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.HAVING:
                self.state = 3918
                self.havingClause()


            self.state = 3922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WINDOW:
                self.state = 3921
                self.windowClause()


            self.state = 3925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
            if la_ == 1:
                self.state = 3924
                self.orderByClause()


            self.state = 3928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
            if la_ == 1:
                self.state = 3927
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unionParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesis" ):
                listener.enterUnionParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesis" ):
                listener.exitUnionParenthesis(self)




    def unionParenthesis(self):

        localctx = MySqlParser.UnionParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_unionParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3930
            self.match(MySqlParser.UNION)
            self.state = 3932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                self.state = 3931
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3934
            self.queryExpressionNointo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionStatement" ):
                listener.enterUnionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionStatement" ):
                listener.exitUnionStatement(self)




    def unionStatement(self):

        localctx = MySqlParser.UnionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_unionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3936
            self.match(MySqlParser.UNION)
            self.state = 3938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                self.state = 3937
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT]:
                self.state = 3940
                self.querySpecificationNointo()
                pass
            elif token in [MySqlParser.LR_BRACKET]:
                self.state = 3941
                self.queryExpressionNointo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(MySqlParser.DISTINCTROW, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(MySqlParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(MySqlParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(MySqlParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(MySqlParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(MySqlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(MySqlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(MySqlParser.SQL_NO_CACHE, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSpec" ):
                listener.enterSelectSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSpec" ):
                listener.exitSelectSpec(self)




    def selectSpec(self):

        localctx = MySqlParser.SelectSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_selectSpec)
        self._la = 0 # Token type
        try:
            self.state = 3952
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALL, MySqlParser.DISTINCT, MySqlParser.DISTINCTROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3944
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.ALL) | (1 << MySqlParser.DISTINCT) | (1 << MySqlParser.DISTINCTROW))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.HIGH_PRIORITY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3945
                self.match(MySqlParser.HIGH_PRIORITY)
                pass
            elif token in [MySqlParser.STRAIGHT_JOIN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3946
                self.match(MySqlParser.STRAIGHT_JOIN)
                pass
            elif token in [MySqlParser.SQL_SMALL_RESULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3947
                self.match(MySqlParser.SQL_SMALL_RESULT)
                pass
            elif token in [MySqlParser.SQL_BIG_RESULT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3948
                self.match(MySqlParser.SQL_BIG_RESULT)
                pass
            elif token in [MySqlParser.SQL_BUFFER_RESULT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3949
                self.match(MySqlParser.SQL_BUFFER_RESULT)
                pass
            elif token in [MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3950
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SQL_CACHE or _la==MySqlParser.SQL_NO_CACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.SQL_CALC_FOUND_ROWS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3951
                self.match(MySqlParser.SQL_CALC_FOUND_ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectElementContext,i)


        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)




    def selectElements(self):

        localctx = MySqlParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,579,self._ctx)
            if la_ == 1:
                self.state = 3954
                localctx.star = self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                self.state = 3955
                self.selectElement()
                pass


            self.state = 3962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3958
                self.match(MySqlParser.COMMA)
                self.state = 3959
                self.selectElement()
                self.state = 3964
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(MySqlParser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)



    def selectElement(self):

        localctx = MySqlParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 3994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,588,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3965
                self.fullId()
                self.state = 3966
                self.match(MySqlParser.DOT)
                self.state = 3967
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                localctx = MySqlParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3969
                self.fullColumnName()
                self.state = 3974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,582,self._ctx)
                if la_ == 1:
                    self.state = 3971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3970
                        self.match(MySqlParser.AS)


                    self.state = 3973
                    self.uid()


                pass

            elif la_ == 3:
                localctx = MySqlParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3976
                self.functionCall()
                self.state = 3981
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
                if la_ == 1:
                    self.state = 3978
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3977
                        self.match(MySqlParser.AS)


                    self.state = 3980
                    self.uid()


                pass

            elif la_ == 4:
                localctx = MySqlParser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3985
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,585,self._ctx)
                if la_ == 1:
                    self.state = 3983
                    self.match(MySqlParser.LOCAL_ID)
                    self.state = 3984
                    self.match(MySqlParser.VAR_ASSIGN)


                self.state = 3987
                self.expression(0)
                self.state = 3992
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,587,self._ctx)
                if la_ == 1:
                    self.state = 3989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3988
                        self.match(MySqlParser.AS)


                    self.state = 3991
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectIntoExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectIntoExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectIntoVariablesContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoVariables" ):
                listener.enterSelectIntoVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoVariables" ):
                listener.exitSelectIntoVariables(self)


    class SelectIntoTextFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.filename = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def OUTFILE(self):
            return self.getToken(MySqlParser.OUTFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def LINES(self):
            return self.getToken(MySqlParser.LINES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectFieldsIntoContext,i)

        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectLinesIntoContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoTextFile" ):
                listener.enterSelectIntoTextFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoTextFile" ):
                listener.exitSelectIntoTextFile(self)


    class SelectIntoDumpFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def DUMPFILE(self):
            return self.getToken(MySqlParser.DUMPFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoDumpFile" ):
                listener.enterSelectIntoDumpFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoDumpFile" ):
                listener.exitSelectIntoDumpFile(self)



    def selectIntoExpression(self):

        localctx = MySqlParser.SelectIntoExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_selectIntoExpression)
        self._la = 0 # Token type
        try:
            self.state = 4032
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SelectIntoVariablesContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3996
                self.match(MySqlParser.INTO)
                self.state = 3997
                self.assignmentField()
                self.state = 4002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3998
                    self.match(MySqlParser.COMMA)
                    self.state = 3999
                    self.assignmentField()
                    self.state = 4004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.SelectIntoDumpFileContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4005
                self.match(MySqlParser.INTO)
                self.state = 4006
                self.match(MySqlParser.DUMPFILE)
                self.state = 4007
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = MySqlParser.SelectIntoTextFileContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4008
                self.match(MySqlParser.INTO)
                self.state = 4009
                self.match(MySqlParser.OUTFILE)
                self.state = 4010
                localctx.filename = self.match(MySqlParser.STRING_LITERAL)
                self.state = 4014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CHARACTER:
                    self.state = 4011
                    self.match(MySqlParser.CHARACTER)
                    self.state = 4012
                    self.match(MySqlParser.SET)
                    self.state = 4013
                    localctx.charset = self.charsetName()


                self.state = 4022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,592,self._ctx)
                if la_ == 1:
                    self.state = 4016
                    localctx.fieldsFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS):
                        localctx.fieldsFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4018 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4017
                        self.selectFieldsInto()
                        self.state = 4020 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==MySqlParser.ENCLOSED or _la==MySqlParser.ESCAPED or _la==MySqlParser.OPTIONALLY or _la==MySqlParser.TERMINATED):
                            break



                self.state = 4030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINES:
                    self.state = 4024
                    self.match(MySqlParser.LINES)
                    self.state = 4026 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4025
                        self.selectLinesInto()
                        self.state = 4028 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==MySqlParser.STARTING or _la==MySqlParser.TERMINATED):
                            break



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectFieldsIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.terminationField = None # Token
            self.enclosion = None # Token
            self.escaping = None # Token

        def TERMINATED(self):
            return self.getToken(MySqlParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENCLOSED(self):
            return self.getToken(MySqlParser.ENCLOSED, 0)

        def OPTIONALLY(self):
            return self.getToken(MySqlParser.OPTIONALLY, 0)

        def ESCAPED(self):
            return self.getToken(MySqlParser.ESCAPED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectFieldsInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFieldsInto" ):
                listener.enterSelectFieldsInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFieldsInto" ):
                listener.exitSelectFieldsInto(self)




    def selectFieldsInto(self):

        localctx = MySqlParser.SelectFieldsIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_selectFieldsInto)
        self._la = 0 # Token type
        try:
            self.state = 4046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.TERMINATED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4034
                self.match(MySqlParser.TERMINATED)
                self.state = 4035
                self.match(MySqlParser.BY)
                self.state = 4036
                localctx.terminationField = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.ENCLOSED, MySqlParser.OPTIONALLY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.OPTIONALLY:
                    self.state = 4037
                    self.match(MySqlParser.OPTIONALLY)


                self.state = 4040
                self.match(MySqlParser.ENCLOSED)
                self.state = 4041
                self.match(MySqlParser.BY)
                self.state = 4042
                localctx.enclosion = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.ESCAPED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4043
                self.match(MySqlParser.ESCAPED)
                self.state = 4044
                self.match(MySqlParser.BY)
                self.state = 4045
                localctx.escaping = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectLinesIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.starting = None # Token
            self.terminationLine = None # Token

        def STARTING(self):
            return self.getToken(MySqlParser.STARTING, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def TERMINATED(self):
            return self.getToken(MySqlParser.TERMINATED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectLinesInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectLinesInto" ):
                listener.enterSelectLinesInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectLinesInto" ):
                listener.exitSelectLinesInto(self)




    def selectLinesInto(self):

        localctx = MySqlParser.SelectLinesIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_selectLinesInto)
        try:
            self.state = 4054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STARTING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4048
                self.match(MySqlParser.STARTING)
                self.state = 4049
                self.match(MySqlParser.BY)
                self.state = 4050
                localctx.starting = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.TERMINATED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4051
                self.match(MySqlParser.TERMINATED)
                self.state = 4052
                self.match(MySqlParser.BY)
                self.state = 4053
                localctx.terminationLine = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = MySqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_fromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FROM:
                self.state = 4056
                self.match(MySqlParser.FROM)
                self.state = 4057
                self.tableSources()


            self.state = 4062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 4060
                self.match(MySqlParser.WHERE)
                self.state = 4061
                localctx.whereExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(MySqlParser.GroupByItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def ROLLUP(self):
            return self.getToken(MySqlParser.ROLLUP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = MySqlParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4064
            self.match(MySqlParser.GROUP)
            self.state = 4065
            self.match(MySqlParser.BY)
            self.state = 4066
            self.groupByItem()
            self.state = 4071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4067
                self.match(MySqlParser.COMMA)
                self.state = 4068
                self.groupByItem()
                self.state = 4073
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,602,self._ctx)
            if la_ == 1:
                self.state = 4074
                self.match(MySqlParser.WITH)
                self.state = 4075
                self.match(MySqlParser.ROLLUP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.havingExpr = None # ExpressionContext

        def HAVING(self):
            return self.getToken(MySqlParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = MySqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4078
            self.match(MySqlParser.HAVING)
            self.state = 4079
            localctx.havingExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(MySqlParser.WINDOW, 0)

        def windowName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.WindowNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.WindowNameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AS)
            else:
                return self.getToken(MySqlParser.AS, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def windowSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.WindowSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.WindowSpecContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)




    def windowClause(self):

        localctx = MySqlParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4081
            self.match(MySqlParser.WINDOW)
            self.state = 4082
            self.windowName()
            self.state = 4083
            self.match(MySqlParser.AS)
            self.state = 4084
            self.match(MySqlParser.LR_BRACKET)
            self.state = 4085
            self.windowSpec()
            self.state = 4086
            self.match(MySqlParser.RR_BRACKET)
            self.state = 4096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4087
                self.match(MySqlParser.COMMA)
                self.state = 4088
                self.windowName()
                self.state = 4089
                self.match(MySqlParser.AS)
                self.state = 4090
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4091
                self.windowSpec()
                self.state = 4092
                self.match(MySqlParser.RR_BRACKET)
                self.state = 4098
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)




    def groupByItem(self):

        localctx = MySqlParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4099
            self.expression(0)
            self.state = 4101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,604,self._ctx)
            if la_ == 1:
                self.state = 4100
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # LimitClauseAtomContext
            self.limit = None # LimitClauseAtomContext

        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(MySqlParser.OFFSET, 0)

        def limitClauseAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LimitClauseAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,i)


        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = MySqlParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4103
            self.match(MySqlParser.LIMIT)
            self.state = 4114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,606,self._ctx)
            if la_ == 1:
                self.state = 4107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,605,self._ctx)
                if la_ == 1:
                    self.state = 4104
                    localctx.offset = self.limitClauseAtom()
                    self.state = 4105
                    self.match(MySqlParser.COMMA)


                self.state = 4109
                localctx.limit = self.limitClauseAtom()
                pass

            elif la_ == 2:
                self.state = 4110
                localctx.limit = self.limitClauseAtom()
                self.state = 4111
                self.match(MySqlParser.OFFSET)
                self.state = 4112
                localctx.offset = self.limitClauseAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def simpleId(self):
            return self.getTypedRuleContext(MySqlParser.SimpleIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_limitClauseAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClauseAtom" ):
                listener.enterLimitClauseAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClauseAtom" ):
                listener.exitLimitClauseAtom(self)




    def limitClauseAtom(self):

        localctx = MySqlParser.LimitClauseAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_limitClauseAtom)
        try:
            self.state = 4119
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4116
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4117
                self.mysqlVariable()
                pass
            elif token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4118
                self.simpleId()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TransactionModeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_startTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)




    def startTransaction(self):

        localctx = MySqlParser.StartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_startTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4121
            self.match(MySqlParser.START)
            self.state = 4122
            self.match(MySqlParser.TRANSACTION)
            self.state = 4131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.READ or _la==MySqlParser.WITH:
                self.state = 4123
                self.transactionMode()
                self.state = 4128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4124
                    self.match(MySqlParser.COMMA)
                    self.state = 4125
                    self.transactionMode()
                    self.state = 4130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_beginWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginWork" ):
                listener.enterBeginWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginWork" ):
                listener.exitBeginWork(self)




    def beginWork(self):

        localctx = MySqlParser.BeginWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_beginWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4133
            self.match(MySqlParser.BEGIN)
            self.state = 4135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 4134
                self.match(MySqlParser.WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NO)
            else:
                return self.getToken(MySqlParser.NO, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_commitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitWork" ):
                listener.enterCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitWork" ):
                listener.exitCommitWork(self)




    def commitWork(self):

        localctx = MySqlParser.CommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_commitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4137
            self.match(MySqlParser.COMMIT)
            self.state = 4139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 4138
                self.match(MySqlParser.WORK)


            self.state = 4146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AND:
                self.state = 4141
                self.match(MySqlParser.AND)
                self.state = 4143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 4142
                    localctx.nochain = self.match(MySqlParser.NO)


                self.state = 4145
                self.match(MySqlParser.CHAIN)


            self.state = 4152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,615,self._ctx)
            if la_ == 1:
                self.state = 4149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 4148
                    localctx.norelease = self.match(MySqlParser.NO)


                self.state = 4151
                self.match(MySqlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NO)
            else:
                return self.getToken(MySqlParser.NO, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_rollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackWork" ):
                listener.enterRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackWork" ):
                listener.exitRollbackWork(self)




    def rollbackWork(self):

        localctx = MySqlParser.RollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_rollbackWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4154
            self.match(MySqlParser.ROLLBACK)
            self.state = 4156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 4155
                self.match(MySqlParser.WORK)


            self.state = 4163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AND:
                self.state = 4158
                self.match(MySqlParser.AND)
                self.state = 4160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 4159
                    localctx.nochain = self.match(MySqlParser.NO)


                self.state = 4162
                self.match(MySqlParser.CHAIN)


            self.state = 4169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
            if la_ == 1:
                self.state = 4166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 4165
                    localctx.norelease = self.match(MySqlParser.NO)


                self.state = 4168
                self.match(MySqlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepointStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_savepointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepointStatement" ):
                listener.enterSavepointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepointStatement" ):
                listener.exitSavepointStatement(self)




    def savepointStatement(self):

        localctx = MySqlParser.SavepointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_savepointStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4171
            self.match(MySqlParser.SAVEPOINT)
            self.state = 4172
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_rollbackStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackStatement" ):
                listener.enterRollbackStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackStatement" ):
                listener.exitRollbackStatement(self)




    def rollbackStatement(self):

        localctx = MySqlParser.RollbackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_rollbackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4174
            self.match(MySqlParser.ROLLBACK)
            self.state = 4176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 4175
                self.match(MySqlParser.WORK)


            self.state = 4178
            self.match(MySqlParser.TO)
            self.state = 4180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
            if la_ == 1:
                self.state = 4179
                self.match(MySqlParser.SAVEPOINT)


            self.state = 4182
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReleaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_releaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReleaseStatement" ):
                listener.enterReleaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReleaseStatement" ):
                listener.exitReleaseStatement(self)




    def releaseStatement(self):

        localctx = MySqlParser.ReleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_releaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4184
            self.match(MySqlParser.RELEASE)
            self.state = 4185
            self.match(MySqlParser.SAVEPOINT)
            self.state = 4186
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def lockTableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LockTableElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LockTableElementContext,i)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_lockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTables" ):
                listener.enterLockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTables" ):
                listener.exitLockTables(self)




    def lockTables(self):

        localctx = MySqlParser.LockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_lockTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4188
            self.match(MySqlParser.LOCK)
            self.state = 4189
            _la = self._input.LA(1)
            if not(_la==MySqlParser.TABLE or _la==MySqlParser.TABLES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4190
            self.lockTableElement()
            self.state = 4195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4191
                self.match(MySqlParser.COMMA)
                self.state = 4192
                self.lockTableElement()
                self.state = 4197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOWAIT or _la==MySqlParser.WAIT:
                self.state = 4198
                self.waitNowaitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(MySqlParser.UNLOCK, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unlockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockTables" ):
                listener.enterUnlockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockTables" ):
                listener.exitUnlockTables(self)




    def unlockTables(self):

        localctx = MySqlParser.UnlockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_unlockTables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4201
            self.match(MySqlParser.UNLOCK)
            self.state = 4202
            self.match(MySqlParser.TABLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAutocommitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.autocommitValue = None # Token

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def AUTOCOMMIT(self):
            return self.getToken(MySqlParser.AUTOCOMMIT, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_setAutocommitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommitStatement" ):
                listener.enterSetAutocommitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommitStatement" ):
                listener.exitSetAutocommitStatement(self)




    def setAutocommitStatement(self):

        localctx = MySqlParser.SetAutocommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_setAutocommitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4204
            self.match(MySqlParser.SET)
            self.state = 4205
            self.match(MySqlParser.AUTOCOMMIT)
            self.state = 4206
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 4207
            localctx.autocommitValue = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                localctx.autocommitValue = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.transactionContext = None # Token

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def transactionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TransactionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TransactionOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_setTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransactionStatement" ):
                listener.enterSetTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransactionStatement" ):
                listener.exitSetTransactionStatement(self)




    def setTransactionStatement(self):

        localctx = MySqlParser.SetTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_setTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4209
            self.match(MySqlParser.SET)
            self.state = 4211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION:
                self.state = 4210
                localctx.transactionContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION):
                    localctx.transactionContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4213
            self.match(MySqlParser.TRANSACTION)
            self.state = 4214
            self.transactionOption()
            self.state = 4219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4215
                self.match(MySqlParser.COMMA)
                self.state = 4216
                self.transactionOption()
                self.state = 4221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CONSISTENT(self):
            return self.getToken(MySqlParser.CONSISTENT, 0)

        def SNAPSHOT(self):
            return self.getToken(MySqlParser.SNAPSHOT, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)




    def transactionMode(self):

        localctx = MySqlParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_transactionMode)
        try:
            self.state = 4229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,627,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4222
                self.match(MySqlParser.WITH)
                self.state = 4223
                self.match(MySqlParser.CONSISTENT)
                self.state = 4224
                self.match(MySqlParser.SNAPSHOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4225
                self.match(MySqlParser.READ)
                self.state = 4226
                self.match(MySqlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4227
                self.match(MySqlParser.READ)
                self.state = 4228
                self.match(MySqlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def lockAction(self):
            return self.getTypedRuleContext(MySqlParser.LockActionContext,0)


        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockTableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTableElement" ):
                listener.enterLockTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTableElement" ):
                listener.exitLockTableElement(self)




    def lockTableElement(self):

        localctx = MySqlParser.LockTableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_lockTableElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4231
            self.tableName()
            self.state = 4236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.AS) | (1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                self.state = 4233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 4232
                    self.match(MySqlParser.AS)


                self.state = 4235
                self.uid()


            self.state = 4238
            self.lockAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockAction" ):
                listener.enterLockAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockAction" ):
                listener.exitLockAction(self)




    def lockAction(self):

        localctx = MySqlParser.LockActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_lockAction)
        self._la = 0 # Token type
        try:
            self.state = 4248
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.READ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4240
                self.match(MySqlParser.READ)
                self.state = 4242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LOCAL:
                    self.state = 4241
                    self.match(MySqlParser.LOCAL)


                pass
            elif token in [MySqlParser.LOW_PRIORITY, MySqlParser.WRITE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LOW_PRIORITY:
                    self.state = 4244
                    self.match(MySqlParser.LOW_PRIORITY)


                self.state = 4247
                self.match(MySqlParser.WRITE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(MySqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)

        def transactionLevel(self):
            return self.getTypedRuleContext(MySqlParser.TransactionLevelContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionOption" ):
                listener.enterTransactionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionOption" ):
                listener.exitTransactionOption(self)




    def transactionOption(self):

        localctx = MySqlParser.TransactionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_transactionOption)
        try:
            self.state = 4257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,633,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4250
                self.match(MySqlParser.ISOLATION)
                self.state = 4251
                self.match(MySqlParser.LEVEL)
                self.state = 4252
                self.transactionLevel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4253
                self.match(MySqlParser.READ)
                self.state = 4254
                self.match(MySqlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4255
                self.match(MySqlParser.READ)
                self.state = 4256
                self.match(MySqlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(MySqlParser.REPEATABLE, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def COMMITTED(self):
            return self.getToken(MySqlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(MySqlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(MySqlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevel" ):
                listener.enterTransactionLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevel" ):
                listener.exitTransactionLevel(self)




    def transactionLevel(self):

        localctx = MySqlParser.TransactionLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_transactionLevel)
        try:
            self.state = 4266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,634,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4259
                self.match(MySqlParser.REPEATABLE)
                self.state = 4260
                self.match(MySqlParser.READ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4261
                self.match(MySqlParser.READ)
                self.state = 4262
                self.match(MySqlParser.COMMITTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4263
                self.match(MySqlParser.READ)
                self.state = 4264
                self.match(MySqlParser.UNCOMMITTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4265
                self.match(MySqlParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def masterOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.MasterOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.MasterOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_changeMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMaster" ):
                listener.enterChangeMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMaster" ):
                listener.exitChangeMaster(self)




    def changeMaster(self):

        localctx = MySqlParser.ChangeMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_changeMaster)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4268
            self.match(MySqlParser.CHANGE)
            self.state = 4269
            self.match(MySqlParser.MASTER)
            self.state = 4270
            self.match(MySqlParser.TO)
            self.state = 4271
            self.masterOption()
            self.state = 4276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4272
                self.match(MySqlParser.COMMA)
                self.state = 4273
                self.masterOption()
                self.state = 4278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 4279
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeReplicationFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def FILTER(self):
            return self.getToken(MySqlParser.FILTER, 0)

        def replicationFilter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ReplicationFilterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ReplicationFilterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_changeReplicationFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeReplicationFilter" ):
                listener.enterChangeReplicationFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeReplicationFilter" ):
                listener.exitChangeReplicationFilter(self)




    def changeReplicationFilter(self):

        localctx = MySqlParser.ChangeReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_changeReplicationFilter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4282
            self.match(MySqlParser.CHANGE)
            self.state = 4283
            self.match(MySqlParser.REPLICATION)
            self.state = 4284
            self.match(MySqlParser.FILTER)
            self.state = 4285
            self.replicationFilter()
            self.state = 4290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4286
                self.match(MySqlParser.COMMA)
                self.state = 4287
                self.replicationFilter()
                self.state = 4292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurgeBinaryLogsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.purgeFormat = None # Token
            self.fileName = None # Token
            self.timeValue = None # Token

        def PURGE(self):
            return self.getToken(MySqlParser.PURGE, 0)

        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def BEFORE(self):
            return self.getToken(MySqlParser.BEFORE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_purgeBinaryLogs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurgeBinaryLogs" ):
                listener.enterPurgeBinaryLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurgeBinaryLogs" ):
                listener.exitPurgeBinaryLogs(self)




    def purgeBinaryLogs(self):

        localctx = MySqlParser.PurgeBinaryLogsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_purgeBinaryLogs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4293
            self.match(MySqlParser.PURGE)
            self.state = 4294
            localctx.purgeFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BINARY or _la==MySqlParser.MASTER):
                localctx.purgeFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4295
            self.match(MySqlParser.LOGS)
            self.state = 4300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.TO]:
                self.state = 4296
                self.match(MySqlParser.TO)
                self.state = 4297
                localctx.fileName = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.BEFORE]:
                self.state = 4298
                self.match(MySqlParser.BEFORE)
                self.state = 4299
                localctx.timeValue = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetMasterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resetMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetMaster" ):
                listener.enterResetMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetMaster" ):
                listener.exitResetMaster(self)




    def resetMaster(self):

        localctx = MySqlParser.ResetMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_resetMaster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4302
            self.match(MySqlParser.RESET)
            self.state = 4303
            self.match(MySqlParser.MASTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_resetSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSlave" ):
                listener.enterResetSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSlave" ):
                listener.exitResetSlave(self)




    def resetSlave(self):

        localctx = MySqlParser.ResetSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_resetSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4305
            self.match(MySqlParser.RESET)
            self.state = 4306
            self.match(MySqlParser.SLAVE)
            self.state = 4308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALL:
                self.state = 4307
                self.match(MySqlParser.ALL)


            self.state = 4311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 4310
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ThreadTypeContext,i)


        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def untilOption(self):
            return self.getTypedRuleContext(MySqlParser.UntilOptionContext,0)


        def connectionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConnectionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConnectionOptionContext,i)


        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_startSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartSlave" ):
                listener.enterStartSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartSlave" ):
                listener.exitStartSlave(self)




    def startSlave(self):

        localctx = MySqlParser.StartSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_startSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4313
            self.match(MySqlParser.START)
            self.state = 4314
            self.match(MySqlParser.SLAVE)
            self.state = 4323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IO_THREAD or _la==MySqlParser.SQL_THREAD:
                self.state = 4315
                self.threadType()
                self.state = 4320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4316
                    self.match(MySqlParser.COMMA)
                    self.state = 4317
                    self.threadType()
                    self.state = 4322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.UNTIL:
                self.state = 4325
                self.match(MySqlParser.UNTIL)
                self.state = 4326
                self.untilOption()


            self.state = 4332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DEFAULT_AUTH or _la==MySqlParser.PASSWORD or _la==MySqlParser.PLUGIN_DIR or _la==MySqlParser.USER:
                self.state = 4329
                self.connectionOption()
                self.state = 4334
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 4335
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ThreadTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_stopSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopSlave" ):
                listener.enterStopSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopSlave" ):
                listener.exitStopSlave(self)




    def stopSlave(self):

        localctx = MySqlParser.StopSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_stopSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4338
            self.match(MySqlParser.STOP)
            self.state = 4339
            self.match(MySqlParser.SLAVE)
            self.state = 4348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IO_THREAD or _la==MySqlParser.SQL_THREAD:
                self.state = 4340
                self.threadType()
                self.state = 4345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4341
                    self.match(MySqlParser.COMMA)
                    self.state = 4342
                    self.threadType()
                    self.state = 4347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartGroupReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_startGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartGroupReplication" ):
                listener.enterStartGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartGroupReplication" ):
                listener.exitStartGroupReplication(self)




    def startGroupReplication(self):

        localctx = MySqlParser.StartGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_startGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4350
            self.match(MySqlParser.START)
            self.state = 4351
            self.match(MySqlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopGroupReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_stopGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopGroupReplication" ):
                listener.enterStopGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopGroupReplication" ):
                listener.exitStopGroupReplication(self)




    def stopGroupReplication(self):

        localctx = MySqlParser.StopGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_stopGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4353
            self.match(MySqlParser.STOP)
            self.state = 4354
            self.match(MySqlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_masterOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MasterStringOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.StringMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterStringOption" ):
                listener.enterMasterStringOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterStringOption" ):
                listener.exitMasterStringOption(self)


    class MasterRealOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def REAL_LITERAL(self):
            return self.getToken(MySqlParser.REAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterRealOption" ):
                listener.enterMasterRealOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterRealOption" ):
                listener.exitMasterRealOption(self)


    class MasterBoolOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.boolVal = None # Token
            self.copyFrom(ctx)

        def boolMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.BoolMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterBoolOption" ):
                listener.enterMasterBoolOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterBoolOption" ):
                listener.exitMasterBoolOption(self)


    class MasterUidListOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(MySqlParser.IGNORE_SERVER_IDS, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterUidListOption" ):
                listener.enterMasterUidListOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterUidListOption" ):
                listener.exitMasterUidListOption(self)


    class MasterDecimalOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.DecimalMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterDecimalOption" ):
                listener.enterMasterDecimalOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterDecimalOption" ):
                listener.exitMasterDecimalOption(self)



    def masterOption(self):

        localctx = MySqlParser.MasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_masterOption)
        self._la = 0 # Token type
        try:
            self.state = 4385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.MASTER_BIND, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.RELAY_LOG_FILE]:
                localctx = MySqlParser.MasterStringOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4356
                self.stringMasterOption()
                self.state = 4357
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4358
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.RELAY_LOG_POS]:
                localctx = MySqlParser.MasterDecimalOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4360
                self.decimalMasterOption()
                self.state = 4361
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4362
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_SSL]:
                localctx = MySqlParser.MasterBoolOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4364
                self.boolMasterOption()
                self.state = 4365
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4366
                localctx.boolVal = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.boolVal = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.MASTER_HEARTBEAT_PERIOD]:
                localctx = MySqlParser.MasterRealOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4368
                self.match(MySqlParser.MASTER_HEARTBEAT_PERIOD)
                self.state = 4369
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4370
                self.match(MySqlParser.REAL_LITERAL)
                pass
            elif token in [MySqlParser.IGNORE_SERVER_IDS]:
                localctx = MySqlParser.MasterUidListOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4371
                self.match(MySqlParser.IGNORE_SERVER_IDS)
                self.state = 4372
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4373
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                    self.state = 4374
                    self.uid()
                    self.state = 4379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 4375
                        self.match(MySqlParser.COMMA)
                        self.state = 4376
                        self.uid()
                        self.state = 4381
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 4384
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_BIND(self):
            return self.getToken(MySqlParser.MASTER_BIND, 0)

        def MASTER_HOST(self):
            return self.getToken(MySqlParser.MASTER_HOST, 0)

        def MASTER_USER(self):
            return self.getToken(MySqlParser.MASTER_USER, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(MySqlParser.MASTER_PASSWORD, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(MySqlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(MySqlParser.MASTER_SSL_KEY, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(MySqlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(MySqlParser.MASTER_TLS_VERSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_stringMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringMasterOption" ):
                listener.enterStringMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringMasterOption" ):
                listener.exitStringMasterOption(self)




    def stringMasterOption(self):

        localctx = MySqlParser.StringMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_stringMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4387
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MASTER_BIND or ((((_la - 469)) & ~0x3f) == 0 and ((1 << (_la - 469)) & ((1 << (MySqlParser.MASTER_HOST - 469)) | (1 << (MySqlParser.MASTER_LOG_FILE - 469)) | (1 << (MySqlParser.MASTER_PASSWORD - 469)) | (1 << (MySqlParser.MASTER_SSL_CA - 469)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 469)) | (1 << (MySqlParser.MASTER_SSL_CERT - 469)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 469)) | (1 << (MySqlParser.MASTER_SSL_CRL - 469)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 469)) | (1 << (MySqlParser.MASTER_SSL_KEY - 469)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 469)) | (1 << (MySqlParser.MASTER_USER - 469)))) != 0) or _la==MySqlParser.RELAY_LOG_FILE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_PORT(self):
            return self.getToken(MySqlParser.MASTER_PORT, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(MySqlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_DELAY(self):
            return self.getToken(MySqlParser.MASTER_DELAY, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_decimalMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalMasterOption" ):
                listener.enterDecimalMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalMasterOption" ):
                listener.exitDecimalMasterOption(self)




    def decimalMasterOption(self):

        localctx = MySqlParser.DecimalMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_decimalMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4389
            _la = self._input.LA(1)
            if not(((((_la - 466)) & ~0x3f) == 0 and ((1 << (_la - 466)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 466)) | (1 << (MySqlParser.MASTER_DELAY - 466)) | (1 << (MySqlParser.MASTER_LOG_POS - 466)) | (1 << (MySqlParser.MASTER_PORT - 466)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 466)))) != 0) or _la==MySqlParser.RELAY_LOG_POS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_AUTO_POSITION(self):
            return self.getToken(MySqlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_SSL(self):
            return self.getToken(MySqlParser.MASTER_SSL, 0)

        def MASTER_SSL_VERIFY_SERVER_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_boolMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolMasterOption" ):
                listener.enterBoolMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolMasterOption" ):
                listener.exitBoolMasterOption(self)




    def boolMasterOption(self):

        localctx = MySqlParser.BoolMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_boolMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4391
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT or _la==MySqlParser.MASTER_AUTO_POSITION or _la==MySqlParser.MASTER_SSL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_channelOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelOption" ):
                listener.enterChannelOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelOption" ):
                listener.exitChannelOption(self)




    def channelOption(self):

        localctx = MySqlParser.ChannelOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_channelOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4393
            self.match(MySqlParser.FOR)
            self.state = 4394
            self.match(MySqlParser.CHANNEL)
            self.state = 4395
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_replicationFilter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WildIgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(MySqlParser.SimpleStringsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildIgnoreTableReplication" ):
                listener.enterWildIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildIgnoreTableReplication" ):
                listener.exitWildIgnoreTableReplication(self)


    class DoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoTableReplication" ):
                listener.enterDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoTableReplication" ):
                listener.exitDoTableReplication(self)


    class IgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreTableReplication" ):
                listener.enterIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreTableReplication" ):
                listener.exitIgnoreTableReplication(self)


    class RewriteDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tablePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TablePairContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TablePairContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteDbReplication" ):
                listener.enterRewriteDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteDbReplication" ):
                listener.exitRewriteDbReplication(self)


    class DoDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_DB(self):
            return self.getToken(MySqlParser.REPLICATE_DO_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoDbReplication" ):
                listener.enterDoDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoDbReplication" ):
                listener.exitDoDbReplication(self)


    class IgnoreDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreDbReplication" ):
                listener.enterIgnoreDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreDbReplication" ):
                listener.exitIgnoreDbReplication(self)


    class WildDoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(MySqlParser.SimpleStringsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildDoTableReplication" ):
                listener.enterWildDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildDoTableReplication" ):
                listener.exitWildDoTableReplication(self)



    def replicationFilter(self):

        localctx = MySqlParser.ReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_replicationFilter)
        self._la = 0 # Token type
        try:
            self.state = 4446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.REPLICATE_DO_DB]:
                localctx = MySqlParser.DoDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4397
                self.match(MySqlParser.REPLICATE_DO_DB)
                self.state = 4398
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4399
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4400
                self.uidList()
                self.state = 4401
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_IGNORE_DB]:
                localctx = MySqlParser.IgnoreDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4403
                self.match(MySqlParser.REPLICATE_IGNORE_DB)
                self.state = 4404
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4405
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4406
                self.uidList()
                self.state = 4407
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_DO_TABLE]:
                localctx = MySqlParser.DoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4409
                self.match(MySqlParser.REPLICATE_DO_TABLE)
                self.state = 4410
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4411
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4412
                self.tables()
                self.state = 4413
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_IGNORE_TABLE]:
                localctx = MySqlParser.IgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4415
                self.match(MySqlParser.REPLICATE_IGNORE_TABLE)
                self.state = 4416
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4417
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4418
                self.tables()
                self.state = 4419
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_WILD_DO_TABLE]:
                localctx = MySqlParser.WildDoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4421
                self.match(MySqlParser.REPLICATE_WILD_DO_TABLE)
                self.state = 4422
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4423
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4424
                self.simpleStrings()
                self.state = 4425
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_WILD_IGNORE_TABLE]:
                localctx = MySqlParser.WildIgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4427
                self.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE)
                self.state = 4428
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4429
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4430
                self.simpleStrings()
                self.state = 4431
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_REWRITE_DB]:
                localctx = MySqlParser.RewriteDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4433
                self.match(MySqlParser.REPLICATE_REWRITE_DB)
                self.state = 4434
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4435
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4436
                self.tablePair()
                self.state = 4441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4437
                    self.match(MySqlParser.COMMA)
                    self.state = 4438
                    self.tablePair()
                    self.state = 4443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4444
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.firstTable = None # TableNameContext
            self.secondTable = None # TableNameContext

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_tablePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePair" ):
                listener.enterTablePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePair" ):
                listener.exitTablePair(self)




    def tablePair(self):

        localctx = MySqlParser.TablePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_tablePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4448
            self.match(MySqlParser.LR_BRACKET)
            self.state = 4449
            localctx.firstTable = self.tableName()
            self.state = 4450
            self.match(MySqlParser.COMMA)
            self.state = 4451
            localctx.secondTable = self.tableName()
            self.state = 4452
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IO_THREAD(self):
            return self.getToken(MySqlParser.IO_THREAD, 0)

        def SQL_THREAD(self):
            return self.getToken(MySqlParser.SQL_THREAD, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_threadType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadType" ):
                listener.enterThreadType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadType" ):
                listener.exitThreadType(self)




    def threadType(self):

        localctx = MySqlParser.ThreadTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_threadType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4454
            _la = self._input.LA(1)
            if not(_la==MySqlParser.IO_THREAD or _la==MySqlParser.SQL_THREAD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntilOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_untilOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GtidsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.gtids = None # Token
            self.copyFrom(ctx)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def gtuidSet(self):
            return self.getTypedRuleContext(MySqlParser.GtuidSetContext,0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0)
        def SQL_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_AFTER_GTIDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtidsUntilOption" ):
                listener.enterGtidsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtidsUntilOption" ):
                listener.exitGtidsUntilOption(self)


    class SqlGapsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlGapsUntilOption" ):
                listener.enterSqlGapsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlGapsUntilOption" ):
                listener.exitSqlGapsUntilOption(self)


    class MasterLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterLogUntilOption" ):
                listener.enterMasterLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterLogUntilOption" ):
                listener.exitMasterLogUntilOption(self)


    class RelayLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelayLogUntilOption" ):
                listener.enterRelayLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelayLogUntilOption" ):
                listener.exitRelayLogUntilOption(self)



    def untilOption(self):

        localctx = MySqlParser.UntilOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_untilOption)
        self._la = 0 # Token type
        try:
            self.state = 4474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_BEFORE_GTIDS]:
                localctx = MySqlParser.GtidsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4456
                localctx.gtids = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SQL_AFTER_GTIDS or _la==MySqlParser.SQL_BEFORE_GTIDS):
                    localctx.gtids = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4457
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4458
                self.gtuidSet()
                pass
            elif token in [MySqlParser.MASTER_LOG_FILE]:
                localctx = MySqlParser.MasterLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4459
                self.match(MySqlParser.MASTER_LOG_FILE)
                self.state = 4460
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4461
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 4462
                self.match(MySqlParser.COMMA)
                self.state = 4463
                self.match(MySqlParser.MASTER_LOG_POS)
                self.state = 4464
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4465
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.RELAY_LOG_FILE]:
                localctx = MySqlParser.RelayLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4466
                self.match(MySqlParser.RELAY_LOG_FILE)
                self.state = 4467
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4468
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 4469
                self.match(MySqlParser.COMMA)
                self.state = 4470
                self.match(MySqlParser.RELAY_LOG_POS)
                self.state = 4471
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4472
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.SQL_AFTER_MTS_GAPS]:
                localctx = MySqlParser.SqlGapsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4473
                self.match(MySqlParser.SQL_AFTER_MTS_GAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_connectionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PluginDirConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptPluginDir = None # Token
            self.copyFrom(ctx)

        def PLUGIN_DIR(self):
            return self.getToken(MySqlParser.PLUGIN_DIR, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluginDirConnectionOption" ):
                listener.enterPluginDirConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluginDirConnectionOption" ):
                listener.exitPluginDirConnectionOption(self)


    class UserConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptUser = None # Token
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserConnectionOption" ):
                listener.enterUserConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserConnectionOption" ):
                listener.exitUserConnectionOption(self)


    class DefaultAuthConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptDefAuth = None # Token
            self.copyFrom(ctx)

        def DEFAULT_AUTH(self):
            return self.getToken(MySqlParser.DEFAULT_AUTH, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultAuthConnectionOption" ):
                listener.enterDefaultAuthConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultAuthConnectionOption" ):
                listener.exitDefaultAuthConnectionOption(self)


    class PasswordConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptPassword = None # Token
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordConnectionOption" ):
                listener.enterPasswordConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordConnectionOption" ):
                listener.exitPasswordConnectionOption(self)



    def connectionOption(self):

        localctx = MySqlParser.ConnectionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_connectionOption)
        try:
            self.state = 4488
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.USER]:
                localctx = MySqlParser.UserConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4476
                self.match(MySqlParser.USER)
                self.state = 4477
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4478
                localctx.conOptUser = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PASSWORD]:
                localctx = MySqlParser.PasswordConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4479
                self.match(MySqlParser.PASSWORD)
                self.state = 4480
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4481
                localctx.conOptPassword = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.DEFAULT_AUTH]:
                localctx = MySqlParser.DefaultAuthConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4482
                self.match(MySqlParser.DEFAULT_AUTH)
                self.state = 4483
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4484
                localctx.conOptDefAuth = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PLUGIN_DIR]:
                localctx = MySqlParser.PluginDirConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4485
                self.match(MySqlParser.PLUGIN_DIR)
                self.state = 4486
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4487
                localctx.conOptPluginDir = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GtuidSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uuidSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UuidSetContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UuidSetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_gtuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtuidSet" ):
                listener.enterGtuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtuidSet" ):
                listener.exitGtuidSet(self)




    def gtuidSet(self):

        localctx = MySqlParser.GtuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_gtuidSet)
        self._la = 0 # Token type
        try:
            self.state = 4499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4490
                self.uuidSet()
                self.state = 4495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4491
                    self.match(MySqlParser.COMMA)
                    self.state = 4492
                    self.uuidSet()
                    self.state = 4497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4498
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaStartTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xaStart = None # Token
            self.xaAction = None # Token

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)

        def RESUME(self):
            return self.getToken(MySqlParser.RESUME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaStartTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaStartTransaction" ):
                listener.enterXaStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaStartTransaction" ):
                listener.exitXaStartTransaction(self)




    def xaStartTransaction(self):

        localctx = MySqlParser.XaStartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_xaStartTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4501
            self.match(MySqlParser.XA)
            self.state = 4502
            localctx.xaStart = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BEGIN or _la==MySqlParser.START):
                localctx.xaStart = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4503
            self.xid()
            self.state = 4505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.JOIN or _la==MySqlParser.RESUME:
                self.state = 4504
                localctx.xaAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.JOIN or _la==MySqlParser.RESUME):
                    localctx.xaAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaEndTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def SUSPEND(self):
            return self.getToken(MySqlParser.SUSPEND, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def MIGRATE(self):
            return self.getToken(MySqlParser.MIGRATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaEndTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaEndTransaction" ):
                listener.enterXaEndTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaEndTransaction" ):
                listener.exitXaEndTransaction(self)




    def xaEndTransaction(self):

        localctx = MySqlParser.XaEndTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_xaEndTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4507
            self.match(MySqlParser.XA)
            self.state = 4508
            self.match(MySqlParser.END)
            self.state = 4509
            self.xid()
            self.state = 4515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SUSPEND:
                self.state = 4510
                self.match(MySqlParser.SUSPEND)
                self.state = 4513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 4511
                    self.match(MySqlParser.FOR)
                    self.state = 4512
                    self.match(MySqlParser.MIGRATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaPrepareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaPrepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaPrepareStatement" ):
                listener.enterXaPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaPrepareStatement" ):
                listener.exitXaPrepareStatement(self)




    def xaPrepareStatement(self):

        localctx = MySqlParser.XaPrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_xaPrepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4517
            self.match(MySqlParser.XA)
            self.state = 4518
            self.match(MySqlParser.PREPARE)
            self.state = 4519
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaCommitWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def ONE(self):
            return self.getToken(MySqlParser.ONE, 0)

        def PHASE(self):
            return self.getToken(MySqlParser.PHASE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaCommitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaCommitWork" ):
                listener.enterXaCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaCommitWork" ):
                listener.exitXaCommitWork(self)




    def xaCommitWork(self):

        localctx = MySqlParser.XaCommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_xaCommitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4521
            self.match(MySqlParser.XA)
            self.state = 4522
            self.match(MySqlParser.COMMIT)
            self.state = 4523
            self.xid()
            self.state = 4526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ONE:
                self.state = 4524
                self.match(MySqlParser.ONE)
                self.state = 4525
                self.match(MySqlParser.PHASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRollbackWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaRollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRollbackWork" ):
                listener.enterXaRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRollbackWork" ):
                listener.exitXaRollbackWork(self)




    def xaRollbackWork(self):

        localctx = MySqlParser.XaRollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_xaRollbackWork)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4528
            self.match(MySqlParser.XA)
            self.state = 4529
            self.match(MySqlParser.ROLLBACK)
            self.state = 4530
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRecoverWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def RECOVER(self):
            return self.getToken(MySqlParser.RECOVER, 0)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaRecoverWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRecoverWork" ):
                listener.enterXaRecoverWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRecoverWork" ):
                listener.exitXaRecoverWork(self)




    def xaRecoverWork(self):

        localctx = MySqlParser.XaRecoverWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_xaRecoverWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4532
            self.match(MySqlParser.XA)
            self.state = 4533
            self.match(MySqlParser.RECOVER)
            self.state = 4536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CONVERT:
                self.state = 4534
                self.match(MySqlParser.CONVERT)
                self.state = 4535
                self.xid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query = None # Token
            self.variable = None # Token

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_prepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepareStatement" ):
                listener.enterPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepareStatement" ):
                listener.exitPrepareStatement(self)




    def prepareStatement(self):

        localctx = MySqlParser.PrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_prepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4538
            self.match(MySqlParser.PREPARE)
            self.state = 4539
            self.uid()
            self.state = 4540
            self.match(MySqlParser.FROM)
            self.state = 4543
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STRING_LITERAL]:
                self.state = 4541
                localctx.query = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.LOCAL_ID]:
                self.state = 4542
                localctx.variable = self.match(MySqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def userVariables(self):
            return self.getTypedRuleContext(MySqlParser.UserVariablesContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)




    def executeStatement(self):

        localctx = MySqlParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4545
            self.match(MySqlParser.EXECUTE)
            self.state = 4546
            self.uid()
            self.state = 4549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.USING:
                self.state = 4547
                self.match(MySqlParser.USING)
                self.state = 4548
                self.userVariables()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocatePrepareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropFormat = None # Token

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DEALLOCATE(self):
            return self.getToken(MySqlParser.DEALLOCATE, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_deallocatePrepare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocatePrepare" ):
                listener.enterDeallocatePrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocatePrepare" ):
                listener.exitDeallocatePrepare(self)




    def deallocatePrepare(self):

        localctx = MySqlParser.DeallocatePrepareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_deallocatePrepare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4551
            localctx.dropFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DROP or _la==MySqlParser.DEALLOCATE):
                localctx.dropFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4552
            self.match(MySqlParser.PREPARE)
            self.state = 4553
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(MySqlParser.BlockStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_routineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBody" ):
                listener.enterRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBody" ):
                listener.exitRoutineBody(self)




    def routineBody(self):

        localctx = MySqlParser.RoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_routineBody)
        try:
            self.state = 4557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,664,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4555
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4556
                self.sqlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def declareVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareVariableContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareVariableContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SEMI)
            else:
                return self.getToken(MySqlParser.SEMI, i)

        def declareCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareConditionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareConditionContext,i)


        def declareCursor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareCursorContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareCursorContext,i)


        def declareHandler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareHandlerContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareHandlerContext,i)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = MySqlParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,665,self._ctx)
            if la_ == 1:
                self.state = 4559
                self.uid()
                self.state = 4560
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4564
            self.match(MySqlParser.BEGIN)
            self.state = 4603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,671,self._ctx)
            if la_ == 1:
                self.state = 4570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,666,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4565
                        self.declareVariable()
                        self.state = 4566
                        self.match(MySqlParser.SEMI) 
                    self.state = 4572
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,666,self._ctx)

                self.state = 4578
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,667,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4573
                        self.declareCondition()
                        self.state = 4574
                        self.match(MySqlParser.SEMI) 
                    self.state = 4580
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,667,self._ctx)

                self.state = 4586
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,668,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4581
                        self.declareCursor()
                        self.state = 4582
                        self.match(MySqlParser.SEMI) 
                    self.state = 4588
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,668,self._ctx)

                self.state = 4594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DECLARE:
                    self.state = 4589
                    self.declareHandler()
                    self.state = 4590
                    self.match(MySqlParser.SEMI)
                    self.state = 4596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,670,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4597
                        self.procedureSqlStatement() 
                    self.state = 4602
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,670,self._ctx)



            self.state = 4605
            self.match(MySqlParser.END)
            self.state = 4607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,672,self._ctx)
            if la_ == 1:
                self.state = 4606
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.CASE)
            else:
                return self.getToken(MySqlParser.CASE, i)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def caseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseAlternativeContext,i)


        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)




    def caseStatement(self):

        localctx = MySqlParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4609
            self.match(MySqlParser.CASE)
            self.state = 4612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,673,self._ctx)
            if la_ == 1:
                self.state = 4610
                self.uid()

            elif la_ == 2:
                self.state = 4611
                self.expression(0)


            self.state = 4615 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4614
                self.caseAlternative()
                self.state = 4617 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySqlParser.WHEN):
                    break

            self.state = 4625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ELSE:
                self.state = 4619
                self.match(MySqlParser.ELSE)
                self.state = 4621 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4620
                        self.procedureSqlStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4623 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,675,self._ctx)



            self.state = 4627
            self.match(MySqlParser.END)
            self.state = 4628
            self.match(MySqlParser.CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._procedureSqlStatement = None # ProcedureSqlStatementContext
            self.thenStatements = list() # of ProcedureSqlStatementContexts
            self.elseStatements = list() # of ProcedureSqlStatementContexts

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IF)
            else:
                return self.getToken(MySqlParser.IF, i)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def elifAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ElifAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ElifAlternativeContext,i)


        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = MySqlParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4630
            self.match(MySqlParser.IF)
            self.state = 4631
            self.expression(0)
            self.state = 4632
            self.match(MySqlParser.THEN)
            self.state = 4634 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4633
                    localctx._procedureSqlStatement = self.procedureSqlStatement()
                    localctx.thenStatements.append(localctx._procedureSqlStatement)

                else:
                    raise NoViableAltException(self)
                self.state = 4636 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,677,self._ctx)

            self.state = 4641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.ELSEIF:
                self.state = 4638
                self.elifAlternative()
                self.state = 4643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ELSE:
                self.state = 4644
                self.match(MySqlParser.ELSE)
                self.state = 4646 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4645
                        localctx._procedureSqlStatement = self.procedureSqlStatement()
                        localctx.elseStatements.append(localctx._procedureSqlStatement)

                    else:
                        raise NoViableAltException(self)
                    self.state = 4648 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,679,self._ctx)



            self.state = 4652
            self.match(MySqlParser.END)
            self.state = 4653
            self.match(MySqlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(MySqlParser.ITERATE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_iterateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterateStatement" ):
                listener.enterIterateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterateStatement" ):
                listener.exitIterateStatement(self)




    def iterateStatement(self):

        localctx = MySqlParser.IterateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_iterateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4655
            self.match(MySqlParser.ITERATE)
            self.state = 4656
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeaveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEAVE(self):
            return self.getToken(MySqlParser.LEAVE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_leaveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeaveStatement" ):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeaveStatement" ):
                listener.exitLeaveStatement(self)




    def leaveStatement(self):

        localctx = MySqlParser.LeaveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_leaveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4658
            self.match(MySqlParser.LEAVE)
            self.state = 4659
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOOP)
            else:
                return self.getToken(MySqlParser.LOOP, i)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)




    def loopStatement(self):

        localctx = MySqlParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                self.state = 4661
                self.uid()
                self.state = 4662
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4666
            self.match(MySqlParser.LOOP)
            self.state = 4668 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4667
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4670 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,682,self._ctx)

            self.state = 4672
            self.match(MySqlParser.END)
            self.state = 4673
            self.match(MySqlParser.LOOP)
            self.state = 4675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                self.state = 4674
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.REPEAT)
            else:
                return self.getToken(MySqlParser.REPEAT, i)

        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_repeatStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatStatement" ):
                listener.enterRepeatStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatStatement" ):
                listener.exitRepeatStatement(self)




    def repeatStatement(self):

        localctx = MySqlParser.RepeatStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_repeatStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                self.state = 4677
                self.uid()
                self.state = 4678
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4682
            self.match(MySqlParser.REPEAT)
            self.state = 4684 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4683
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4686 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,685,self._ctx)

            self.state = 4688
            self.match(MySqlParser.UNTIL)
            self.state = 4689
            self.expression(0)
            self.state = 4690
            self.match(MySqlParser.END)
            self.state = 4691
            self.match(MySqlParser.REPEAT)
            self.state = 4693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                self.state = 4692
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MySqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = MySqlParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4695
            self.match(MySqlParser.RETURN)
            self.state = 4696
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.WHILE)
            else:
                return self.getToken(MySqlParser.WHILE, i)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = MySqlParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                self.state = 4698
                self.uid()
                self.state = 4699
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4703
            self.match(MySqlParser.WHILE)
            self.state = 4704
            self.expression(0)
            self.state = 4705
            self.match(MySqlParser.DO)
            self.state = 4707 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4706
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4709 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,688,self._ctx)

            self.state = 4711
            self.match(MySqlParser.END)
            self.state = 4712
            self.match(MySqlParser.WHILE)
            self.state = 4714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.BUCKETS) | (1 << MySqlParser.CURRENT) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.DIAGNOSTICS) | (1 << MySqlParser.EXCEPT))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (MySqlParser.GROUP - 70)) | (1 << (MySqlParser.IGNORED - 70)) | (1 << (MySqlParser.LEFT - 70)) | (1 << (MySqlParser.LOCKED - 70)) | (1 << (MySqlParser.MAXVALUE - 70)) | (1 << (MySqlParser.MINVALUE - 70)) | (1 << (MySqlParser.NUMBER - 70)) | (1 << (MySqlParser.OPTIONAL - 70)) | (1 << (MySqlParser.ORDER - 70)))) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & ((1 << (MySqlParser.RIGHT - 144)) | (1 << (MySqlParser.SCHEMA - 144)) | (1 << (MySqlParser.SKIP_ - 144)) | (1 << (MySqlParser.STACKED - 144)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.BINARY - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)) | (1 << (MySqlParser.SERIAL - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.AVG - 275)) | (1 << (MySqlParser.BIT_AND - 275)) | (1 << (MySqlParser.BIT_OR - 275)) | (1 << (MySqlParser.BIT_XOR - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.GROUP_CONCAT - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.MAX - 275)) | (1 << (MySqlParser.MIN - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.STD - 275)) | (1 << (MySqlParser.STDDEV - 275)) | (1 << (MySqlParser.STDDEV_POP - 275)) | (1 << (MySqlParser.STDDEV_SAMP - 275)) | (1 << (MySqlParser.SUM - 275)) | (1 << (MySqlParser.VAR_POP - 275)) | (1 << (MySqlParser.VAR_SAMP - 275)) | (1 << (MySqlParser.VARIANCE - 275)) | (1 << (MySqlParser.POSITION - 275)) | (1 << (MySqlParser.ACCOUNT - 275)) | (1 << (MySqlParser.ACTION - 275)) | (1 << (MySqlParser.AFTER - 275)) | (1 << (MySqlParser.AGGREGATE - 275)) | (1 << (MySqlParser.ALGORITHM - 275)) | (1 << (MySqlParser.ANY - 275)) | (1 << (MySqlParser.AT - 275)) | (1 << (MySqlParser.AUTHORS - 275)) | (1 << (MySqlParser.AUTOCOMMIT - 275)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 275)) | (1 << (MySqlParser.AUTO_INCREMENT - 275)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 275)) | (1 << (MySqlParser.BEGIN - 275)) | (1 << (MySqlParser.BINLOG - 275)) | (1 << (MySqlParser.BIT - 275)) | (1 << (MySqlParser.BLOCK - 275)))) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & ((1 << (MySqlParser.BOOL - 339)) | (1 << (MySqlParser.BOOLEAN - 339)) | (1 << (MySqlParser.BTREE - 339)) | (1 << (MySqlParser.CACHE - 339)) | (1 << (MySqlParser.CASCADED - 339)) | (1 << (MySqlParser.CHAIN - 339)) | (1 << (MySqlParser.CHANGED - 339)) | (1 << (MySqlParser.CHANNEL - 339)) | (1 << (MySqlParser.CHECKSUM - 339)) | (1 << (MySqlParser.PAGE_CHECKSUM - 339)) | (1 << (MySqlParser.CIPHER - 339)) | (1 << (MySqlParser.CLASS_ORIGIN - 339)) | (1 << (MySqlParser.CLIENT - 339)) | (1 << (MySqlParser.CLOSE - 339)) | (1 << (MySqlParser.CLUSTERING - 339)) | (1 << (MySqlParser.COALESCE - 339)) | (1 << (MySqlParser.CODE - 339)) | (1 << (MySqlParser.COLUMNS - 339)) | (1 << (MySqlParser.COLUMN_FORMAT - 339)) | (1 << (MySqlParser.COLUMN_NAME - 339)) | (1 << (MySqlParser.COMMENT - 339)) | (1 << (MySqlParser.COMMIT - 339)) | (1 << (MySqlParser.COMPACT - 339)) | (1 << (MySqlParser.COMPLETION - 339)) | (1 << (MySqlParser.COMPRESSED - 339)) | (1 << (MySqlParser.COMPRESSION - 339)) | (1 << (MySqlParser.CONCURRENT - 339)) | (1 << (MySqlParser.CONNECT - 339)) | (1 << (MySqlParser.CONNECTION - 339)) | (1 << (MySqlParser.CONSISTENT - 339)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 339)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 339)) | (1 << (MySqlParser.CONSTRAINT_NAME - 339)) | (1 << (MySqlParser.CONTAINS - 339)) | (1 << (MySqlParser.CONTEXT - 339)) | (1 << (MySqlParser.CONTRIBUTORS - 339)) | (1 << (MySqlParser.COPY - 339)) | (1 << (MySqlParser.CPU - 339)) | (1 << (MySqlParser.CYCLE - 339)) | (1 << (MySqlParser.CURSOR_NAME - 339)) | (1 << (MySqlParser.DATA - 339)) | (1 << (MySqlParser.DATAFILE - 339)) | (1 << (MySqlParser.DEALLOCATE - 339)) | (1 << (MySqlParser.DEFAULT_AUTH - 339)) | (1 << (MySqlParser.DEFINER - 339)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 339)) | (1 << (MySqlParser.DES_KEY_FILE - 339)) | (1 << (MySqlParser.DIRECTORY - 339)) | (1 << (MySqlParser.DISABLE - 339)) | (1 << (MySqlParser.DISCARD - 339)) | (1 << (MySqlParser.DISK - 339)) | (1 << (MySqlParser.DO - 339)) | (1 << (MySqlParser.DUMPFILE - 339)) | (1 << (MySqlParser.DUPLICATE - 339)) | (1 << (MySqlParser.DYNAMIC - 339)) | (1 << (MySqlParser.ENABLE - 339)) | (1 << (MySqlParser.ENCRYPTION - 339)) | (1 << (MySqlParser.END - 339)) | (1 << (MySqlParser.ENDS - 339)) | (1 << (MySqlParser.ENGINE - 339)) | (1 << (MySqlParser.ENGINES - 339)) | (1 << (MySqlParser.ERROR - 339)) | (1 << (MySqlParser.ERRORS - 339)) | (1 << (MySqlParser.ESCAPE - 339)))) != 0) or ((((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & ((1 << (MySqlParser.EVEN - 403)) | (1 << (MySqlParser.EVENT - 403)) | (1 << (MySqlParser.EVENTS - 403)) | (1 << (MySqlParser.EVERY - 403)) | (1 << (MySqlParser.EXCHANGE - 403)) | (1 << (MySqlParser.EXCLUSIVE - 403)) | (1 << (MySqlParser.EXPIRE - 403)) | (1 << (MySqlParser.EXPORT - 403)) | (1 << (MySqlParser.EXTENDED - 403)) | (1 << (MySqlParser.EXTENT_SIZE - 403)) | (1 << (MySqlParser.FAST - 403)) | (1 << (MySqlParser.FAULTS - 403)) | (1 << (MySqlParser.FIELDS - 403)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 403)) | (1 << (MySqlParser.FILTER - 403)) | (1 << (MySqlParser.FIRST - 403)) | (1 << (MySqlParser.FIXED - 403)) | (1 << (MySqlParser.FLUSH - 403)) | (1 << (MySqlParser.FOLLOWS - 403)) | (1 << (MySqlParser.FOUND - 403)) | (1 << (MySqlParser.FULL - 403)) | (1 << (MySqlParser.FUNCTION - 403)) | (1 << (MySqlParser.GENERAL - 403)) | (1 << (MySqlParser.GLOBAL - 403)) | (1 << (MySqlParser.GRANTS - 403)) | (1 << (MySqlParser.GROUP_REPLICATION - 403)) | (1 << (MySqlParser.HANDLER - 403)) | (1 << (MySqlParser.HASH - 403)) | (1 << (MySqlParser.HELP - 403)) | (1 << (MySqlParser.HOST - 403)) | (1 << (MySqlParser.HOSTS - 403)) | (1 << (MySqlParser.IDENTIFIED - 403)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 403)) | (1 << (MySqlParser.IMPORT - 403)) | (1 << (MySqlParser.INCREMENT - 403)) | (1 << (MySqlParser.INDEXES - 403)) | (1 << (MySqlParser.INITIAL_SIZE - 403)) | (1 << (MySqlParser.INPLACE - 403)) | (1 << (MySqlParser.INSERT_METHOD - 403)) | (1 << (MySqlParser.INSTALL - 403)) | (1 << (MySqlParser.INSTANCE - 403)) | (1 << (MySqlParser.INSTANT - 403)) | (1 << (MySqlParser.INVISIBLE - 403)) | (1 << (MySqlParser.INVOKER - 403)) | (1 << (MySqlParser.IO - 403)) | (1 << (MySqlParser.IO_THREAD - 403)) | (1 << (MySqlParser.IPC - 403)) | (1 << (MySqlParser.ISOLATION - 403)) | (1 << (MySqlParser.ISSUER - 403)) | (1 << (MySqlParser.JSON - 403)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 403)) | (1 << (MySqlParser.LANGUAGE - 403)) | (1 << (MySqlParser.LAST - 403)) | (1 << (MySqlParser.LEAVES - 403)) | (1 << (MySqlParser.LESS - 403)) | (1 << (MySqlParser.LEVEL - 403)) | (1 << (MySqlParser.LIST - 403)) | (1 << (MySqlParser.LOCAL - 403)) | (1 << (MySqlParser.LOGFILE - 403)) | (1 << (MySqlParser.LOGS - 403)) | (1 << (MySqlParser.MASTER - 403)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 403)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 403)))) != 0) or ((((_la - 467)) & ~0x3f) == 0 and ((1 << (_la - 467)) & ((1 << (MySqlParser.MASTER_DELAY - 467)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 467)) | (1 << (MySqlParser.MASTER_HOST - 467)) | (1 << (MySqlParser.MASTER_LOG_FILE - 467)) | (1 << (MySqlParser.MASTER_LOG_POS - 467)) | (1 << (MySqlParser.MASTER_PASSWORD - 467)) | (1 << (MySqlParser.MASTER_PORT - 467)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 467)) | (1 << (MySqlParser.MASTER_SSL - 467)) | (1 << (MySqlParser.MASTER_SSL_CA - 467)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_CERT - 467)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 467)) | (1 << (MySqlParser.MASTER_SSL_CRL - 467)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 467)) | (1 << (MySqlParser.MASTER_SSL_KEY - 467)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 467)) | (1 << (MySqlParser.MASTER_USER - 467)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_ROWS - 467)) | (1 << (MySqlParser.MAX_SIZE - 467)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 467)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 467)) | (1 << (MySqlParser.MEDIUM - 467)) | (1 << (MySqlParser.MEMBER - 467)) | (1 << (MySqlParser.MERGE - 467)) | (1 << (MySqlParser.MESSAGE_TEXT - 467)) | (1 << (MySqlParser.MID - 467)) | (1 << (MySqlParser.MIGRATE - 467)) | (1 << (MySqlParser.MIN_ROWS - 467)) | (1 << (MySqlParser.MODE - 467)) | (1 << (MySqlParser.MODIFY - 467)) | (1 << (MySqlParser.MUTEX - 467)) | (1 << (MySqlParser.MYSQL - 467)) | (1 << (MySqlParser.MYSQL_ERRNO - 467)) | (1 << (MySqlParser.NAME - 467)) | (1 << (MySqlParser.NAMES - 467)) | (1 << (MySqlParser.NCHAR - 467)) | (1 << (MySqlParser.NEVER - 467)) | (1 << (MySqlParser.NEXT - 467)) | (1 << (MySqlParser.NO - 467)) | (1 << (MySqlParser.NOCACHE - 467)) | (1 << (MySqlParser.NOCOPY - 467)) | (1 << (MySqlParser.NOCYCLE - 467)) | (1 << (MySqlParser.NOMAXVALUE - 467)) | (1 << (MySqlParser.NOMINVALUE - 467)) | (1 << (MySqlParser.NOWAIT - 467)) | (1 << (MySqlParser.NODEGROUP - 467)) | (1 << (MySqlParser.NONE - 467)) | (1 << (MySqlParser.ODBC - 467)) | (1 << (MySqlParser.OFFLINE - 467)) | (1 << (MySqlParser.OFFSET - 467)) | (1 << (MySqlParser.OF - 467)) | (1 << (MySqlParser.OJ - 467)) | (1 << (MySqlParser.OLD_PASSWORD - 467)) | (1 << (MySqlParser.ONE - 467)) | (1 << (MySqlParser.ONLINE - 467)) | (1 << (MySqlParser.ONLY - 467)) | (1 << (MySqlParser.OPEN - 467)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 467)) | (1 << (MySqlParser.OPTIONS - 467)) | (1 << (MySqlParser.OWNER - 467)) | (1 << (MySqlParser.PACK_KEYS - 467)))) != 0) or ((((_la - 531)) & ~0x3f) == 0 and ((1 << (_la - 531)) & ((1 << (MySqlParser.PAGE - 531)) | (1 << (MySqlParser.PARSER - 531)) | (1 << (MySqlParser.PARTIAL - 531)) | (1 << (MySqlParser.PARTITIONING - 531)) | (1 << (MySqlParser.PARTITIONS - 531)) | (1 << (MySqlParser.PASSWORD - 531)) | (1 << (MySqlParser.PHASE - 531)) | (1 << (MySqlParser.PLUGIN - 531)) | (1 << (MySqlParser.PLUGIN_DIR - 531)) | (1 << (MySqlParser.PLUGINS - 531)) | (1 << (MySqlParser.PORT - 531)) | (1 << (MySqlParser.PRECEDES - 531)) | (1 << (MySqlParser.PREPARE - 531)) | (1 << (MySqlParser.PRESERVE - 531)) | (1 << (MySqlParser.PREV - 531)) | (1 << (MySqlParser.PROCESSLIST - 531)) | (1 << (MySqlParser.PROFILE - 531)) | (1 << (MySqlParser.PROFILES - 531)) | (1 << (MySqlParser.PROXY - 531)) | (1 << (MySqlParser.QUERY - 531)) | (1 << (MySqlParser.QUICK - 531)) | (1 << (MySqlParser.REBUILD - 531)) | (1 << (MySqlParser.RECOVER - 531)) | (1 << (MySqlParser.RECURSIVE - 531)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 531)) | (1 << (MySqlParser.REDUNDANT - 531)) | (1 << (MySqlParser.RELAY - 531)) | (1 << (MySqlParser.RELAY_LOG_FILE - 531)) | (1 << (MySqlParser.RELAY_LOG_POS - 531)) | (1 << (MySqlParser.RELAYLOG - 531)) | (1 << (MySqlParser.REMOVE - 531)) | (1 << (MySqlParser.REORGANIZE - 531)) | (1 << (MySqlParser.REPAIR - 531)) | (1 << (MySqlParser.REPLICATE_DO_DB - 531)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 531)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 531)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 531)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 531)) | (1 << (MySqlParser.REPLICATION - 531)) | (1 << (MySqlParser.RESET - 531)) | (1 << (MySqlParser.RESTART - 531)) | (1 << (MySqlParser.RESUME - 531)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 531)) | (1 << (MySqlParser.RETURNS - 531)) | (1 << (MySqlParser.ROLE - 531)) | (1 << (MySqlParser.ROLLBACK - 531)) | (1 << (MySqlParser.ROLLUP - 531)) | (1 << (MySqlParser.ROTATE - 531)) | (1 << (MySqlParser.ROW - 531)) | (1 << (MySqlParser.ROWS - 531)) | (1 << (MySqlParser.ROW_FORMAT - 531)) | (1 << (MySqlParser.RTREE - 531)) | (1 << (MySqlParser.SAVEPOINT - 531)) | (1 << (MySqlParser.SCHEDULE - 531)) | (1 << (MySqlParser.SECURITY - 531)) | (1 << (MySqlParser.SEQUENCE - 531)) | (1 << (MySqlParser.SERVER - 531)) | (1 << (MySqlParser.SESSION - 531)) | (1 << (MySqlParser.SHARE - 531)) | (1 << (MySqlParser.SHARED - 531)))) != 0) or ((((_la - 595)) & ~0x3f) == 0 and ((1 << (_la - 595)) & ((1 << (MySqlParser.SIGNED - 595)) | (1 << (MySqlParser.SIMPLE - 595)) | (1 << (MySqlParser.SLAVE - 595)) | (1 << (MySqlParser.SLOW - 595)) | (1 << (MySqlParser.SNAPSHOT - 595)) | (1 << (MySqlParser.SOCKET - 595)) | (1 << (MySqlParser.SOME - 595)) | (1 << (MySqlParser.SONAME - 595)) | (1 << (MySqlParser.SOUNDS - 595)) | (1 << (MySqlParser.SOURCE - 595)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 595)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 595)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 595)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 595)) | (1 << (MySqlParser.SQL_CACHE - 595)) | (1 << (MySqlParser.SQL_NO_CACHE - 595)) | (1 << (MySqlParser.SQL_THREAD - 595)) | (1 << (MySqlParser.START - 595)) | (1 << (MySqlParser.STARTS - 595)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 595)) | (1 << (MySqlParser.STATS_PERSISTENT - 595)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 595)) | (1 << (MySqlParser.STATUS - 595)) | (1 << (MySqlParser.STOP - 595)) | (1 << (MySqlParser.STORAGE - 595)) | (1 << (MySqlParser.STRING - 595)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 595)) | (1 << (MySqlParser.SUBJECT - 595)) | (1 << (MySqlParser.SUBPARTITION - 595)) | (1 << (MySqlParser.SUBPARTITIONS - 595)) | (1 << (MySqlParser.SUSPEND - 595)) | (1 << (MySqlParser.SWAPS - 595)) | (1 << (MySqlParser.SWITCHES - 595)) | (1 << (MySqlParser.TABLE_NAME - 595)) | (1 << (MySqlParser.TABLESPACE - 595)) | (1 << (MySqlParser.TEMPORARY - 595)) | (1 << (MySqlParser.TEMPTABLE - 595)) | (1 << (MySqlParser.THAN - 595)) | (1 << (MySqlParser.TRADITIONAL - 595)) | (1 << (MySqlParser.TRANSACTION - 595)) | (1 << (MySqlParser.TRANSACTIONAL - 595)) | (1 << (MySqlParser.TRIGGERS - 595)) | (1 << (MySqlParser.TRUNCATE - 595)) | (1 << (MySqlParser.UNDEFINED - 595)) | (1 << (MySqlParser.UNDOFILE - 595)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 595)) | (1 << (MySqlParser.UNINSTALL - 595)) | (1 << (MySqlParser.UNKNOWN - 595)) | (1 << (MySqlParser.UNTIL - 595)) | (1 << (MySqlParser.UPGRADE - 595)) | (1 << (MySqlParser.USER - 595)) | (1 << (MySqlParser.USE_FRM - 595)) | (1 << (MySqlParser.USER_RESOURCES - 595)) | (1 << (MySqlParser.VALIDATION - 595)) | (1 << (MySqlParser.VALUE - 595)) | (1 << (MySqlParser.VARIABLES - 595)) | (1 << (MySqlParser.VIEW - 595)) | (1 << (MySqlParser.VISIBLE - 595)) | (1 << (MySqlParser.WAIT - 595)) | (1 << (MySqlParser.WARNINGS - 595)))) != 0) or ((((_la - 660)) & ~0x3f) == 0 and ((1 << (_la - 660)) & ((1 << (MySqlParser.WITHOUT - 660)) | (1 << (MySqlParser.WORK - 660)) | (1 << (MySqlParser.WRAPPER - 660)) | (1 << (MySqlParser.X509 - 660)) | (1 << (MySqlParser.XA - 660)) | (1 << (MySqlParser.XML - 660)) | (1 << (MySqlParser.EUR - 660)) | (1 << (MySqlParser.USA - 660)) | (1 << (MySqlParser.JIS - 660)) | (1 << (MySqlParser.ISO - 660)) | (1 << (MySqlParser.INTERNAL - 660)) | (1 << (MySqlParser.QUARTER - 660)) | (1 << (MySqlParser.MONTH - 660)) | (1 << (MySqlParser.DAY - 660)) | (1 << (MySqlParser.HOUR - 660)) | (1 << (MySqlParser.MINUTE - 660)) | (1 << (MySqlParser.WEEK - 660)) | (1 << (MySqlParser.SECOND - 660)) | (1 << (MySqlParser.MICROSECOND - 660)) | (1 << (MySqlParser.TABLES - 660)) | (1 << (MySqlParser.ROUTINE - 660)) | (1 << (MySqlParser.EXECUTE - 660)) | (1 << (MySqlParser.FILE - 660)) | (1 << (MySqlParser.PROCESS - 660)) | (1 << (MySqlParser.RELOAD - 660)) | (1 << (MySqlParser.SHUTDOWN - 660)) | (1 << (MySqlParser.SUPER - 660)) | (1 << (MySqlParser.PRIVILEGES - 660)) | (1 << (MySqlParser.AUDIT_ADMIN - 660)) | (1 << (MySqlParser.BACKUP_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ADMIN - 660)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.CLONE_ADMIN - 660)) | (1 << (MySqlParser.CONNECTION_ADMIN - 660)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_ADMIN - 660)) | (1 << (MySqlParser.FIREWALL_USER - 660)) | (1 << (MySqlParser.ADMIN - 660)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 660)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 660)) | (1 << (MySqlParser.NDB_STORED_USER - 660)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 660)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.REPLICATION_APPLIER - 660)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 660)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 660)) | (1 << (MySqlParser.ROLE_ADMIN - 660)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.SET_USER_ID - 660)) | (1 << (MySqlParser.SHOW_ROUTINE - 660)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 660)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 660)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 660)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 660)) | (1 << (MySqlParser.ARMSCII8 - 660)))) != 0) or ((((_la - 724)) & ~0x3f) == 0 and ((1 << (_la - 724)) & ((1 << (MySqlParser.ASCII - 724)) | (1 << (MySqlParser.BIG5 - 724)) | (1 << (MySqlParser.CP1250 - 724)) | (1 << (MySqlParser.CP1251 - 724)) | (1 << (MySqlParser.CP1256 - 724)) | (1 << (MySqlParser.CP1257 - 724)) | (1 << (MySqlParser.CP850 - 724)) | (1 << (MySqlParser.CP852 - 724)) | (1 << (MySqlParser.CP866 - 724)) | (1 << (MySqlParser.CP932 - 724)) | (1 << (MySqlParser.DEC8 - 724)) | (1 << (MySqlParser.EUCJPMS - 724)) | (1 << (MySqlParser.EUCKR - 724)) | (1 << (MySqlParser.GB18030 - 724)) | (1 << (MySqlParser.GB2312 - 724)) | (1 << (MySqlParser.GBK - 724)) | (1 << (MySqlParser.GEOSTD8 - 724)) | (1 << (MySqlParser.GREEK - 724)) | (1 << (MySqlParser.HEBREW - 724)) | (1 << (MySqlParser.HP8 - 724)) | (1 << (MySqlParser.KEYBCS2 - 724)) | (1 << (MySqlParser.KOI8R - 724)) | (1 << (MySqlParser.KOI8U - 724)) | (1 << (MySqlParser.LATIN1 - 724)) | (1 << (MySqlParser.LATIN2 - 724)) | (1 << (MySqlParser.LATIN5 - 724)) | (1 << (MySqlParser.LATIN7 - 724)) | (1 << (MySqlParser.MACCE - 724)) | (1 << (MySqlParser.MACROMAN - 724)) | (1 << (MySqlParser.SJIS - 724)) | (1 << (MySqlParser.SWE7 - 724)) | (1 << (MySqlParser.TIS620 - 724)) | (1 << (MySqlParser.UCS2 - 724)) | (1 << (MySqlParser.UJIS - 724)) | (1 << (MySqlParser.UTF16 - 724)) | (1 << (MySqlParser.UTF16LE - 724)) | (1 << (MySqlParser.UTF32 - 724)) | (1 << (MySqlParser.UTF8 - 724)) | (1 << (MySqlParser.UTF8MB3 - 724)) | (1 << (MySqlParser.UTF8MB4 - 724)) | (1 << (MySqlParser.ARCHIVE - 724)) | (1 << (MySqlParser.BLACKHOLE - 724)) | (1 << (MySqlParser.CSV - 724)) | (1 << (MySqlParser.FEDERATED - 724)) | (1 << (MySqlParser.INNODB - 724)) | (1 << (MySqlParser.MEMORY - 724)) | (1 << (MySqlParser.MRG_MYISAM - 724)) | (1 << (MySqlParser.MYISAM - 724)) | (1 << (MySqlParser.NDB - 724)) | (1 << (MySqlParser.NDBCLUSTER - 724)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 724)) | (1 << (MySqlParser.TOKUDB - 724)) | (1 << (MySqlParser.REPEATABLE - 724)) | (1 << (MySqlParser.COMMITTED - 724)) | (1 << (MySqlParser.UNCOMMITTED - 724)) | (1 << (MySqlParser.SERIALIZABLE - 724)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 724)) | (1 << (MySqlParser.LINESTRING - 724)) | (1 << (MySqlParser.MULTILINESTRING - 724)) | (1 << (MySqlParser.MULTIPOINT - 724)) | (1 << (MySqlParser.MULTIPOLYGON - 724)) | (1 << (MySqlParser.POINT - 724)))) != 0) or ((((_la - 788)) & ~0x3f) == 0 and ((1 << (_la - 788)) & ((1 << (MySqlParser.POLYGON - 788)) | (1 << (MySqlParser.ABS - 788)) | (1 << (MySqlParser.ACOS - 788)) | (1 << (MySqlParser.ADDDATE - 788)) | (1 << (MySqlParser.ADDTIME - 788)) | (1 << (MySqlParser.AES_DECRYPT - 788)) | (1 << (MySqlParser.AES_ENCRYPT - 788)) | (1 << (MySqlParser.AREA - 788)) | (1 << (MySqlParser.ASBINARY - 788)) | (1 << (MySqlParser.ASIN - 788)) | (1 << (MySqlParser.ASTEXT - 788)) | (1 << (MySqlParser.ASWKB - 788)) | (1 << (MySqlParser.ASWKT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 788)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 788)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 788)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 788)) | (1 << (MySqlParser.ATAN - 788)) | (1 << (MySqlParser.ATAN2 - 788)) | (1 << (MySqlParser.BENCHMARK - 788)) | (1 << (MySqlParser.BIN - 788)) | (1 << (MySqlParser.BIT_COUNT - 788)) | (1 << (MySqlParser.BIT_LENGTH - 788)) | (1 << (MySqlParser.BUFFER - 788)) | (1 << (MySqlParser.CATALOG_NAME - 788)) | (1 << (MySqlParser.CEIL - 788)) | (1 << (MySqlParser.CEILING - 788)) | (1 << (MySqlParser.CENTROID - 788)) | (1 << (MySqlParser.CHARACTER_LENGTH - 788)) | (1 << (MySqlParser.CHARSET - 788)) | (1 << (MySqlParser.CHAR_LENGTH - 788)) | (1 << (MySqlParser.COERCIBILITY - 788)) | (1 << (MySqlParser.COLLATION - 788)) | (1 << (MySqlParser.COMPRESS - 788)) | (1 << (MySqlParser.CONCAT - 788)) | (1 << (MySqlParser.CONCAT_WS - 788)) | (1 << (MySqlParser.CONNECTION_ID - 788)) | (1 << (MySqlParser.CONV - 788)) | (1 << (MySqlParser.CONVERT_TZ - 788)) | (1 << (MySqlParser.COS - 788)) | (1 << (MySqlParser.COT - 788)) | (1 << (MySqlParser.CRC32 - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 788)) | (1 << (MySqlParser.CREATE_DIGEST - 788)) | (1 << (MySqlParser.CROSSES - 788)) | (1 << (MySqlParser.DATEDIFF - 788)) | (1 << (MySqlParser.DATE_FORMAT - 788)) | (1 << (MySqlParser.DAYNAME - 788)) | (1 << (MySqlParser.DAYOFMONTH - 788)) | (1 << (MySqlParser.DAYOFWEEK - 788)) | (1 << (MySqlParser.DAYOFYEAR - 788)) | (1 << (MySqlParser.DECODE - 788)) | (1 << (MySqlParser.DEGREES - 788)) | (1 << (MySqlParser.DES_DECRYPT - 788)) | (1 << (MySqlParser.DES_ENCRYPT - 788)) | (1 << (MySqlParser.DIMENSION - 788)) | (1 << (MySqlParser.DISJOINT - 788)) | (1 << (MySqlParser.ELT - 788)) | (1 << (MySqlParser.ENCODE - 788)) | (1 << (MySqlParser.ENCRYPT - 788)) | (1 << (MySqlParser.ENDPOINT - 788)))) != 0) or ((((_la - 852)) & ~0x3f) == 0 and ((1 << (_la - 852)) & ((1 << (MySqlParser.ENGINE_ATTRIBUTE - 852)) | (1 << (MySqlParser.ENVELOPE - 852)) | (1 << (MySqlParser.EQUALS - 852)) | (1 << (MySqlParser.EXP - 852)) | (1 << (MySqlParser.EXPORT_SET - 852)) | (1 << (MySqlParser.EXTERIORRING - 852)) | (1 << (MySqlParser.EXTRACTVALUE - 852)) | (1 << (MySqlParser.FIELD - 852)) | (1 << (MySqlParser.FIND_IN_SET - 852)) | (1 << (MySqlParser.FLOOR - 852)) | (1 << (MySqlParser.FORMAT - 852)) | (1 << (MySqlParser.FOUND_ROWS - 852)) | (1 << (MySqlParser.FROM_BASE64 - 852)) | (1 << (MySqlParser.FROM_DAYS - 852)) | (1 << (MySqlParser.FROM_UNIXTIME - 852)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 852)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 852)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 852)) | (1 << (MySqlParser.GEOMETRYN - 852)) | (1 << (MySqlParser.GEOMETRYTYPE - 852)) | (1 << (MySqlParser.GEOMFROMTEXT - 852)) | (1 << (MySqlParser.GEOMFROMWKB - 852)) | (1 << (MySqlParser.GET_FORMAT - 852)) | (1 << (MySqlParser.GET_LOCK - 852)) | (1 << (MySqlParser.GLENGTH - 852)) | (1 << (MySqlParser.GREATEST - 852)) | (1 << (MySqlParser.GTID_SUBSET - 852)) | (1 << (MySqlParser.GTID_SUBTRACT - 852)) | (1 << (MySqlParser.HEX - 852)) | (1 << (MySqlParser.IFNULL - 852)) | (1 << (MySqlParser.INET6_ATON - 852)) | (1 << (MySqlParser.INET6_NTOA - 852)) | (1 << (MySqlParser.INET_ATON - 852)) | (1 << (MySqlParser.INET_NTOA - 852)) | (1 << (MySqlParser.INSTR - 852)) | (1 << (MySqlParser.INTERIORRINGN - 852)) | (1 << (MySqlParser.INTERSECTS - 852)) | (1 << (MySqlParser.ISCLOSED - 852)) | (1 << (MySqlParser.ISEMPTY - 852)) | (1 << (MySqlParser.ISNULL - 852)) | (1 << (MySqlParser.ISSIMPLE - 852)) | (1 << (MySqlParser.IS_FREE_LOCK - 852)) | (1 << (MySqlParser.IS_IPV4 - 852)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 852)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 852)) | (1 << (MySqlParser.IS_IPV6 - 852)) | (1 << (MySqlParser.IS_USED_LOCK - 852)) | (1 << (MySqlParser.LAST_INSERT_ID - 852)) | (1 << (MySqlParser.LCASE - 852)) | (1 << (MySqlParser.LEAST - 852)) | (1 << (MySqlParser.LENGTH - 852)) | (1 << (MySqlParser.LINEFROMTEXT - 852)) | (1 << (MySqlParser.LINEFROMWKB - 852)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 852)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 852)) | (1 << (MySqlParser.LN - 852)) | (1 << (MySqlParser.LOAD_FILE - 852)) | (1 << (MySqlParser.LOCATE - 852)) | (1 << (MySqlParser.LOG - 852)) | (1 << (MySqlParser.LOG10 - 852)) | (1 << (MySqlParser.LOG2 - 852)))) != 0) or ((((_la - 916)) & ~0x3f) == 0 and ((1 << (_la - 916)) & ((1 << (MySqlParser.LOWER - 916)) | (1 << (MySqlParser.LPAD - 916)) | (1 << (MySqlParser.LTRIM - 916)) | (1 << (MySqlParser.MAKEDATE - 916)) | (1 << (MySqlParser.MAKETIME - 916)) | (1 << (MySqlParser.MAKE_SET - 916)) | (1 << (MySqlParser.MASTER_POS_WAIT - 916)) | (1 << (MySqlParser.MBRCONTAINS - 916)) | (1 << (MySqlParser.MBRDISJOINT - 916)) | (1 << (MySqlParser.MBREQUAL - 916)) | (1 << (MySqlParser.MBRINTERSECTS - 916)) | (1 << (MySqlParser.MBROVERLAPS - 916)) | (1 << (MySqlParser.MBRTOUCHES - 916)) | (1 << (MySqlParser.MBRWITHIN - 916)) | (1 << (MySqlParser.MD5 - 916)) | (1 << (MySqlParser.MLINEFROMTEXT - 916)) | (1 << (MySqlParser.MLINEFROMWKB - 916)) | (1 << (MySqlParser.MONTHNAME - 916)) | (1 << (MySqlParser.MPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MPOINTFROMWKB - 916)) | (1 << (MySqlParser.MPOLYFROMTEXT - 916)) | (1 << (MySqlParser.MPOLYFROMWKB - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 916)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 916)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 916)) | (1 << (MySqlParser.NAME_CONST - 916)) | (1 << (MySqlParser.NULLIF - 916)) | (1 << (MySqlParser.NUMGEOMETRIES - 916)) | (1 << (MySqlParser.NUMINTERIORRINGS - 916)) | (1 << (MySqlParser.NUMPOINTS - 916)) | (1 << (MySqlParser.OCT - 916)) | (1 << (MySqlParser.OCTET_LENGTH - 916)) | (1 << (MySqlParser.ORD - 916)) | (1 << (MySqlParser.OVERLAPS - 916)) | (1 << (MySqlParser.PERIOD_ADD - 916)) | (1 << (MySqlParser.PERIOD_DIFF - 916)) | (1 << (MySqlParser.PI - 916)) | (1 << (MySqlParser.POINTFROMTEXT - 916)) | (1 << (MySqlParser.POINTFROMWKB - 916)) | (1 << (MySqlParser.POINTN - 916)) | (1 << (MySqlParser.POLYFROMTEXT - 916)) | (1 << (MySqlParser.POLYFROMWKB - 916)) | (1 << (MySqlParser.POLYGONFROMTEXT - 916)) | (1 << (MySqlParser.POLYGONFROMWKB - 916)) | (1 << (MySqlParser.POW - 916)) | (1 << (MySqlParser.POWER - 916)) | (1 << (MySqlParser.QUOTE - 916)) | (1 << (MySqlParser.RADIANS - 916)) | (1 << (MySqlParser.RAND - 916)) | (1 << (MySqlParser.RANDOM_BYTES - 916)) | (1 << (MySqlParser.RELEASE_LOCK - 916)) | (1 << (MySqlParser.REVERSE - 916)) | (1 << (MySqlParser.ROUND - 916)) | (1 << (MySqlParser.ROW_COUNT - 916)) | (1 << (MySqlParser.RPAD - 916)) | (1 << (MySqlParser.RTRIM - 916)) | (1 << (MySqlParser.SEC_TO_TIME - 916)) | (1 << (MySqlParser.SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1 << (MySqlParser.SESSION_USER - 916)) | (1 << (MySqlParser.SHA - 916)) | (1 << (MySqlParser.SHA1 - 916)))) != 0) or ((((_la - 980)) & ~0x3f) == 0 and ((1 << (_la - 980)) & ((1 << (MySqlParser.SHA2 - 980)) | (1 << (MySqlParser.SCHEMA_NAME - 980)) | (1 << (MySqlParser.SIGN - 980)) | (1 << (MySqlParser.SIN - 980)) | (1 << (MySqlParser.SLEEP - 980)) | (1 << (MySqlParser.SOUNDEX - 980)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1 << (MySqlParser.SQRT - 980)) | (1 << (MySqlParser.SRID - 980)) | (1 << (MySqlParser.STARTPOINT - 980)) | (1 << (MySqlParser.STRCMP - 980)) | (1 << (MySqlParser.STR_TO_DATE - 980)) | (1 << (MySqlParser.ST_AREA - 980)) | (1 << (MySqlParser.ST_ASBINARY - 980)) | (1 << (MySqlParser.ST_ASTEXT - 980)) | (1 << (MySqlParser.ST_ASWKB - 980)) | (1 << (MySqlParser.ST_ASWKT - 980)) | (1 << (MySqlParser.ST_BUFFER - 980)) | (1 << (MySqlParser.ST_CENTROID - 980)) | (1 << (MySqlParser.ST_CONTAINS - 980)) | (1 << (MySqlParser.ST_CROSSES - 980)) | (1 << (MySqlParser.ST_DIFFERENCE - 980)) | (1 << (MySqlParser.ST_DIMENSION - 980)) | (1 << (MySqlParser.ST_DISJOINT - 980)) | (1 << (MySqlParser.ST_DISTANCE - 980)) | (1 << (MySqlParser.ST_ENDPOINT - 980)) | (1 << (MySqlParser.ST_ENVELOPE - 980)) | (1 << (MySqlParser.ST_EQUALS - 980)) | (1 << (MySqlParser.ST_EXTERIORRING - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 980)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 980)) | (1 << (MySqlParser.ST_GEOMETRYN - 980)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 980)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 980)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 980)) | (1 << (MySqlParser.ST_INTERIORRINGN - 980)) | (1 << (MySqlParser.ST_INTERSECTION - 980)) | (1 << (MySqlParser.ST_INTERSECTS - 980)) | (1 << (MySqlParser.ST_ISCLOSED - 980)) | (1 << (MySqlParser.ST_ISEMPTY - 980)) | (1 << (MySqlParser.ST_ISSIMPLE - 980)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINEFROMWKB - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 980)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 980)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 980)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 980)) | (1 << (MySqlParser.ST_NUMPOINTS - 980)) | (1 << (MySqlParser.ST_OVERLAPS - 980)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 980)) | (1 << (MySqlParser.ST_POINTFROMWKB - 980)) | (1 << (MySqlParser.ST_POINTN - 980)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYFROMWKB - 980)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 980)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 980)) | (1 << (MySqlParser.ST_SRID - 980)) | (1 << (MySqlParser.ST_STARTPOINT - 980)))) != 0) or ((((_la - 1044)) & ~0x3f) == 0 and ((1 << (_la - 1044)) & ((1 << (MySqlParser.ST_SYMDIFFERENCE - 1044)) | (1 << (MySqlParser.ST_TOUCHES - 1044)) | (1 << (MySqlParser.ST_UNION - 1044)) | (1 << (MySqlParser.ST_WITHIN - 1044)) | (1 << (MySqlParser.ST_X - 1044)) | (1 << (MySqlParser.ST_Y - 1044)) | (1 << (MySqlParser.SUBDATE - 1044)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1044)) | (1 << (MySqlParser.SUBTIME - 1044)) | (1 << (MySqlParser.SYSTEM_USER - 1044)) | (1 << (MySqlParser.TAN - 1044)) | (1 << (MySqlParser.TIMEDIFF - 1044)) | (1 << (MySqlParser.TIMESTAMPADD - 1044)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1044)) | (1 << (MySqlParser.TIME_FORMAT - 1044)) | (1 << (MySqlParser.TIME_TO_SEC - 1044)) | (1 << (MySqlParser.TOUCHES - 1044)) | (1 << (MySqlParser.TO_BASE64 - 1044)) | (1 << (MySqlParser.TO_DAYS - 1044)) | (1 << (MySqlParser.TO_SECONDS - 1044)) | (1 << (MySqlParser.UCASE - 1044)) | (1 << (MySqlParser.UNCOMPRESS - 1044)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1044)) | (1 << (MySqlParser.UNHEX - 1044)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1044)) | (1 << (MySqlParser.UPDATEXML - 1044)) | (1 << (MySqlParser.UPPER - 1044)) | (1 << (MySqlParser.UUID - 1044)) | (1 << (MySqlParser.UUID_SHORT - 1044)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1044)) | (1 << (MySqlParser.VERSION - 1044)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1 << (MySqlParser.WEEKDAY - 1044)) | (1 << (MySqlParser.WEEKOFYEAR - 1044)) | (1 << (MySqlParser.WEIGHT_STRING - 1044)) | (1 << (MySqlParser.WITHIN - 1044)) | (1 << (MySqlParser.YEARWEEK - 1044)) | (1 << (MySqlParser.Y_FUNCTION - 1044)) | (1 << (MySqlParser.X_FUNCTION - 1044)) | (1 << (MySqlParser.VIA - 1044)) | (1 << (MySqlParser.LASTVAL - 1044)) | (1 << (MySqlParser.NEXTVAL - 1044)) | (1 << (MySqlParser.SETVAL - 1044)) | (1 << (MySqlParser.PREVIOUS - 1044)) | (1 << (MySqlParser.PERSISTENT - 1044)) | (1 << (MySqlParser.BINLOG_MONITOR - 1044)) | (1 << (MySqlParser.BINLOG_REPLAY - 1044)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1044)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1044)) | (1 << (MySqlParser.REPLICA - 1044)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1044)))) != 0) or ((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & ((1 << (MySqlParser.MOD - 1110)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1 << (MySqlParser.STRING_LITERAL - 1110)) | (1 << (MySqlParser.ID - 1110)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1110)) | (1 << (MySqlParser.ENCRYPTED - 1110)) | (1 << (MySqlParser.ENCRYPTION_KEY_ID - 1110)))) != 0):
                self.state = 4713
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_cursorStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CloseCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseCursor" ):
                listener.enterCloseCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseCursor" ):
                listener.exitCloseCursor(self)


    class OpenCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenCursor" ):
                listener.enterOpenCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenCursor" ):
                listener.exitOpenCursor(self)


    class FetchCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(MySqlParser.FETCH, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchCursor" ):
                listener.enterFetchCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchCursor" ):
                listener.exitFetchCursor(self)



    def cursorStatement(self):

        localctx = MySqlParser.CursorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_cursorStatement)
        self._la = 0 # Token type
        try:
            self.state = 4731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CLOSE]:
                localctx = MySqlParser.CloseCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4716
                self.match(MySqlParser.CLOSE)
                self.state = 4717
                self.uid()
                pass
            elif token in [MySqlParser.FETCH]:
                localctx = MySqlParser.FetchCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4718
                self.match(MySqlParser.FETCH)
                self.state = 4723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,691,self._ctx)
                if la_ == 1:
                    self.state = 4720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.NEXT:
                        self.state = 4719
                        self.match(MySqlParser.NEXT)


                    self.state = 4722
                    self.match(MySqlParser.FROM)


                self.state = 4725
                self.uid()
                self.state = 4726
                self.match(MySqlParser.INTO)
                self.state = 4727
                self.uidList()
                pass
            elif token in [MySqlParser.OPEN]:
                localctx = MySqlParser.OpenCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4729
                self.match(MySqlParser.OPEN)
                self.state = 4730
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_declareVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareVariable" ):
                listener.enterDeclareVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareVariable" ):
                listener.exitDeclareVariable(self)




    def declareVariable(self):

        localctx = MySqlParser.DeclareVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_declareVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4733
            self.match(MySqlParser.DECLARE)
            self.state = 4734
            self.uidList()
            self.state = 4735
            self.dataType()
            self.state = 4738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFAULT:
                self.state = 4736
                self.match(MySqlParser.DEFAULT)
                self.state = 4737
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def CONDITION(self):
            return self.getToken(MySqlParser.CONDITION, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_declareCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCondition" ):
                listener.enterDeclareCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCondition" ):
                listener.exitDeclareCondition(self)




    def declareCondition(self):

        localctx = MySqlParser.DeclareConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_declareCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4740
            self.match(MySqlParser.DECLARE)
            self.state = 4741
            self.uid()
            self.state = 4742
            self.match(MySqlParser.CONDITION)
            self.state = 4743
            self.match(MySqlParser.FOR)
            self.state = 4750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.REAL_LITERAL]:
                self.state = 4744
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.SQLSTATE]:
                self.state = 4745
                self.match(MySqlParser.SQLSTATE)
                self.state = 4747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VALUE:
                    self.state = 4746
                    self.match(MySqlParser.VALUE)


                self.state = 4749
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareCursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def CURSOR(self):
            return self.getToken(MySqlParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_declareCursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCursor" ):
                listener.enterDeclareCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCursor" ):
                listener.exitDeclareCursor(self)




    def declareCursor(self):

        localctx = MySqlParser.DeclareCursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_declareCursor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4752
            self.match(MySqlParser.DECLARE)
            self.state = 4753
            self.uid()
            self.state = 4754
            self.match(MySqlParser.CURSOR)
            self.state = 4755
            self.match(MySqlParser.FOR)
            self.state = 4756
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.handlerAction = None # Token

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def handlerConditionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.HandlerConditionValueContext)
            else:
                return self.getTypedRuleContext(MySqlParser.HandlerConditionValueContext,i)


        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def CONTINUE(self):
            return self.getToken(MySqlParser.CONTINUE, 0)

        def EXIT(self):
            return self.getToken(MySqlParser.EXIT, 0)

        def UNDO(self):
            return self.getToken(MySqlParser.UNDO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_declareHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareHandler" ):
                listener.enterDeclareHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareHandler" ):
                listener.exitDeclareHandler(self)




    def declareHandler(self):

        localctx = MySqlParser.DeclareHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_declareHandler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4758
            self.match(MySqlParser.DECLARE)
            self.state = 4759
            localctx.handlerAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.CONTINUE or _la==MySqlParser.EXIT or _la==MySqlParser.UNDO):
                localctx.handlerAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4760
            self.match(MySqlParser.HANDLER)
            self.state = 4761
            self.match(MySqlParser.FOR)
            self.state = 4762
            self.handlerConditionValue()
            self.state = 4767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4763
                self.match(MySqlParser.COMMA)
                self.state = 4764
                self.handlerConditionValue()
                self.state = 4769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4770
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerConditionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerConditionValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HandlerConditionWarningContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLWARNING(self):
            return self.getToken(MySqlParser.SQLWARNING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionWarning" ):
                listener.enterHandlerConditionWarning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionWarning" ):
                listener.exitHandlerConditionWarning(self)


    class HandlerConditionCodeContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionCode" ):
                listener.enterHandlerConditionCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionCode" ):
                listener.exitHandlerConditionCode(self)


    class HandlerConditionNotfoundContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def FOUND(self):
            return self.getToken(MySqlParser.FOUND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionNotfound" ):
                listener.enterHandlerConditionNotfound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionNotfound" ):
                listener.exitHandlerConditionNotfound(self)


    class HandlerConditionStateContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionState" ):
                listener.enterHandlerConditionState(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionState" ):
                listener.exitHandlerConditionState(self)


    class HandlerConditionExceptionContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLEXCEPTION(self):
            return self.getToken(MySqlParser.SQLEXCEPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionException" ):
                listener.enterHandlerConditionException(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionException" ):
                listener.exitHandlerConditionException(self)


    class HandlerConditionNameContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionName" ):
                listener.enterHandlerConditionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionName" ):
                listener.exitHandlerConditionName(self)



    def handlerConditionValue(self):

        localctx = MySqlParser.HandlerConditionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_handlerConditionValue)
        self._la = 0 # Token type
        try:
            self.state = 4783
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.REAL_LITERAL]:
                localctx = MySqlParser.HandlerConditionCodeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4772
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.SQLSTATE]:
                localctx = MySqlParser.HandlerConditionStateContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4773
                self.match(MySqlParser.SQLSTATE)
                self.state = 4775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VALUE:
                    self.state = 4774
                    self.match(MySqlParser.VALUE)


                self.state = 4777
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                localctx = MySqlParser.HandlerConditionNameContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4778
                self.uid()
                pass
            elif token in [MySqlParser.SQLWARNING]:
                localctx = MySqlParser.HandlerConditionWarningContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4779
                self.match(MySqlParser.SQLWARNING)
                pass
            elif token in [MySqlParser.NOT]:
                localctx = MySqlParser.HandlerConditionNotfoundContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4780
                self.match(MySqlParser.NOT)
                self.state = 4781
                self.match(MySqlParser.FOUND)
                pass
            elif token in [MySqlParser.SQLEXCEPTION]:
                localctx = MySqlParser.HandlerConditionExceptionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4782
                self.match(MySqlParser.SQLEXCEPTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureSqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(MySqlParser.SEMI, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySqlParser.CompoundStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_procedureSqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureSqlStatement" ):
                listener.enterProcedureSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureSqlStatement" ):
                listener.exitProcedureSqlStatement(self)




    def procedureSqlStatement(self):

        localctx = MySqlParser.ProcedureSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_procedureSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,699,self._ctx)
            if la_ == 1:
                self.state = 4785
                self.compoundStatement()
                pass

            elif la_ == 2:
                self.state = 4786
                self.sqlStatement()
                pass


            self.state = 4789
            self.match(MySqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(MySqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseAlternative" ):
                listener.enterCaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseAlternative" ):
                listener.exitCaseAlternative(self)




    def caseAlternative(self):

        localctx = MySqlParser.CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_caseAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4791
            self.match(MySqlParser.WHEN)
            self.state = 4794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
            if la_ == 1:
                self.state = 4792
                self.constant()
                pass

            elif la_ == 2:
                self.state = 4793
                self.expression(0)
                pass


            self.state = 4796
            self.match(MySqlParser.THEN)
            self.state = 4798 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4797
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4800 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,701,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(MySqlParser.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_elifAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElifAlternative" ):
                listener.enterElifAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElifAlternative" ):
                listener.exitElifAlternative(self)




    def elifAlternative(self):

        localctx = MySqlParser.ElifAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_elifAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4802
            self.match(MySqlParser.ELSEIF)
            self.state = 4803
            self.expression(0)
            self.state = 4804
            self.match(MySqlParser.THEN)
            self.state = 4806 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4805
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4808 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,702,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUserMysqlV56Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserSpecificationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserSpecificationContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV56" ):
                listener.enterAlterUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV56" ):
                listener.exitAlterUserMysqlV56(self)


    class AlterUserMysqlV57Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterUserContext
            super().__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserLockOptionContext,i)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV57" ):
                listener.enterAlterUserMysqlV57(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV57" ):
                listener.exitAlterUserMysqlV57(self)



    def alterUser(self):

        localctx = MySqlParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_alterUser)
        self._la = 0 # Token type
        try:
            self.state = 4864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,714,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4810
                self.match(MySqlParser.ALTER)
                self.state = 4811
                self.match(MySqlParser.USER)
                self.state = 4812
                self.userSpecification()
                self.state = 4817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4813
                    self.match(MySqlParser.COMMA)
                    self.state = 4814
                    self.userSpecification()
                    self.state = 4819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4820
                self.match(MySqlParser.ALTER)
                self.state = 4821
                self.match(MySqlParser.USER)
                self.state = 4823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 4822
                    self.ifExists()


                self.state = 4825
                self.userAuthOption()
                self.state = 4830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4826
                    self.match(MySqlParser.COMMA)
                    self.state = 4827
                    self.userAuthOption()
                    self.state = 4832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.REQUIRE:
                    self.state = 4833
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4845
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NONE]:
                        self.state = 4834
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [MySqlParser.SSL, MySqlParser.CIPHER, MySqlParser.ISSUER, MySqlParser.SUBJECT, MySqlParser.X509]:
                        self.state = 4835
                        self.tlsOption()
                        self.state = 4842
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==MySqlParser.AND or _la==MySqlParser.SSL or _la==MySqlParser.CIPHER or _la==MySqlParser.ISSUER or _la==MySqlParser.SUBJECT or _la==MySqlParser.X509:
                            self.state = 4837
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySqlParser.AND:
                                self.state = 4836
                                self.match(MySqlParser.AND)


                            self.state = 4839
                            self.tlsOption()
                            self.state = 4844
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4849
                    self.match(MySqlParser.WITH)
                    self.state = 4851 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4850
                        self.userResourceOption()
                        self.state = 4853 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 485)) & ~0x3f) == 0 and ((1 << (_la - 485)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 485)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 485)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 485)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 485)))) != 0)):
                            break



                self.state = 4861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.ACCOUNT or _la==MySqlParser.PASSWORD:
                    self.state = 4859
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.PASSWORD]:
                        self.state = 4857
                        self.userPasswordOption()
                        pass
                    elif token in [MySqlParser.ACCOUNT]:
                        self.state = 4858
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateUserMysqlV57Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateUserContext
            super().__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserLockOptionContext,i)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV57" ):
                listener.enterCreateUserMysqlV57(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV57" ):
                listener.exitCreateUserMysqlV57(self)


    class CreateUserMysqlV56Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV56" ):
                listener.enterCreateUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV56" ):
                listener.exitCreateUserMysqlV56(self)



    def createUser(self):

        localctx = MySqlParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_createUser)
        self._la = 0 # Token type
        try:
            self.state = 4920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,726,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CreateUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4866
                self.match(MySqlParser.CREATE)
                self.state = 4867
                self.match(MySqlParser.USER)
                self.state = 4868
                self.userAuthOption()
                self.state = 4873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4869
                    self.match(MySqlParser.COMMA)
                    self.state = 4870
                    self.userAuthOption()
                    self.state = 4875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.CreateUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4876
                self.match(MySqlParser.CREATE)
                self.state = 4877
                self.match(MySqlParser.USER)
                self.state = 4879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 4878
                    self.ifNotExists()


                self.state = 4881
                self.userAuthOption()
                self.state = 4886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4882
                    self.match(MySqlParser.COMMA)
                    self.state = 4883
                    self.userAuthOption()
                    self.state = 4888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.REQUIRE:
                    self.state = 4889
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4901
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NONE]:
                        self.state = 4890
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [MySqlParser.SSL, MySqlParser.CIPHER, MySqlParser.ISSUER, MySqlParser.SUBJECT, MySqlParser.X509]:
                        self.state = 4891
                        self.tlsOption()
                        self.state = 4898
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==MySqlParser.AND or _la==MySqlParser.SSL or _la==MySqlParser.CIPHER or _la==MySqlParser.ISSUER or _la==MySqlParser.SUBJECT or _la==MySqlParser.X509:
                            self.state = 4893
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySqlParser.AND:
                                self.state = 4892
                                self.match(MySqlParser.AND)


                            self.state = 4895
                            self.tlsOption()
                            self.state = 4900
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4905
                    self.match(MySqlParser.WITH)
                    self.state = 4907 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4906
                        self.userResourceOption()
                        self.state = 4909 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 485)) & ~0x3f) == 0 and ((1 << (_la - 485)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 485)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 485)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 485)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 485)))) != 0)):
                            break



                self.state = 4917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.ACCOUNT or _la==MySqlParser.PASSWORD:
                    self.state = 4915
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.PASSWORD]:
                        self.state = 4913
                        self.userPasswordOption()
                        pass
                    elif token in [MySqlParser.ACCOUNT]:
                        self.state = 4914
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUser" ):
                listener.enterDropUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUser" ):
                listener.exitDropUser(self)




    def dropUser(self):

        localctx = MySqlParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_dropUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4922
            self.match(MySqlParser.DROP)
            self.state = 4923
            self.match(MySqlParser.USER)
            self.state = 4925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 4924
                self.ifExists()


            self.state = 4927
            self.userName()
            self.state = 4932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4928
                self.match(MySqlParser.COMMA)
                self.state = 4929
                self.userName()
                self.state = 4934
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.privilegeObject = None # Token
            self.tlsNone = None # Token

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GRANT)
            else:
                return self.getToken(MySqlParser.GRANT, i)

        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PrivelegeClauseContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def privilegeLevel(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeLevelContext,0)


        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.WITH)
            else:
                return self.getToken(MySqlParser.WITH, i)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def roleOption(self):
            return self.getTypedRuleContext(MySqlParser.RoleOptionContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)


        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def OPTION(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.OPTION)
            else:
                return self.getToken(MySqlParser.OPTION, i)

        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def ADMIN(self):
            return self.getToken(MySqlParser.ADMIN, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_grantStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantStatement" ):
                listener.enterGrantStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantStatement" ):
                listener.exitGrantStatement(self)




    def grantStatement(self):

        localctx = MySqlParser.GrantStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_grantStatement)
        self._la = 0 # Token type
        try:
            self.state = 5028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,747,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4935
                self.match(MySqlParser.GRANT)
                self.state = 4936
                self.privelegeClause()
                self.state = 4941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4937
                    self.match(MySqlParser.COMMA)
                    self.state = 4938
                    self.privelegeClause()
                    self.state = 4943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4944
                self.match(MySqlParser.ON)
                self.state = 4946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,730,self._ctx)
                if la_ == 1:
                    self.state = 4945
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.PROCEDURE or _la==MySqlParser.TABLE or _la==MySqlParser.FUNCTION):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4948
                self.privilegeLevel()
                self.state = 4949
                self.match(MySqlParser.TO)
                self.state = 4950
                self.userAuthOption()
                self.state = 4955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4951
                    self.match(MySqlParser.COMMA)
                    self.state = 4952
                    self.userAuthOption()
                    self.state = 4957
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.REQUIRE:
                    self.state = 4958
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4970
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NONE]:
                        self.state = 4959
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [MySqlParser.SSL, MySqlParser.CIPHER, MySqlParser.ISSUER, MySqlParser.SUBJECT, MySqlParser.X509]:
                        self.state = 4960
                        self.tlsOption()
                        self.state = 4967
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==MySqlParser.AND or _la==MySqlParser.SSL or _la==MySqlParser.CIPHER or _la==MySqlParser.ISSUER or _la==MySqlParser.SUBJECT or _la==MySqlParser.X509:
                            self.state = 4962
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySqlParser.AND:
                                self.state = 4961
                                self.match(MySqlParser.AND)


                            self.state = 4964
                            self.tlsOption()
                            self.state = 4969
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4974
                    self.match(MySqlParser.WITH)
                    self.state = 4980
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,737,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4978
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [MySqlParser.GRANT]:
                                self.state = 4975
                                self.match(MySqlParser.GRANT)
                                self.state = 4976
                                self.match(MySqlParser.OPTION)
                                pass
                            elif token in [MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS]:
                                self.state = 4977
                                self.userResourceOption()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 4982
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,737,self._ctx)



                self.state = 4991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 4985
                    self.match(MySqlParser.AS)
                    self.state = 4986
                    self.userName()
                    self.state = 4987
                    self.match(MySqlParser.WITH)
                    self.state = 4988
                    self.match(MySqlParser.ROLE)
                    self.state = 4989
                    self.roleOption()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4993
                self.match(MySqlParser.GRANT)
                self.state = 4996
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,740,self._ctx)
                if la_ == 1:
                    self.state = 4994
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 4995
                    self.uid()
                    pass


                self.state = 5005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4998
                    self.match(MySqlParser.COMMA)
                    self.state = 5001
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,741,self._ctx)
                    if la_ == 1:
                        self.state = 4999
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 5000
                        self.uid()
                        pass


                    self.state = 5007
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5008
                self.match(MySqlParser.TO)
                self.state = 5011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,743,self._ctx)
                if la_ == 1:
                    self.state = 5009
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 5010
                    self.uid()
                    pass


                self.state = 5020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5013
                    self.match(MySqlParser.COMMA)
                    self.state = 5016
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,744,self._ctx)
                    if la_ == 1:
                        self.state = 5014
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 5015
                        self.uid()
                        pass


                    self.state = 5022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 5023
                    self.match(MySqlParser.WITH)
                    self.state = 5024
                    self.match(MySqlParser.ADMIN)
                    self.state = 5025
                    self.match(MySqlParser.OPTION)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def EXCEPT(self):
            return self.getToken(MySqlParser.EXCEPT, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_roleOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOption" ):
                listener.enterRoleOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOption" ):
                listener.exitRoleOption(self)




    def roleOption(self):

        localctx = MySqlParser.RoleOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_roleOption)
        self._la = 0 # Token type
        try:
            self.state = 5052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,751,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5030
                self.match(MySqlParser.DEFAULT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5031
                self.match(MySqlParser.NONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5032
                self.match(MySqlParser.ALL)
                self.state = 5042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EXCEPT:
                    self.state = 5033
                    self.match(MySqlParser.EXCEPT)
                    self.state = 5034
                    self.userName()
                    self.state = 5039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 5035
                        self.match(MySqlParser.COMMA)
                        self.state = 5036
                        self.userName()
                        self.state = 5041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5044
                self.userName()
                self.state = 5049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5045
                    self.match(MySqlParser.COMMA)
                    self.state = 5046
                    self.userName()
                    self.state = 5051
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantProxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.toOther = list() # of UserNameContexts

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GRANT)
            else:
                return self.getToken(MySqlParser.GRANT, i)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_grantProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantProxy" ):
                listener.enterGrantProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantProxy" ):
                listener.exitGrantProxy(self)




    def grantProxy(self):

        localctx = MySqlParser.GrantProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_grantProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5054
            self.match(MySqlParser.GRANT)
            self.state = 5055
            self.match(MySqlParser.PROXY)
            self.state = 5056
            self.match(MySqlParser.ON)
            self.state = 5057
            localctx.fromFirst = self.userName()
            self.state = 5058
            self.match(MySqlParser.TO)
            self.state = 5059
            localctx.toFirst = self.userName()
            self.state = 5064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5060
                self.match(MySqlParser.COMMA)
                self.state = 5061
                localctx._userName = self.userName()
                localctx.toOther.append(localctx._userName)
                self.state = 5066
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 5067
                self.match(MySqlParser.WITH)
                self.state = 5068
                self.match(MySqlParser.GRANT)
                self.state = 5069
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def renameUserClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RenameUserClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RenameUserClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUser" ):
                listener.enterRenameUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUser" ):
                listener.exitRenameUser(self)




    def renameUser(self):

        localctx = MySqlParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_renameUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5072
            self.match(MySqlParser.RENAME)
            self.state = 5073
            self.match(MySqlParser.USER)
            self.state = 5074
            self.renameUserClause()
            self.state = 5079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5075
                self.match(MySqlParser.COMMA)
                self.state = 5076
                self.renameUserClause()
                self.state = 5081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_revokeStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DetailRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RevokeStatementContext
            super().__init__(parser)
            self.privilegeObject = None # Token
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PrivelegeClauseContext,i)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def privilegeLevel(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeLevelContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetailRevoke" ):
                listener.enterDetailRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetailRevoke" ):
                listener.exitDetailRevoke(self)


    class RoleRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RevokeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleRevoke" ):
                listener.enterRoleRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleRevoke" ):
                listener.exitRoleRevoke(self)


    class ShortRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RevokeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def GRANT(self):
            return self.getToken(MySqlParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortRevoke" ):
                listener.enterShortRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortRevoke" ):
                listener.exitShortRevoke(self)



    def revokeStatement(self):

        localctx = MySqlParser.RevokeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_revokeStatement)
        self._la = 0 # Token type
        try:
            self.state = 5146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,764,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.DetailRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5082
                self.match(MySqlParser.REVOKE)
                self.state = 5083
                self.privelegeClause()
                self.state = 5088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5084
                    self.match(MySqlParser.COMMA)
                    self.state = 5085
                    self.privelegeClause()
                    self.state = 5090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5091
                self.match(MySqlParser.ON)
                self.state = 5093
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,756,self._ctx)
                if la_ == 1:
                    self.state = 5092
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.PROCEDURE or _la==MySqlParser.TABLE or _la==MySqlParser.FUNCTION):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5095
                self.privilegeLevel()
                self.state = 5096
                self.match(MySqlParser.FROM)
                self.state = 5097
                self.userName()
                self.state = 5102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5098
                    self.match(MySqlParser.COMMA)
                    self.state = 5099
                    self.userName()
                    self.state = 5104
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.ShortRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5105
                self.match(MySqlParser.REVOKE)
                self.state = 5106
                self.match(MySqlParser.ALL)
                self.state = 5108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRIVILEGES:
                    self.state = 5107
                    self.match(MySqlParser.PRIVILEGES)


                self.state = 5110
                self.match(MySqlParser.COMMA)
                self.state = 5111
                self.match(MySqlParser.GRANT)
                self.state = 5112
                self.match(MySqlParser.OPTION)
                self.state = 5113
                self.match(MySqlParser.FROM)
                self.state = 5114
                self.userName()
                self.state = 5119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5115
                    self.match(MySqlParser.COMMA)
                    self.state = 5116
                    self.userName()
                    self.state = 5121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = MySqlParser.RoleRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5122
                self.match(MySqlParser.REVOKE)
                self.state = 5123
                self.uid()
                self.state = 5128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5124
                    self.match(MySqlParser.COMMA)
                    self.state = 5125
                    self.uid()
                    self.state = 5130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5131
                self.match(MySqlParser.FROM)
                self.state = 5134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,761,self._ctx)
                if la_ == 1:
                    self.state = 5132
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 5133
                    self.uid()
                    pass


                self.state = 5143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5136
                    self.match(MySqlParser.COMMA)
                    self.state = 5139
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,762,self._ctx)
                    if la_ == 1:
                        self.state = 5137
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 5138
                        self.uid()
                        pass


                    self.state = 5145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeProxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onUser = None # UserNameContext
            self.fromFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.fromOther = list() # of UserNameContexts

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_revokeProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeProxy" ):
                listener.enterRevokeProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeProxy" ):
                listener.exitRevokeProxy(self)




    def revokeProxy(self):

        localctx = MySqlParser.RevokeProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_revokeProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5148
            self.match(MySqlParser.REVOKE)
            self.state = 5149
            self.match(MySqlParser.PROXY)
            self.state = 5150
            self.match(MySqlParser.ON)
            self.state = 5151
            localctx.onUser = self.userName()
            self.state = 5152
            self.match(MySqlParser.FROM)
            self.state = 5153
            localctx.fromFirst = self.userName()
            self.state = 5158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5154
                self.match(MySqlParser.COMMA)
                self.state = 5155
                localctx._userName = self.userName()
                localctx.fromOther.append(localctx._userName)
                self.state = 5160
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetPasswordStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(MySqlParser.PasswordFunctionClauseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_setPasswordStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPasswordStatement" ):
                listener.enterSetPasswordStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPasswordStatement" ):
                listener.exitSetPasswordStatement(self)




    def setPasswordStatement(self):

        localctx = MySqlParser.SetPasswordStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_setPasswordStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5161
            self.match(MySqlParser.SET)
            self.state = 5162
            self.match(MySqlParser.PASSWORD)
            self.state = 5165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 5163
                self.match(MySqlParser.FOR)
                self.state = 5164
                self.userName()


            self.state = 5167
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 5170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.OLD_PASSWORD, MySqlParser.PASSWORD]:
                self.state = 5168
                self.passwordFunctionClause()
                pass
            elif token in [MySqlParser.STRING_LITERAL]:
                self.state = 5169
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def userPasswordOption(self):
            return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_userSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserSpecification" ):
                listener.enterUserSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserSpecification" ):
                listener.exitUserSpecification(self)




    def userSpecification(self):

        localctx = MySqlParser.UserSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_userSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5172
            self.userName()
            self.state = 5173
            self.userPasswordOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserAuthOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_userAuthOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleAuthOption" ):
                listener.enterSimpleAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleAuthOption" ):
                listener.exitSimpleAuthOption(self)


    class PasswordAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.hashed = None # Token
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordAuthOption" ):
                listener.enterPasswordAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordAuthOption" ):
                listener.exitPasswordAuthOption(self)


    class StringAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(MySqlParser.AuthPluginContext,0)

        def RETAIN(self):
            return self.getToken(MySqlParser.RETAIN, 0)
        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)
        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringAuthOption" ):
                listener.enterStringAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringAuthOption" ):
                listener.exitStringAuthOption(self)


    class HashAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(MySqlParser.AuthPluginContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHashAuthOption" ):
                listener.enterHashAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHashAuthOption" ):
                listener.exitHashAuthOption(self)



    def userAuthOption(self):

        localctx = MySqlParser.UserAuthOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_userAuthOption)
        self._la = 0 # Token type
        try:
            self.state = 5203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,771,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PasswordAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5175
                self.userName()
                self.state = 5176
                self.match(MySqlParser.IDENTIFIED)
                self.state = 5177
                self.match(MySqlParser.BY)
                self.state = 5178
                self.match(MySqlParser.PASSWORD)
                self.state = 5179
                localctx.hashed = self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                localctx = MySqlParser.StringAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5181
                self.userName()
                self.state = 5182
                self.match(MySqlParser.IDENTIFIED)
                self.state = 5185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 5183
                    self.match(MySqlParser.WITH)
                    self.state = 5184
                    self.authPlugin()


                self.state = 5187
                self.match(MySqlParser.BY)
                self.state = 5188
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 5192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.RETAIN:
                    self.state = 5189
                    self.match(MySqlParser.RETAIN)
                    self.state = 5190
                    self.match(MySqlParser.CURRENT)
                    self.state = 5191
                    self.match(MySqlParser.PASSWORD)


                pass

            elif la_ == 3:
                localctx = MySqlParser.HashAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5194
                self.userName()
                self.state = 5195
                self.match(MySqlParser.IDENTIFIED)
                self.state = 5196
                self.match(MySqlParser.WITH)
                self.state = 5197
                self.authPlugin()
                self.state = 5200
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,770,self._ctx)
                if la_ == 1:
                    self.state = 5198
                    self.match(MySqlParser.AS)
                    self.state = 5199
                    self.match(MySqlParser.STRING_LITERAL)


                pass

            elif la_ == 4:
                localctx = MySqlParser.SimpleAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5202
                self.userName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlsOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SSL(self):
            return self.getToken(MySqlParser.SSL, 0)

        def X509(self):
            return self.getToken(MySqlParser.X509, 0)

        def CIPHER(self):
            return self.getToken(MySqlParser.CIPHER, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ISSUER(self):
            return self.getToken(MySqlParser.ISSUER, 0)

        def SUBJECT(self):
            return self.getToken(MySqlParser.SUBJECT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tlsOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTlsOption" ):
                listener.enterTlsOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTlsOption" ):
                listener.exitTlsOption(self)




    def tlsOption(self):

        localctx = MySqlParser.TlsOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_tlsOption)
        try:
            self.state = 5213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SSL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5205
                self.match(MySqlParser.SSL)
                pass
            elif token in [MySqlParser.X509]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5206
                self.match(MySqlParser.X509)
                pass
            elif token in [MySqlParser.CIPHER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5207
                self.match(MySqlParser.CIPHER)
                self.state = 5208
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.ISSUER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5209
                self.match(MySqlParser.ISSUER)
                self.state = 5210
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.SUBJECT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5211
                self.match(MySqlParser.SUBJECT)
                self.state = 5212
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserResourceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userResourceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserResourceOption" ):
                listener.enterUserResourceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserResourceOption" ):
                listener.exitUserResourceOption(self)




    def userResourceOption(self):

        localctx = MySqlParser.UserResourceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_userResourceOption)
        try:
            self.state = 5223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.MAX_QUERIES_PER_HOUR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5215
                self.match(MySqlParser.MAX_QUERIES_PER_HOUR)
                self.state = 5216
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MAX_UPDATES_PER_HOUR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5217
                self.match(MySqlParser.MAX_UPDATES_PER_HOUR)
                self.state = 5218
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MAX_CONNECTIONS_PER_HOUR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5219
                self.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR)
                self.state = 5220
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MAX_USER_CONNECTIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5221
                self.match(MySqlParser.MAX_USER_CONNECTIONS)
                self.state = 5222
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expireType = None # Token

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def EXPIRE(self):
            return self.getToken(MySqlParser.EXPIRE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def NEVER(self):
            return self.getToken(MySqlParser.NEVER, 0)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userPasswordOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPasswordOption" ):
                listener.enterUserPasswordOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPasswordOption" ):
                listener.exitUserPasswordOption(self)




    def userPasswordOption(self):

        localctx = MySqlParser.UserPasswordOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_userPasswordOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5225
            self.match(MySqlParser.PASSWORD)
            self.state = 5226
            self.match(MySqlParser.EXPIRE)
            self.state = 5233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DEFAULT]:
                self.state = 5227
                localctx.expireType = self.match(MySqlParser.DEFAULT)
                pass
            elif token in [MySqlParser.NEVER]:
                self.state = 5228
                localctx.expireType = self.match(MySqlParser.NEVER)
                pass
            elif token in [MySqlParser.INTERVAL]:
                self.state = 5229
                localctx.expireType = self.match(MySqlParser.INTERVAL)
                self.state = 5230
                self.decimalLiteral()
                self.state = 5231
                self.match(MySqlParser.DAY)
                pass
            elif token in [MySqlParser.EOF, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.ACCOUNT, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PASSWORD, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.MINUS, MySqlParser.LR_BRACKET, MySqlParser.COMMA, MySqlParser.SEMI]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserLockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lockType = None # Token

        def ACCOUNT(self):
            return self.getToken(MySqlParser.ACCOUNT, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(MySqlParser.UNLOCK, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserLockOption" ):
                listener.enterUserLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserLockOption" ):
                listener.exitUserLockOption(self)




    def userLockOption(self):

        localctx = MySqlParser.UserLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_userLockOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5235
            self.match(MySqlParser.ACCOUNT)
            self.state = 5236
            localctx.lockType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.LOCK or _la==MySqlParser.UNLOCK):
                localctx.lockType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivelegeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privelegeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivelegeClause" ):
                listener.enterPrivelegeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivelegeClause" ):
                listener.exitPrivelegeClause(self)




    def privelegeClause(self):

        localctx = MySqlParser.PrivelegeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_privelegeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5238
            self.privilege()
            self.state = 5243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 5239
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5240
                self.uidList()
                self.state = 5241
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def ROUTINE(self):
            return self.getToken(MySqlParser.ROUTINE, 0)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(MySqlParser.FILE, 0)

        def GRANT(self):
            return self.getToken(MySqlParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def PROCESS(self):
            return self.getToken(MySqlParser.PROCESS, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def REFERENCES(self):
            return self.getToken(MySqlParser.REFERENCES, 0)

        def RELOAD(self):
            return self.getToken(MySqlParser.RELOAD, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def CLIENT(self):
            return self.getToken(MySqlParser.CLIENT, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def REPLICA(self):
            return self.getToken(MySqlParser.REPLICA, 0)

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(MySqlParser.DATABASES, 0)

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(MySqlParser.SUPER, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def USAGE(self):
            return self.getToken(MySqlParser.USAGE, 0)

        def APPLICATION_PASSWORD_ADMIN(self):
            return self.getToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0)

        def AUDIT_ADMIN(self):
            return self.getToken(MySqlParser.AUDIT_ADMIN, 0)

        def BACKUP_ADMIN(self):
            return self.getToken(MySqlParser.BACKUP_ADMIN, 0)

        def BINLOG_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ADMIN, 0)

        def BINLOG_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0)

        def CLONE_ADMIN(self):
            return self.getToken(MySqlParser.CLONE_ADMIN, 0)

        def CONNECTION_ADMIN(self):
            return self.getToken(MySqlParser.CONNECTION_ADMIN, 0)

        def ENCRYPTION_KEY_ADMIN(self):
            return self.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0)

        def FIREWALL_ADMIN(self):
            return self.getToken(MySqlParser.FIREWALL_ADMIN, 0)

        def FIREWALL_USER(self):
            return self.getToken(MySqlParser.FIREWALL_USER, 0)

        def FLUSH_OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0)

        def FLUSH_STATUS(self):
            return self.getToken(MySqlParser.FLUSH_STATUS, 0)

        def FLUSH_TABLES(self):
            return self.getToken(MySqlParser.FLUSH_TABLES, 0)

        def FLUSH_USER_RESOURCES(self):
            return self.getToken(MySqlParser.FLUSH_USER_RESOURCES, 0)

        def GROUP_REPLICATION_ADMIN(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0)

        def INNODB_REDO_LOG_ARCHIVE(self):
            return self.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0)

        def INNODB_REDO_LOG_ENABLE(self):
            return self.getToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0)

        def NDB_STORED_USER(self):
            return self.getToken(MySqlParser.NDB_STORED_USER, 0)

        def PASSWORDLESS_USER_ADMIN(self):
            return self.getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0)

        def PERSIST_RO_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0)

        def REPLICATION_APPLIER(self):
            return self.getToken(MySqlParser.REPLICATION_APPLIER, 0)

        def REPLICATION_SLAVE_ADMIN(self):
            return self.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0)

        def RESOURCE_GROUP_ADMIN(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0)

        def RESOURCE_GROUP_USER(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_USER, 0)

        def ROLE_ADMIN(self):
            return self.getToken(MySqlParser.ROLE_ADMIN, 0)

        def SERVICE_CONNECTION_ADMIN(self):
            return self.getToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0)

        def SET_USER_ID(self):
            return self.getToken(MySqlParser.SET_USER_ID, 0)

        def SHOW_ROUTINE(self):
            return self.getToken(MySqlParser.SHOW_ROUTINE, 0)

        def SYSTEM_USER(self):
            return self.getToken(MySqlParser.SYSTEM_USER, 0)

        def SYSTEM_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0)

        def TABLE_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0)

        def VERSION_TOKEN_ADMIN(self):
            return self.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0)

        def XA_RECOVER_ADMIN(self):
            return self.getToken(MySqlParser.XA_RECOVER_ADMIN, 0)

        def BINLOG_MONITOR(self):
            return self.getToken(MySqlParser.BINLOG_MONITOR, 0)

        def BINLOG_REPLAY(self):
            return self.getToken(MySqlParser.BINLOG_REPLAY, 0)

        def FEDERATED_ADMIN(self):
            return self.getToken(MySqlParser.FEDERATED_ADMIN, 0)

        def READ_ONLY_ADMIN(self):
            return self.getToken(MySqlParser.READ_ONLY_ADMIN, 0)

        def REPLICATION_MASTER_ADMIN(self):
            return self.getToken(MySqlParser.REPLICATION_MASTER_ADMIN, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = MySqlParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.state = 5330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5245
                self.match(MySqlParser.ALL)
                self.state = 5247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRIVILEGES:
                    self.state = 5246
                    self.match(MySqlParser.PRIVILEGES)


                pass
            elif token in [MySqlParser.ALTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5249
                self.match(MySqlParser.ALTER)
                self.state = 5251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ROUTINE:
                    self.state = 5250
                    self.match(MySqlParser.ROUTINE)


                pass
            elif token in [MySqlParser.CREATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5253
                self.match(MySqlParser.CREATE)
                self.state = 5261
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.TEMPORARY]:
                    self.state = 5254
                    self.match(MySqlParser.TEMPORARY)
                    self.state = 5255
                    self.match(MySqlParser.TABLES)
                    pass
                elif token in [MySqlParser.ROUTINE]:
                    self.state = 5256
                    self.match(MySqlParser.ROUTINE)
                    pass
                elif token in [MySqlParser.VIEW]:
                    self.state = 5257
                    self.match(MySqlParser.VIEW)
                    pass
                elif token in [MySqlParser.USER]:
                    self.state = 5258
                    self.match(MySqlParser.USER)
                    pass
                elif token in [MySqlParser.TABLESPACE]:
                    self.state = 5259
                    self.match(MySqlParser.TABLESPACE)
                    pass
                elif token in [MySqlParser.ROLE]:
                    self.state = 5260
                    self.match(MySqlParser.ROLE)
                    pass
                elif token in [MySqlParser.ON, MySqlParser.LR_BRACKET, MySqlParser.COMMA]:
                    pass
                else:
                    pass
                pass
            elif token in [MySqlParser.DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5263
                self.match(MySqlParser.DELETE)
                pass
            elif token in [MySqlParser.DROP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5264
                self.match(MySqlParser.DROP)
                self.state = 5266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ROLE:
                    self.state = 5265
                    self.match(MySqlParser.ROLE)


                pass
            elif token in [MySqlParser.EVENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5268
                self.match(MySqlParser.EVENT)
                pass
            elif token in [MySqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5269
                self.match(MySqlParser.EXECUTE)
                pass
            elif token in [MySqlParser.FILE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5270
                self.match(MySqlParser.FILE)
                pass
            elif token in [MySqlParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5271
                self.match(MySqlParser.GRANT)
                self.state = 5272
                self.match(MySqlParser.OPTION)
                pass
            elif token in [MySqlParser.INDEX]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5273
                self.match(MySqlParser.INDEX)
                pass
            elif token in [MySqlParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5274
                self.match(MySqlParser.INSERT)
                pass
            elif token in [MySqlParser.LOCK]:
                self.enterOuterAlt(localctx, 12)
                self.state = 5275
                self.match(MySqlParser.LOCK)
                self.state = 5276
                self.match(MySqlParser.TABLES)
                pass
            elif token in [MySqlParser.PROCESS]:
                self.enterOuterAlt(localctx, 13)
                self.state = 5277
                self.match(MySqlParser.PROCESS)
                pass
            elif token in [MySqlParser.PROXY]:
                self.enterOuterAlt(localctx, 14)
                self.state = 5278
                self.match(MySqlParser.PROXY)
                pass
            elif token in [MySqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 15)
                self.state = 5279
                self.match(MySqlParser.REFERENCES)
                pass
            elif token in [MySqlParser.RELOAD]:
                self.enterOuterAlt(localctx, 16)
                self.state = 5280
                self.match(MySqlParser.RELOAD)
                pass
            elif token in [MySqlParser.REPLICATION]:
                self.enterOuterAlt(localctx, 17)
                self.state = 5281
                self.match(MySqlParser.REPLICATION)
                self.state = 5282
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CLIENT or _la==MySqlParser.SLAVE or _la==MySqlParser.REPLICA):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.SELECT]:
                self.enterOuterAlt(localctx, 18)
                self.state = 5283
                self.match(MySqlParser.SELECT)
                pass
            elif token in [MySqlParser.SHOW]:
                self.enterOuterAlt(localctx, 19)
                self.state = 5284
                self.match(MySqlParser.SHOW)
                self.state = 5285
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASES or _la==MySqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 20)
                self.state = 5286
                self.match(MySqlParser.SHUTDOWN)
                pass
            elif token in [MySqlParser.SUPER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 5287
                self.match(MySqlParser.SUPER)
                pass
            elif token in [MySqlParser.TRIGGER]:
                self.enterOuterAlt(localctx, 22)
                self.state = 5288
                self.match(MySqlParser.TRIGGER)
                pass
            elif token in [MySqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 5289
                self.match(MySqlParser.UPDATE)
                pass
            elif token in [MySqlParser.USAGE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 5290
                self.match(MySqlParser.USAGE)
                pass
            elif token in [MySqlParser.APPLICATION_PASSWORD_ADMIN]:
                self.enterOuterAlt(localctx, 25)
                self.state = 5291
                self.match(MySqlParser.APPLICATION_PASSWORD_ADMIN)
                pass
            elif token in [MySqlParser.AUDIT_ADMIN]:
                self.enterOuterAlt(localctx, 26)
                self.state = 5292
                self.match(MySqlParser.AUDIT_ADMIN)
                pass
            elif token in [MySqlParser.BACKUP_ADMIN]:
                self.enterOuterAlt(localctx, 27)
                self.state = 5293
                self.match(MySqlParser.BACKUP_ADMIN)
                pass
            elif token in [MySqlParser.BINLOG_ADMIN]:
                self.enterOuterAlt(localctx, 28)
                self.state = 5294
                self.match(MySqlParser.BINLOG_ADMIN)
                pass
            elif token in [MySqlParser.BINLOG_ENCRYPTION_ADMIN]:
                self.enterOuterAlt(localctx, 29)
                self.state = 5295
                self.match(MySqlParser.BINLOG_ENCRYPTION_ADMIN)
                pass
            elif token in [MySqlParser.CLONE_ADMIN]:
                self.enterOuterAlt(localctx, 30)
                self.state = 5296
                self.match(MySqlParser.CLONE_ADMIN)
                pass
            elif token in [MySqlParser.CONNECTION_ADMIN]:
                self.enterOuterAlt(localctx, 31)
                self.state = 5297
                self.match(MySqlParser.CONNECTION_ADMIN)
                pass
            elif token in [MySqlParser.ENCRYPTION_KEY_ADMIN]:
                self.enterOuterAlt(localctx, 32)
                self.state = 5298
                self.match(MySqlParser.ENCRYPTION_KEY_ADMIN)
                pass
            elif token in [MySqlParser.FIREWALL_ADMIN]:
                self.enterOuterAlt(localctx, 33)
                self.state = 5299
                self.match(MySqlParser.FIREWALL_ADMIN)
                pass
            elif token in [MySqlParser.FIREWALL_USER]:
                self.enterOuterAlt(localctx, 34)
                self.state = 5300
                self.match(MySqlParser.FIREWALL_USER)
                pass
            elif token in [MySqlParser.FLUSH_OPTIMIZER_COSTS]:
                self.enterOuterAlt(localctx, 35)
                self.state = 5301
                self.match(MySqlParser.FLUSH_OPTIMIZER_COSTS)
                pass
            elif token in [MySqlParser.FLUSH_STATUS]:
                self.enterOuterAlt(localctx, 36)
                self.state = 5302
                self.match(MySqlParser.FLUSH_STATUS)
                pass
            elif token in [MySqlParser.FLUSH_TABLES]:
                self.enterOuterAlt(localctx, 37)
                self.state = 5303
                self.match(MySqlParser.FLUSH_TABLES)
                pass
            elif token in [MySqlParser.FLUSH_USER_RESOURCES]:
                self.enterOuterAlt(localctx, 38)
                self.state = 5304
                self.match(MySqlParser.FLUSH_USER_RESOURCES)
                pass
            elif token in [MySqlParser.GROUP_REPLICATION_ADMIN]:
                self.enterOuterAlt(localctx, 39)
                self.state = 5305
                self.match(MySqlParser.GROUP_REPLICATION_ADMIN)
                pass
            elif token in [MySqlParser.INNODB_REDO_LOG_ARCHIVE]:
                self.enterOuterAlt(localctx, 40)
                self.state = 5306
                self.match(MySqlParser.INNODB_REDO_LOG_ARCHIVE)
                pass
            elif token in [MySqlParser.INNODB_REDO_LOG_ENABLE]:
                self.enterOuterAlt(localctx, 41)
                self.state = 5307
                self.match(MySqlParser.INNODB_REDO_LOG_ENABLE)
                pass
            elif token in [MySqlParser.NDB_STORED_USER]:
                self.enterOuterAlt(localctx, 42)
                self.state = 5308
                self.match(MySqlParser.NDB_STORED_USER)
                pass
            elif token in [MySqlParser.PASSWORDLESS_USER_ADMIN]:
                self.enterOuterAlt(localctx, 43)
                self.state = 5309
                self.match(MySqlParser.PASSWORDLESS_USER_ADMIN)
                pass
            elif token in [MySqlParser.PERSIST_RO_VARIABLES_ADMIN]:
                self.enterOuterAlt(localctx, 44)
                self.state = 5310
                self.match(MySqlParser.PERSIST_RO_VARIABLES_ADMIN)
                pass
            elif token in [MySqlParser.REPLICATION_APPLIER]:
                self.enterOuterAlt(localctx, 45)
                self.state = 5311
                self.match(MySqlParser.REPLICATION_APPLIER)
                pass
            elif token in [MySqlParser.REPLICATION_SLAVE_ADMIN]:
                self.enterOuterAlt(localctx, 46)
                self.state = 5312
                self.match(MySqlParser.REPLICATION_SLAVE_ADMIN)
                pass
            elif token in [MySqlParser.RESOURCE_GROUP_ADMIN]:
                self.enterOuterAlt(localctx, 47)
                self.state = 5313
                self.match(MySqlParser.RESOURCE_GROUP_ADMIN)
                pass
            elif token in [MySqlParser.RESOURCE_GROUP_USER]:
                self.enterOuterAlt(localctx, 48)
                self.state = 5314
                self.match(MySqlParser.RESOURCE_GROUP_USER)
                pass
            elif token in [MySqlParser.ROLE_ADMIN]:
                self.enterOuterAlt(localctx, 49)
                self.state = 5315
                self.match(MySqlParser.ROLE_ADMIN)
                pass
            elif token in [MySqlParser.SERVICE_CONNECTION_ADMIN]:
                self.enterOuterAlt(localctx, 50)
                self.state = 5316
                self.match(MySqlParser.SERVICE_CONNECTION_ADMIN)
                pass
            elif token in [MySqlParser.SESSION_VARIABLES_ADMIN]:
                self.enterOuterAlt(localctx, 51)
                self.state = 5317
                self.match(MySqlParser.SESSION_VARIABLES_ADMIN)
                pass
            elif token in [MySqlParser.SET_USER_ID]:
                self.enterOuterAlt(localctx, 52)
                self.state = 5318
                self.match(MySqlParser.SET_USER_ID)
                pass
            elif token in [MySqlParser.SHOW_ROUTINE]:
                self.enterOuterAlt(localctx, 53)
                self.state = 5319
                self.match(MySqlParser.SHOW_ROUTINE)
                pass
            elif token in [MySqlParser.SYSTEM_USER]:
                self.enterOuterAlt(localctx, 54)
                self.state = 5320
                self.match(MySqlParser.SYSTEM_USER)
                pass
            elif token in [MySqlParser.SYSTEM_VARIABLES_ADMIN]:
                self.enterOuterAlt(localctx, 55)
                self.state = 5321
                self.match(MySqlParser.SYSTEM_VARIABLES_ADMIN)
                pass
            elif token in [MySqlParser.TABLE_ENCRYPTION_ADMIN]:
                self.enterOuterAlt(localctx, 56)
                self.state = 5322
                self.match(MySqlParser.TABLE_ENCRYPTION_ADMIN)
                pass
            elif token in [MySqlParser.VERSION_TOKEN_ADMIN]:
                self.enterOuterAlt(localctx, 57)
                self.state = 5323
                self.match(MySqlParser.VERSION_TOKEN_ADMIN)
                pass
            elif token in [MySqlParser.XA_RECOVER_ADMIN]:
                self.enterOuterAlt(localctx, 58)
                self.state = 5324
                self.match(MySqlParser.XA_RECOVER_ADMIN)
                pass
            elif token in [MySqlParser.BINLOG_MONITOR]:
                self.enterOuterAlt(localctx, 59)
                self.state = 5325
                self.match(MySqlParser.BINLOG_MONITOR)
                pass
            elif token in [MySqlParser.BINLOG_REPLAY]:
                self.enterOuterAlt(localctx, 60)
                self.state = 5326
                self.match(MySqlParser.BINLOG_REPLAY)
                pass
            elif token in [MySqlParser.FEDERATED_ADMIN]:
                self.enterOuterAlt(localctx, 61)
                self.state = 5327
                self.match(MySqlParser.FEDERATED_ADMIN)
                pass
            elif token in [MySqlParser.READ_ONLY_ADMIN]:
                self.enterOuterAlt(localctx, 62)
                self.state = 5328
                self.match(MySqlParser.READ_ONLY_ADMIN)
                pass
            elif token in [MySqlParser.REPLICATION_MASTER_ADMIN]:
                self.enterOuterAlt(localctx, 63)
                self.state = 5329
                self.match(MySqlParser.REPLICATION_MASTER_ADMIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_privilegeLevel

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefiniteSchemaPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteSchemaPrivLevel" ):
                listener.enterDefiniteSchemaPrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteSchemaPrivLevel" ):
                listener.exitDefiniteSchemaPrivLevel(self)


    class DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def dottedId(self):
            return self.getTypedRuleContext(MySqlParser.DottedIdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteFullTablePrivLevel2" ):
                listener.enterDefiniteFullTablePrivLevel2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteFullTablePrivLevel2" ):
                listener.exitDefiniteFullTablePrivLevel2(self)


    class DefiniteFullTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteFullTablePrivLevel" ):
                listener.enterDefiniteFullTablePrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteFullTablePrivLevel" ):
                listener.exitDefiniteFullTablePrivLevel(self)


    class GlobalPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STAR)
            else:
                return self.getToken(MySqlParser.STAR, i)
        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalPrivLevel" ):
                listener.enterGlobalPrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalPrivLevel" ):
                listener.exitGlobalPrivLevel(self)


    class DefiniteTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteTablePrivLevel" ):
                listener.enterDefiniteTablePrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteTablePrivLevel" ):
                listener.exitDefiniteTablePrivLevel(self)


    class CurrentSchemaPriviLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchemaPriviLevel" ):
                listener.enterCurrentSchemaPriviLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchemaPriviLevel" ):
                listener.exitCurrentSchemaPriviLevel(self)



    def privilegeLevel(self):

        localctx = MySqlParser.PrivilegeLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_privilegeLevel)
        try:
            self.state = 5348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,781,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CurrentSchemaPriviLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5332
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                localctx = MySqlParser.GlobalPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5333
                self.match(MySqlParser.STAR)
                self.state = 5334
                self.match(MySqlParser.DOT)
                self.state = 5335
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 3:
                localctx = MySqlParser.DefiniteSchemaPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5336
                self.uid()
                self.state = 5337
                self.match(MySqlParser.DOT)
                self.state = 5338
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 4:
                localctx = MySqlParser.DefiniteFullTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5340
                self.uid()
                self.state = 5341
                self.match(MySqlParser.DOT)
                self.state = 5342
                self.uid()
                pass

            elif la_ == 5:
                localctx = MySqlParser.DefiniteFullTablePrivLevel2Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5344
                self.uid()
                self.state = 5345
                self.dottedId()
                pass

            elif la_ == 6:
                localctx = MySqlParser.DefiniteTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5347
                self.uid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_renameUserClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUserClause" ):
                listener.enterRenameUserClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUserClause" ):
                listener.exitRenameUserClause(self)




    def renameUserClause(self):

        localctx = MySqlParser.RenameUserClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_renameUserClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5350
            localctx.fromFirst = self.userName()
            self.state = 5351
            self.match(MySqlParser.TO)
            self.state = 5352
            localctx.toFirst = self.userName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def ANALYZE(self):
            return self.getToken(MySqlParser.ANALYZE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def HISTOGRAM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.HISTOGRAM)
            else:
                return self.getToken(MySqlParser.HISTOGRAM, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,i)


        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def BUCKETS(self):
            return self.getToken(MySqlParser.BUCKETS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_analyzeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeTable" ):
                listener.enterAnalyzeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeTable" ):
                listener.exitAnalyzeTable(self)




    def analyzeTable(self):

        localctx = MySqlParser.AnalyzeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_analyzeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5354
            self.match(MySqlParser.ANALYZE)
            self.state = 5356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 5355
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5358
            _la = self._input.LA(1)
            if not(_la==MySqlParser.TABLE or _la==MySqlParser.TABLES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5359
            self.tables()
            self.state = 5377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,785,self._ctx)
            if la_ == 1:
                self.state = 5360
                self.match(MySqlParser.UPDATE)
                self.state = 5361
                self.match(MySqlParser.HISTOGRAM)
                self.state = 5362
                self.match(MySqlParser.ON)
                self.state = 5363
                self.fullColumnName()
                self.state = 5368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5364
                    self.match(MySqlParser.COMMA)
                    self.state = 5365
                    self.fullColumnName()
                    self.state = 5370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 5371
                    self.match(MySqlParser.WITH)
                    self.state = 5372
                    self.decimalLiteral()
                    self.state = 5373
                    self.match(MySqlParser.BUCKETS)




            self.state = 5390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,787,self._ctx)
            if la_ == 1:
                self.state = 5379
                self.match(MySqlParser.DROP)
                self.state = 5380
                self.match(MySqlParser.HISTOGRAM)
                self.state = 5381
                self.match(MySqlParser.ON)
                self.state = 5382
                self.fullColumnName()
                self.state = 5387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5383
                    self.match(MySqlParser.COMMA)
                    self.state = 5384
                    self.fullColumnName()
                    self.state = 5389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def checkTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CheckTableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CheckTableOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_checkTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTable" ):
                listener.enterCheckTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTable" ):
                listener.exitCheckTable(self)




    def checkTable(self):

        localctx = MySqlParser.CheckTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_checkTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5392
            self.match(MySqlParser.CHECK)
            self.state = 5393
            self.match(MySqlParser.TABLE)
            self.state = 5394
            self.tables()
            self.state = 5398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.FOR or _la==MySqlParser.CHANGED or _la==MySqlParser.EXTENDED or _la==MySqlParser.FAST or _la==MySqlParser.MEDIUM or _la==MySqlParser.QUICK:
                self.state = 5395
                self.checkTableOption()
                self.state = 5400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChecksumTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_checksumTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecksumTable" ):
                listener.enterChecksumTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecksumTable" ):
                listener.exitChecksumTable(self)




    def checksumTable(self):

        localctx = MySqlParser.ChecksumTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_checksumTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5401
            self.match(MySqlParser.CHECKSUM)
            self.state = 5402
            self.match(MySqlParser.TABLE)
            self.state = 5403
            self.tables()
            self.state = 5405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENDED or _la==MySqlParser.QUICK:
                self.state = 5404
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.EXTENDED or _la==MySqlParser.QUICK):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizeTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def OPTIMIZE(self):
            return self.getToken(MySqlParser.OPTIMIZE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_optimizeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimizeTable" ):
                listener.enterOptimizeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimizeTable" ):
                listener.exitOptimizeTable(self)




    def optimizeTable(self):

        localctx = MySqlParser.OptimizeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_optimizeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5407
            self.match(MySqlParser.OPTIMIZE)
            self.state = 5409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 5408
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5411
            _la = self._input.LA(1)
            if not(_la==MySqlParser.TABLE or _la==MySqlParser.TABLES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5412
            self.tables()
            self.state = 5414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOWAIT or _la==MySqlParser.WAIT:
                self.state = 5413
                self.waitNowaitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepairTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def USE_FRM(self):
            return self.getToken(MySqlParser.USE_FRM, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_repairTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)




    def repairTable(self):

        localctx = MySqlParser.RepairTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_repairTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5416
            self.match(MySqlParser.REPAIR)
            self.state = 5418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 5417
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5420
            self.match(MySqlParser.TABLE)
            self.state = 5421
            self.tables()
            self.state = 5423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.QUICK:
                self.state = 5422
                self.match(MySqlParser.QUICK)


            self.state = 5426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENDED:
                self.state = 5425
                self.match(MySqlParser.EXTENDED)


            self.state = 5429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.USE_FRM:
                self.state = 5428
                self.match(MySqlParser.USE_FRM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def FAST(self):
            return self.getToken(MySqlParser.FAST, 0)

        def MEDIUM(self):
            return self.getToken(MySqlParser.MEDIUM, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def CHANGED(self):
            return self.getToken(MySqlParser.CHANGED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_checkTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableOption" ):
                listener.enterCheckTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableOption" ):
                listener.exitCheckTableOption(self)




    def checkTableOption(self):

        localctx = MySqlParser.CheckTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_checkTableOption)
        try:
            self.state = 5438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5431
                self.match(MySqlParser.FOR)
                self.state = 5432
                self.match(MySqlParser.UPGRADE)
                pass
            elif token in [MySqlParser.QUICK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5433
                self.match(MySqlParser.QUICK)
                pass
            elif token in [MySqlParser.FAST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5434
                self.match(MySqlParser.FAST)
                pass
            elif token in [MySqlParser.MEDIUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5435
                self.match(MySqlParser.MEDIUM)
                pass
            elif token in [MySqlParser.EXTENDED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5436
                self.match(MySqlParser.EXTENDED)
                pass
            elif token in [MySqlParser.CHANGED]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5437
                self.match(MySqlParser.CHANGED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returnType = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def STRING(self):
            return self.getToken(MySqlParser.STRING, 0)

        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)

        def REAL(self):
            return self.getToken(MySqlParser.REAL, 0)

        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)

        def AGGREGATE(self):
            return self.getToken(MySqlParser.AGGREGATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createUdfunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdfunction" ):
                listener.enterCreateUdfunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdfunction" ):
                listener.exitCreateUdfunction(self)




    def createUdfunction(self):

        localctx = MySqlParser.CreateUdfunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_createUdfunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5440
            self.match(MySqlParser.CREATE)
            self.state = 5442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AGGREGATE:
                self.state = 5441
                self.match(MySqlParser.AGGREGATE)


            self.state = 5444
            self.match(MySqlParser.FUNCTION)
            self.state = 5445
            self.uid()
            self.state = 5446
            self.match(MySqlParser.RETURNS)
            self.state = 5447
            localctx.returnType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (MySqlParser.INTEGER - 200)) | (1 << (MySqlParser.REAL - 200)) | (1 << (MySqlParser.DECIMAL - 200)))) != 0) or _la==MySqlParser.STRING):
                localctx.returnType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5448
            self.match(MySqlParser.SONAME)
            self.state = 5449
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTALL(self):
            return self.getToken(MySqlParser.INSTALL, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_installPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallPlugin" ):
                listener.enterInstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallPlugin" ):
                listener.exitInstallPlugin(self)




    def installPlugin(self):

        localctx = MySqlParser.InstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_installPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5451
            self.match(MySqlParser.INSTALL)
            self.state = 5452
            self.match(MySqlParser.PLUGIN)
            self.state = 5453
            self.uid()
            self.state = 5454
            self.match(MySqlParser.SONAME)
            self.state = 5455
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UninstallPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNINSTALL(self):
            return self.getToken(MySqlParser.UNINSTALL, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_uninstallPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUninstallPlugin" ):
                listener.enterUninstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUninstallPlugin" ):
                listener.exitUninstallPlugin(self)




    def uninstallPlugin(self):

        localctx = MySqlParser.UninstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_uninstallPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5457
            self.match(MySqlParser.UNINSTALL)
            self.state = 5458
            self.match(MySqlParser.PLUGIN)
            self.state = 5459
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_setStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SetTransactionContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setTransactionStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetTransactionStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransaction" ):
                listener.enterSetTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransaction" ):
                listener.exitSetTransaction(self)


    class SetCharsetContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCharset" ):
                listener.enterSetCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCharset" ):
                listener.exitSetCharset(self)


    class SetNamesContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def NAMES(self):
            return self.getToken(MySqlParser.NAMES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNames" ):
                listener.enterSetNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNames" ):
                listener.exitSetNames(self)


    class SetPasswordContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setPasswordStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetPasswordStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPassword" ):
                listener.enterSetPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPassword" ):
                listener.exitSetPassword(self)


    class SetAutocommitContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setAutocommitStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetAutocommitStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommit" ):
                listener.enterSetAutocommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommit" ):
                listener.exitSetAutocommit(self)


    class SetNewValueInsideTriggerContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def VAR_ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.VAR_ASSIGN)
            else:
                return self.getToken(MySqlParser.VAR_ASSIGN, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNewValueInsideTrigger" ):
                listener.enterSetNewValueInsideTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNewValueInsideTrigger" ):
                listener.exitSetNewValueInsideTrigger(self)


    class SetVariableContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def variableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.VariableClauseContext,i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def VAR_ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.VAR_ASSIGN)
            else:
                return self.getToken(MySqlParser.VAR_ASSIGN, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVariable" ):
                listener.enterSetVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVariable" ):
                listener.exitSetVariable(self)



    def setStatement(self):

        localctx = MySqlParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.state = 5513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,805,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5461
                self.match(MySqlParser.SET)
                self.state = 5462
                self.variableClause()
                self.state = 5463
                _la = self._input.LA(1)
                if not(_la==MySqlParser.VAR_ASSIGN or _la==MySqlParser.EQUAL_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,798,self._ctx)
                if la_ == 1:
                    self.state = 5464
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 5465
                    self.match(MySqlParser.ON)
                    pass


                self.state = 5477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5468
                    self.match(MySqlParser.COMMA)
                    self.state = 5469
                    self.variableClause()
                    self.state = 5470
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.VAR_ASSIGN or _la==MySqlParser.EQUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5473
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,799,self._ctx)
                    if la_ == 1:
                        self.state = 5471
                        self.expression(0)
                        pass

                    elif la_ == 2:
                        self.state = 5472
                        self.match(MySqlParser.ON)
                        pass


                    self.state = 5479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.SetCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5480
                self.match(MySqlParser.SET)
                self.state = 5481
                self.charSet()
                self.state = 5484
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BINARY, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL]:
                    self.state = 5482
                    self.charsetName()
                    pass
                elif token in [MySqlParser.DEFAULT]:
                    self.state = 5483
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = MySqlParser.SetNamesContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5486
                self.match(MySqlParser.SET)
                self.state = 5487
                self.match(MySqlParser.NAMES)
                self.state = 5494
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BINARY, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL]:
                    self.state = 5488
                    self.charsetName()
                    self.state = 5491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.COLLATE:
                        self.state = 5489
                        self.match(MySqlParser.COLLATE)
                        self.state = 5490
                        self.collationName()


                    pass
                elif token in [MySqlParser.DEFAULT]:
                    self.state = 5493
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = MySqlParser.SetPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5496
                self.setPasswordStatement()
                pass

            elif la_ == 5:
                localctx = MySqlParser.SetTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5497
                self.setTransactionStatement()
                pass

            elif la_ == 6:
                localctx = MySqlParser.SetAutocommitContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5498
                self.setAutocommitStatement()
                pass

            elif la_ == 7:
                localctx = MySqlParser.SetNewValueInsideTriggerContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5499
                self.match(MySqlParser.SET)
                self.state = 5500
                self.fullId()
                self.state = 5501
                _la = self._input.LA(1)
                if not(_la==MySqlParser.VAR_ASSIGN or _la==MySqlParser.EQUAL_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5502
                self.expression(0)
                self.state = 5510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5503
                    self.match(MySqlParser.COMMA)
                    self.state = 5504
                    self.fullId()
                    self.state = 5505
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.VAR_ASSIGN or _la==MySqlParser.EQUAL_SYMBOL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5506
                    self.expression(0)
                    self.state = 5512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_showStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowOpenTablesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)
        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowOpenTables" ):
                listener.enterShowOpenTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowOpenTables" ):
                listener.exitShowOpenTables(self)


    class ShowGlobalInfoContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showGlobalInfoClause(self):
            return self.getTypedRuleContext(MySqlParser.ShowGlobalInfoClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfo" ):
                listener.enterShowGlobalInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfo" ):
                listener.exitShowGlobalInfo(self)


    class ShowCreateFullIdObjectContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.namedEntity = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)
        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)
        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateFullIdObject" ):
                listener.enterShowCreateFullIdObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateFullIdObject" ):
                listener.exitShowCreateFullIdObject(self)


    class ShowCreateUserContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateUser" ):
                listener.enterShowCreateUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateUser" ):
                listener.exitShowCreateUser(self)


    class ShowErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)
        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowErrors" ):
                listener.enterShowErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowErrors" ):
                listener.exitShowErrors(self)


    class ShowCountErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCountErrors" ):
                listener.enterShowCountErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCountErrors" ):
                listener.exitShowCountErrors(self)


    class ShowObjectFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showCommonEntity(self):
            return self.getTypedRuleContext(MySqlParser.ShowCommonEntityContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowObjectFilter" ):
                listener.enterShowObjectFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowObjectFilter" ):
                listener.exitShowObjectFilter(self)


    class ShowCreateDbContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateDb" ):
                listener.enterShowCreateDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateDb" ):
                listener.exitShowCreateDb(self)


    class ShowEngineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.engineOption = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def MUTEX(self):
            return self.getToken(MySqlParser.MUTEX, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowEngine" ):
                listener.enterShowEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowEngine" ):
                listener.exitShowEngine(self)


    class ShowSchemaFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showSchemaEntity(self):
            return self.getTypedRuleContext(MySqlParser.ShowSchemaEntityContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaFilter" ):
                listener.enterShowSchemaFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaFilter" ):
                listener.exitShowSchemaFilter(self)


    class ShowIndexesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def INDEXES(self):
            return self.getToken(MySqlParser.INDEXES, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.FROM)
            else:
                return self.getToken(MySqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IN)
            else:
                return self.getToken(MySqlParser.IN, i)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowIndexes" ):
                listener.enterShowIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowIndexes" ):
                listener.exitShowIndexes(self)


    class ShowLogEventsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.filename = None # Token
            self.fromPosition = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)
        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)
        def RELAYLOG(self):
            return self.getToken(MySqlParser.RELAYLOG, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowLogEvents" ):
                listener.enterShowLogEvents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowLogEvents" ):
                listener.exitShowLogEvents(self)


    class ShowMasterLogsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMasterLogs" ):
                listener.enterShowMasterLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMasterLogs" ):
                listener.exitShowMasterLogs(self)


    class ShowGrantsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(MySqlParser.GRANTS, 0)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)


    class ShowSlaveStatusContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)
        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSlaveStatus" ):
                listener.enterShowSlaveStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSlaveStatus" ):
                listener.exitShowSlaveStatus(self)


    class ShowRoutineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.routine = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CODE(self):
            return self.getToken(MySqlParser.CODE, 0)
        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoutine" ):
                listener.enterShowRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoutine" ):
                listener.exitShowRoutine(self)


    class ShowProfileContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.queryCount = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def PROFILE(self):
            return self.getToken(MySqlParser.PROFILE, 0)
        def showProfileType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ShowProfileTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ShowProfileTypeContext,i)

        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfile" ):
                listener.enterShowProfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfile" ):
                listener.exitShowProfile(self)


    class ShowColumnsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.columnsFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.FROM)
            else:
                return self.getToken(MySqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IN)
            else:
                return self.getToken(MySqlParser.IN, i)
        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)



    def showStatement(self):

        localctx = MySqlParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.state = 5668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,828,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.ShowMasterLogsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5515
                self.match(MySqlParser.SHOW)
                self.state = 5516
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BINARY or _la==MySqlParser.MASTER):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5517
                self.match(MySqlParser.LOGS)
                pass

            elif la_ == 2:
                localctx = MySqlParser.ShowLogEventsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5518
                self.match(MySqlParser.SHOW)
                self.state = 5519
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BINLOG or _la==MySqlParser.RELAYLOG):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5520
                self.match(MySqlParser.EVENTS)
                self.state = 5523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IN:
                    self.state = 5521
                    self.match(MySqlParser.IN)
                    self.state = 5522
                    localctx.filename = self.match(MySqlParser.STRING_LITERAL)


                self.state = 5527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM:
                    self.state = 5525
                    self.match(MySqlParser.FROM)
                    self.state = 5526
                    localctx.fromPosition = self.decimalLiteral()


                self.state = 5536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIMIT:
                    self.state = 5529
                    self.match(MySqlParser.LIMIT)
                    self.state = 5533
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,808,self._ctx)
                    if la_ == 1:
                        self.state = 5530
                        localctx.offset = self.decimalLiteral()
                        self.state = 5531
                        self.match(MySqlParser.COMMA)


                    self.state = 5535
                    localctx.rowCount = self.decimalLiteral()


                pass

            elif la_ == 3:
                localctx = MySqlParser.ShowObjectFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5538
                self.match(MySqlParser.SHOW)
                self.state = 5539
                self.showCommonEntity()
                self.state = 5541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 5540
                    self.showFilter()


                pass

            elif la_ == 4:
                localctx = MySqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5543
                self.match(MySqlParser.SHOW)
                self.state = 5545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FULL:
                    self.state = 5544
                    self.match(MySqlParser.FULL)


                self.state = 5547
                localctx.columnsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS):
                    localctx.columnsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5548
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5549
                self.tableName()
                self.state = 5552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 5550
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5551
                    self.uid()


                self.state = 5555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 5554
                    self.showFilter()


                pass

            elif la_ == 5:
                localctx = MySqlParser.ShowCreateDbContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5557
                self.match(MySqlParser.SHOW)
                self.state = 5558
                self.match(MySqlParser.CREATE)
                self.state = 5559
                localctx.schemaFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                    localctx.schemaFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 5560
                    self.ifNotExists()


                self.state = 5563
                self.uid()
                pass

            elif la_ == 6:
                localctx = MySqlParser.ShowCreateFullIdObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5564
                self.match(MySqlParser.SHOW)
                self.state = 5565
                self.match(MySqlParser.CREATE)
                self.state = 5566
                localctx.namedEntity = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (MySqlParser.PROCEDURE - 127)) | (1 << (MySqlParser.TABLE - 127)) | (1 << (MySqlParser.TRIGGER - 127)))) != 0) or _la==MySqlParser.EVENT or _la==MySqlParser.FUNCTION or _la==MySqlParser.VIEW):
                    localctx.namedEntity = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5567
                self.fullId()
                pass

            elif la_ == 7:
                localctx = MySqlParser.ShowCreateUserContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5568
                self.match(MySqlParser.SHOW)
                self.state = 5569
                self.match(MySqlParser.CREATE)
                self.state = 5570
                self.match(MySqlParser.USER)
                self.state = 5571
                self.userName()
                pass

            elif la_ == 8:
                localctx = MySqlParser.ShowEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5572
                self.match(MySqlParser.SHOW)
                self.state = 5573
                self.match(MySqlParser.ENGINE)
                self.state = 5574
                self.engineName()
                self.state = 5575
                localctx.engineOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.MUTEX or _la==MySqlParser.STATUS):
                    localctx.engineOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = MySqlParser.ShowGlobalInfoContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5577
                self.match(MySqlParser.SHOW)
                self.state = 5578
                self.showGlobalInfoClause()
                pass

            elif la_ == 10:
                localctx = MySqlParser.ShowErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 5579
                self.match(MySqlParser.SHOW)
                self.state = 5580
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ERRORS or _la==MySqlParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIMIT:
                    self.state = 5581
                    self.match(MySqlParser.LIMIT)
                    self.state = 5585
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
                    if la_ == 1:
                        self.state = 5582
                        localctx.offset = self.decimalLiteral()
                        self.state = 5583
                        self.match(MySqlParser.COMMA)


                    self.state = 5587
                    localctx.rowCount = self.decimalLiteral()


                pass

            elif la_ == 11:
                localctx = MySqlParser.ShowCountErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 5590
                self.match(MySqlParser.SHOW)
                self.state = 5591
                self.match(MySqlParser.COUNT)
                self.state = 5592
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5593
                self.match(MySqlParser.STAR)
                self.state = 5594
                self.match(MySqlParser.RR_BRACKET)
                self.state = 5595
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ERRORS or _la==MySqlParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = MySqlParser.ShowSchemaFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 5596
                self.match(MySqlParser.SHOW)
                self.state = 5597
                self.showSchemaEntity()
                self.state = 5600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 5598
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5599
                    self.uid()


                self.state = 5603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 5602
                    self.showFilter()


                pass

            elif la_ == 13:
                localctx = MySqlParser.ShowRoutineContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 5605
                self.match(MySqlParser.SHOW)
                self.state = 5606
                localctx.routine = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.PROCEDURE or _la==MySqlParser.FUNCTION):
                    localctx.routine = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5607
                self.match(MySqlParser.CODE)
                self.state = 5608
                self.fullId()
                pass

            elif la_ == 14:
                localctx = MySqlParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 5609
                self.match(MySqlParser.SHOW)
                self.state = 5610
                self.match(MySqlParser.GRANTS)
                self.state = 5613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 5611
                    self.match(MySqlParser.FOR)
                    self.state = 5612
                    self.userName()


                pass

            elif la_ == 15:
                localctx = MySqlParser.ShowIndexesContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 5615
                self.match(MySqlParser.SHOW)
                self.state = 5616
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEYS or _la==MySqlParser.INDEXES):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5617
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5618
                self.tableName()
                self.state = 5621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 5619
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5620
                    self.uid()


                self.state = 5625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WHERE:
                    self.state = 5623
                    self.match(MySqlParser.WHERE)
                    self.state = 5624
                    self.expression(0)


                pass

            elif la_ == 16:
                localctx = MySqlParser.ShowOpenTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 5627
                self.match(MySqlParser.SHOW)
                self.state = 5628
                self.match(MySqlParser.OPEN)
                self.state = 5629
                self.match(MySqlParser.TABLES)
                self.state = 5632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 5630
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5631
                    self.uid()


                self.state = 5635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 5634
                    self.showFilter()


                pass

            elif la_ == 17:
                localctx = MySqlParser.ShowProfileContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 5637
                self.match(MySqlParser.SHOW)
                self.state = 5638
                self.match(MySqlParser.PROFILE)
                self.state = 5639
                self.showProfileType()
                self.state = 5644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5640
                    self.match(MySqlParser.COMMA)
                    self.state = 5641
                    self.showProfileType()
                    self.state = 5646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 5647
                    self.match(MySqlParser.FOR)
                    self.state = 5648
                    self.match(MySqlParser.QUERY)
                    self.state = 5649
                    localctx.queryCount = self.decimalLiteral()


                self.state = 5652
                self.match(MySqlParser.LIMIT)
                self.state = 5656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,826,self._ctx)
                if la_ == 1:
                    self.state = 5653
                    localctx.offset = self.decimalLiteral()
                    self.state = 5654
                    self.match(MySqlParser.COMMA)


                self.state = 5658
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = MySqlParser.ShowSlaveStatusContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 5660
                self.match(MySqlParser.SHOW)
                self.state = 5661
                self.match(MySqlParser.SLAVE)
                self.state = 5662
                self.match(MySqlParser.STATUS)
                self.state = 5666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 5663
                    self.match(MySqlParser.FOR)
                    self.state = 5664
                    self.match(MySqlParser.CHANNEL)
                    self.state = 5665
                    self.match(MySqlParser.STRING_LITERAL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(MySqlParser.GLOBAL_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def AT_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AT_SIGN)
            else:
                return self.getToken(MySqlParser.AT_SIGN, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_variableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableClause" ):
                listener.enterVariableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableClause" ):
                listener.exitVariableClause(self)




    def variableClause(self):

        localctx = MySqlParser.VariableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_variableClause)
        self._la = 0 # Token type
        try:
            self.state = 5680
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5670
                self.match(MySqlParser.LOCAL_ID)
                pass
            elif token in [MySqlParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5671
                self.match(MySqlParser.GLOBAL_ID)
                pass
            elif token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.AT_SIGN, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,830,self._ctx)
                if la_ == 1:
                    self.state = 5674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AT_SIGN:
                        self.state = 5672
                        self.match(MySqlParser.AT_SIGN)
                        self.state = 5673
                        self.match(MySqlParser.AT_SIGN)


                    self.state = 5676
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.GLOBAL or _la==MySqlParser.LOCAL or _la==MySqlParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5679
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCommonEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def COLLATION(self):
            return self.getToken(MySqlParser.COLLATION, 0)

        def DATABASES(self):
            return self.getToken(MySqlParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(MySqlParser.SCHEMAS, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def VARIABLES(self):
            return self.getToken(MySqlParser.VARIABLES, 0)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showCommonEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCommonEntity" ):
                listener.enterShowCommonEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCommonEntity" ):
                listener.exitShowCommonEntity(self)




    def showCommonEntity(self):

        localctx = MySqlParser.ShowCommonEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_showCommonEntity)
        self._la = 0 # Token type
        try:
            self.state = 5695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5682
                self.match(MySqlParser.CHARACTER)
                self.state = 5683
                self.match(MySqlParser.SET)
                pass
            elif token in [MySqlParser.COLLATION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5684
                self.match(MySqlParser.COLLATION)
                pass
            elif token in [MySqlParser.DATABASES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5685
                self.match(MySqlParser.DATABASES)
                pass
            elif token in [MySqlParser.SCHEMAS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5686
                self.match(MySqlParser.SCHEMAS)
                pass
            elif token in [MySqlParser.FUNCTION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5687
                self.match(MySqlParser.FUNCTION)
                self.state = 5688
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.PROCEDURE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5689
                self.match(MySqlParser.PROCEDURE)
                self.state = 5690
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.GLOBAL, MySqlParser.SESSION, MySqlParser.STATUS, MySqlParser.VARIABLES]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION:
                    self.state = 5691
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5694
                _la = self._input.LA(1)
                if not(_la==MySqlParser.STATUS or _la==MySqlParser.VARIABLES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_showFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFilter" ):
                listener.enterShowFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFilter" ):
                listener.exitShowFilter(self)




    def showFilter(self):

        localctx = MySqlParser.ShowFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_showFilter)
        try:
            self.state = 5701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LIKE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5697
                self.match(MySqlParser.LIKE)
                self.state = 5698
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.WHERE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5699
                self.match(MySqlParser.WHERE)
                self.state = 5700
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowGlobalInfoClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINES(self):
            return self.getToken(MySqlParser.ENGINES, 0)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def PLUGINS(self):
            return self.getToken(MySqlParser.PLUGINS, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def PROCESSLIST(self):
            return self.getToken(MySqlParser.PROCESSLIST, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def PROFILES(self):
            return self.getToken(MySqlParser.PROFILES, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)

        def AUTHORS(self):
            return self.getToken(MySqlParser.AUTHORS, 0)

        def CONTRIBUTORS(self):
            return self.getToken(MySqlParser.CONTRIBUTORS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showGlobalInfoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfoClause" ):
                listener.enterShowGlobalInfoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfoClause" ):
                listener.exitShowGlobalInfoClause(self)




    def showGlobalInfoClause(self):

        localctx = MySqlParser.ShowGlobalInfoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_showGlobalInfoClause)
        self._la = 0 # Token type
        try:
            self.state = 5720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ENGINES, MySqlParser.STORAGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STORAGE:
                    self.state = 5703
                    self.match(MySqlParser.STORAGE)


                self.state = 5706
                self.match(MySqlParser.ENGINES)
                pass
            elif token in [MySqlParser.MASTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5707
                self.match(MySqlParser.MASTER)
                self.state = 5708
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.PLUGINS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5709
                self.match(MySqlParser.PLUGINS)
                pass
            elif token in [MySqlParser.PRIVILEGES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5710
                self.match(MySqlParser.PRIVILEGES)
                pass
            elif token in [MySqlParser.FULL, MySqlParser.PROCESSLIST]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FULL:
                    self.state = 5711
                    self.match(MySqlParser.FULL)


                self.state = 5714
                self.match(MySqlParser.PROCESSLIST)
                pass
            elif token in [MySqlParser.PROFILES]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5715
                self.match(MySqlParser.PROFILES)
                pass
            elif token in [MySqlParser.SLAVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5716
                self.match(MySqlParser.SLAVE)
                self.state = 5717
                self.match(MySqlParser.HOSTS)
                pass
            elif token in [MySqlParser.AUTHORS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5718
                self.match(MySqlParser.AUTHORS)
                pass
            elif token in [MySqlParser.CONTRIBUTORS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5719
                self.match(MySqlParser.CONTRIBUTORS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSchemaEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def TRIGGERS(self):
            return self.getToken(MySqlParser.TRIGGERS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showSchemaEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaEntity" ):
                listener.enterShowSchemaEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaEntity" ):
                listener.exitShowSchemaEntity(self)




    def showSchemaEntity(self):

        localctx = MySqlParser.ShowSchemaEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_showSchemaEntity)
        self._la = 0 # Token type
        try:
            self.state = 5730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.EVENTS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5722
                self.match(MySqlParser.EVENTS)
                pass
            elif token in [MySqlParser.TABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5723
                self.match(MySqlParser.TABLE)
                self.state = 5724
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.FULL, MySqlParser.TABLES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FULL:
                    self.state = 5725
                    self.match(MySqlParser.FULL)


                self.state = 5728
                self.match(MySqlParser.TABLES)
                pass
            elif token in [MySqlParser.TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5729
                self.match(MySqlParser.TRIGGERS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProfileTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def BLOCK(self):
            return self.getToken(MySqlParser.BLOCK, 0)

        def IO(self):
            return self.getToken(MySqlParser.IO, 0)

        def CONTEXT(self):
            return self.getToken(MySqlParser.CONTEXT, 0)

        def SWITCHES(self):
            return self.getToken(MySqlParser.SWITCHES, 0)

        def CPU(self):
            return self.getToken(MySqlParser.CPU, 0)

        def IPC(self):
            return self.getToken(MySqlParser.IPC, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def PAGE(self):
            return self.getToken(MySqlParser.PAGE, 0)

        def FAULTS(self):
            return self.getToken(MySqlParser.FAULTS, 0)

        def SOURCE(self):
            return self.getToken(MySqlParser.SOURCE, 0)

        def SWAPS(self):
            return self.getToken(MySqlParser.SWAPS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showProfileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfileType" ):
                listener.enterShowProfileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfileType" ):
                listener.exitShowProfileType(self)




    def showProfileType(self):

        localctx = MySqlParser.ShowProfileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_showProfileType)
        try:
            self.state = 5744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5732
                self.match(MySqlParser.ALL)
                pass
            elif token in [MySqlParser.BLOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5733
                self.match(MySqlParser.BLOCK)
                self.state = 5734
                self.match(MySqlParser.IO)
                pass
            elif token in [MySqlParser.CONTEXT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5735
                self.match(MySqlParser.CONTEXT)
                self.state = 5736
                self.match(MySqlParser.SWITCHES)
                pass
            elif token in [MySqlParser.CPU]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5737
                self.match(MySqlParser.CPU)
                pass
            elif token in [MySqlParser.IPC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5738
                self.match(MySqlParser.IPC)
                pass
            elif token in [MySqlParser.MEMORY]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5739
                self.match(MySqlParser.MEMORY)
                pass
            elif token in [MySqlParser.PAGE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5740
                self.match(MySqlParser.PAGE)
                self.state = 5741
                self.match(MySqlParser.FAULTS)
                pass
            elif token in [MySqlParser.SOURCE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5742
                self.match(MySqlParser.SOURCE)
                pass
            elif token in [MySqlParser.SWAPS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5743
                self.match(MySqlParser.SWAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinlogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_binlogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinlogStatement" ):
                listener.enterBinlogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinlogStatement" ):
                listener.exitBinlogStatement(self)




    def binlogStatement(self):

        localctx = MySqlParser.BinlogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_binlogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5746
            self.match(MySqlParser.BINLOG)
            self.state = 5747
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CacheIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # UidContext

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def tableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableIndexesContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableIndexesContext,i)


        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_cacheIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheIndexStatement" ):
                listener.enterCacheIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheIndexStatement" ):
                listener.exitCacheIndexStatement(self)




    def cacheIndexStatement(self):

        localctx = MySqlParser.CacheIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_cacheIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5749
            self.match(MySqlParser.CACHE)
            self.state = 5750
            self.match(MySqlParser.INDEX)
            self.state = 5751
            self.tableIndexes()
            self.state = 5756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5752
                self.match(MySqlParser.COMMA)
                self.state = 5753
                self.tableIndexes()
                self.state = 5758
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 5759
                self.match(MySqlParser.PARTITION)
                self.state = 5760
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5763
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 5761
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 5762
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5765
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5768
            self.match(MySqlParser.IN)
            self.state = 5769
            localctx.schema = self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.flushFormat = None # Token

        def FLUSH(self):
            return self.getToken(MySqlParser.FLUSH, 0)

        def flushOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FlushOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FlushOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_flushStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushStatement" ):
                listener.enterFlushStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushStatement" ):
                listener.exitFlushStatement(self)




    def flushStatement(self):

        localctx = MySqlParser.FlushStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_flushStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5771
            self.match(MySqlParser.FLUSH)
            self.state = 5773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 5772
                localctx.flushFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.flushFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5775
            self.flushOption()
            self.state = 5780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5776
                self.match(MySqlParser.COMMA)
                self.state = 5777
                self.flushOption()
                self.state = 5782
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.connectionFormat = None # Token

        def KILL(self):
            return self.getToken(MySqlParser.KILL, 0)

        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_killStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStatement" ):
                listener.enterKillStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStatement" ):
                listener.exitKillStatement(self)




    def killStatement(self):

        localctx = MySqlParser.KillStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_killStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5783
            self.match(MySqlParser.KILL)
            self.state = 5785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CONNECTION or _la==MySqlParser.QUERY:
                self.state = 5784
                localctx.connectionFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CONNECTION or _la==MySqlParser.QUERY):
                    localctx.connectionFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.REAL_LITERAL]:
                self.state = 5788 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5787
                    self.decimalLiteral()
                    self.state = 5790 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 1125)) & ~0x3f) == 0 and ((1 << (_la - 1125)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1125)) | (1 << (MySqlParser.ONE_DECIMAL - 1125)) | (1 << (MySqlParser.TWO_DECIMAL - 1125)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1125)) | (1 << (MySqlParser.REAL_LITERAL - 1125)))) != 0)):
                        break

                pass
            elif token in [MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID]:
                self.state = 5792
                self.mysqlVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadIndexIntoCacheContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def loadedTableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LoadedTableIndexesContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LoadedTableIndexesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadIndexIntoCache

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadIndexIntoCache" ):
                listener.enterLoadIndexIntoCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadIndexIntoCache" ):
                listener.exitLoadIndexIntoCache(self)




    def loadIndexIntoCache(self):

        localctx = MySqlParser.LoadIndexIntoCacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_loadIndexIntoCache)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5795
            self.match(MySqlParser.LOAD)
            self.state = 5796
            self.match(MySqlParser.INDEX)
            self.state = 5797
            self.match(MySqlParser.INTO)
            self.state = 5798
            self.match(MySqlParser.CACHE)
            self.state = 5799
            self.loadedTableIndexes()
            self.state = 5804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5800
                self.match(MySqlParser.COMMA)
                self.state = 5801
                self.loadedTableIndexes()
                self.state = 5806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStatement" ):
                listener.enterResetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStatement" ):
                listener.exitResetStatement(self)




    def resetStatement(self):

        localctx = MySqlParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5807
            self.match(MySqlParser.RESET)
            self.state = 5808
            self.match(MySqlParser.QUERY)
            self.state = 5809
            self.match(MySqlParser.CACHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShutdownStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_shutdownStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShutdownStatement" ):
                listener.enterShutdownStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShutdownStatement" ):
                listener.exitShutdownStatement(self)




    def shutdownStatement(self):

        localctx = MySqlParser.ShutdownStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_shutdownStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5811
            self.match(MySqlParser.SHUTDOWN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIndexesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexFormat = None # Token

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIndexes" ):
                listener.enterTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIndexes" ):
                listener.exitTableIndexes(self)




    def tableIndexes(self):

        localctx = MySqlParser.TableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_tableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5813
            self.tableName()
            self.state = 5821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INDEX or _la==MySqlParser.KEY or _la==MySqlParser.LR_BRACKET:
                self.state = 5815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 5814
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5817
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5818
                self.uidList()
                self.state = 5819
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_flushOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def flushTableOption(self):
            return self.getTypedRuleContext(MySqlParser.FlushTableOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFlushOption" ):
                listener.enterTableFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFlushOption" ):
                listener.exitTableFlushOption(self)


    class ChannelFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelFlushOption" ):
                listener.enterChannelFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelFlushOption" ):
                listener.exitChannelFlushOption(self)


    class SimpleFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DES_KEY_FILE(self):
            return self.getToken(MySqlParser.DES_KEY_FILE, 0)
        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.OPTIMIZER_COSTS, 0)
        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)
        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)
        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)
        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def USER_RESOURCES(self):
            return self.getToken(MySqlParser.USER_RESOURCES, 0)
        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def READ(self):
            return self.getToken(MySqlParser.READ, 0)
        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def ERROR(self):
            return self.getToken(MySqlParser.ERROR, 0)
        def GENERAL(self):
            return self.getToken(MySqlParser.GENERAL, 0)
        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)
        def SLOW(self):
            return self.getToken(MySqlParser.SLOW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFlushOption" ):
                listener.enterSimpleFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFlushOption" ):
                listener.exitSimpleFlushOption(self)



    def flushOption(self):

        localctx = MySqlParser.FlushOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_flushOption)
        self._la = 0 # Token type
        try:
            self.state = 5855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,858,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5841
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DES_KEY_FILE]:
                    self.state = 5823
                    self.match(MySqlParser.DES_KEY_FILE)
                    pass
                elif token in [MySqlParser.HOSTS]:
                    self.state = 5824
                    self.match(MySqlParser.HOSTS)
                    pass
                elif token in [MySqlParser.BINARY, MySqlParser.ENGINE, MySqlParser.ERROR, MySqlParser.GENERAL, MySqlParser.LOGS, MySqlParser.RELAY, MySqlParser.SLOW]:
                    self.state = 5826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.BINARY or ((((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & ((1 << (MySqlParser.ENGINE - 398)) | (1 << (MySqlParser.ERROR - 398)) | (1 << (MySqlParser.GENERAL - 398)))) != 0) or _la==MySqlParser.RELAY or _la==MySqlParser.SLOW:
                        self.state = 5825
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.BINARY or ((((_la - 398)) & ~0x3f) == 0 and ((1 << (_la - 398)) & ((1 << (MySqlParser.ENGINE - 398)) | (1 << (MySqlParser.ERROR - 398)) | (1 << (MySqlParser.GENERAL - 398)))) != 0) or _la==MySqlParser.RELAY or _la==MySqlParser.SLOW):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 5828
                    self.match(MySqlParser.LOGS)
                    pass
                elif token in [MySqlParser.OPTIMIZER_COSTS]:
                    self.state = 5829
                    self.match(MySqlParser.OPTIMIZER_COSTS)
                    pass
                elif token in [MySqlParser.PRIVILEGES]:
                    self.state = 5830
                    self.match(MySqlParser.PRIVILEGES)
                    pass
                elif token in [MySqlParser.QUERY]:
                    self.state = 5831
                    self.match(MySqlParser.QUERY)
                    self.state = 5832
                    self.match(MySqlParser.CACHE)
                    pass
                elif token in [MySqlParser.STATUS]:
                    self.state = 5833
                    self.match(MySqlParser.STATUS)
                    pass
                elif token in [MySqlParser.USER_RESOURCES]:
                    self.state = 5834
                    self.match(MySqlParser.USER_RESOURCES)
                    pass
                elif token in [MySqlParser.TABLES]:
                    self.state = 5835
                    self.match(MySqlParser.TABLES)
                    self.state = 5839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.WITH:
                        self.state = 5836
                        self.match(MySqlParser.WITH)
                        self.state = 5837
                        self.match(MySqlParser.READ)
                        self.state = 5838
                        self.match(MySqlParser.LOCK)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = MySqlParser.ChannelFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5843
                self.match(MySqlParser.RELAY)
                self.state = 5844
                self.match(MySqlParser.LOGS)
                self.state = 5846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 5845
                    self.channelOption()


                pass

            elif la_ == 3:
                localctx = MySqlParser.TableFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5848
                _la = self._input.LA(1)
                if not(_la==MySqlParser.TABLE or _la==MySqlParser.TABLES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,856,self._ctx)
                if la_ == 1:
                    self.state = 5849
                    self.tables()


                self.state = 5853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR or _la==MySqlParser.WITH:
                    self.state = 5852
                    self.flushTableOption()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def EXPORT(self):
            return self.getToken(MySqlParser.EXPORT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_flushTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTableOption" ):
                listener.enterFlushTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTableOption" ):
                listener.exitFlushTableOption(self)




    def flushTableOption(self):

        localctx = MySqlParser.FlushTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_flushTableOption)
        try:
            self.state = 5862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5857
                self.match(MySqlParser.WITH)
                self.state = 5858
                self.match(MySqlParser.READ)
                self.state = 5859
                self.match(MySqlParser.LOCK)
                pass
            elif token in [MySqlParser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5860
                self.match(MySqlParser.FOR)
                self.state = 5861
                self.match(MySqlParser.EXPORT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadedTableIndexesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partitionList = None # UidListContext
            self.indexFormat = None # Token
            self.indexList = None # UidListContext

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def LEAVES(self):
            return self.getToken(MySqlParser.LEAVES, 0)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadedTableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadedTableIndexes" ):
                listener.enterLoadedTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadedTableIndexes" ):
                listener.exitLoadedTableIndexes(self)




    def loadedTableIndexes(self):

        localctx = MySqlParser.LoadedTableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_loadedTableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5864
            self.tableName()
            self.state = 5872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 5865
                self.match(MySqlParser.PARTITION)
                self.state = 5866
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5869
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 5867
                    localctx.partitionList = self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 5868
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5871
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,863,self._ctx)
            if la_ == 1:
                self.state = 5875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 5874
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5877
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5878
                localctx.indexList = self.uidList()
                self.state = 5879
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 5883
                self.match(MySqlParser.IGNORE)
                self.state = 5884
                self.match(MySqlParser.LEAVES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.column = None # UidContext
            self.pattern = None # Token

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def EXPLAIN(self):
            return self.getToken(MySqlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(MySqlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_simpleDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDescribeStatement" ):
                listener.enterSimpleDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDescribeStatement" ):
                listener.exitSimpleDescribeStatement(self)




    def simpleDescribeStatement(self):

        localctx = MySqlParser.SimpleDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_simpleDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5887
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.DESC) | (1 << MySqlParser.DESCRIBE) | (1 << MySqlParser.EXPLAIN))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5888
            self.tableName()
            self.state = 5891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,865,self._ctx)
            if la_ == 1:
                self.state = 5889
                localctx.column = self.uid()

            elif la_ == 2:
                self.state = 5890
                localctx.pattern = self.match(MySqlParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullDescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.formatType = None # Token
            self.formatValue = None # Token

        def describeObjectClause(self):
            return self.getTypedRuleContext(MySqlParser.DescribeObjectClauseContext,0)


        def EXPLAIN(self):
            return self.getToken(MySqlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(MySqlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def FORMAT(self):
            return self.getToken(MySqlParser.FORMAT, 0)

        def TRADITIONAL(self):
            return self.getToken(MySqlParser.TRADITIONAL, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_fullDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullDescribeStatement" ):
                listener.enterFullDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullDescribeStatement" ):
                listener.exitFullDescribeStatement(self)




    def fullDescribeStatement(self):

        localctx = MySqlParser.FullDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_fullDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5893
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.DESC) | (1 << MySqlParser.DESCRIBE) | (1 << MySqlParser.EXPLAIN))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENDED or _la==MySqlParser.PARTITIONS or _la==MySqlParser.FORMAT:
                self.state = 5894
                localctx.formatType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.EXTENDED or _la==MySqlParser.PARTITIONS or _la==MySqlParser.FORMAT):
                    localctx.formatType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5895
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 5896
                localctx.formatValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.JSON or _la==MySqlParser.TRADITIONAL):
                    localctx.formatValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5899
            self.describeObjectClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(MySqlParser.HELP, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_helpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStatement" ):
                listener.enterHelpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStatement" ):
                listener.exitHelpStatement(self)




    def helpStatement(self):

        localctx = MySqlParser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5901
            self.match(MySqlParser.HELP)
            self.state = 5902
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MySqlParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5904
            self.match(MySqlParser.USE)
            self.state = 5905
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNAL(self):
            return self.getToken(MySqlParser.SIGNAL, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def signalConditionInformation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SignalConditionInformationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SignalConditionInformationContext,i)


        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_signalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalStatement" ):
                listener.enterSignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalStatement" ):
                listener.exitSignalStatement(self)




    def signalStatement(self):

        localctx = MySqlParser.SignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_signalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5907
            self.match(MySqlParser.SIGNAL)
            self.state = 5915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SQLSTATE]:
                self.state = 5908
                self.match(MySqlParser.SQLSTATE)
                self.state = 5910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VALUE:
                    self.state = 5909
                    self.match(MySqlParser.VALUE)


                self.state = 5912
                self.stringLiteral()
                pass
            elif token in [MySqlParser.ID]:
                self.state = 5913
                self.match(MySqlParser.ID)
                pass
            elif token in [MySqlParser.REVERSE_QUOTE_ID]:
                self.state = 5914
                self.match(MySqlParser.REVERSE_QUOTE_ID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,870,self._ctx)
            if la_ == 1:
                self.state = 5917
                self.match(MySqlParser.SET)
                self.state = 5918
                self.signalConditionInformation()
                self.state = 5923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5919
                    self.match(MySqlParser.COMMA)
                    self.state = 5920
                    self.signalConditionInformation()
                    self.state = 5925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESIGNAL(self):
            return self.getToken(MySqlParser.RESIGNAL, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def signalConditionInformation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SignalConditionInformationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SignalConditionInformationContext,i)


        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resignalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResignalStatement" ):
                listener.enterResignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResignalStatement" ):
                listener.exitResignalStatement(self)




    def resignalStatement(self):

        localctx = MySqlParser.ResignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_resignalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5928
            self.match(MySqlParser.RESIGNAL)
            self.state = 5936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SQLSTATE]:
                self.state = 5929
                self.match(MySqlParser.SQLSTATE)
                self.state = 5931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VALUE:
                    self.state = 5930
                    self.match(MySqlParser.VALUE)


                self.state = 5933
                self.stringLiteral()
                pass
            elif token in [MySqlParser.ID]:
                self.state = 5934
                self.match(MySqlParser.ID)
                pass
            elif token in [MySqlParser.REVERSE_QUOTE_ID]:
                self.state = 5935
                self.match(MySqlParser.REVERSE_QUOTE_ID)
                pass
            elif token in [MySqlParser.EOF, MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GET, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.RESIGNAL, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.SIGNAL, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.MINUS, MySqlParser.LR_BRACKET, MySqlParser.SEMI]:
                pass
            else:
                pass
            self.state = 5947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,874,self._ctx)
            if la_ == 1:
                self.state = 5938
                self.match(MySqlParser.SET)
                self.state = 5939
                self.signalConditionInformation()
                self.state = 5944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5940
                    self.match(MySqlParser.COMMA)
                    self.state = 5941
                    self.signalConditionInformation()
                    self.state = 5946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalConditionInformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(MySqlParser.CLASS_ORIGIN, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(MySqlParser.SUBCLASS_ORIGIN, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(MySqlParser.MESSAGE_TEXT, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(MySqlParser.MYSQL_ERRNO, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(MySqlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(MySqlParser.CONSTRAINT_NAME, 0)

        def CATALOG_NAME(self):
            return self.getToken(MySqlParser.CATALOG_NAME, 0)

        def SCHEMA_NAME(self):
            return self.getToken(MySqlParser.SCHEMA_NAME, 0)

        def TABLE_NAME(self):
            return self.getToken(MySqlParser.TABLE_NAME, 0)

        def COLUMN_NAME(self):
            return self.getToken(MySqlParser.COLUMN_NAME, 0)

        def CURSOR_NAME(self):
            return self.getToken(MySqlParser.CURSOR_NAME, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def DECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.DECIMAL_LITERAL, 0)

        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def simpleId(self):
            return self.getTypedRuleContext(MySqlParser.SimpleIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_signalConditionInformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalConditionInformation" ):
                listener.enterSignalConditionInformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalConditionInformation" ):
                listener.exitSignalConditionInformation(self)




    def signalConditionInformation(self):

        localctx = MySqlParser.SignalConditionInformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_signalConditionInformation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5949
            _la = self._input.LA(1)
            if not(((((_la - 350)) & ~0x3f) == 0 and ((1 << (_la - 350)) & ((1 << (MySqlParser.CLASS_ORIGIN - 350)) | (1 << (MySqlParser.COLUMN_NAME - 350)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 350)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 350)) | (1 << (MySqlParser.CONSTRAINT_NAME - 350)) | (1 << (MySqlParser.CURSOR_NAME - 350)))) != 0) or _la==MySqlParser.MESSAGE_TEXT or _la==MySqlParser.MYSQL_ERRNO or _la==MySqlParser.SUBCLASS_ORIGIN or _la==MySqlParser.TABLE_NAME or _la==MySqlParser.CATALOG_NAME or _la==MySqlParser.SCHEMA_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5950
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 5955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,875,self._ctx)
            if la_ == 1:
                self.state = 5951
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.state = 5952
                self.match(MySqlParser.DECIMAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 5953
                self.mysqlVariable()
                pass

            elif la_ == 4:
                self.state = 5954
                self.simpleId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiagnosticsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(MySqlParser.GET, 0)

        def DIAGNOSTICS(self):
            return self.getToken(MySqlParser.DIAGNOSTICS, 0)

        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)

        def STACKED(self):
            return self.getToken(MySqlParser.STACKED, 0)

        def variableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.VariableClauseContext,i)


        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def CONDITION(self):
            return self.getToken(MySqlParser.CONDITION, 0)

        def diagnosticsConditionInformationName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DiagnosticsConditionInformationNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DiagnosticsConditionInformationNameContext,i)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NUMBER)
            else:
                return self.getToken(MySqlParser.NUMBER, i)

        def ROW_COUNT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ROW_COUNT)
            else:
                return self.getToken(MySqlParser.ROW_COUNT, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_diagnosticsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnosticsStatement" ):
                listener.enterDiagnosticsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnosticsStatement" ):
                listener.exitDiagnosticsStatement(self)




    def diagnosticsStatement(self):

        localctx = MySqlParser.DiagnosticsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_diagnosticsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5957
            self.match(MySqlParser.GET)
            self.state = 5959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CURRENT or _la==MySqlParser.STACKED:
                self.state = 5958
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CURRENT or _la==MySqlParser.STACKED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5961
            self.match(MySqlParser.DIAGNOSTICS)
            self.state = 5993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.AT_SIGN, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                self.state = 5962
                self.variableClause()
                self.state = 5963
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 5964
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NUMBER or _la==MySqlParser.ROW_COUNT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5965
                    self.match(MySqlParser.COMMA)
                    self.state = 5966
                    self.variableClause()
                    self.state = 5967
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 5968
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.NUMBER or _la==MySqlParser.ROW_COUNT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.CONDITION]:
                self.state = 5975
                self.match(MySqlParser.CONDITION)
                self.state = 5978
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.REAL_LITERAL]:
                    self.state = 5976
                    self.decimalLiteral()
                    pass
                elif token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.AT_SIGN, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                    self.state = 5977
                    self.variableClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5980
                self.variableClause()
                self.state = 5981
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 5982
                self.diagnosticsConditionInformationName()
                self.state = 5990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5983
                    self.match(MySqlParser.COMMA)
                    self.state = 5984
                    self.variableClause()
                    self.state = 5985
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 5986
                    self.diagnosticsConditionInformationName()
                    self.state = 5992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiagnosticsConditionInformationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_ORIGIN(self):
            return self.getToken(MySqlParser.CLASS_ORIGIN, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(MySqlParser.SUBCLASS_ORIGIN, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(MySqlParser.RETURNED_SQLSTATE, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(MySqlParser.MESSAGE_TEXT, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(MySqlParser.MYSQL_ERRNO, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(MySqlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(MySqlParser.CONSTRAINT_NAME, 0)

        def CATALOG_NAME(self):
            return self.getToken(MySqlParser.CATALOG_NAME, 0)

        def SCHEMA_NAME(self):
            return self.getToken(MySqlParser.SCHEMA_NAME, 0)

        def TABLE_NAME(self):
            return self.getToken(MySqlParser.TABLE_NAME, 0)

        def COLUMN_NAME(self):
            return self.getToken(MySqlParser.COLUMN_NAME, 0)

        def CURSOR_NAME(self):
            return self.getToken(MySqlParser.CURSOR_NAME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_diagnosticsConditionInformationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnosticsConditionInformationName" ):
                listener.enterDiagnosticsConditionInformationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnosticsConditionInformationName" ):
                listener.exitDiagnosticsConditionInformationName(self)




    def diagnosticsConditionInformationName(self):

        localctx = MySqlParser.DiagnosticsConditionInformationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_diagnosticsConditionInformationName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5995
            _la = self._input.LA(1)
            if not(((((_la - 350)) & ~0x3f) == 0 and ((1 << (_la - 350)) & ((1 << (MySqlParser.CLASS_ORIGIN - 350)) | (1 << (MySqlParser.COLUMN_NAME - 350)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 350)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 350)) | (1 << (MySqlParser.CONSTRAINT_NAME - 350)) | (1 << (MySqlParser.CURSOR_NAME - 350)))) != 0) or _la==MySqlParser.MESSAGE_TEXT or _la==MySqlParser.MYSQL_ERRNO or ((((_la - 576)) & ~0x3f) == 0 and ((1 << (_la - 576)) & ((1 << (MySqlParser.RETURNED_SQLSTATE - 576)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 576)) | (1 << (MySqlParser.TABLE_NAME - 576)))) != 0) or _la==MySqlParser.CATALOG_NAME or _la==MySqlParser.SCHEMA_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeObjectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_describeObjectClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DescribeStatementsContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def deleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.DeleteStatementContext,0)

        def insertStatement(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementContext,0)

        def replaceStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplaceStatementContext,0)

        def updateStatement(self):
            return self.getTypedRuleContext(MySqlParser.UpdateStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeStatements" ):
                listener.enterDescribeStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeStatements" ):
                listener.exitDescribeStatements(self)


    class DescribeConnectionContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeConnection" ):
                listener.enterDescribeConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeConnection" ):
                listener.exitDescribeConnection(self)



    def describeObjectClause(self):

        localctx = MySqlParser.DescribeObjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_describeObjectClause)
        try:
            self.state = 6007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DELETE, MySqlParser.INSERT, MySqlParser.REPLACE, MySqlParser.SELECT, MySqlParser.UPDATE, MySqlParser.LR_BRACKET]:
                localctx = MySqlParser.DescribeStatementsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6002
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.SELECT, MySqlParser.LR_BRACKET]:
                    self.state = 5997
                    self.selectStatement()
                    pass
                elif token in [MySqlParser.DELETE]:
                    self.state = 5998
                    self.deleteStatement()
                    pass
                elif token in [MySqlParser.INSERT]:
                    self.state = 5999
                    self.insertStatement()
                    pass
                elif token in [MySqlParser.REPLACE]:
                    self.state = 6000
                    self.replaceStatement()
                    pass
                elif token in [MySqlParser.UPDATE]:
                    self.state = 6001
                    self.updateStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.FOR]:
                localctx = MySqlParser.DescribeConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6004
                self.match(MySqlParser.FOR)
                self.state = 6005
                self.match(MySqlParser.CONNECTION)
                self.state = 6006
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(MySqlParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)




    def fullId(self):

        localctx = MySqlParser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6009
            self.uid()
            self.state = 6013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,883,self._ctx)
            if la_ == 1:
                self.state = 6010
                self.match(MySqlParser.DOT_ID)

            elif la_ == 2:
                self.state = 6011
                self.match(MySqlParser.DOT)
                self.state = 6012
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = MySqlParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6015
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_roleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleName" ):
                listener.enterRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleName" ):
                listener.exitRoleName(self)




    def roleName(self):

        localctx = MySqlParser.RoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_roleName)
        try:
            self.state = 6019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,884,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6017
                self.userName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6018
                self.uid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DottedIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DottedIdContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)




    def fullColumnName(self):

        localctx = MySqlParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_fullColumnName)
        try:
            self.state = 6033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,888,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6021
                self.uid()
                self.state = 6026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,886,self._ctx)
                if la_ == 1:
                    self.state = 6022
                    self.dottedId()
                    self.state = 6024
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,885,self._ctx)
                    if la_ == 1:
                        self.state = 6023
                        self.dottedId()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6028
                self.matchWildcard()
                self.state = 6029
                self.dottedId()
                self.state = 6031
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,887,self._ctx)
                if la_ == 1:
                    self.state = 6030
                    self.dottedId()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)




    def indexColumnName(self):

        localctx = MySqlParser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,891,self._ctx)
            if la_ == 1:
                self.state = 6037
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,889,self._ctx)
                if la_ == 1:
                    self.state = 6035
                    self.uid()
                    pass

                elif la_ == 2:
                    self.state = 6036
                    self.match(MySqlParser.STRING_LITERAL)
                    pass


                self.state = 6043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 6039
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 6040
                    self.decimalLiteral()
                    self.state = 6041
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                self.state = 6045
                self.expression(0)
                pass


            self.state = 6049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ASC or _la==MySqlParser.DESC:
                self.state = 6048
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(MySqlParser.STRING_USER_NAME, 0)

        def STRING_USER_NAME_MARIADB(self):
            return self.getToken(MySqlParser.STRING_USER_NAME_MARIADB, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ADMIN(self):
            return self.getToken(MySqlParser.ADMIN, 0)

        def keywordsCanBeId(self):
            return self.getTypedRuleContext(MySqlParser.KeywordsCanBeIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MySqlParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_userName)
        try:
            self.state = 6057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,893,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6051
                self.match(MySqlParser.STRING_USER_NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6052
                self.match(MySqlParser.STRING_USER_NAME_MARIADB)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6053
                self.match(MySqlParser.ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6054
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6055
                self.match(MySqlParser.ADMIN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6056
                self.keywordsCanBeId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MysqlVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(MySqlParser.GLOBAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_mysqlVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariable" ):
                listener.enterMysqlVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariable" ):
                listener.exitMysqlVariable(self)




    def mysqlVariable(self):

        localctx = MySqlParser.MysqlVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_mysqlVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6059
            _la = self._input.LA(1)
            if not(_la==MySqlParser.LOCAL_ID or _la==MySqlParser.GLOBAL_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameBaseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)




    def charsetName(self):

        localctx = MySqlParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_charsetName)
        try:
            self.state = 6065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,894,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6061
                self.match(MySqlParser.BINARY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6062
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6063
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6064
                self.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)




    def collationName(self):

        localctx = MySqlParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_collationName)
        try:
            self.state = 6069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,895,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6067
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6068
                self.match(MySqlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE(self):
            return self.getToken(MySqlParser.ARCHIVE, 0)

        def BLACKHOLE(self):
            return self.getToken(MySqlParser.BLACKHOLE, 0)

        def CSV(self):
            return self.getToken(MySqlParser.CSV, 0)

        def FEDERATED(self):
            return self.getToken(MySqlParser.FEDERATED, 0)

        def INNODB(self):
            return self.getToken(MySqlParser.INNODB, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def MRG_MYISAM(self):
            return self.getToken(MySqlParser.MRG_MYISAM, 0)

        def MYISAM(self):
            return self.getToken(MySqlParser.MYISAM, 0)

        def NDB(self):
            return self.getToken(MySqlParser.NDB, 0)

        def NDBCLUSTER(self):
            return self.getToken(MySqlParser.NDBCLUSTER, 0)

        def PERFORMANCE_SCHEMA(self):
            return self.getToken(MySqlParser.PERFORMANCE_SCHEMA, 0)

        def TOKUDB(self):
            return self.getToken(MySqlParser.TOKUDB, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def CONNECT(self):
            return self.getToken(MySqlParser.CONNECT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_engineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineName" ):
                listener.enterEngineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineName" ):
                listener.exitEngineName(self)




    def engineName(self):

        localctx = MySqlParser.EngineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_engineName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6071
            _la = self._input.LA(1)
            if not(_la==MySqlParser.CONNECT or ((((_la - 764)) & ~0x3f) == 0 and ((1 << (_la - 764)) & ((1 << (MySqlParser.ARCHIVE - 764)) | (1 << (MySqlParser.BLACKHOLE - 764)) | (1 << (MySqlParser.CSV - 764)) | (1 << (MySqlParser.FEDERATED - 764)) | (1 << (MySqlParser.INNODB - 764)) | (1 << (MySqlParser.MEMORY - 764)) | (1 << (MySqlParser.MRG_MYISAM - 764)) | (1 << (MySqlParser.MYISAM - 764)) | (1 << (MySqlParser.NDB - 764)) | (1 << (MySqlParser.NDBCLUSTER - 764)) | (1 << (MySqlParser.PERFORMANCE_SCHEMA - 764)) | (1 << (MySqlParser.TOKUDB - 764)))) != 0) or ((((_la - 1135)) & ~0x3f) == 0 and ((1 << (_la - 1135)) & ((1 << (MySqlParser.STRING_LITERAL - 1135)) | (1 << (MySqlParser.ID - 1135)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 1135)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.MINUS)
            else:
                return self.getToken(MySqlParser.MINUS, i)

        def COLON_SYMB(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COLON_SYMB)
            else:
                return self.getToken(MySqlParser.COLON_SYMB, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_uuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidSet" ):
                listener.enterUuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidSet" ):
                listener.exitUuidSet(self)




    def uuidSet(self):

        localctx = MySqlParser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6073
            self.decimalLiteral()
            self.state = 6074
            self.match(MySqlParser.MINUS)
            self.state = 6075
            self.decimalLiteral()
            self.state = 6076
            self.match(MySqlParser.MINUS)
            self.state = 6077
            self.decimalLiteral()
            self.state = 6078
            self.match(MySqlParser.MINUS)
            self.state = 6079
            self.decimalLiteral()
            self.state = 6080
            self.match(MySqlParser.MINUS)
            self.state = 6081
            self.decimalLiteral()
            self.state = 6087 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6082
                self.match(MySqlParser.COLON_SYMB)
                self.state = 6083
                self.decimalLiteral()
                self.state = 6084
                self.match(MySqlParser.MINUS)
                self.state = 6085
                self.decimalLiteral()
                self.state = 6089 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySqlParser.COLON_SYMB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.globalTableUid = None # XuidStringIdContext
            self.qualifier = None # XuidStringIdContext
            self.idFormat = None # DecimalLiteralContext

        def xuidStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.XuidStringIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.XuidStringIdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXid" ):
                listener.enterXid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXid" ):
                listener.exitXid(self)




    def xid(self):

        localctx = MySqlParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6091
            localctx.globalTableUid = self.xuidStringId()
            self.state = 6098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMA:
                self.state = 6092
                self.match(MySqlParser.COMMA)
                self.state = 6093
                localctx.qualifier = self.xuidStringId()
                self.state = 6096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COMMA:
                    self.state = 6094
                    self.match(MySqlParser.COMMA)
                    self.state = 6095
                    localctx.idFormat = self.decimalLiteral()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XuidStringIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(MySqlParser.BIT_STRING, 0)

        def HEXADECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.HEXADECIMAL_LITERAL)
            else:
                return self.getToken(MySqlParser.HEXADECIMAL_LITERAL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_xuidStringId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXuidStringId" ):
                listener.enterXuidStringId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXuidStringId" ):
                listener.exitXuidStringId(self)




    def xuidStringId(self):

        localctx = MySqlParser.XuidStringIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_xuidStringId)
        self._la = 0 # Token type
        try:
            self.state = 6107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6100
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.BIT_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6101
                self.match(MySqlParser.BIT_STRING)
                pass
            elif token in [MySqlParser.HEXADECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6103 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6102
                    self.match(MySqlParser.HEXADECIMAL_LITERAL)
                    self.state = 6105 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.HEXADECIMAL_LITERAL):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_authPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPlugin" ):
                listener.enterAuthPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPlugin" ):
                listener.exitAuthPlugin(self)




    def authPlugin(self):

        localctx = MySqlParser.AuthPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_authPlugin)
        try:
            self.state = 6111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,901,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6109
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6110
                self.match(MySqlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(MySqlParser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)




    def uid(self):

        localctx = MySqlParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_uid)
        try:
            self.state = 6116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,902,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6113
                self.simpleId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6114
                self.match(MySqlParser.REVERSE_QUOTE_ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6115
                self.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameBaseContext,0)


        def transactionLevelBase(self):
            return self.getTypedRuleContext(MySqlParser.TransactionLevelBaseContext,0)


        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def privilegesBase(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegesBaseContext,0)


        def intervalTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeBaseContext,0)


        def dataTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeBaseContext,0)


        def keywordsCanBeId(self):
            return self.getTypedRuleContext(MySqlParser.KeywordsCanBeIdContext,0)


        def functionNameBase(self):
            return self.getTypedRuleContext(MySqlParser.FunctionNameBaseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_simpleId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleId" ):
                listener.enterSimpleId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleId" ):
                listener.exitSimpleId(self)




    def simpleId(self):

        localctx = MySqlParser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_simpleId)
        try:
            self.state = 6127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,903,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6118
                self.match(MySqlParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6119
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6120
                self.transactionLevelBase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6121
                self.engineName()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6122
                self.privilegesBase()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6123
                self.intervalTypeBase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6124
                self.dataTypeBase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6125
                self.keywordsCanBeId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6126
                self.functionNameBase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(MySqlParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)




    def dottedId(self):

        localctx = MySqlParser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_dottedId)
        try:
            self.state = 6132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6129
                self.match(MySqlParser.DOT_ID)
                pass
            elif token in [MySqlParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6130
                self.match(MySqlParser.DOT)
                self.state = 6131
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(MySqlParser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)




    def decimalLiteral(self):

        localctx = MySqlParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6134
            _la = self._input.LA(1)
            if not(((((_la - 1125)) & ~0x3f) == 0 and ((1 << (_la - 1125)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1125)) | (1 << (MySqlParser.ONE_DECIMAL - 1125)) | (1 << (MySqlParser.TWO_DECIMAL - 1125)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1125)) | (1 << (MySqlParser.REAL_LITERAL - 1125)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileSizeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESIZE_LITERAL(self):
            return self.getToken(MySqlParser.FILESIZE_LITERAL, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_fileSizeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSizeLiteral" ):
                listener.enterFileSizeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSizeLiteral" ):
                listener.exitFileSizeLiteral(self)




    def fileSizeLiteral(self):

        localctx = MySqlParser.FileSizeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_fileSizeLiteral)
        try:
            self.state = 6138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.FILESIZE_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6136
                self.match(MySqlParser.FILESIZE_LITERAL)
                pass
            elif token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6137
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def START_NATIONAL_STRING_LITERAL(self):
            return self.getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(MySqlParser.STRING_CHARSET_NAME, 0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = MySqlParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.state = 6163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,912,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6145
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.STRING_LITERAL, MySqlParser.STRING_CHARSET_NAME]:
                    self.state = 6141
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.STRING_CHARSET_NAME:
                        self.state = 6140
                        self.match(MySqlParser.STRING_CHARSET_NAME)


                    self.state = 6143
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [MySqlParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 6144
                    self.match(MySqlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6148 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 6147
                        self.match(MySqlParser.STRING_LITERAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 6150 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,908,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6157
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.STRING_LITERAL, MySqlParser.STRING_CHARSET_NAME]:
                    self.state = 6153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.STRING_CHARSET_NAME:
                        self.state = 6152
                        self.match(MySqlParser.STRING_CHARSET_NAME)


                    self.state = 6155
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [MySqlParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 6156
                    self.match(MySqlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6161
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,911,self._ctx)
                if la_ == 1:
                    self.state = 6159
                    self.match(MySqlParser.COLLATE)
                    self.state = 6160
                    self.collationName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(MySqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MySqlParser.FALSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = MySqlParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6165
            _la = self._input.LA(1)
            if not(_la==MySqlParser.FALSE or _la==MySqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexadecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(MySqlParser.STRING_CHARSET_NAME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_hexadecimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)




    def hexadecimalLiteral(self):

        localctx = MySqlParser.HexadecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_hexadecimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.STRING_CHARSET_NAME:
                self.state = 6167
                self.match(MySqlParser.STRING_CHARSET_NAME)


            self.state = 6170
            self.match(MySqlParser.HEXADECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullNotnullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(MySqlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)




    def nullNotnull(self):

        localctx = MySqlParser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOT:
                self.state = 6172
                self.match(MySqlParser.NOT)


            self.state = 6175
            _la = self._input.LA(1)
            if not(_la==MySqlParser.NULL_LITERAL or _la==MySqlParser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def hexadecimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.HexadecimalLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(MySqlParser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(MySqlParser.REAL_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(MySqlParser.BIT_STRING, 0)

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(MySqlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = MySqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 6189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,916,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6177
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6178
                self.decimalLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6179
                self.match(MySqlParser.MINUS)
                self.state = 6180
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6181
                self.hexadecimalLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6182
                self.booleanLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6183
                self.match(MySqlParser.REAL_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6184
                self.match(MySqlParser.BIT_STRING)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 6185
                    self.match(MySqlParser.NOT)


                self.state = 6188
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NULL_LITERAL or _la==MySqlParser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpatialDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTION, 0)
        def GEOMCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMCOLLECTION, 0)
        def LINESTRING(self):
            return self.getToken(MySqlParser.LINESTRING, 0)
        def MULTILINESTRING(self):
            return self.getToken(MySqlParser.MULTILINESTRING, 0)
        def MULTIPOINT(self):
            return self.getToken(MySqlParser.MULTIPOINT, 0)
        def MULTIPOLYGON(self):
            return self.getToken(MySqlParser.MULTIPOLYGON, 0)
        def POINT(self):
            return self.getToken(MySqlParser.POINT, 0)
        def POLYGON(self):
            return self.getToken(MySqlParser.POLYGON, 0)
        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)
        def GEOMETRY(self):
            return self.getToken(MySqlParser.GEOMETRY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialDataType" ):
                listener.enterSpatialDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialDataType" ):
                listener.exitSpatialDataType(self)


    class LongVarbinaryDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LONG(self):
            return self.getToken(MySqlParser.LONG, 0)
        def VARBINARY(self):
            return self.getToken(MySqlParser.VARBINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongVarbinaryDataType" ):
                listener.enterLongVarbinaryDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongVarbinaryDataType" ):
                listener.exitLongVarbinaryDataType(self)


    class CollectionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def collectionOptions(self):
            return self.getTypedRuleContext(MySqlParser.CollectionOptionsContext,0)

        def ENUM(self):
            return self.getToken(MySqlParser.ENUM, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionDataType" ):
                listener.enterCollectionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionDataType" ):
                listener.exitCollectionDataType(self)


    class NationalVaryingStringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def NATIONAL(self):
            return self.getToken(MySqlParser.NATIONAL, 0)
        def VARYING(self):
            return self.getToken(MySqlParser.VARYING, 0)
        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNationalVaryingStringDataType" ):
                listener.enterNationalVaryingStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNationalVaryingStringDataType" ):
                listener.exitNationalVaryingStringDataType(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def TINYINT(self):
            return self.getToken(MySqlParser.TINYINT, 0)
        def SMALLINT(self):
            return self.getToken(MySqlParser.SMALLINT, 0)
        def MEDIUMINT(self):
            return self.getToken(MySqlParser.MEDIUMINT, 0)
        def INT(self):
            return self.getToken(MySqlParser.INT, 0)
        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)
        def BIGINT(self):
            return self.getToken(MySqlParser.BIGINT, 0)
        def MIDDLEINT(self):
            return self.getToken(MySqlParser.MIDDLEINT, 0)
        def INT1(self):
            return self.getToken(MySqlParser.INT1, 0)
        def INT2(self):
            return self.getToken(MySqlParser.INT2, 0)
        def INT3(self):
            return self.getToken(MySqlParser.INT3, 0)
        def INT4(self):
            return self.getToken(MySqlParser.INT4, 0)
        def INT8(self):
            return self.getToken(MySqlParser.INT8, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def SIGNED(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SIGNED)
            else:
                return self.getToken(MySqlParser.SIGNED, i)
        def UNSIGNED(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.UNSIGNED)
            else:
                return self.getToken(MySqlParser.UNSIGNED, i)
        def ZEROFILL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ZEROFILL)
            else:
                return self.getToken(MySqlParser.ZEROFILL, i)
        def REAL(self):
            return self.getToken(MySqlParser.REAL, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoDimensionContext,0)

        def DOUBLE(self):
            return self.getToken(MySqlParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(MySqlParser.PRECISION, 0)
        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)
        def DEC(self):
            return self.getToken(MySqlParser.DEC, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def NUMERIC(self):
            return self.getToken(MySqlParser.NUMERIC, 0)
        def FLOAT(self):
            return self.getToken(MySqlParser.FLOAT, 0)
        def FLOAT4(self):
            return self.getToken(MySqlParser.FLOAT4, 0)
        def FLOAT8(self):
            return self.getToken(MySqlParser.FLOAT8, 0)
        def lengthTwoOptionalDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoOptionalDimensionContext,0)

        def BIT(self):
            return self.getToken(MySqlParser.BIT, 0)
        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)
        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)
        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def VARBINARY(self):
            return self.getToken(MySqlParser.VARBINARY, 0)
        def BLOB(self):
            return self.getToken(MySqlParser.BLOB, 0)
        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensionDataType" ):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensionDataType" ):
                listener.exitDimensionDataType(self)


    class StringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def VARCHAR(self):
            return self.getToken(MySqlParser.VARCHAR, 0)
        def TINYTEXT(self):
            return self.getToken(MySqlParser.TINYTEXT, 0)
        def TEXT(self):
            return self.getToken(MySqlParser.TEXT, 0)
        def MEDIUMTEXT(self):
            return self.getToken(MySqlParser.MEDIUMTEXT, 0)
        def LONGTEXT(self):
            return self.getToken(MySqlParser.LONGTEXT, 0)
        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)
        def NVARCHAR(self):
            return self.getToken(MySqlParser.NVARCHAR, 0)
        def LONG(self):
            return self.getToken(MySqlParser.LONG, 0)
        def VARYING(self):
            return self.getToken(MySqlParser.VARYING, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BINARY)
            else:
                return self.getToken(MySqlParser.BINARY, i)
        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringDataType" ):
                listener.enterStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringDataType" ):
                listener.exitStringDataType(self)


    class LongVarcharDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def LONG(self):
            return self.getToken(MySqlParser.LONG, 0)
        def VARCHAR(self):
            return self.getToken(MySqlParser.VARCHAR, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongVarcharDataType" ):
                listener.enterLongVarcharDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongVarcharDataType" ):
                listener.exitLongVarcharDataType(self)


    class NationalStringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def NATIONAL(self):
            return self.getToken(MySqlParser.NATIONAL, 0)
        def VARCHAR(self):
            return self.getToken(MySqlParser.VARCHAR, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNationalStringDataType" ):
                listener.enterNationalStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNationalStringDataType" ):
                listener.exitNationalStringDataType(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)
        def TINYBLOB(self):
            return self.getToken(MySqlParser.TINYBLOB, 0)
        def MEDIUMBLOB(self):
            return self.getToken(MySqlParser.MEDIUMBLOB, 0)
        def LONGBLOB(self):
            return self.getToken(MySqlParser.LONGBLOB, 0)
        def BOOL(self):
            return self.getToken(MySqlParser.BOOL, 0)
        def BOOLEAN(self):
            return self.getToken(MySqlParser.BOOLEAN, 0)
        def SERIAL(self):
            return self.getToken(MySqlParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataType" ):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataType" ):
                listener.exitSimpleDataType(self)



    def dataType(self):

        localctx = MySqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 6313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,944,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.StringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6191
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CHARACTER or ((((_la - 216)) & ~0x3f) == 0 and ((1 << (_la - 216)) & ((1 << (MySqlParser.CHAR - 216)) | (1 << (MySqlParser.VARCHAR - 216)) | (1 << (MySqlParser.NVARCHAR - 216)) | (1 << (MySqlParser.LONG - 216)) | (1 << (MySqlParser.TINYTEXT - 216)) | (1 << (MySqlParser.TEXT - 216)) | (1 << (MySqlParser.MEDIUMTEXT - 216)) | (1 << (MySqlParser.LONGTEXT - 216)))) != 0) or _la==MySqlParser.NCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VARYING:
                    self.state = 6192
                    self.match(MySqlParser.VARYING)


                self.state = 6196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,918,self._ctx)
                if la_ == 1:
                    self.state = 6195
                    self.lengthOneDimension()


                self.state = 6199
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,919,self._ctx)
                if la_ == 1:
                    self.state = 6198
                    self.match(MySqlParser.BINARY)


                self.state = 6204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,920,self._ctx)
                if la_ == 1:
                    self.state = 6201
                    self.charSet()
                    self.state = 6202
                    self.charsetName()


                self.state = 6209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
                if la_ == 1:
                    self.state = 6206
                    self.match(MySqlParser.COLLATE)
                    self.state = 6207
                    self.collationName()

                elif la_ == 2:
                    self.state = 6208
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 2:
                localctx = MySqlParser.NationalStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6211
                self.match(MySqlParser.NATIONAL)
                self.state = 6212
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CHARACTER or _la==MySqlParser.VARCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6214
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,922,self._ctx)
                if la_ == 1:
                    self.state = 6213
                    self.lengthOneDimension()


                self.state = 6217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,923,self._ctx)
                if la_ == 1:
                    self.state = 6216
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 3:
                localctx = MySqlParser.NationalStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6219
                self.match(MySqlParser.NCHAR)
                self.state = 6220
                localctx.typeName = self.match(MySqlParser.VARCHAR)
                self.state = 6222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,924,self._ctx)
                if la_ == 1:
                    self.state = 6221
                    self.lengthOneDimension()


                self.state = 6225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,925,self._ctx)
                if la_ == 1:
                    self.state = 6224
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 4:
                localctx = MySqlParser.NationalVaryingStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6227
                self.match(MySqlParser.NATIONAL)
                self.state = 6228
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CHARACTER or _la==MySqlParser.CHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6229
                self.match(MySqlParser.VARYING)
                self.state = 6231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,926,self._ctx)
                if la_ == 1:
                    self.state = 6230
                    self.lengthOneDimension()


                self.state = 6234
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,927,self._ctx)
                if la_ == 1:
                    self.state = 6233
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 5:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6236
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & ((1 << (MySqlParser.TINYINT - 190)) | (1 << (MySqlParser.SMALLINT - 190)) | (1 << (MySqlParser.MEDIUMINT - 190)) | (1 << (MySqlParser.MIDDLEINT - 190)) | (1 << (MySqlParser.INT - 190)) | (1 << (MySqlParser.INT1 - 190)) | (1 << (MySqlParser.INT2 - 190)) | (1 << (MySqlParser.INT3 - 190)) | (1 << (MySqlParser.INT4 - 190)) | (1 << (MySqlParser.INT8 - 190)) | (1 << (MySqlParser.INTEGER - 190)) | (1 << (MySqlParser.BIGINT - 190)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6238
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,928,self._ctx)
                if la_ == 1:
                    self.state = 6237
                    self.lengthOneDimension()


                self.state = 6243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,929,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6240
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.ZEROFILL or _la==MySqlParser.SIGNED):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 6245
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,929,self._ctx)

                pass

            elif la_ == 6:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6246
                localctx.typeName = self.match(MySqlParser.REAL)
                self.state = 6248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,930,self._ctx)
                if la_ == 1:
                    self.state = 6247
                    self.lengthTwoDimension()


                self.state = 6253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,931,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6250
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.ZEROFILL or _la==MySqlParser.SIGNED):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 6255
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,931,self._ctx)

                pass

            elif la_ == 7:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 6256
                localctx.typeName = self.match(MySqlParser.DOUBLE)
                self.state = 6258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRECISION:
                    self.state = 6257
                    self.match(MySqlParser.PRECISION)


                self.state = 6261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
                if la_ == 1:
                    self.state = 6260
                    self.lengthTwoDimension()


                self.state = 6266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,934,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6263
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.ZEROFILL or _la==MySqlParser.SIGNED):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 6268
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,934,self._ctx)

                pass

            elif la_ == 8:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 6269
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & ((1 << (MySqlParser.FLOAT - 205)) | (1 << (MySqlParser.FLOAT4 - 205)) | (1 << (MySqlParser.FLOAT8 - 205)) | (1 << (MySqlParser.DECIMAL - 205)) | (1 << (MySqlParser.DEC - 205)) | (1 << (MySqlParser.NUMERIC - 205)))) != 0) or _la==MySqlParser.FIXED):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,935,self._ctx)
                if la_ == 1:
                    self.state = 6270
                    self.lengthTwoOptionalDimension()


                self.state = 6276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,936,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6273
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.ZEROFILL or _la==MySqlParser.SIGNED):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 6278
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,936,self._ctx)

                pass

            elif la_ == 9:
                localctx = MySqlParser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 6279
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TINYBLOB - 211)) | (1 << (MySqlParser.MEDIUMBLOB - 211)) | (1 << (MySqlParser.LONGBLOB - 211)) | (1 << (MySqlParser.SERIAL - 211)))) != 0) or _la==MySqlParser.BOOL or _la==MySqlParser.BOOLEAN):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 6280
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 212)) & ~0x3f) == 0 and ((1 << (_la - 212)) & ((1 << (MySqlParser.TIME - 212)) | (1 << (MySqlParser.TIMESTAMP - 212)) | (1 << (MySqlParser.DATETIME - 212)) | (1 << (MySqlParser.YEAR - 212)) | (1 << (MySqlParser.BINARY - 212)) | (1 << (MySqlParser.VARBINARY - 212)) | (1 << (MySqlParser.BLOB - 212)))) != 0) or _la==MySqlParser.BIT):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,937,self._ctx)
                if la_ == 1:
                    self.state = 6281
                    self.lengthOneDimension()


                pass

            elif la_ == 11:
                localctx = MySqlParser.CollectionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 6284
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SET or _la==MySqlParser.ENUM):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6285
                self.collectionOptions()
                self.state = 6287
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
                if la_ == 1:
                    self.state = 6286
                    self.match(MySqlParser.BINARY)


                self.state = 6292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,939,self._ctx)
                if la_ == 1:
                    self.state = 6289
                    self.charSet()
                    self.state = 6290
                    self.charsetName()


                pass

            elif la_ == 12:
                localctx = MySqlParser.SpatialDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 6294
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.JSON or ((((_la - 780)) & ~0x3f) == 0 and ((1 << (_la - 780)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 780)) | (1 << (MySqlParser.GEOMCOLLECTION - 780)) | (1 << (MySqlParser.GEOMETRY - 780)) | (1 << (MySqlParser.LINESTRING - 780)) | (1 << (MySqlParser.MULTILINESTRING - 780)) | (1 << (MySqlParser.MULTIPOINT - 780)) | (1 << (MySqlParser.MULTIPOLYGON - 780)) | (1 << (MySqlParser.POINT - 780)) | (1 << (MySqlParser.POLYGON - 780)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                localctx = MySqlParser.LongVarcharDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 6295
                localctx.typeName = self.match(MySqlParser.LONG)
                self.state = 6297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VARCHAR:
                    self.state = 6296
                    self.match(MySqlParser.VARCHAR)


                self.state = 6300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,941,self._ctx)
                if la_ == 1:
                    self.state = 6299
                    self.match(MySqlParser.BINARY)


                self.state = 6305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
                if la_ == 1:
                    self.state = 6302
                    self.charSet()
                    self.state = 6303
                    self.charsetName()


                self.state = 6309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,943,self._ctx)
                if la_ == 1:
                    self.state = 6307
                    self.match(MySqlParser.COLLATE)
                    self.state = 6308
                    self.collationName()


                pass

            elif la_ == 14:
                localctx = MySqlParser.LongVarbinaryDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 6311
                self.match(MySqlParser.LONG)
                self.state = 6312
                self.match(MySqlParser.VARBINARY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_collectionOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionOptions" ):
                listener.enterCollectionOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionOptions" ):
                listener.exitCollectionOptions(self)




    def collectionOptions(self):

        localctx = MySqlParser.CollectionOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_collectionOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6315
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6316
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 6321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 6317
                self.match(MySqlParser.COMMA)
                self.state = 6318
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 6323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6324
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConvertedDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typeName = None # Token

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)

        def SIGNED(self):
            return self.getToken(MySqlParser.SIGNED, 0)

        def UNSIGNED(self):
            return self.getToken(MySqlParser.UNSIGNED, 0)

        def ARRAY(self):
            return self.getToken(MySqlParser.ARRAY, 0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def INT(self):
            return self.getToken(MySqlParser.INT, 0)

        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)

        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)


        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def lengthTwoOptionalDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoOptionalDimensionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_convertedDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConvertedDataType" ):
                listener.enterConvertedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConvertedDataType" ):
                listener.exitConvertedDataType(self)




    def convertedDataType(self):

        localctx = MySqlParser.ConvertedDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_convertedDataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.BINARY, MySqlParser.NCHAR]:
                self.state = 6326
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BINARY or _la==MySqlParser.NCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 6327
                    self.lengthOneDimension()


                pass
            elif token in [MySqlParser.CHAR]:
                self.state = 6330
                localctx.typeName = self.match(MySqlParser.CHAR)
                self.state = 6332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 6331
                    self.lengthOneDimension()


                self.state = 6337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CHARACTER or _la==MySqlParser.CHAR or _la==MySqlParser.CHARSET:
                    self.state = 6334
                    self.charSet()
                    self.state = 6335
                    self.charsetName()


                pass
            elif token in [MySqlParser.INT, MySqlParser.INTEGER, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.DATETIME, MySqlParser.JSON]:
                self.state = 6339
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (MySqlParser.INT - 194)) | (1 << (MySqlParser.INTEGER - 194)) | (1 << (MySqlParser.DATE - 194)) | (1 << (MySqlParser.TIME - 194)) | (1 << (MySqlParser.DATETIME - 194)))) != 0) or _la==MySqlParser.JSON):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.DECIMAL]:
                self.state = 6340
                localctx.typeName = self.match(MySqlParser.DECIMAL)
                self.state = 6342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 6341
                    self.lengthTwoOptionalDimension()


                pass
            elif token in [MySqlParser.UNSIGNED, MySqlParser.SIGNED]:
                self.state = 6344
                _la = self._input.LA(1)
                if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.SIGNED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INTEGER:
                    self.state = 6345
                    self.match(MySqlParser.INTEGER)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 6351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ARRAY:
                self.state = 6350
                self.match(MySqlParser.ARRAY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthOneDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthOneDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthOneDimension" ):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthOneDimension" ):
                listener.exitLengthOneDimension(self)




    def lengthOneDimension(self):

        localctx = MySqlParser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6353
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6354
            self.decimalLiteral()
            self.state = 6355
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthTwoDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoDimension" ):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoDimension" ):
                listener.exitLengthTwoDimension(self)




    def lengthTwoDimension(self):

        localctx = MySqlParser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6357
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6358
            self.decimalLiteral()
            self.state = 6359
            self.match(MySqlParser.COMMA)
            self.state = 6360
            self.decimalLiteral()
            self.state = 6361
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoOptionalDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthTwoOptionalDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoOptionalDimension" ):
                listener.enterLengthTwoOptionalDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoOptionalDimension" ):
                listener.exitLengthTwoOptionalDimension(self)




    def lengthTwoOptionalDimension(self):

        localctx = MySqlParser.LengthTwoOptionalDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_lengthTwoOptionalDimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6363
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6364
            self.decimalLiteral()
            self.state = 6367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMA:
                self.state = 6365
                self.match(MySqlParser.COMMA)
                self.state = 6366
                self.decimalLiteral()


            self.state = 6369
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)




    def uidList(self):

        localctx = MySqlParser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_uidList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6371
            self.uid()
            self.state = 6376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,954,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6372
                    self.match(MySqlParser.COMMA)
                    self.state = 6373
                    self.uid() 
                self.state = 6378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,954,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)




    def tables(self):

        localctx = MySqlParser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_tables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6379
            self.tableName()
            self.state = 6384
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,955,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6380
                    self.match(MySqlParser.COMMA)
                    self.state = 6381
                    self.tableName() 
                self.state = 6386
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,955,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexColumnNameContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)




    def indexColumnNames(self):

        localctx = MySqlParser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6387
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6388
            self.indexColumnName()
            self.state = 6393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 6389
                self.match(MySqlParser.COMMA)
                self.state = 6390
                self.indexColumnName()
                self.state = 6395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6396
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = MySqlParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6398
            self.expression(0)
            self.state = 6403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 6399
                self.match(MySqlParser.COMMA)
                self.state = 6400
                self.expression(0)
                self.state = 6405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsWithDefaultsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionOrDefaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)




    def expressionsWithDefaults(self):

        localctx = MySqlParser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6406
            self.expressionOrDefault()
            self.state = 6411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 6407
                self.match(MySqlParser.COMMA)
                self.state = 6408
                self.expressionOrDefault()
                self.state = 6413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_constants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstants" ):
                listener.enterConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstants" ):
                listener.exitConstants(self)




    def constants(self):

        localctx = MySqlParser.ConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_constants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6414
            self.constant()
            self.state = 6419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 6415
                self.match(MySqlParser.COMMA)
                self.state = 6416
                self.constant()
                self.state = 6421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_simpleStrings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStrings" ):
                listener.enterSimpleStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStrings" ):
                listener.exitSimpleStrings(self)




    def simpleStrings(self):

        localctx = MySqlParser.SimpleStringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_simpleStrings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6422
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 6427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 6423
                self.match(MySqlParser.COMMA)
                self.state = 6424
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 6429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserVariablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOCAL_ID)
            else:
                return self.getToken(MySqlParser.LOCAL_ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_userVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariables" ):
                listener.enterUserVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariables" ):
                listener.exitUserVariables(self)




    def userVariables(self):

        localctx = MySqlParser.UserVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_userVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6430
            self.match(MySqlParser.LOCAL_ID)
            self.state = 6435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 6431
                self.match(MySqlParser.COMMA)
                self.state = 6432
                self.match(MySqlParser.LOCAL_ID)
                self.state = 6437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def CAST(self):
            return self.getToken(MySqlParser.CAST, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def convertedDataType(self):
            return self.getTypedRuleContext(MySqlParser.ConvertedDataTypeContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(MySqlParser.UnaryOperatorContext,0)


        def currentTimestamp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CurrentTimestampContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CurrentTimestampContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LASTVAL(self):
            return self.getToken(MySqlParser.LASTVAL, 0)

        def NEXTVAL(self):
            return self.getToken(MySqlParser.NEXTVAL, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def PREVIOUS(self):
            return self.getToken(MySqlParser.PREVIOUS, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = MySqlParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_defaultValue)
        self._la = 0 # Token type
        try:
            self.state = 6473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,964,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6438
                self.match(MySqlParser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6439
                self.match(MySqlParser.CAST)
                self.state = 6440
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6441
                self.expression(0)
                self.state = 6442
                self.match(MySqlParser.AS)
                self.state = 6443
                self.convertedDataType()
                self.state = 6444
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,962,self._ctx)
                if la_ == 1:
                    self.state = 6446
                    self.unaryOperator()


                self.state = 6449
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6450
                self.currentTimestamp()
                self.state = 6454
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,963,self._ctx)
                if la_ == 1:
                    self.state = 6451
                    self.match(MySqlParser.ON)
                    self.state = 6452
                    self.match(MySqlParser.UPDATE)
                    self.state = 6453
                    self.currentTimestamp()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6456
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6457
                self.expression(0)
                self.state = 6458
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6460
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LASTVAL or _la==MySqlParser.NEXTVAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6461
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6462
                self.fullId()
                self.state = 6463
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6465
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6466
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NEXT or _la==MySqlParser.PREVIOUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6467
                self.match(MySqlParser.VALUE)
                self.state = 6468
                self.match(MySqlParser.FOR)
                self.state = 6469
                self.fullId()
                self.state = 6470
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6472
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrentTimestampContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOW(self):
            return self.getToken(MySqlParser.NOW, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(MySqlParser.LOCALTIMESTAMP, 0)

        def CURDATE(self):
            return self.getToken(MySqlParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(MySqlParser.CURTIME, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_currentTimestamp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentTimestamp" ):
                listener.enterCurrentTimestamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentTimestamp" ):
                listener.exitCurrentTimestamp(self)




    def currentTimestamp(self):

        localctx = MySqlParser.CurrentTimestampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_currentTimestamp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CURRENT_TIMESTAMP, MySqlParser.LOCALTIME, MySqlParser.CURDATE, MySqlParser.CURTIME, MySqlParser.LOCALTIMESTAMP]:
                self.state = 6475
                _la = self._input.LA(1)
                if not(((((_la - 306)) & ~0x3f) == 0 and ((1 << (_la - 306)) & ((1 << (MySqlParser.CURRENT_TIMESTAMP - 306)) | (1 << (MySqlParser.LOCALTIME - 306)) | (1 << (MySqlParser.CURDATE - 306)) | (1 << (MySqlParser.CURTIME - 306)) | (1 << (MySqlParser.LOCALTIMESTAMP - 306)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,966,self._ctx)
                if la_ == 1:
                    self.state = 6476
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 6478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 1125)) & ~0x3f) == 0 and ((1 << (_la - 1125)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1125)) | (1 << (MySqlParser.ONE_DECIMAL - 1125)) | (1 << (MySqlParser.TWO_DECIMAL - 1125)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1125)) | (1 << (MySqlParser.REAL_LITERAL - 1125)))) != 0):
                        self.state = 6477
                        self.decimalLiteral()


                    self.state = 6480
                    self.match(MySqlParser.RR_BRACKET)


                pass
            elif token in [MySqlParser.NOW]:
                self.state = 6483
                self.match(MySqlParser.NOW)
                self.state = 6484
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 1125)) & ~0x3f) == 0 and ((1 << (_la - 1125)) & ((1 << (MySqlParser.ZERO_DECIMAL - 1125)) | (1 << (MySqlParser.ONE_DECIMAL - 1125)) | (1 << (MySqlParser.TWO_DECIMAL - 1125)) | (1 << (MySqlParser.DECIMAL_LITERAL - 1125)) | (1 << (MySqlParser.REAL_LITERAL - 1125)))) != 0):
                    self.state = 6485
                    self.decimalLiteral()


                self.state = 6488
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)




    def expressionOrDefault(self):

        localctx = MySqlParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_expressionOrDefault)
        try:
            self.state = 6493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,969,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6491
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6492
                self.match(MySqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = MySqlParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6495
            self.match(MySqlParser.IF)
            self.state = 6496
            self.match(MySqlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = MySqlParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6498
            self.match(MySqlParser.IF)
            self.state = 6499
            self.match(MySqlParser.NOT)
            self.state = 6500
            self.match(MySqlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaitNowaitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def NOWAIT(self):
            return self.getToken(MySqlParser.NOWAIT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_waitNowaitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitNowaitClause" ):
                listener.enterWaitNowaitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitNowaitClause" ):
                listener.exitWaitNowaitClause(self)




    def waitNowaitClause(self):

        localctx = MySqlParser.WaitNowaitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_waitNowaitClause)
        try:
            self.state = 6505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.WAIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6502
                self.match(MySqlParser.WAIT)
                self.state = 6503
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6504
                self.match(MySqlParser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def SKIP_(self):
            return self.getToken(MySqlParser.SKIP_, 0)

        def LOCKED(self):
            return self.getToken(MySqlParser.LOCKED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockOption" ):
                listener.enterLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockOption" ):
                listener.exitLockOption(self)




    def lockOption(self):

        localctx = MySqlParser.LockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_lockOption)
        try:
            self.state = 6510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.NOWAIT, MySqlParser.WAIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6507
                self.waitNowaitClause()
                pass
            elif token in [MySqlParser.SKIP_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6508
                self.match(MySqlParser.SKIP_)
                self.state = 6509
                self.match(MySqlParser.LOCKED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecificFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specificFunction(self):
            return self.getTypedRuleContext(MySqlParser.SpecificFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecificFunctionCall" ):
                listener.enterSpecificFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecificFunctionCall" ):
                listener.exitSpecificFunctionCall(self)


    class PasswordFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(MySqlParser.PasswordFunctionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionCall" ):
                listener.enterPasswordFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionCall" ):
                listener.exitPasswordFunctionCall(self)


    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)


    class NonAggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nonAggregateWindowedFunction(self):
            return self.getTypedRuleContext(MySqlParser.NonAggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonAggregateFunctionCall" ):
                listener.enterNonAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonAggregateFunctionCall" ):
                listener.exitNonAggregateFunctionCall(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(MySqlParser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionCall" ):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionCall" ):
                listener.exitAggregateFunctionCall(self)


    class ScalarFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalarFunctionName(self):
            return self.getTypedRuleContext(MySqlParser.ScalarFunctionNameContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionCall" ):
                listener.enterScalarFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionCall" ):
                listener.exitScalarFunctionCall(self)



    def functionCall(self):

        localctx = MySqlParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_functionCall)
        try:
            self.state = 6530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SpecificFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6512
                self.specificFunction()
                pass

            elif la_ == 2:
                localctx = MySqlParser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6513
                self.aggregateWindowedFunction()
                pass

            elif la_ == 3:
                localctx = MySqlParser.NonAggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6514
                self.nonAggregateWindowedFunction()
                pass

            elif la_ == 4:
                localctx = MySqlParser.ScalarFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6515
                self.scalarFunctionName()
                self.state = 6516
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,972,self._ctx)
                if la_ == 1:
                    self.state = 6517
                    self.functionArgs()


                self.state = 6520
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = MySqlParser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6522
                self.fullId()
                self.state = 6523
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,973,self._ctx)
                if la_ == 1:
                    self.state = 6524
                    self.functionArgs()


                self.state = 6527
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = MySqlParser.PasswordFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6529
                self.passwordFunctionClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecificFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_specificFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.positionString = None # StringLiteralContext
            self.positionExpression = None # ExpressionContext
            self.inString = None # StringLiteralContext
            self.inExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(MySqlParser.POSITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionFunctionCall" ):
                listener.enterPositionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionFunctionCall" ):
                listener.exitPositionFunctionCall(self)


    class TrimFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.positioinForm = None # Token
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromString = None # StringLiteralContext
            self.fromExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(MySqlParser.TRIM, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def BOTH(self):
            return self.getToken(MySqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(MySqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(MySqlParser.TRAILING, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunctionCall" ):
                listener.enterTrimFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunctionCall" ):
                listener.exitTrimFunctionCall(self)


    class JsonValueFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_VALUE(self):
            return self.getToken(MySqlParser.JSON_VALUE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def RETURNING(self):
            return self.getToken(MySqlParser.RETURNING, 0)
        def convertedDataType(self):
            return self.getTypedRuleContext(MySqlParser.ConvertedDataTypeContext,0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)
        def EMPTY(self):
            return self.getToken(MySqlParser.EMPTY, 0)
        def ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ERROR)
            else:
                return self.getToken(MySqlParser.ERROR, i)
        def NULL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NULL_LITERAL)
            else:
                return self.getToken(MySqlParser.NULL_LITERAL, i)
        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)
        def defaultValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DefaultValueContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DefaultValueContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValueFunctionCall" ):
                listener.enterJsonValueFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValueFunctionCall" ):
                listener.exitJsonValueFunctionCall(self)


    class CaseFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(MySqlParser.CASE, 0)
        def END(self):
            return self.getToken(MySqlParser.END, 0)
        def caseFuncAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFunctionCall" ):
                listener.enterCaseFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFunctionCall" ):
                listener.exitCaseFunctionCall(self)


    class ExtractFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(MySqlParser.EXTRACT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractFunctionCall" ):
                listener.enterExtractFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractFunctionCall" ):
                listener.exitExtractFunctionCall(self)


    class DataTypeFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.separator = None # Token
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def convertedDataType(self):
            return self.getTypedRuleContext(MySqlParser.ConvertedDataTypeContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def CAST(self):
            return self.getToken(MySqlParser.CAST, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeFunctionCall" ):
                listener.enterDataTypeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeFunctionCall" ):
                listener.exitDataTypeFunctionCall(self)


    class ValuesFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesFunctionCall" ):
                listener.enterValuesFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesFunctionCall" ):
                listener.exitValuesFunctionCall(self)


    class CaseExpressionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(MySqlParser.CASE, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)
        def caseFuncAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpressionFunctionCall" ):
                listener.enterCaseExpressionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpressionFunctionCall" ):
                listener.exitCaseExpressionFunctionCall(self)


    class SimpleFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(MySqlParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(MySqlParser.CURRENT_TIME, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(MySqlParser.CURRENT_USER, 0)
        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionCall" ):
                listener.enterSimpleFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionCall" ):
                listener.exitSimpleFunctionCall(self)


    class CharFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharFunctionCall" ):
                listener.enterCharFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharFunctionCall" ):
                listener.exitCharFunctionCall(self)


    class WeightFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.stringFormat = None # Token
            self.copyFrom(ctx)

        def WEIGHT_STRING(self):
            return self.getToken(MySqlParser.WEIGHT_STRING, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def levelsInWeightString(self):
            return self.getTypedRuleContext(MySqlParser.LevelsInWeightStringContext,0)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightFunctionCall" ):
                listener.enterWeightFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightFunctionCall" ):
                listener.exitWeightFunctionCall(self)


    class GetFormatFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.datetimeFormat = None # Token
            self.copyFrom(ctx)

        def GET_FORMAT(self):
            return self.getToken(MySqlParser.GET_FORMAT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)
        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)
        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetFormatFunctionCall" ):
                listener.enterGetFormatFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetFormatFunctionCall" ):
                listener.exitGetFormatFunctionCall(self)


    class SubstrFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromDecimal = None # DecimalLiteralContext
            self.fromExpression = None # ExpressionContext
            self.forDecimal = None # DecimalLiteralContext
            self.forExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def SUBSTR(self):
            return self.getToken(MySqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(MySqlParser.SUBSTRING, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstrFunctionCall" ):
                listener.enterSubstrFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstrFunctionCall" ):
                listener.exitSubstrFunctionCall(self)



    def specificFunction(self):

        localctx = MySqlParser.SpecificFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_specificFunction)
        self._la = 0 # Token type
        try:
            self.state = 6724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1000,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6532
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CURRENT_USER or ((((_la - 304)) & ~0x3f) == 0 and ((1 << (_la - 304)) & ((1 << (MySqlParser.CURRENT_DATE - 304)) | (1 << (MySqlParser.CURRENT_TIME - 304)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 304)) | (1 << (MySqlParser.LOCALTIME - 304)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,975,self._ctx)
                if la_ == 1:
                    self.state = 6533
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 6534
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6537
                self.match(MySqlParser.CONVERT)
                self.state = 6538
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6539
                self.expression(0)
                self.state = 6540
                localctx.separator = self.match(MySqlParser.COMMA)
                self.state = 6541
                self.convertedDataType()
                self.state = 6542
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6544
                self.match(MySqlParser.CONVERT)
                self.state = 6545
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6546
                self.expression(0)
                self.state = 6547
                self.match(MySqlParser.USING)
                self.state = 6548
                self.charsetName()
                self.state = 6549
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6551
                self.match(MySqlParser.CAST)
                self.state = 6552
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6553
                self.expression(0)
                self.state = 6554
                self.match(MySqlParser.AS)
                self.state = 6555
                self.convertedDataType()
                self.state = 6556
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = MySqlParser.ValuesFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6558
                self.match(MySqlParser.VALUES)
                self.state = 6559
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6560
                self.fullColumnName()
                self.state = 6561
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = MySqlParser.CaseExpressionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6563
                self.match(MySqlParser.CASE)
                self.state = 6564
                self.expression(0)
                self.state = 6566 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6565
                    self.caseFuncAlternative()
                    self.state = 6568 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.WHEN):
                        break

                self.state = 6572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ELSE:
                    self.state = 6570
                    self.match(MySqlParser.ELSE)
                    self.state = 6571
                    localctx.elseArg = self.functionArg()


                self.state = 6574
                self.match(MySqlParser.END)
                pass

            elif la_ == 7:
                localctx = MySqlParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 6576
                self.match(MySqlParser.CASE)
                self.state = 6578 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6577
                    self.caseFuncAlternative()
                    self.state = 6580 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.WHEN):
                        break

                self.state = 6584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ELSE:
                    self.state = 6582
                    self.match(MySqlParser.ELSE)
                    self.state = 6583
                    localctx.elseArg = self.functionArg()


                self.state = 6586
                self.match(MySqlParser.END)
                pass

            elif la_ == 8:
                localctx = MySqlParser.CharFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 6588
                self.match(MySqlParser.CHAR)
                self.state = 6589
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6590
                self.functionArgs()
                self.state = 6593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 6591
                    self.match(MySqlParser.USING)
                    self.state = 6592
                    self.charsetName()


                self.state = 6595
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = MySqlParser.PositionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 6597
                self.match(MySqlParser.POSITION)
                self.state = 6598
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,981,self._ctx)
                if la_ == 1:
                    self.state = 6599
                    localctx.positionString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6600
                    localctx.positionExpression = self.expression(0)
                    pass


                self.state = 6603
                self.match(MySqlParser.IN)
                self.state = 6606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,982,self._ctx)
                if la_ == 1:
                    self.state = 6604
                    localctx.inString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6605
                    localctx.inExpression = self.expression(0)
                    pass


                self.state = 6608
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.SubstrFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 6610
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SUBSTR or _la==MySqlParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6611
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,983,self._ctx)
                if la_ == 1:
                    self.state = 6612
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6613
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6616
                self.match(MySqlParser.FROM)
                self.state = 6619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,984,self._ctx)
                if la_ == 1:
                    self.state = 6617
                    localctx.fromDecimal = self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6618
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 6621
                    self.match(MySqlParser.FOR)
                    self.state = 6624
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,985,self._ctx)
                    if la_ == 1:
                        self.state = 6622
                        localctx.forDecimal = self.decimalLiteral()
                        pass

                    elif la_ == 2:
                        self.state = 6623
                        localctx.forExpression = self.expression(0)
                        pass




                self.state = 6628
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = MySqlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 6630
                self.match(MySqlParser.TRIM)
                self.state = 6631
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6632
                localctx.positioinForm = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BOTH or _la==MySqlParser.LEADING or _la==MySqlParser.TRAILING):
                    localctx.positioinForm = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,987,self._ctx)
                if la_ == 1:
                    self.state = 6633
                    localctx.sourceString = self.stringLiteral()

                elif la_ == 2:
                    self.state = 6634
                    localctx.sourceExpression = self.expression(0)


                self.state = 6637
                self.match(MySqlParser.FROM)
                self.state = 6640
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,988,self._ctx)
                if la_ == 1:
                    self.state = 6638
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6639
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6642
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 12:
                localctx = MySqlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 6644
                self.match(MySqlParser.TRIM)
                self.state = 6645
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,989,self._ctx)
                if la_ == 1:
                    self.state = 6646
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6647
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6650
                self.match(MySqlParser.FROM)
                self.state = 6653
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,990,self._ctx)
                if la_ == 1:
                    self.state = 6651
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6652
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6655
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = MySqlParser.WeightFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 6657
                self.match(MySqlParser.WEIGHT_STRING)
                self.state = 6658
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,991,self._ctx)
                if la_ == 1:
                    self.state = 6659
                    self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6660
                    self.expression(0)
                    pass


                self.state = 6669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 6663
                    self.match(MySqlParser.AS)
                    self.state = 6664
                    localctx.stringFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CHAR or _la==MySqlParser.BINARY):
                        localctx.stringFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6665
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 6666
                    self.decimalLiteral()
                    self.state = 6667
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 6672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LEVEL:
                    self.state = 6671
                    self.levelsInWeightString()


                self.state = 6674
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = MySqlParser.ExtractFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 6676
                self.match(MySqlParser.EXTRACT)
                self.state = 6677
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6678
                self.intervalType()
                self.state = 6679
                self.match(MySqlParser.FROM)
                self.state = 6682
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,994,self._ctx)
                if la_ == 1:
                    self.state = 6680
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6681
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6684
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = MySqlParser.GetFormatFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 6686
                self.match(MySqlParser.GET_FORMAT)
                self.state = 6687
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6688
                localctx.datetimeFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.DATETIME - 211)))) != 0)):
                    localctx.datetimeFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6689
                self.match(MySqlParser.COMMA)
                self.state = 6690
                self.stringLiteral()
                self.state = 6691
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = MySqlParser.JsonValueFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 6693
                self.match(MySqlParser.JSON_VALUE)
                self.state = 6694
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6695
                self.expression(0)
                self.state = 6696
                self.match(MySqlParser.COMMA)
                self.state = 6697
                self.expression(0)
                self.state = 6700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.RETURNING:
                    self.state = 6698
                    self.match(MySqlParser.RETURNING)
                    self.state = 6699
                    self.convertedDataType()


                self.state = 6710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,997,self._ctx)
                if la_ == 1:
                    self.state = 6706
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NULL_LITERAL]:
                        self.state = 6702
                        self.match(MySqlParser.NULL_LITERAL)
                        pass
                    elif token in [MySqlParser.ERROR]:
                        self.state = 6703
                        self.match(MySqlParser.ERROR)
                        pass
                    elif token in [MySqlParser.DEFAULT]:
                        self.state = 6704
                        self.match(MySqlParser.DEFAULT)
                        self.state = 6705
                        self.defaultValue()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6708
                    self.match(MySqlParser.ON)
                    self.state = 6709
                    self.match(MySqlParser.EMPTY)


                self.state = 6720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT or _la==MySqlParser.NULL_LITERAL or _la==MySqlParser.ERROR:
                    self.state = 6716
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NULL_LITERAL]:
                        self.state = 6712
                        self.match(MySqlParser.NULL_LITERAL)
                        pass
                    elif token in [MySqlParser.ERROR]:
                        self.state = 6713
                        self.match(MySqlParser.ERROR)
                        pass
                    elif token in [MySqlParser.DEFAULT]:
                        self.state = 6714
                        self.match(MySqlParser.DEFAULT)
                        self.state = 6715
                        self.defaultValue()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6718
                    self.match(MySqlParser.ON)
                    self.state = 6719
                    self.match(MySqlParser.ERROR)


                self.state = 6722
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseFuncAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # FunctionArgContext
            self.consequent = None # FunctionArgContext

        def WHEN(self):
            return self.getToken(MySqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def functionArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionArgContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionArgContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseFuncAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFuncAlternative" ):
                listener.enterCaseFuncAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFuncAlternative" ):
                listener.exitCaseFuncAlternative(self)




    def caseFuncAlternative(self):

        localctx = MySqlParser.CaseFuncAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_caseFuncAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6726
            self.match(MySqlParser.WHEN)
            self.state = 6727
            localctx.condition = self.functionArg()
            self.state = 6728
            self.match(MySqlParser.THEN)
            self.state = 6729
            localctx.consequent = self.functionArg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelsInWeightStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_levelsInWeightString

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LevelWeightRangeContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.firstLevel = None # DecimalLiteralContext
            self.lastLevel = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)
        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightRange" ):
                listener.enterLevelWeightRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightRange" ):
                listener.exitLevelWeightRange(self)


    class LevelWeightListContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)
        def levelInWeightListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LevelInWeightListElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LevelInWeightListElementContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightList" ):
                listener.enterLevelWeightList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightList" ):
                listener.exitLevelWeightList(self)



    def levelsInWeightString(self):

        localctx = MySqlParser.LevelsInWeightStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_levelsInWeightString)
        self._la = 0 # Token type
        try:
            self.state = 6745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1002,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.LevelWeightListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6731
                self.match(MySqlParser.LEVEL)
                self.state = 6732
                self.levelInWeightListElement()
                self.state = 6737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 6733
                    self.match(MySqlParser.COMMA)
                    self.state = 6734
                    self.levelInWeightListElement()
                    self.state = 6739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.LevelWeightRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6740
                self.match(MySqlParser.LEVEL)
                self.state = 6741
                localctx.firstLevel = self.decimalLiteral()
                self.state = 6742
                self.match(MySqlParser.MINUS)
                self.state = 6743
                localctx.lastLevel = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelInWeightListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.orderType = None # Token

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def REVERSE(self):
            return self.getToken(MySqlParser.REVERSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_levelInWeightListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelInWeightListElement" ):
                listener.enterLevelInWeightListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelInWeightListElement" ):
                listener.exitLevelInWeightListElement(self)




    def levelInWeightListElement(self):

        localctx = MySqlParser.LevelInWeightListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_levelInWeightListElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6747
            self.decimalLiteral()
            self.state = 6749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ASC or _la==MySqlParser.DESC or _la==MySqlParser.REVERSE:
                self.state = 6748
                localctx.orderType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC or _la==MySqlParser.REVERSE):
                    localctx.orderType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateWindowedFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregator = None # Token
            self.starArg = None # Token
            self.separator = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(MySqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(MySqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(MySqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(MySqlParser.SUM, 0)

        def overClause(self):
            return self.getTypedRuleContext(MySqlParser.OverClauseContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def BIT_AND(self):
            return self.getToken(MySqlParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(MySqlParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(MySqlParser.BIT_XOR, 0)

        def STD(self):
            return self.getToken(MySqlParser.STD, 0)

        def STDDEV(self):
            return self.getToken(MySqlParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(MySqlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(MySqlParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(MySqlParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(MySqlParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(MySqlParser.VARIANCE, 0)

        def GROUP_CONCAT(self):
            return self.getToken(MySqlParser.GROUP_CONCAT, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.OrderByExpressionContext,i)


        def SEPARATOR(self):
            return self.getToken(MySqlParser.SEPARATOR, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_aggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateWindowedFunction" ):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateWindowedFunction" ):
                listener.exitAggregateWindowedFunction(self)




    def aggregateWindowedFunction(self):

        localctx = MySqlParser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 6810
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.AVG, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.SUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6751
                _la = self._input.LA(1)
                if not(((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & ((1 << (MySqlParser.AVG - 277)) | (1 << (MySqlParser.MAX - 277)) | (1 << (MySqlParser.MIN - 277)) | (1 << (MySqlParser.SUM - 277)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6752
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1004,self._ctx)
                if la_ == 1:
                    self.state = 6753
                    localctx.aggregator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                        localctx.aggregator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6756
                self.functionArg()
                self.state = 6757
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1005,self._ctx)
                if la_ == 1:
                    self.state = 6758
                    self.overClause()


                pass
            elif token in [MySqlParser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6761
                self.match(MySqlParser.COUNT)
                self.state = 6762
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1007,self._ctx)
                if la_ == 1:
                    self.state = 6763
                    localctx.starArg = self.match(MySqlParser.STAR)
                    pass

                elif la_ == 2:
                    self.state = 6765
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1006,self._ctx)
                    if la_ == 1:
                        self.state = 6764
                        localctx.aggregator = self.match(MySqlParser.ALL)


                    self.state = 6767
                    self.functionArg()
                    pass

                elif la_ == 3:
                    self.state = 6768
                    localctx.aggregator = self.match(MySqlParser.DISTINCT)
                    self.state = 6769
                    self.functionArgs()
                    pass


                self.state = 6772
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1008,self._ctx)
                if la_ == 1:
                    self.state = 6773
                    self.overClause()


                pass
            elif token in [MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6776
                _la = self._input.LA(1)
                if not(((((_la - 278)) & ~0x3f) == 0 and ((1 << (_la - 278)) & ((1 << (MySqlParser.BIT_AND - 278)) | (1 << (MySqlParser.BIT_OR - 278)) | (1 << (MySqlParser.BIT_XOR - 278)) | (1 << (MySqlParser.STD - 278)) | (1 << (MySqlParser.STDDEV - 278)) | (1 << (MySqlParser.STDDEV_POP - 278)) | (1 << (MySqlParser.STDDEV_SAMP - 278)) | (1 << (MySqlParser.VAR_POP - 278)) | (1 << (MySqlParser.VAR_SAMP - 278)) | (1 << (MySqlParser.VARIANCE - 278)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6777
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6779
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1009,self._ctx)
                if la_ == 1:
                    self.state = 6778
                    localctx.aggregator = self.match(MySqlParser.ALL)


                self.state = 6781
                self.functionArg()
                self.state = 6782
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1010,self._ctx)
                if la_ == 1:
                    self.state = 6783
                    self.overClause()


                pass
            elif token in [MySqlParser.GROUP_CONCAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6786
                self.match(MySqlParser.GROUP_CONCAT)
                self.state = 6787
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1011,self._ctx)
                if la_ == 1:
                    self.state = 6788
                    localctx.aggregator = self.match(MySqlParser.DISTINCT)


                self.state = 6791
                self.functionArgs()
                self.state = 6802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ORDER:
                    self.state = 6792
                    self.match(MySqlParser.ORDER)
                    self.state = 6793
                    self.match(MySqlParser.BY)
                    self.state = 6794
                    self.orderByExpression()
                    self.state = 6799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 6795
                        self.match(MySqlParser.COMMA)
                        self.state = 6796
                        self.orderByExpression()
                        self.state = 6801
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.SEPARATOR:
                    self.state = 6804
                    self.match(MySqlParser.SEPARATOR)
                    self.state = 6805
                    localctx.separator = self.match(MySqlParser.STRING_LITERAL)


                self.state = 6808
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonAggregateWindowedFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def overClause(self):
            return self.getTypedRuleContext(MySqlParser.OverClauseContext,0)


        def LAG(self):
            return self.getToken(MySqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(MySqlParser.LEAD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def FIRST_VALUE(self):
            return self.getToken(MySqlParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(MySqlParser.LAST_VALUE, 0)

        def CUME_DIST(self):
            return self.getToken(MySqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(MySqlParser.DENSE_RANK, 0)

        def PERCENT_RANK(self):
            return self.getToken(MySqlParser.PERCENT_RANK, 0)

        def RANK(self):
            return self.getToken(MySqlParser.RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(MySqlParser.ROW_NUMBER, 0)

        def NTH_VALUE(self):
            return self.getToken(MySqlParser.NTH_VALUE, 0)

        def NTILE(self):
            return self.getToken(MySqlParser.NTILE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_nonAggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonAggregateWindowedFunction" ):
                listener.enterNonAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonAggregateWindowedFunction" ):
                listener.exitNonAggregateWindowedFunction(self)




    def nonAggregateWindowedFunction(self):

        localctx = MySqlParser.NonAggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_nonAggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 6850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LAG, MySqlParser.LEAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6812
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LAG or _la==MySqlParser.LEAD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6813
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6814
                self.expression(0)
                self.state = 6817
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1016,self._ctx)
                if la_ == 1:
                    self.state = 6815
                    self.match(MySqlParser.COMMA)
                    self.state = 6816
                    self.decimalLiteral()


                self.state = 6821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COMMA:
                    self.state = 6819
                    self.match(MySqlParser.COMMA)
                    self.state = 6820
                    self.decimalLiteral()


                self.state = 6823
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6824
                self.overClause()
                pass
            elif token in [MySqlParser.FIRST_VALUE, MySqlParser.LAST_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6826
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FIRST_VALUE or _la==MySqlParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6827
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6828
                self.expression(0)
                self.state = 6829
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6830
                self.overClause()
                pass
            elif token in [MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6832
                _la = self._input.LA(1)
                if not(((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & ((1 << (MySqlParser.CUME_DIST - 282)) | (1 << (MySqlParser.DENSE_RANK - 282)) | (1 << (MySqlParser.PERCENT_RANK - 282)) | (1 << (MySqlParser.RANK - 282)) | (1 << (MySqlParser.ROW_NUMBER - 282)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6833
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6834
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6835
                self.overClause()
                pass
            elif token in [MySqlParser.NTH_VALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6836
                self.match(MySqlParser.NTH_VALUE)
                self.state = 6837
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6838
                self.expression(0)
                self.state = 6839
                self.match(MySqlParser.COMMA)
                self.state = 6840
                self.decimalLiteral()
                self.state = 6841
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6842
                self.overClause()
                pass
            elif token in [MySqlParser.NTILE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6844
                self.match(MySqlParser.NTILE)
                self.state = 6845
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6846
                self.decimalLiteral()
                self.state = 6847
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6848
                self.overClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(MySqlParser.OVER, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def windowName(self):
            return self.getTypedRuleContext(MySqlParser.WindowNameContext,0)


        def windowSpec(self):
            return self.getTypedRuleContext(MySqlParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_overClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverClause" ):
                listener.enterOverClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverClause" ):
                listener.exitOverClause(self)




    def overClause(self):

        localctx = MySqlParser.OverClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_overClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6852
            self.match(MySqlParser.OVER)
            self.state = 6859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LR_BRACKET]:
                self.state = 6853
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1019,self._ctx)
                if la_ == 1:
                    self.state = 6854
                    self.windowSpec()


                self.state = 6857
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.BUCKETS, MySqlParser.CURRENT, MySqlParser.DATABASE, MySqlParser.DIAGNOSTICS, MySqlParser.EXCEPT, MySqlParser.GROUP, MySqlParser.IGNORED, MySqlParser.LEFT, MySqlParser.LOCKED, MySqlParser.MAXVALUE, MySqlParser.MINVALUE, MySqlParser.NUMBER, MySqlParser.OPTIONAL, MySqlParser.ORDER, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.SKIP_, MySqlParser.STACKED, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.SERIAL, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.GROUP_CONCAT, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.PAGE_CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLASS_ORIGIN, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.CLUSTERING, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COLUMN_NAME, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONSTRAINT_CATALOG, MySqlParser.CONSTRAINT_SCHEMA, MySqlParser.CONSTRAINT_NAME, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.CYCLE, MySqlParser.CURSOR_NAME, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INCREMENT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INSTANT, MySqlParser.INVISIBLE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MEMBER, MySqlParser.MERGE, MySqlParser.MESSAGE_TEXT, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.MYSQL_ERRNO, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NOCACHE, MySqlParser.NOCOPY, MySqlParser.NOCYCLE, MySqlParser.NOMAXVALUE, MySqlParser.NOMINVALUE, MySqlParser.NOWAIT, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.ODBC, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OF, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.RECURSIVE, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESTART, MySqlParser.RESUME, MySqlParser.RETURNED_SQLSTATE, MySqlParser.RETURNS, MySqlParser.ROLE, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.RTREE, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SEQUENCE, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBCLASS_ORIGIN, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLE_NAME, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRANSACTIONAL, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.VISIBLE, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.EUR, MySqlParser.USA, MySqlParser.JIS, MySqlParser.ISO, MySqlParser.INTERNAL, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.AUDIT_ADMIN, MySqlParser.BACKUP_ADMIN, MySqlParser.BINLOG_ADMIN, MySqlParser.BINLOG_ENCRYPTION_ADMIN, MySqlParser.CLONE_ADMIN, MySqlParser.CONNECTION_ADMIN, MySqlParser.ENCRYPTION_KEY_ADMIN, MySqlParser.FIREWALL_ADMIN, MySqlParser.FIREWALL_USER, MySqlParser.ADMIN, MySqlParser.GROUP_REPLICATION_ADMIN, MySqlParser.INNODB_REDO_LOG_ARCHIVE, MySqlParser.NDB_STORED_USER, MySqlParser.PASSWORDLESS_USER_ADMIN, MySqlParser.PERSIST_RO_VARIABLES_ADMIN, MySqlParser.REPLICATION_APPLIER, MySqlParser.REPLICATION_SLAVE_ADMIN, MySqlParser.RESOURCE_GROUP_ADMIN, MySqlParser.RESOURCE_GROUP_USER, MySqlParser.ROLE_ADMIN, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.SET_USER_ID, MySqlParser.SHOW_ROUTINE, MySqlParser.SYSTEM_VARIABLES_ADMIN, MySqlParser.TABLE_ENCRYPTION_ADMIN, MySqlParser.VERSION_TOKEN_ADMIN, MySqlParser.XA_RECOVER_ADMIN, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB18030, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFORMANCE_SCHEMA, MySqlParser.TOKUDB, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CATALOG_NAME, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENGINE_ATTRIBUTE, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SCHEMA_NAME, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.VIA, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.PREVIOUS, MySqlParser.PERSISTENT, MySqlParser.BINLOG_MONITOR, MySqlParser.BINLOG_REPLAY, MySqlParser.FEDERATED_ADMIN, MySqlParser.READ_ONLY_ADMIN, MySqlParser.REPLICA, MySqlParser.REPLICATION_MASTER_ADMIN, MySqlParser.MOD, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.ENCRYPTED, MySqlParser.ENCRYPTION_KEY_ID]:
                self.state = 6858
                self.windowName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowName(self):
            return self.getTypedRuleContext(MySqlParser.WindowNameContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(MySqlParser.PartitionClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def frameClause(self):
            return self.getTypedRuleContext(MySqlParser.FrameClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_windowSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpec" ):
                listener.enterWindowSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpec" ):
                listener.exitWindowSpec(self)




    def windowSpec(self):

        localctx = MySqlParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1021,self._ctx)
            if la_ == 1:
                self.state = 6861
                self.windowName()


            self.state = 6865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 6864
                self.partitionClause()


            self.state = 6868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ORDER:
                self.state = 6867
                self.orderByClause()


            self.state = 6871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.RANGE or _la==MySqlParser.ROWS:
                self.state = 6870
                self.frameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_windowName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowName" ):
                listener.enterWindowName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowName" ):
                listener.exitWindowName(self)




    def windowName(self):

        localctx = MySqlParser.WindowNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_windowName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6873
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameUnits(self):
            return self.getTypedRuleContext(MySqlParser.FrameUnitsContext,0)


        def frameExtent(self):
            return self.getTypedRuleContext(MySqlParser.FrameExtentContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_frameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameClause" ):
                listener.enterFrameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameClause" ):
                listener.exitFrameClause(self)




    def frameClause(self):

        localctx = MySqlParser.FrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_frameClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6875
            self.frameUnits()
            self.state = 6876
            self.frameExtent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameUnitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(MySqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(MySqlParser.RANGE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_frameUnits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameUnits" ):
                listener.enterFrameUnits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameUnits" ):
                listener.exitFrameUnits(self)




    def frameUnits(self):

        localctx = MySqlParser.FrameUnitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_frameUnits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6878
            _la = self._input.LA(1)
            if not(_la==MySqlParser.RANGE or _la==MySqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameExtentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameRange(self):
            return self.getTypedRuleContext(MySqlParser.FrameRangeContext,0)


        def frameBetween(self):
            return self.getTypedRuleContext(MySqlParser.FrameBetweenContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_frameExtent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameExtent" ):
                listener.enterFrameExtent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameExtent" ):
                listener.exitFrameExtent(self)




    def frameExtent(self):

        localctx = MySqlParser.FrameExtentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_frameExtent)
        try:
            self.state = 6882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1025,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6880
                self.frameRange()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6881
                self.frameBetween()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(MySqlParser.BETWEEN, 0)

        def frameRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FrameRangeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FrameRangeContext,i)


        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_frameBetween

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBetween" ):
                listener.enterFrameBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBetween" ):
                listener.exitFrameBetween(self)




    def frameBetween(self):

        localctx = MySqlParser.FrameBetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_frameBetween)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6884
            self.match(MySqlParser.BETWEEN)
            self.state = 6885
            self.frameRange()
            self.state = 6886
            self.match(MySqlParser.AND)
            self.state = 6887
            self.frameRange()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(MySqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(MySqlParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(MySqlParser.FOLLOWING, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_frameRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameRange" ):
                listener.enterFrameRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameRange" ):
                listener.exitFrameRange(self)




    def frameRange(self):

        localctx = MySqlParser.FrameRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_frameRange)
        self._la = 0 # Token type
        try:
            self.state = 6896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1026,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6889
                self.match(MySqlParser.CURRENT)
                self.state = 6890
                self.match(MySqlParser.ROW)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6891
                self.match(MySqlParser.UNBOUNDED)
                self.state = 6892
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FOLLOWING or _la==MySqlParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6893
                self.expression(0)
                self.state = 6894
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FOLLOWING or _la==MySqlParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionClause" ):
                listener.enterPartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionClause" ):
                listener.exitPartitionClause(self)




    def partitionClause(self):

        localctx = MySqlParser.PartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_partitionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6898
            self.match(MySqlParser.PARTITION)
            self.state = 6899
            self.match(MySqlParser.BY)
            self.state = 6900
            self.expression(0)
            self.state = 6905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 6901
                self.match(MySqlParser.COMMA)
                self.state = 6902
                self.expression(0)
                self.state = 6907
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionNameBase(self):
            return self.getTypedRuleContext(MySqlParser.FunctionNameBaseContext,0)


        def ASCII(self):
            return self.getToken(MySqlParser.ASCII, 0)

        def CURDATE(self):
            return self.getToken(MySqlParser.CURDATE, 0)

        def CURRENT_DATE(self):
            return self.getToken(MySqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(MySqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def CURTIME(self):
            return self.getToken(MySqlParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(MySqlParser.DATE_ADD, 0)

        def DATE_SUB(self):
            return self.getToken(MySqlParser.DATE_SUB, 0)

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(MySqlParser.LOCALTIMESTAMP, 0)

        def MID(self):
            return self.getToken(MySqlParser.MID, 0)

        def NOW(self):
            return self.getToken(MySqlParser.NOW, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def SUBSTR(self):
            return self.getToken(MySqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(MySqlParser.SUBSTRING, 0)

        def SYSDATE(self):
            return self.getToken(MySqlParser.SYSDATE, 0)

        def TRIM(self):
            return self.getToken(MySqlParser.TRIM, 0)

        def UTC_DATE(self):
            return self.getToken(MySqlParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(MySqlParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(MySqlParser.UTC_TIMESTAMP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_scalarFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionName" ):
                listener.enterScalarFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionName" ):
                listener.exitScalarFunctionName(self)




    def scalarFunctionName(self):

        localctx = MySqlParser.ScalarFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_scalarFunctionName)
        try:
            self.state = 6931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.SCHEMA, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.YEAR, MySqlParser.JSON_ARRAY, MySqlParser.JSON_OBJECT, MySqlParser.JSON_QUOTE, MySqlParser.JSON_CONTAINS, MySqlParser.JSON_CONTAINS_PATH, MySqlParser.JSON_EXTRACT, MySqlParser.JSON_KEYS, MySqlParser.JSON_OVERLAPS, MySqlParser.JSON_SEARCH, MySqlParser.JSON_VALUE, MySqlParser.JSON_ARRAY_APPEND, MySqlParser.JSON_ARRAY_INSERT, MySqlParser.JSON_INSERT, MySqlParser.JSON_MERGE, MySqlParser.JSON_MERGE_PATCH, MySqlParser.JSON_MERGE_PRESERVE, MySqlParser.JSON_REMOVE, MySqlParser.JSON_REPLACE, MySqlParser.JSON_SET, MySqlParser.JSON_UNQUOTE, MySqlParser.JSON_DEPTH, MySqlParser.JSON_LENGTH, MySqlParser.JSON_TYPE, MySqlParser.JSON_VALID, MySqlParser.JSON_TABLE, MySqlParser.JSON_SCHEMA_VALID, MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, MySqlParser.JSON_PRETTY, MySqlParser.JSON_STORAGE_FREE, MySqlParser.JSON_STORAGE_SIZE, MySqlParser.JSON_ARRAYAGG, MySqlParser.JSON_OBJECTAGG, MySqlParser.COUNT, MySqlParser.CUME_DIST, MySqlParser.DENSE_RANK, MySqlParser.FIRST_VALUE, MySqlParser.LAG, MySqlParser.LAST_VALUE, MySqlParser.LEAD, MySqlParser.NTILE, MySqlParser.NTH_VALUE, MySqlParser.PERCENT_RANK, MySqlParser.RANK, MySqlParser.ROW_NUMBER, MySqlParser.POSITION, MySqlParser.INVISIBLE, MySqlParser.VISIBLE, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.SESSION_VARIABLES_ADMIN, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.LASTVAL, MySqlParser.NEXTVAL, MySqlParser.SETVAL, MySqlParser.MOD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6908
                self.functionNameBase()
                pass
            elif token in [MySqlParser.ASCII]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6909
                self.match(MySqlParser.ASCII)
                pass
            elif token in [MySqlParser.CURDATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6910
                self.match(MySqlParser.CURDATE)
                pass
            elif token in [MySqlParser.CURRENT_DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6911
                self.match(MySqlParser.CURRENT_DATE)
                pass
            elif token in [MySqlParser.CURRENT_TIME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6912
                self.match(MySqlParser.CURRENT_TIME)
                pass
            elif token in [MySqlParser.CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6913
                self.match(MySqlParser.CURRENT_TIMESTAMP)
                pass
            elif token in [MySqlParser.CURTIME]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6914
                self.match(MySqlParser.CURTIME)
                pass
            elif token in [MySqlParser.DATE_ADD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6915
                self.match(MySqlParser.DATE_ADD)
                pass
            elif token in [MySqlParser.DATE_SUB]:
                self.enterOuterAlt(localctx, 9)
                self.state = 6916
                self.match(MySqlParser.DATE_SUB)
                pass
            elif token in [MySqlParser.IF]:
                self.enterOuterAlt(localctx, 10)
                self.state = 6917
                self.match(MySqlParser.IF)
                pass
            elif token in [MySqlParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 6918
                self.match(MySqlParser.INSERT)
                pass
            elif token in [MySqlParser.LOCALTIME]:
                self.enterOuterAlt(localctx, 12)
                self.state = 6919
                self.match(MySqlParser.LOCALTIME)
                pass
            elif token in [MySqlParser.LOCALTIMESTAMP]:
                self.enterOuterAlt(localctx, 13)
                self.state = 6920
                self.match(MySqlParser.LOCALTIMESTAMP)
                pass
            elif token in [MySqlParser.MID]:
                self.enterOuterAlt(localctx, 14)
                self.state = 6921
                self.match(MySqlParser.MID)
                pass
            elif token in [MySqlParser.NOW]:
                self.enterOuterAlt(localctx, 15)
                self.state = 6922
                self.match(MySqlParser.NOW)
                pass
            elif token in [MySqlParser.REPLACE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 6923
                self.match(MySqlParser.REPLACE)
                pass
            elif token in [MySqlParser.SUBSTR]:
                self.enterOuterAlt(localctx, 17)
                self.state = 6924
                self.match(MySqlParser.SUBSTR)
                pass
            elif token in [MySqlParser.SUBSTRING]:
                self.enterOuterAlt(localctx, 18)
                self.state = 6925
                self.match(MySqlParser.SUBSTRING)
                pass
            elif token in [MySqlParser.SYSDATE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 6926
                self.match(MySqlParser.SYSDATE)
                pass
            elif token in [MySqlParser.TRIM]:
                self.enterOuterAlt(localctx, 20)
                self.state = 6927
                self.match(MySqlParser.TRIM)
                pass
            elif token in [MySqlParser.UTC_DATE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 6928
                self.match(MySqlParser.UTC_DATE)
                pass
            elif token in [MySqlParser.UTC_TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 6929
                self.match(MySqlParser.UTC_TIME)
                pass
            elif token in [MySqlParser.UTC_TIMESTAMP]:
                self.enterOuterAlt(localctx, 23)
                self.state = 6930
                self.match(MySqlParser.UTC_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordFunctionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functionName = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def OLD_PASSWORD(self):
            return self.getToken(MySqlParser.OLD_PASSWORD, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_passwordFunctionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionClause" ):
                listener.enterPasswordFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionClause" ):
                listener.exitPasswordFunctionClause(self)




    def passwordFunctionClause(self):

        localctx = MySqlParser.PasswordFunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_passwordFunctionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6933
            localctx.functionName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.OLD_PASSWORD or _la==MySqlParser.PASSWORD):
                localctx.functionName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6934
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6935
            self.functionArg()
            self.state = 6936
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)




    def functionArgs(self):

        localctx = MySqlParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1029,self._ctx)
            if la_ == 1:
                self.state = 6938
                self.constant()
                pass

            elif la_ == 2:
                self.state = 6939
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 6940
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 6941
                self.expression(0)
                pass


            self.state = 6953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 6944
                self.match(MySqlParser.COMMA)
                self.state = 6949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1030,self._ctx)
                if la_ == 1:
                    self.state = 6945
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 6946
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 6947
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 6948
                    self.expression(0)
                    pass


                self.state = 6955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)




    def functionArg(self):

        localctx = MySqlParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_functionArg)
        try:
            self.state = 6960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1032,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6956
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6957
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6958
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6959
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(MySqlParser.IS, 0)
        def TRUE(self):
            return self.getToken(MySqlParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(MySqlParser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(MySqlParser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(MySqlParser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 660
        self.enterRecursionRule(localctx, 660, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1034,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 6963
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NOT or _la==MySqlParser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6964
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = MySqlParser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6965
                self.predicate(0)
                self.state = 6966
                self.match(MySqlParser.IS)
                self.state = 6968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 6967
                    self.match(MySqlParser.NOT)


                self.state = 6970
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FALSE or _la==MySqlParser.TRUE or _la==MySqlParser.UNKNOWN):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = MySqlParser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 6972
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 6981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1035,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MySqlParser.LogicalExpressionContext(self, MySqlParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 6975
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 6976
                    self.logicalOperator()
                    self.state = 6977
                    self.expression(4) 
                self.state = 6983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1035,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SoundsLikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def SOUNDS(self):
            return self.getToken(MySqlParser.SOUNDS, 0)
        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoundsLikePredicate" ):
                listener.enterSoundsLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoundsLikePredicate" ):
                listener.exitSoundsLikePredicate(self)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(MySqlParser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)


    class SubqueryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def ANY(self):
            return self.getToken(MySqlParser.ANY, 0)
        def SOME(self):
            return self.getToken(MySqlParser.SOME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryComparisonPredicate" ):
                listener.enterSubqueryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryComparisonPredicate" ):
                listener.exitSubqueryComparisonPredicate(self)


    class JsonMemberOfPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def MEMBER(self):
            return self.getToken(MySqlParser.MEMBER, 0)
        def OF(self):
            return self.getToken(MySqlParser.OF, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonMemberOfPredicate" ):
                listener.enterJsonMemberOfPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonMemberOfPredicate" ):
                listener.exitJsonMemberOfPredicate(self)


    class BinaryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparisonPredicate" ):
                listener.enterBinaryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparisonPredicate" ):
                listener.exitBinaryComparisonPredicate(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)


    class BetweenPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def BETWEEN(self):
            return self.getToken(MySqlParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(MySqlParser.AND, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenPredicate" ):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenPredicate" ):
                listener.exitBetweenPredicate(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(MySqlParser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(MySqlParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(MySqlParser.ESCAPE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)


    class RegexpPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.regex = None # Token
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def REGEXP(self):
            return self.getToken(MySqlParser.REGEXP, 0)
        def RLIKE(self):
            return self.getToken(MySqlParser.RLIKE, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexpPredicate" ):
                listener.enterRegexpPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexpPredicate" ):
                listener.exitRegexpPredicate(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 662
        self.enterRecursionRule(localctx, 662, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MySqlParser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 6987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1036,self._ctx)
            if la_ == 1:
                self.state = 6985
                self.match(MySqlParser.LOCAL_ID)
                self.state = 6986
                self.match(MySqlParser.VAR_ASSIGN)


            self.state = 6989
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 7055
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1044,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 7053
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1043,self._ctx)
                    if la_ == 1:
                        localctx = MySqlParser.BinaryComparisonPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6991
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 6992
                        self.comparisonOperator()
                        self.state = 6993
                        localctx.right = self.predicate(9)
                        pass

                    elif la_ == 2:
                        localctx = MySqlParser.BetweenPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 6995
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 6997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 6996
                            self.match(MySqlParser.NOT)


                        self.state = 6999
                        self.match(MySqlParser.BETWEEN)
                        self.state = 7000
                        self.predicate(0)
                        self.state = 7001
                        self.match(MySqlParser.AND)
                        self.state = 7002
                        self.predicate(7)
                        pass

                    elif la_ == 3:
                        localctx = MySqlParser.SoundsLikePredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7004
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 7005
                        self.match(MySqlParser.SOUNDS)
                        self.state = 7006
                        self.match(MySqlParser.LIKE)
                        self.state = 7007
                        self.predicate(6)
                        pass

                    elif la_ == 4:
                        localctx = MySqlParser.RegexpPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7008
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 7010
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 7009
                            self.match(MySqlParser.NOT)


                        self.state = 7012
                        localctx.regex = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.REGEXP or _la==MySqlParser.RLIKE):
                            localctx.regex = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 7013
                        self.predicate(4)
                        pass

                    elif la_ == 5:
                        localctx = MySqlParser.InPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7014
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 7016
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 7015
                            self.match(MySqlParser.NOT)


                        self.state = 7018
                        self.match(MySqlParser.IN)
                        self.state = 7019
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 7022
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1040,self._ctx)
                        if la_ == 1:
                            self.state = 7020
                            self.selectStatement()
                            pass

                        elif la_ == 2:
                            self.state = 7021
                            self.expressions()
                            pass


                        self.state = 7024
                        self.match(MySqlParser.RR_BRACKET)
                        pass

                    elif la_ == 6:
                        localctx = MySqlParser.IsNullPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7026
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 7027
                        self.match(MySqlParser.IS)
                        self.state = 7028
                        self.nullNotnull()
                        pass

                    elif la_ == 7:
                        localctx = MySqlParser.SubqueryComparisonPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7029
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 7030
                        self.comparisonOperator()
                        self.state = 7031
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.ALL or _la==MySqlParser.ANY or _la==MySqlParser.SOME):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 7032
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 7033
                        self.selectStatement()
                        self.state = 7034
                        self.match(MySqlParser.RR_BRACKET)
                        pass

                    elif la_ == 8:
                        localctx = MySqlParser.LikePredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7036
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 7038
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 7037
                            self.match(MySqlParser.NOT)


                        self.state = 7040
                        self.match(MySqlParser.LIKE)
                        self.state = 7041
                        self.predicate(0)
                        self.state = 7044
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1042,self._ctx)
                        if la_ == 1:
                            self.state = 7042
                            self.match(MySqlParser.ESCAPE)
                            self.state = 7043
                            self.match(MySqlParser.STRING_LITERAL)


                        pass

                    elif la_ == 9:
                        localctx = MySqlParser.JsonMemberOfPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7046
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 7047
                        self.match(MySqlParser.MEMBER)
                        self.state = 7048
                        self.match(MySqlParser.OF)
                        self.state = 7049
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 7050
                        self.predicate(0)
                        self.state = 7051
                        self.match(MySqlParser.RR_BRACKET)
                        pass

             
                self.state = 7057
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1044,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(MySqlParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)


    class CollateExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateExpressionAtom" ):
                listener.enterCollateExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateExpressionAtom" ):
                listener.exitCollateExpressionAtom(self)


    class MysqlVariableExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariableExpressionAtom" ):
                listener.enterMysqlVariableExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariableExpressionAtom" ):
                listener.exitMysqlVariableExpressionAtom(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)


    class NestedRowExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedRowExpressionAtom" ):
                listener.enterNestedRowExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedRowExpressionAtom" ):
                listener.exitNestedRowExpressionAtom(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(MySqlParser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)


    class ExistsExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsExpressionAtom" ):
                listener.enterExistsExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsExpressionAtom" ):
                listener.exitExistsExpressionAtom(self)


    class IntervalExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpressionAtom" ):
                listener.enterIntervalExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpressionAtom" ):
                listener.exitIntervalExpressionAtom(self)


    class JsonExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def jsonOperator(self):
            return self.getTypedRuleContext(MySqlParser.JsonOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExpressionAtom" ):
                listener.enterJsonExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExpressionAtom" ):
                listener.exitJsonExpressionAtom(self)


    class SubqueryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpressionAtom" ):
                listener.enterSubqueryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpressionAtom" ):
                listener.exitSubqueryExpressionAtom(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)


    class BinaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpressionAtom" ):
                listener.enterBinaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpressionAtom" ):
                listener.exitBinaryExpressionAtom(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(MySqlParser.BitOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpressionAtom" ):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpressionAtom" ):
                listener.exitBitExpressionAtom(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 664
        self.enterRecursionRule(localctx, 664, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1047,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 7059
                self.constant()
                pass

            elif la_ == 2:
                localctx = MySqlParser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7060
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = MySqlParser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7061
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = MySqlParser.MysqlVariableExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7062
                self.mysqlVariable()
                pass

            elif la_ == 5:
                localctx = MySqlParser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7063
                self.unaryOperator()
                self.state = 7064
                self.expressionAtom(10)
                pass

            elif la_ == 6:
                localctx = MySqlParser.BinaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7066
                self.match(MySqlParser.BINARY)
                self.state = 7067
                self.expressionAtom(9)
                pass

            elif la_ == 7:
                localctx = MySqlParser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7068
                self.match(MySqlParser.LR_BRACKET)
                self.state = 7069
                self.expression(0)
                self.state = 7074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 7070
                    self.match(MySqlParser.COMMA)
                    self.state = 7071
                    self.expression(0)
                    self.state = 7076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7077
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = MySqlParser.NestedRowExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7079
                self.match(MySqlParser.ROW)
                self.state = 7080
                self.match(MySqlParser.LR_BRACKET)
                self.state = 7081
                self.expression(0)
                self.state = 7084 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7082
                    self.match(MySqlParser.COMMA)
                    self.state = 7083
                    self.expression(0)
                    self.state = 7086 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.COMMA):
                        break

                self.state = 7088
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = MySqlParser.ExistsExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7090
                self.match(MySqlParser.EXISTS)
                self.state = 7091
                self.match(MySqlParser.LR_BRACKET)
                self.state = 7092
                self.selectStatement()
                self.state = 7093
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.SubqueryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7095
                self.match(MySqlParser.LR_BRACKET)
                self.state = 7096
                self.selectStatement()
                self.state = 7097
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = MySqlParser.IntervalExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7099
                self.match(MySqlParser.INTERVAL)
                self.state = 7100
                self.expression(0)
                self.state = 7101
                self.intervalType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 7122
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1049,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 7120
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1048,self._ctx)
                    if la_ == 1:
                        localctx = MySqlParser.BitExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 7105
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 7106
                        self.bitOperator()
                        self.state = 7107
                        localctx.right = self.expressionAtom(4)
                        pass

                    elif la_ == 2:
                        localctx = MySqlParser.MathExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 7109
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 7110
                        self.mathOperator()
                        self.state = 7111
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 3:
                        localctx = MySqlParser.JsonExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 7113
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 7114
                        self.jsonOperator()
                        self.state = 7115
                        localctx.right = self.expressionAtom(2)
                        pass

                    elif la_ == 4:
                        localctx = MySqlParser.CollateExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 7117
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 7118
                        self.match(MySqlParser.COLLATE)
                        self.state = 7119
                        self.collationName()
                        pass

             
                self.state = 7124
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1049,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def BIT_NOT_OP(self):
            return self.getToken(MySqlParser.BIT_NOT_OP, 0)

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = MySqlParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7125
            _la = self._input.LA(1)
            if not(_la==MySqlParser.NOT or ((((_la - 1107)) & ~0x3f) == 0 and ((1 << (_la - 1107)) & ((1 << (MySqlParser.PLUS - 1107)) | (1 << (MySqlParser.MINUS - 1107)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 1107)) | (1 << (MySqlParser.BIT_NOT_OP - 1107)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(MySqlParser.GREATER_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySqlParser.LESS_SYMBOL, 0)

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = MySqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_comparisonOperator)
        try:
            self.state = 7141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1050,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7127
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7128
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7129
                self.match(MySqlParser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7130
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 7131
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7132
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 7133
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7134
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 7135
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7136
                self.match(MySqlParser.EXCLAMATION_SYMBOL)
                self.state = 7137
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7138
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 7139
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 7140
                self.match(MySqlParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def BIT_AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BIT_AND_OP)
            else:
                return self.getToken(MySqlParser.BIT_AND_OP, i)

        def XOR(self):
            return self.getToken(MySqlParser.XOR, 0)

        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def BIT_OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BIT_OR_OP)
            else:
                return self.getToken(MySqlParser.BIT_OR_OP, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)




    def logicalOperator(self):

        localctx = MySqlParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_logicalOperator)
        try:
            self.state = 7150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7143
                self.match(MySqlParser.AND)
                pass
            elif token in [MySqlParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7144
                self.match(MySqlParser.BIT_AND_OP)
                self.state = 7145
                self.match(MySqlParser.BIT_AND_OP)
                pass
            elif token in [MySqlParser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7146
                self.match(MySqlParser.XOR)
                pass
            elif token in [MySqlParser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7147
                self.match(MySqlParser.OR)
                pass
            elif token in [MySqlParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7148
                self.match(MySqlParser.BIT_OR_OP)
                self.state = 7149
                self.match(MySqlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LESS_SYMBOL)
            else:
                return self.getToken(MySqlParser.LESS_SYMBOL, i)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GREATER_SYMBOL)
            else:
                return self.getToken(MySqlParser.GREATER_SYMBOL, i)

        def BIT_AND_OP(self):
            return self.getToken(MySqlParser.BIT_AND_OP, 0)

        def BIT_XOR_OP(self):
            return self.getToken(MySqlParser.BIT_XOR_OP, 0)

        def BIT_OR_OP(self):
            return self.getToken(MySqlParser.BIT_OR_OP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_bitOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOperator" ):
                listener.enterBitOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOperator" ):
                listener.exitBitOperator(self)




    def bitOperator(self):

        localctx = MySqlParser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_bitOperator)
        try:
            self.state = 7159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LESS_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7152
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 7153
                self.match(MySqlParser.LESS_SYMBOL)
                pass
            elif token in [MySqlParser.GREATER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7154
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 7155
                self.match(MySqlParser.GREATER_SYMBOL)
                pass
            elif token in [MySqlParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7156
                self.match(MySqlParser.BIT_AND_OP)
                pass
            elif token in [MySqlParser.BIT_XOR_OP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7157
                self.match(MySqlParser.BIT_XOR_OP)
                pass
            elif token in [MySqlParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7158
                self.match(MySqlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(MySqlParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(MySqlParser.MODULE, 0)

        def DIV(self):
            return self.getToken(MySqlParser.DIV, 0)

        def MOD(self):
            return self.getToken(MySqlParser.MOD, 0)

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)




    def mathOperator(self):

        localctx = MySqlParser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7161
            _la = self._input.LA(1)
            if not(((((_la - 1104)) & ~0x3f) == 0 and ((1 << (_la - 1104)) & ((1 << (MySqlParser.STAR - 1104)) | (1 << (MySqlParser.DIVIDE - 1104)) | (1 << (MySqlParser.MODULE - 1104)) | (1 << (MySqlParser.PLUS - 1104)) | (1 << (MySqlParser.MINUS - 1104)) | (1 << (MySqlParser.DIV - 1104)) | (1 << (MySqlParser.MOD - 1104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GREATER_SYMBOL)
            else:
                return self.getToken(MySqlParser.GREATER_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_jsonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOperator" ):
                listener.enterJsonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOperator" ):
                listener.exitJsonOperator(self)




    def jsonOperator(self):

        localctx = MySqlParser.JsonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_jsonOperator)
        try:
            self.state = 7168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1053,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7163
                self.match(MySqlParser.MINUS)
                self.state = 7164
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7165
                self.match(MySqlParser.MINUS)
                self.state = 7166
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 7167
                self.match(MySqlParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARMSCII8(self):
            return self.getToken(MySqlParser.ARMSCII8, 0)

        def ASCII(self):
            return self.getToken(MySqlParser.ASCII, 0)

        def BIG5(self):
            return self.getToken(MySqlParser.BIG5, 0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def CP1250(self):
            return self.getToken(MySqlParser.CP1250, 0)

        def CP1251(self):
            return self.getToken(MySqlParser.CP1251, 0)

        def CP1256(self):
            return self.getToken(MySqlParser.CP1256, 0)

        def CP1257(self):
            return self.getToken(MySqlParser.CP1257, 0)

        def CP850(self):
            return self.getToken(MySqlParser.CP850, 0)

        def CP852(self):
            return self.getToken(MySqlParser.CP852, 0)

        def CP866(self):
            return self.getToken(MySqlParser.CP866, 0)

        def CP932(self):
            return self.getToken(MySqlParser.CP932, 0)

        def DEC8(self):
            return self.getToken(MySqlParser.DEC8, 0)

        def EUCJPMS(self):
            return self.getToken(MySqlParser.EUCJPMS, 0)

        def EUCKR(self):
            return self.getToken(MySqlParser.EUCKR, 0)

        def GB18030(self):
            return self.getToken(MySqlParser.GB18030, 0)

        def GB2312(self):
            return self.getToken(MySqlParser.GB2312, 0)

        def GBK(self):
            return self.getToken(MySqlParser.GBK, 0)

        def GEOSTD8(self):
            return self.getToken(MySqlParser.GEOSTD8, 0)

        def GREEK(self):
            return self.getToken(MySqlParser.GREEK, 0)

        def HEBREW(self):
            return self.getToken(MySqlParser.HEBREW, 0)

        def HP8(self):
            return self.getToken(MySqlParser.HP8, 0)

        def KEYBCS2(self):
            return self.getToken(MySqlParser.KEYBCS2, 0)

        def KOI8R(self):
            return self.getToken(MySqlParser.KOI8R, 0)

        def KOI8U(self):
            return self.getToken(MySqlParser.KOI8U, 0)

        def LATIN1(self):
            return self.getToken(MySqlParser.LATIN1, 0)

        def LATIN2(self):
            return self.getToken(MySqlParser.LATIN2, 0)

        def LATIN5(self):
            return self.getToken(MySqlParser.LATIN5, 0)

        def LATIN7(self):
            return self.getToken(MySqlParser.LATIN7, 0)

        def MACCE(self):
            return self.getToken(MySqlParser.MACCE, 0)

        def MACROMAN(self):
            return self.getToken(MySqlParser.MACROMAN, 0)

        def SJIS(self):
            return self.getToken(MySqlParser.SJIS, 0)

        def SWE7(self):
            return self.getToken(MySqlParser.SWE7, 0)

        def TIS620(self):
            return self.getToken(MySqlParser.TIS620, 0)

        def UCS2(self):
            return self.getToken(MySqlParser.UCS2, 0)

        def UJIS(self):
            return self.getToken(MySqlParser.UJIS, 0)

        def UTF16(self):
            return self.getToken(MySqlParser.UTF16, 0)

        def UTF16LE(self):
            return self.getToken(MySqlParser.UTF16LE, 0)

        def UTF32(self):
            return self.getToken(MySqlParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(MySqlParser.UTF8, 0)

        def UTF8MB3(self):
            return self.getToken(MySqlParser.UTF8MB3, 0)

        def UTF8MB4(self):
            return self.getToken(MySqlParser.UTF8MB4, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_charsetNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetNameBase" ):
                listener.enterCharsetNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetNameBase" ):
                listener.exitCharsetNameBase(self)




    def charsetNameBase(self):

        localctx = MySqlParser.CharsetNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_charsetNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7170
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BINARY or ((((_la - 723)) & ~0x3f) == 0 and ((1 << (_la - 723)) & ((1 << (MySqlParser.ARMSCII8 - 723)) | (1 << (MySqlParser.ASCII - 723)) | (1 << (MySqlParser.BIG5 - 723)) | (1 << (MySqlParser.CP1250 - 723)) | (1 << (MySqlParser.CP1251 - 723)) | (1 << (MySqlParser.CP1256 - 723)) | (1 << (MySqlParser.CP1257 - 723)) | (1 << (MySqlParser.CP850 - 723)) | (1 << (MySqlParser.CP852 - 723)) | (1 << (MySqlParser.CP866 - 723)) | (1 << (MySqlParser.CP932 - 723)) | (1 << (MySqlParser.DEC8 - 723)) | (1 << (MySqlParser.EUCJPMS - 723)) | (1 << (MySqlParser.EUCKR - 723)) | (1 << (MySqlParser.GB18030 - 723)) | (1 << (MySqlParser.GB2312 - 723)) | (1 << (MySqlParser.GBK - 723)) | (1 << (MySqlParser.GEOSTD8 - 723)) | (1 << (MySqlParser.GREEK - 723)) | (1 << (MySqlParser.HEBREW - 723)) | (1 << (MySqlParser.HP8 - 723)) | (1 << (MySqlParser.KEYBCS2 - 723)) | (1 << (MySqlParser.KOI8R - 723)) | (1 << (MySqlParser.KOI8U - 723)) | (1 << (MySqlParser.LATIN1 - 723)) | (1 << (MySqlParser.LATIN2 - 723)) | (1 << (MySqlParser.LATIN5 - 723)) | (1 << (MySqlParser.LATIN7 - 723)) | (1 << (MySqlParser.MACCE - 723)) | (1 << (MySqlParser.MACROMAN - 723)) | (1 << (MySqlParser.SJIS - 723)) | (1 << (MySqlParser.SWE7 - 723)) | (1 << (MySqlParser.TIS620 - 723)) | (1 << (MySqlParser.UCS2 - 723)) | (1 << (MySqlParser.UJIS - 723)) | (1 << (MySqlParser.UTF16 - 723)) | (1 << (MySqlParser.UTF16LE - 723)) | (1 << (MySqlParser.UTF32 - 723)) | (1 << (MySqlParser.UTF8 - 723)) | (1 << (MySqlParser.UTF8MB3 - 723)) | (1 << (MySqlParser.UTF8MB4 - 723)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(MySqlParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(MySqlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(MySqlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(MySqlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionLevelBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevelBase" ):
                listener.enterTransactionLevelBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevelBase" ):
                listener.exitTransactionLevelBase(self)




    def transactionLevelBase(self):

        localctx = MySqlParser.TransactionLevelBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_transactionLevelBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7172
            _la = self._input.LA(1)
            if not(((((_la - 776)) & ~0x3f) == 0 and ((1 << (_la - 776)) & ((1 << (MySqlParser.REPEATABLE - 776)) | (1 << (MySqlParser.COMMITTED - 776)) | (1 << (MySqlParser.UNCOMMITTED - 776)) | (1 << (MySqlParser.SERIALIZABLE - 776)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegesBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def ROUTINE(self):
            return self.getToken(MySqlParser.ROUTINE, 0)

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(MySqlParser.FILE, 0)

        def PROCESS(self):
            return self.getToken(MySqlParser.PROCESS, 0)

        def RELOAD(self):
            return self.getToken(MySqlParser.RELOAD, 0)

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(MySqlParser.SUPER, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privilegesBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegesBase" ):
                listener.enterPrivilegesBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegesBase" ):
                listener.exitPrivilegesBase(self)




    def privilegesBase(self):

        localctx = MySqlParser.PrivilegesBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_privilegesBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7174
            _la = self._input.LA(1)
            if not(((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & ((1 << (MySqlParser.TABLES - 680)) | (1 << (MySqlParser.ROUTINE - 680)) | (1 << (MySqlParser.EXECUTE - 680)) | (1 << (MySqlParser.FILE - 680)) | (1 << (MySqlParser.PROCESS - 680)) | (1 << (MySqlParser.RELOAD - 680)) | (1 << (MySqlParser.SHUTDOWN - 680)) | (1 << (MySqlParser.SUPER - 680)) | (1 << (MySqlParser.PRIVILEGES - 680)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUARTER(self):
            return self.getToken(MySqlParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(MySqlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(MySqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(MySqlParser.MINUTE, 0)

        def WEEK(self):
            return self.getToken(MySqlParser.WEEK, 0)

        def SECOND(self):
            return self.getToken(MySqlParser.SECOND, 0)

        def MICROSECOND(self):
            return self.getToken(MySqlParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_intervalTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTypeBase" ):
                listener.enterIntervalTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTypeBase" ):
                listener.exitIntervalTypeBase(self)




    def intervalTypeBase(self):

        localctx = MySqlParser.IntervalTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_intervalTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7176
            _la = self._input.LA(1)
            if not(((((_la - 672)) & ~0x3f) == 0 and ((1 << (_la - 672)) & ((1 << (MySqlParser.QUARTER - 672)) | (1 << (MySqlParser.MONTH - 672)) | (1 << (MySqlParser.DAY - 672)) | (1 << (MySqlParser.HOUR - 672)) | (1 << (MySqlParser.MINUTE - 672)) | (1 << (MySqlParser.WEEK - 672)) | (1 << (MySqlParser.SECOND - 672)) | (1 << (MySqlParser.MICROSECOND - 672)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def ENUM(self):
            return self.getToken(MySqlParser.ENUM, 0)

        def TEXT(self):
            return self.getToken(MySqlParser.TEXT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dataTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeBase" ):
                listener.enterDataTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeBase" ):
                listener.exitDataTypeBase(self)




    def dataTypeBase(self):

        localctx = MySqlParser.DataTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_dataTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7178
            _la = self._input.LA(1)
            if not(((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.DATETIME - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.TEXT - 211)) | (1 << (MySqlParser.ENUM - 211)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordsCanBeIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(MySqlParser.ACCOUNT, 0)

        def ACTION(self):
            return self.getToken(MySqlParser.ACTION, 0)

        def ADMIN(self):
            return self.getToken(MySqlParser.ADMIN, 0)

        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(MySqlParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def ANY(self):
            return self.getToken(MySqlParser.ANY, 0)

        def AT(self):
            return self.getToken(MySqlParser.AT, 0)

        def AUDIT_ADMIN(self):
            return self.getToken(MySqlParser.AUDIT_ADMIN, 0)

        def AUTHORS(self):
            return self.getToken(MySqlParser.AUTHORS, 0)

        def AUTOCOMMIT(self):
            return self.getToken(MySqlParser.AUTOCOMMIT, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)

        def AVG(self):
            return self.getToken(MySqlParser.AVG, 0)

        def AVG_ROW_LENGTH(self):
            return self.getToken(MySqlParser.AVG_ROW_LENGTH, 0)

        def BACKUP_ADMIN(self):
            return self.getToken(MySqlParser.BACKUP_ADMIN, 0)

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)

        def BINLOG_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ADMIN, 0)

        def BINLOG_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0)

        def BIT(self):
            return self.getToken(MySqlParser.BIT, 0)

        def BIT_AND(self):
            return self.getToken(MySqlParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(MySqlParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(MySqlParser.BIT_XOR, 0)

        def BLOCK(self):
            return self.getToken(MySqlParser.BLOCK, 0)

        def BOOL(self):
            return self.getToken(MySqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(MySqlParser.BOOLEAN, 0)

        def BTREE(self):
            return self.getToken(MySqlParser.BTREE, 0)

        def BUCKETS(self):
            return self.getToken(MySqlParser.BUCKETS, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def CHANGED(self):
            return self.getToken(MySqlParser.CHANGED, 0)

        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)

        def PAGE_CHECKSUM(self):
            return self.getToken(MySqlParser.PAGE_CHECKSUM, 0)

        def CATALOG_NAME(self):
            return self.getToken(MySqlParser.CATALOG_NAME, 0)

        def CIPHER(self):
            return self.getToken(MySqlParser.CIPHER, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(MySqlParser.CLASS_ORIGIN, 0)

        def CLIENT(self):
            return self.getToken(MySqlParser.CLIENT, 0)

        def CLONE_ADMIN(self):
            return self.getToken(MySqlParser.CLONE_ADMIN, 0)

        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)

        def CLUSTERING(self):
            return self.getToken(MySqlParser.CLUSTERING, 0)

        def COALESCE(self):
            return self.getToken(MySqlParser.COALESCE, 0)

        def CODE(self):
            return self.getToken(MySqlParser.CODE, 0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)

        def COLUMN_FORMAT(self):
            return self.getToken(MySqlParser.COLUMN_FORMAT, 0)

        def COLUMN_NAME(self):
            return self.getToken(MySqlParser.COLUMN_NAME, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(MySqlParser.COMPACT, 0)

        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def COMPRESSED(self):
            return self.getToken(MySqlParser.COMPRESSED, 0)

        def COMPRESSION(self):
            return self.getToken(MySqlParser.COMPRESSION, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def CONNECT(self):
            return self.getToken(MySqlParser.CONNECT, 0)

        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)

        def CONNECTION_ADMIN(self):
            return self.getToken(MySqlParser.CONNECTION_ADMIN, 0)

        def CONSISTENT(self):
            return self.getToken(MySqlParser.CONSISTENT, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(MySqlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(MySqlParser.CONSTRAINT_NAME, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0)

        def CONTAINS(self):
            return self.getToken(MySqlParser.CONTAINS, 0)

        def CONTEXT(self):
            return self.getToken(MySqlParser.CONTEXT, 0)

        def CONTRIBUTORS(self):
            return self.getToken(MySqlParser.CONTRIBUTORS, 0)

        def COPY(self):
            return self.getToken(MySqlParser.COPY, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def CPU(self):
            return self.getToken(MySqlParser.CPU, 0)

        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)

        def CURSOR_NAME(self):
            return self.getToken(MySqlParser.CURSOR_NAME, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def DEALLOCATE(self):
            return self.getToken(MySqlParser.DEALLOCATE, 0)

        def DEFAULT_AUTH(self):
            return self.getToken(MySqlParser.DEFAULT_AUTH, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def DELAY_KEY_WRITE(self):
            return self.getToken(MySqlParser.DELAY_KEY_WRITE, 0)

        def DES_KEY_FILE(self):
            return self.getToken(MySqlParser.DES_KEY_FILE, 0)

        def DIAGNOSTICS(self):
            return self.getToken(MySqlParser.DIAGNOSTICS, 0)

        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)

        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def DUMPFILE(self):
            return self.getToken(MySqlParser.DUMPFILE, 0)

        def DUPLICATE(self):
            return self.getToken(MySqlParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)

        def ENCRYPTION(self):
            return self.getToken(MySqlParser.ENCRYPTION, 0)

        def ENCRYPTION_KEY_ADMIN(self):
            return self.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def ENDS(self):
            return self.getToken(MySqlParser.ENDS, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0)

        def ENGINES(self):
            return self.getToken(MySqlParser.ENGINES, 0)

        def ERROR(self):
            return self.getToken(MySqlParser.ERROR, 0)

        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(MySqlParser.ESCAPE, 0)

        def EUR(self):
            return self.getToken(MySqlParser.EUR, 0)

        def EVEN(self):
            return self.getToken(MySqlParser.EVEN, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)

        def EVERY(self):
            return self.getToken(MySqlParser.EVERY, 0)

        def EXCEPT(self):
            return self.getToken(MySqlParser.EXCEPT, 0)

        def EXCHANGE(self):
            return self.getToken(MySqlParser.EXCHANGE, 0)

        def EXCLUSIVE(self):
            return self.getToken(MySqlParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(MySqlParser.EXPIRE, 0)

        def EXPORT(self):
            return self.getToken(MySqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def EXTENT_SIZE(self):
            return self.getToken(MySqlParser.EXTENT_SIZE, 0)

        def FAST(self):
            return self.getToken(MySqlParser.FAST, 0)

        def FAULTS(self):
            return self.getToken(MySqlParser.FAULTS, 0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.FILE_BLOCK_SIZE, 0)

        def FILTER(self):
            return self.getToken(MySqlParser.FILTER, 0)

        def FIREWALL_ADMIN(self):
            return self.getToken(MySqlParser.FIREWALL_ADMIN, 0)

        def FIREWALL_USER(self):
            return self.getToken(MySqlParser.FIREWALL_USER, 0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)

        def FLUSH(self):
            return self.getToken(MySqlParser.FLUSH, 0)

        def FOLLOWS(self):
            return self.getToken(MySqlParser.FOLLOWS, 0)

        def FOUND(self):
            return self.getToken(MySqlParser.FOUND, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def GENERAL(self):
            return self.getToken(MySqlParser.GENERAL, 0)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def GRANTS(self):
            return self.getToken(MySqlParser.GRANTS, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def GROUP_CONCAT(self):
            return self.getToken(MySqlParser.GROUP_CONCAT, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def GROUP_REPLICATION_ADMIN(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0)

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)

        def HELP(self):
            return self.getToken(MySqlParser.HELP, 0)

        def HOST(self):
            return self.getToken(MySqlParser.HOST, 0)

        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)

        def IGNORED(self):
            return self.getToken(MySqlParser.IGNORED, 0)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(MySqlParser.IGNORE_SERVER_IDS, 0)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)

        def INDEXES(self):
            return self.getToken(MySqlParser.INDEXES, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def INNODB_REDO_LOG_ARCHIVE(self):
            return self.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0)

        def INPLACE(self):
            return self.getToken(MySqlParser.INPLACE, 0)

        def INSERT_METHOD(self):
            return self.getToken(MySqlParser.INSERT_METHOD, 0)

        def INSTALL(self):
            return self.getToken(MySqlParser.INSTALL, 0)

        def INSTANCE(self):
            return self.getToken(MySqlParser.INSTANCE, 0)

        def INSTANT(self):
            return self.getToken(MySqlParser.INSTANT, 0)

        def INTERNAL(self):
            return self.getToken(MySqlParser.INTERNAL, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def IO(self):
            return self.getToken(MySqlParser.IO, 0)

        def IO_THREAD(self):
            return self.getToken(MySqlParser.IO_THREAD, 0)

        def IPC(self):
            return self.getToken(MySqlParser.IPC, 0)

        def ISO(self):
            return self.getToken(MySqlParser.ISO, 0)

        def ISOLATION(self):
            return self.getToken(MySqlParser.ISOLATION, 0)

        def ISSUER(self):
            return self.getToken(MySqlParser.ISSUER, 0)

        def JIS(self):
            return self.getToken(MySqlParser.JIS, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)

        def LANGUAGE(self):
            return self.getToken(MySqlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)

        def LEAVES(self):
            return self.getToken(MySqlParser.LEAVES, 0)

        def LESS(self):
            return self.getToken(MySqlParser.LESS, 0)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(MySqlParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def MASTER_AUTO_POSITION(self):
            return self.getToken(MySqlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_DELAY(self):
            return self.getToken(MySqlParser.MASTER_DELAY, 0)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0)

        def MASTER_HOST(self):
            return self.getToken(MySqlParser.MASTER_HOST, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(MySqlParser.MASTER_PASSWORD, 0)

        def MASTER_PORT(self):
            return self.getToken(MySqlParser.MASTER_PORT, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(MySqlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_SSL(self):
            return self.getToken(MySqlParser.MASTER_SSL, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(MySqlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(MySqlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(MySqlParser.MASTER_SSL_KEY, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(MySqlParser.MASTER_TLS_VERSION, 0)

        def MASTER_USER(self):
            return self.getToken(MySqlParser.MASTER_USER, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0)

        def MAX(self):
            return self.getToken(MySqlParser.MAX, 0)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)

        def MAX_SIZE(self):
            return self.getToken(MySqlParser.MAX_SIZE, 0)

        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0)

        def MEDIUM(self):
            return self.getToken(MySqlParser.MEDIUM, 0)

        def MEMBER(self):
            return self.getToken(MySqlParser.MEMBER, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(MySqlParser.MESSAGE_TEXT, 0)

        def MID(self):
            return self.getToken(MySqlParser.MID, 0)

        def MIGRATE(self):
            return self.getToken(MySqlParser.MIGRATE, 0)

        def MIN(self):
            return self.getToken(MySqlParser.MIN, 0)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)

        def MODE(self):
            return self.getToken(MySqlParser.MODE, 0)

        def MODIFY(self):
            return self.getToken(MySqlParser.MODIFY, 0)

        def MUTEX(self):
            return self.getToken(MySqlParser.MUTEX, 0)

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(MySqlParser.MYSQL_ERRNO, 0)

        def NAME(self):
            return self.getToken(MySqlParser.NAME, 0)

        def NAMES(self):
            return self.getToken(MySqlParser.NAMES, 0)

        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def NDB_STORED_USER(self):
            return self.getToken(MySqlParser.NDB_STORED_USER, 0)

        def NEVER(self):
            return self.getToken(MySqlParser.NEVER, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def NO(self):
            return self.getToken(MySqlParser.NO, 0)

        def NOCOPY(self):
            return self.getToken(MySqlParser.NOCOPY, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def NOWAIT(self):
            return self.getToken(MySqlParser.NOWAIT, 0)

        def NUMBER(self):
            return self.getToken(MySqlParser.NUMBER, 0)

        def ODBC(self):
            return self.getToken(MySqlParser.ODBC, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def OFFSET(self):
            return self.getToken(MySqlParser.OFFSET, 0)

        def OF(self):
            return self.getToken(MySqlParser.OF, 0)

        def OJ(self):
            return self.getToken(MySqlParser.OJ, 0)

        def OLD_PASSWORD(self):
            return self.getToken(MySqlParser.OLD_PASSWORD, 0)

        def ONE(self):
            return self.getToken(MySqlParser.ONE, 0)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)

        def OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.OPTIMIZER_COSTS, 0)

        def OPTIONAL(self):
            return self.getToken(MySqlParser.OPTIONAL, 0)

        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def OWNER(self):
            return self.getToken(MySqlParser.OWNER, 0)

        def PACK_KEYS(self):
            return self.getToken(MySqlParser.PACK_KEYS, 0)

        def PAGE(self):
            return self.getToken(MySqlParser.PAGE, 0)

        def PARSER(self):
            return self.getToken(MySqlParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(MySqlParser.PARTIAL, 0)

        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def PASSWORDLESS_USER_ADMIN(self):
            return self.getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0)

        def PERSIST_RO_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0)

        def PHASE(self):
            return self.getToken(MySqlParser.PHASE, 0)

        def PLUGINS(self):
            return self.getToken(MySqlParser.PLUGINS, 0)

        def PLUGIN_DIR(self):
            return self.getToken(MySqlParser.PLUGIN_DIR, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def PORT(self):
            return self.getToken(MySqlParser.PORT, 0)

        def PRECEDES(self):
            return self.getToken(MySqlParser.PRECEDES, 0)

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def PREV(self):
            return self.getToken(MySqlParser.PREV, 0)

        def PROCESSLIST(self):
            return self.getToken(MySqlParser.PROCESSLIST, 0)

        def PROFILE(self):
            return self.getToken(MySqlParser.PROFILE, 0)

        def PROFILES(self):
            return self.getToken(MySqlParser.PROFILES, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def REBUILD(self):
            return self.getToken(MySqlParser.REBUILD, 0)

        def RECOVER(self):
            return self.getToken(MySqlParser.RECOVER, 0)

        def RECURSIVE(self):
            return self.getToken(MySqlParser.RECURSIVE, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.REDO_BUFFER_SIZE, 0)

        def REDUNDANT(self):
            return self.getToken(MySqlParser.REDUNDANT, 0)

        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)

        def RELAYLOG(self):
            return self.getToken(MySqlParser.RELAYLOG, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)

        def REMOVE(self):
            return self.getToken(MySqlParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(MySqlParser.REORGANIZE, 0)

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)

        def REPLICATE_DO_DB(self):
            return self.getToken(MySqlParser.REPLICATE_DO_DB, 0)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_DO_TABLE, 0)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def REPLICATION_APPLIER(self):
            return self.getToken(MySqlParser.REPLICATION_APPLIER, 0)

        def REPLICATION_SLAVE_ADMIN(self):
            return self.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0)

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def RESOURCE_GROUP_ADMIN(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0)

        def RESOURCE_GROUP_USER(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_USER, 0)

        def RESUME(self):
            return self.getToken(MySqlParser.RESUME, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(MySqlParser.RETURNED_SQLSTATE, 0)

        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def ROLE_ADMIN(self):
            return self.getToken(MySqlParser.ROLE_ADMIN, 0)

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(MySqlParser.ROLLUP, 0)

        def ROTATE(self):
            return self.getToken(MySqlParser.ROTATE, 0)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(MySqlParser.ROWS, 0)

        def ROW_FORMAT(self):
            return self.getToken(MySqlParser.ROW_FORMAT, 0)

        def RTREE(self):
            return self.getToken(MySqlParser.RTREE, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def SCHEMA_NAME(self):
            return self.getToken(MySqlParser.SCHEMA_NAME, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def SECONDARY_ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0)

        def SERIAL(self):
            return self.getToken(MySqlParser.SERIAL, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0)

        def SET_USER_ID(self):
            return self.getToken(MySqlParser.SET_USER_ID, 0)

        def SHARE(self):
            return self.getToken(MySqlParser.SHARE, 0)

        def SHARED(self):
            return self.getToken(MySqlParser.SHARED, 0)

        def SHOW_ROUTINE(self):
            return self.getToken(MySqlParser.SHOW_ROUTINE, 0)

        def SIGNED(self):
            return self.getToken(MySqlParser.SIGNED, 0)

        def SIMPLE(self):
            return self.getToken(MySqlParser.SIMPLE, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def SLOW(self):
            return self.getToken(MySqlParser.SLOW, 0)

        def SNAPSHOT(self):
            return self.getToken(MySqlParser.SNAPSHOT, 0)

        def SOCKET(self):
            return self.getToken(MySqlParser.SOCKET, 0)

        def SOME(self):
            return self.getToken(MySqlParser.SOME, 0)

        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def SOUNDS(self):
            return self.getToken(MySqlParser.SOUNDS, 0)

        def SOURCE(self):
            return self.getToken(MySqlParser.SOURCE, 0)

        def SQL_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_AFTER_GTIDS, 0)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(MySqlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(MySqlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(MySqlParser.SQL_NO_CACHE, 0)

        def SQL_THREAD(self):
            return self.getToken(MySqlParser.SQL_THREAD, 0)

        def STACKED(self):
            return self.getToken(MySqlParser.STACKED, 0)

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def STARTS(self):
            return self.getToken(MySqlParser.STARTS, 0)

        def STATS_AUTO_RECALC(self):
            return self.getToken(MySqlParser.STATS_AUTO_RECALC, 0)

        def STATS_PERSISTENT(self):
            return self.getToken(MySqlParser.STATS_PERSISTENT, 0)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def STD(self):
            return self.getToken(MySqlParser.STD, 0)

        def STDDEV(self):
            return self.getToken(MySqlParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(MySqlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(MySqlParser.STDDEV_SAMP, 0)

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def STRING(self):
            return self.getToken(MySqlParser.STRING, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(MySqlParser.SUBCLASS_ORIGIN, 0)

        def SUBJECT(self):
            return self.getToken(MySqlParser.SUBJECT, 0)

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def SUBPARTITIONS(self):
            return self.getToken(MySqlParser.SUBPARTITIONS, 0)

        def SUM(self):
            return self.getToken(MySqlParser.SUM, 0)

        def SUSPEND(self):
            return self.getToken(MySqlParser.SUSPEND, 0)

        def SWAPS(self):
            return self.getToken(MySqlParser.SWAPS, 0)

        def SWITCHES(self):
            return self.getToken(MySqlParser.SWITCHES, 0)

        def SYSTEM_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0)

        def TABLE_NAME(self):
            return self.getToken(MySqlParser.TABLE_NAME, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def TABLE_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def THAN(self):
            return self.getToken(MySqlParser.THAN, 0)

        def TRADITIONAL(self):
            return self.getToken(MySqlParser.TRADITIONAL, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def TRANSACTIONAL(self):
            return self.getToken(MySqlParser.TRANSACTIONAL, 0)

        def TRIGGERS(self):
            return self.getToken(MySqlParser.TRIGGERS, 0)

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0)

        def UNINSTALL(self):
            return self.getToken(MySqlParser.UNINSTALL, 0)

        def UNKNOWN(self):
            return self.getToken(MySqlParser.UNKNOWN, 0)

        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)

        def USA(self):
            return self.getToken(MySqlParser.USA, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def USE_FRM(self):
            return self.getToken(MySqlParser.USE_FRM, 0)

        def USER_RESOURCES(self):
            return self.getToken(MySqlParser.USER_RESOURCES, 0)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def VAR_POP(self):
            return self.getToken(MySqlParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(MySqlParser.VAR_SAMP, 0)

        def VARIABLES(self):
            return self.getToken(MySqlParser.VARIABLES, 0)

        def VARIANCE(self):
            return self.getToken(MySqlParser.VARIANCE, 0)

        def VERSION_TOKEN_ADMIN(self):
            return self.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)

        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(MySqlParser.WRAPPER, 0)

        def X509(self):
            return self.getToken(MySqlParser.X509, 0)

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def XA_RECOVER_ADMIN(self):
            return self.getToken(MySqlParser.XA_RECOVER_ADMIN, 0)

        def XML(self):
            return self.getToken(MySqlParser.XML, 0)

        def VIA(self):
            return self.getToken(MySqlParser.VIA, 0)

        def LASTVAL(self):
            return self.getToken(MySqlParser.LASTVAL, 0)

        def NEXTVAL(self):
            return self.getToken(MySqlParser.NEXTVAL, 0)

        def SETVAL(self):
            return self.getToken(MySqlParser.SETVAL, 0)

        def PREVIOUS(self):
            return self.getToken(MySqlParser.PREVIOUS, 0)

        def PERSISTENT(self):
            return self.getToken(MySqlParser.PERSISTENT, 0)

        def REPLICATION_MASTER_ADMIN(self):
            return self.getToken(MySqlParser.REPLICATION_MASTER_ADMIN, 0)

        def REPLICA(self):
            return self.getToken(MySqlParser.REPLICA, 0)

        def READ_ONLY_ADMIN(self):
            return self.getToken(MySqlParser.READ_ONLY_ADMIN, 0)

        def FEDERATED_ADMIN(self):
            return self.getToken(MySqlParser.FEDERATED_ADMIN, 0)

        def BINLOG_MONITOR(self):
            return self.getToken(MySqlParser.BINLOG_MONITOR, 0)

        def BINLOG_REPLAY(self):
            return self.getToken(MySqlParser.BINLOG_REPLAY, 0)

        def ENCRYPTED(self):
            return self.getToken(MySqlParser.ENCRYPTED, 0)

        def ENCRYPTION_KEY_ID(self):
            return self.getToken(MySqlParser.ENCRYPTION_KEY_ID, 0)

        def SKIP_(self):
            return self.getToken(MySqlParser.SKIP_, 0)

        def LOCKED(self):
            return self.getToken(MySqlParser.LOCKED, 0)

        def CYCLE(self):
            return self.getToken(MySqlParser.CYCLE, 0)

        def INCREMENT(self):
            return self.getToken(MySqlParser.INCREMENT, 0)

        def MINVALUE(self):
            return self.getToken(MySqlParser.MINVALUE, 0)

        def MAXVALUE(self):
            return self.getToken(MySqlParser.MAXVALUE, 0)

        def NOCACHE(self):
            return self.getToken(MySqlParser.NOCACHE, 0)

        def NOCYCLE(self):
            return self.getToken(MySqlParser.NOCYCLE, 0)

        def NOMINVALUE(self):
            return self.getToken(MySqlParser.NOMINVALUE, 0)

        def NOMAXVALUE(self):
            return self.getToken(MySqlParser.NOMAXVALUE, 0)

        def RESTART(self):
            return self.getToken(MySqlParser.RESTART, 0)

        def SEQUENCE(self):
            return self.getToken(MySqlParser.SEQUENCE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_keywordsCanBeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordsCanBeId" ):
                listener.enterKeywordsCanBeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordsCanBeId" ):
                listener.exitKeywordsCanBeId(self)




    def keywordsCanBeId(self):

        localctx = MySqlParser.KeywordsCanBeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_keywordsCanBeId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7180
            _la = self._input.LA(1)
            if not(((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (MySqlParser.BUCKETS - 17)) | (1 << (MySqlParser.CURRENT - 17)) | (1 << (MySqlParser.DIAGNOSTICS - 17)) | (1 << (MySqlParser.EXCEPT - 17)) | (1 << (MySqlParser.GROUP - 17)) | (1 << (MySqlParser.IGNORED - 17)))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (MySqlParser.LOCKED - 100)) | (1 << (MySqlParser.MAXVALUE - 100)) | (1 << (MySqlParser.MINVALUE - 100)) | (1 << (MySqlParser.NUMBER - 100)) | (1 << (MySqlParser.OPTIONAL - 100)) | (1 << (MySqlParser.ORDER - 100)) | (1 << (MySqlParser.SKIP_ - 100)) | (1 << (MySqlParser.STACKED - 100)))) != 0) or ((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & ((1 << (MySqlParser.SERIAL - 233)) | (1 << (MySqlParser.AVG - 233)) | (1 << (MySqlParser.BIT_AND - 233)) | (1 << (MySqlParser.BIT_OR - 233)) | (1 << (MySqlParser.BIT_XOR - 233)) | (1 << (MySqlParser.COUNT - 233)) | (1 << (MySqlParser.GROUP_CONCAT - 233)) | (1 << (MySqlParser.MAX - 233)) | (1 << (MySqlParser.MIN - 233)) | (1 << (MySqlParser.STD - 233)))) != 0) or ((((_la - 297)) & ~0x3f) == 0 and ((1 << (_la - 297)) & ((1 << (MySqlParser.STDDEV - 297)) | (1 << (MySqlParser.STDDEV_POP - 297)) | (1 << (MySqlParser.STDDEV_SAMP - 297)) | (1 << (MySqlParser.SUM - 297)) | (1 << (MySqlParser.VAR_POP - 297)) | (1 << (MySqlParser.VAR_SAMP - 297)) | (1 << (MySqlParser.VARIANCE - 297)) | (1 << (MySqlParser.ACCOUNT - 297)) | (1 << (MySqlParser.ACTION - 297)) | (1 << (MySqlParser.AFTER - 297)) | (1 << (MySqlParser.AGGREGATE - 297)) | (1 << (MySqlParser.ALGORITHM - 297)) | (1 << (MySqlParser.ANY - 297)) | (1 << (MySqlParser.AT - 297)) | (1 << (MySqlParser.AUTHORS - 297)) | (1 << (MySqlParser.AUTOCOMMIT - 297)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 297)) | (1 << (MySqlParser.AUTO_INCREMENT - 297)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 297)) | (1 << (MySqlParser.BEGIN - 297)) | (1 << (MySqlParser.BINLOG - 297)) | (1 << (MySqlParser.BIT - 297)) | (1 << (MySqlParser.BLOCK - 297)) | (1 << (MySqlParser.BOOL - 297)) | (1 << (MySqlParser.BOOLEAN - 297)) | (1 << (MySqlParser.BTREE - 297)) | (1 << (MySqlParser.CACHE - 297)) | (1 << (MySqlParser.CASCADED - 297)) | (1 << (MySqlParser.CHAIN - 297)) | (1 << (MySqlParser.CHANGED - 297)) | (1 << (MySqlParser.CHANNEL - 297)) | (1 << (MySqlParser.CHECKSUM - 297)) | (1 << (MySqlParser.PAGE_CHECKSUM - 297)) | (1 << (MySqlParser.CIPHER - 297)) | (1 << (MySqlParser.CLASS_ORIGIN - 297)) | (1 << (MySqlParser.CLIENT - 297)) | (1 << (MySqlParser.CLOSE - 297)) | (1 << (MySqlParser.CLUSTERING - 297)) | (1 << (MySqlParser.COALESCE - 297)) | (1 << (MySqlParser.CODE - 297)) | (1 << (MySqlParser.COLUMNS - 297)) | (1 << (MySqlParser.COLUMN_FORMAT - 297)) | (1 << (MySqlParser.COLUMN_NAME - 297)) | (1 << (MySqlParser.COMMENT - 297)) | (1 << (MySqlParser.COMMIT - 297)))) != 0) or ((((_la - 361)) & ~0x3f) == 0 and ((1 << (_la - 361)) & ((1 << (MySqlParser.COMPACT - 361)) | (1 << (MySqlParser.COMPLETION - 361)) | (1 << (MySqlParser.COMPRESSED - 361)) | (1 << (MySqlParser.COMPRESSION - 361)) | (1 << (MySqlParser.CONCURRENT - 361)) | (1 << (MySqlParser.CONNECT - 361)) | (1 << (MySqlParser.CONNECTION - 361)) | (1 << (MySqlParser.CONSISTENT - 361)) | (1 << (MySqlParser.CONSTRAINT_CATALOG - 361)) | (1 << (MySqlParser.CONSTRAINT_SCHEMA - 361)) | (1 << (MySqlParser.CONSTRAINT_NAME - 361)) | (1 << (MySqlParser.CONTAINS - 361)) | (1 << (MySqlParser.CONTEXT - 361)) | (1 << (MySqlParser.CONTRIBUTORS - 361)) | (1 << (MySqlParser.COPY - 361)) | (1 << (MySqlParser.CPU - 361)) | (1 << (MySqlParser.CYCLE - 361)) | (1 << (MySqlParser.CURSOR_NAME - 361)) | (1 << (MySqlParser.DATA - 361)) | (1 << (MySqlParser.DATAFILE - 361)) | (1 << (MySqlParser.DEALLOCATE - 361)) | (1 << (MySqlParser.DEFAULT_AUTH - 361)) | (1 << (MySqlParser.DEFINER - 361)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 361)) | (1 << (MySqlParser.DES_KEY_FILE - 361)) | (1 << (MySqlParser.DIRECTORY - 361)) | (1 << (MySqlParser.DISABLE - 361)) | (1 << (MySqlParser.DISCARD - 361)) | (1 << (MySqlParser.DISK - 361)) | (1 << (MySqlParser.DO - 361)) | (1 << (MySqlParser.DUMPFILE - 361)) | (1 << (MySqlParser.DUPLICATE - 361)) | (1 << (MySqlParser.DYNAMIC - 361)) | (1 << (MySqlParser.ENABLE - 361)) | (1 << (MySqlParser.ENCRYPTION - 361)) | (1 << (MySqlParser.END - 361)) | (1 << (MySqlParser.ENDS - 361)) | (1 << (MySqlParser.ENGINE - 361)) | (1 << (MySqlParser.ENGINES - 361)) | (1 << (MySqlParser.ERROR - 361)) | (1 << (MySqlParser.ERRORS - 361)) | (1 << (MySqlParser.ESCAPE - 361)) | (1 << (MySqlParser.EVEN - 361)) | (1 << (MySqlParser.EVENT - 361)) | (1 << (MySqlParser.EVENTS - 361)) | (1 << (MySqlParser.EVERY - 361)) | (1 << (MySqlParser.EXCHANGE - 361)) | (1 << (MySqlParser.EXCLUSIVE - 361)) | (1 << (MySqlParser.EXPIRE - 361)) | (1 << (MySqlParser.EXPORT - 361)) | (1 << (MySqlParser.EXTENDED - 361)) | (1 << (MySqlParser.EXTENT_SIZE - 361)) | (1 << (MySqlParser.FAST - 361)) | (1 << (MySqlParser.FAULTS - 361)) | (1 << (MySqlParser.FIELDS - 361)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 361)) | (1 << (MySqlParser.FILTER - 361)) | (1 << (MySqlParser.FIRST - 361)) | (1 << (MySqlParser.FIXED - 361)) | (1 << (MySqlParser.FLUSH - 361)) | (1 << (MySqlParser.FOLLOWS - 361)) | (1 << (MySqlParser.FOUND - 361)) | (1 << (MySqlParser.FULL - 361)))) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & ((1 << (MySqlParser.FUNCTION - 425)) | (1 << (MySqlParser.GENERAL - 425)) | (1 << (MySqlParser.GLOBAL - 425)) | (1 << (MySqlParser.GRANTS - 425)) | (1 << (MySqlParser.GROUP_REPLICATION - 425)) | (1 << (MySqlParser.HANDLER - 425)) | (1 << (MySqlParser.HASH - 425)) | (1 << (MySqlParser.HELP - 425)) | (1 << (MySqlParser.HOST - 425)) | (1 << (MySqlParser.HOSTS - 425)) | (1 << (MySqlParser.IDENTIFIED - 425)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 425)) | (1 << (MySqlParser.IMPORT - 425)) | (1 << (MySqlParser.INCREMENT - 425)) | (1 << (MySqlParser.INDEXES - 425)) | (1 << (MySqlParser.INITIAL_SIZE - 425)) | (1 << (MySqlParser.INPLACE - 425)) | (1 << (MySqlParser.INSERT_METHOD - 425)) | (1 << (MySqlParser.INSTALL - 425)) | (1 << (MySqlParser.INSTANCE - 425)) | (1 << (MySqlParser.INSTANT - 425)) | (1 << (MySqlParser.INVOKER - 425)) | (1 << (MySqlParser.IO - 425)) | (1 << (MySqlParser.IO_THREAD - 425)) | (1 << (MySqlParser.IPC - 425)) | (1 << (MySqlParser.ISOLATION - 425)) | (1 << (MySqlParser.ISSUER - 425)) | (1 << (MySqlParser.JSON - 425)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 425)) | (1 << (MySqlParser.LANGUAGE - 425)) | (1 << (MySqlParser.LAST - 425)) | (1 << (MySqlParser.LEAVES - 425)) | (1 << (MySqlParser.LESS - 425)) | (1 << (MySqlParser.LEVEL - 425)) | (1 << (MySqlParser.LIST - 425)) | (1 << (MySqlParser.LOCAL - 425)) | (1 << (MySqlParser.LOGFILE - 425)) | (1 << (MySqlParser.LOGS - 425)) | (1 << (MySqlParser.MASTER - 425)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 425)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 425)) | (1 << (MySqlParser.MASTER_DELAY - 425)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 425)) | (1 << (MySqlParser.MASTER_HOST - 425)) | (1 << (MySqlParser.MASTER_LOG_FILE - 425)) | (1 << (MySqlParser.MASTER_LOG_POS - 425)) | (1 << (MySqlParser.MASTER_PASSWORD - 425)) | (1 << (MySqlParser.MASTER_PORT - 425)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 425)) | (1 << (MySqlParser.MASTER_SSL - 425)) | (1 << (MySqlParser.MASTER_SSL_CA - 425)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 425)) | (1 << (MySqlParser.MASTER_SSL_CERT - 425)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 425)) | (1 << (MySqlParser.MASTER_SSL_CRL - 425)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 425)) | (1 << (MySqlParser.MASTER_SSL_KEY - 425)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 425)) | (1 << (MySqlParser.MASTER_USER - 425)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 425)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 425)) | (1 << (MySqlParser.MAX_ROWS - 425)) | (1 << (MySqlParser.MAX_SIZE - 425)))) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & ((1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 489)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 489)) | (1 << (MySqlParser.MEDIUM - 489)) | (1 << (MySqlParser.MEMBER - 489)) | (1 << (MySqlParser.MERGE - 489)) | (1 << (MySqlParser.MESSAGE_TEXT - 489)) | (1 << (MySqlParser.MID - 489)) | (1 << (MySqlParser.MIGRATE - 489)) | (1 << (MySqlParser.MIN_ROWS - 489)) | (1 << (MySqlParser.MODE - 489)) | (1 << (MySqlParser.MODIFY - 489)) | (1 << (MySqlParser.MUTEX - 489)) | (1 << (MySqlParser.MYSQL - 489)) | (1 << (MySqlParser.MYSQL_ERRNO - 489)) | (1 << (MySqlParser.NAME - 489)) | (1 << (MySqlParser.NAMES - 489)) | (1 << (MySqlParser.NCHAR - 489)) | (1 << (MySqlParser.NEVER - 489)) | (1 << (MySqlParser.NEXT - 489)) | (1 << (MySqlParser.NO - 489)) | (1 << (MySqlParser.NOCACHE - 489)) | (1 << (MySqlParser.NOCOPY - 489)) | (1 << (MySqlParser.NOCYCLE - 489)) | (1 << (MySqlParser.NOMAXVALUE - 489)) | (1 << (MySqlParser.NOMINVALUE - 489)) | (1 << (MySqlParser.NOWAIT - 489)) | (1 << (MySqlParser.NODEGROUP - 489)) | (1 << (MySqlParser.NONE - 489)) | (1 << (MySqlParser.ODBC - 489)) | (1 << (MySqlParser.OFFLINE - 489)) | (1 << (MySqlParser.OFFSET - 489)) | (1 << (MySqlParser.OF - 489)) | (1 << (MySqlParser.OJ - 489)) | (1 << (MySqlParser.OLD_PASSWORD - 489)) | (1 << (MySqlParser.ONE - 489)) | (1 << (MySqlParser.ONLINE - 489)) | (1 << (MySqlParser.ONLY - 489)) | (1 << (MySqlParser.OPEN - 489)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 489)) | (1 << (MySqlParser.OPTIONS - 489)) | (1 << (MySqlParser.OWNER - 489)) | (1 << (MySqlParser.PACK_KEYS - 489)) | (1 << (MySqlParser.PAGE - 489)) | (1 << (MySqlParser.PARSER - 489)) | (1 << (MySqlParser.PARTIAL - 489)) | (1 << (MySqlParser.PARTITIONING - 489)) | (1 << (MySqlParser.PARTITIONS - 489)) | (1 << (MySqlParser.PASSWORD - 489)) | (1 << (MySqlParser.PHASE - 489)) | (1 << (MySqlParser.PLUGIN - 489)) | (1 << (MySqlParser.PLUGIN_DIR - 489)) | (1 << (MySqlParser.PLUGINS - 489)) | (1 << (MySqlParser.PORT - 489)) | (1 << (MySqlParser.PRECEDES - 489)) | (1 << (MySqlParser.PREPARE - 489)) | (1 << (MySqlParser.PRESERVE - 489)) | (1 << (MySqlParser.PREV - 489)) | (1 << (MySqlParser.PROCESSLIST - 489)) | (1 << (MySqlParser.PROFILE - 489)) | (1 << (MySqlParser.PROFILES - 489)) | (1 << (MySqlParser.PROXY - 489)) | (1 << (MySqlParser.QUERY - 489)) | (1 << (MySqlParser.QUICK - 489)))) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & ((1 << (MySqlParser.REBUILD - 553)) | (1 << (MySqlParser.RECOVER - 553)) | (1 << (MySqlParser.RECURSIVE - 553)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 553)) | (1 << (MySqlParser.REDUNDANT - 553)) | (1 << (MySqlParser.RELAY - 553)) | (1 << (MySqlParser.RELAY_LOG_FILE - 553)) | (1 << (MySqlParser.RELAY_LOG_POS - 553)) | (1 << (MySqlParser.RELAYLOG - 553)) | (1 << (MySqlParser.REMOVE - 553)) | (1 << (MySqlParser.REORGANIZE - 553)) | (1 << (MySqlParser.REPAIR - 553)) | (1 << (MySqlParser.REPLICATE_DO_DB - 553)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 553)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 553)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 553)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 553)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 553)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 553)) | (1 << (MySqlParser.REPLICATION - 553)) | (1 << (MySqlParser.RESET - 553)) | (1 << (MySqlParser.RESTART - 553)) | (1 << (MySqlParser.RESUME - 553)) | (1 << (MySqlParser.RETURNED_SQLSTATE - 553)) | (1 << (MySqlParser.RETURNS - 553)) | (1 << (MySqlParser.ROLE - 553)) | (1 << (MySqlParser.ROLLBACK - 553)) | (1 << (MySqlParser.ROLLUP - 553)) | (1 << (MySqlParser.ROTATE - 553)) | (1 << (MySqlParser.ROW - 553)) | (1 << (MySqlParser.ROWS - 553)) | (1 << (MySqlParser.ROW_FORMAT - 553)) | (1 << (MySqlParser.RTREE - 553)) | (1 << (MySqlParser.SAVEPOINT - 553)) | (1 << (MySqlParser.SCHEDULE - 553)) | (1 << (MySqlParser.SECURITY - 553)) | (1 << (MySqlParser.SEQUENCE - 553)) | (1 << (MySqlParser.SERVER - 553)) | (1 << (MySqlParser.SESSION - 553)) | (1 << (MySqlParser.SHARE - 553)) | (1 << (MySqlParser.SHARED - 553)) | (1 << (MySqlParser.SIGNED - 553)) | (1 << (MySqlParser.SIMPLE - 553)) | (1 << (MySqlParser.SLAVE - 553)) | (1 << (MySqlParser.SLOW - 553)) | (1 << (MySqlParser.SNAPSHOT - 553)) | (1 << (MySqlParser.SOCKET - 553)) | (1 << (MySqlParser.SOME - 553)) | (1 << (MySqlParser.SONAME - 553)) | (1 << (MySqlParser.SOUNDS - 553)) | (1 << (MySqlParser.SOURCE - 553)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 553)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 553)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 553)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 553)) | (1 << (MySqlParser.SQL_CACHE - 553)) | (1 << (MySqlParser.SQL_NO_CACHE - 553)) | (1 << (MySqlParser.SQL_THREAD - 553)) | (1 << (MySqlParser.START - 553)) | (1 << (MySqlParser.STARTS - 553)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 553)) | (1 << (MySqlParser.STATS_PERSISTENT - 553)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 553)))) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & ((1 << (MySqlParser.STATUS - 617)) | (1 << (MySqlParser.STOP - 617)) | (1 << (MySqlParser.STORAGE - 617)) | (1 << (MySqlParser.STRING - 617)) | (1 << (MySqlParser.SUBCLASS_ORIGIN - 617)) | (1 << (MySqlParser.SUBJECT - 617)) | (1 << (MySqlParser.SUBPARTITION - 617)) | (1 << (MySqlParser.SUBPARTITIONS - 617)) | (1 << (MySqlParser.SUSPEND - 617)) | (1 << (MySqlParser.SWAPS - 617)) | (1 << (MySqlParser.SWITCHES - 617)) | (1 << (MySqlParser.TABLE_NAME - 617)) | (1 << (MySqlParser.TABLESPACE - 617)) | (1 << (MySqlParser.TEMPORARY - 617)) | (1 << (MySqlParser.TEMPTABLE - 617)) | (1 << (MySqlParser.THAN - 617)) | (1 << (MySqlParser.TRADITIONAL - 617)) | (1 << (MySqlParser.TRANSACTION - 617)) | (1 << (MySqlParser.TRANSACTIONAL - 617)) | (1 << (MySqlParser.TRIGGERS - 617)) | (1 << (MySqlParser.TRUNCATE - 617)) | (1 << (MySqlParser.UNDEFINED - 617)) | (1 << (MySqlParser.UNDOFILE - 617)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 617)) | (1 << (MySqlParser.UNINSTALL - 617)) | (1 << (MySqlParser.UNKNOWN - 617)) | (1 << (MySqlParser.UNTIL - 617)) | (1 << (MySqlParser.UPGRADE - 617)) | (1 << (MySqlParser.USER - 617)) | (1 << (MySqlParser.USE_FRM - 617)) | (1 << (MySqlParser.USER_RESOURCES - 617)) | (1 << (MySqlParser.VALIDATION - 617)) | (1 << (MySqlParser.VALUE - 617)) | (1 << (MySqlParser.VARIABLES - 617)) | (1 << (MySqlParser.VIEW - 617)) | (1 << (MySqlParser.WAIT - 617)) | (1 << (MySqlParser.WARNINGS - 617)) | (1 << (MySqlParser.WITHOUT - 617)) | (1 << (MySqlParser.WORK - 617)) | (1 << (MySqlParser.WRAPPER - 617)) | (1 << (MySqlParser.X509 - 617)) | (1 << (MySqlParser.XA - 617)) | (1 << (MySqlParser.XML - 617)) | (1 << (MySqlParser.EUR - 617)) | (1 << (MySqlParser.USA - 617)) | (1 << (MySqlParser.JIS - 617)) | (1 << (MySqlParser.ISO - 617)) | (1 << (MySqlParser.INTERNAL - 617)))) != 0) or ((((_la - 690)) & ~0x3f) == 0 and ((1 << (_la - 690)) & ((1 << (MySqlParser.AUDIT_ADMIN - 690)) | (1 << (MySqlParser.BACKUP_ADMIN - 690)) | (1 << (MySqlParser.BINLOG_ADMIN - 690)) | (1 << (MySqlParser.BINLOG_ENCRYPTION_ADMIN - 690)) | (1 << (MySqlParser.CLONE_ADMIN - 690)) | (1 << (MySqlParser.CONNECTION_ADMIN - 690)) | (1 << (MySqlParser.ENCRYPTION_KEY_ADMIN - 690)) | (1 << (MySqlParser.FIREWALL_ADMIN - 690)) | (1 << (MySqlParser.FIREWALL_USER - 690)) | (1 << (MySqlParser.ADMIN - 690)) | (1 << (MySqlParser.GROUP_REPLICATION_ADMIN - 690)) | (1 << (MySqlParser.INNODB_REDO_LOG_ARCHIVE - 690)) | (1 << (MySqlParser.NDB_STORED_USER - 690)) | (1 << (MySqlParser.PASSWORDLESS_USER_ADMIN - 690)) | (1 << (MySqlParser.PERSIST_RO_VARIABLES_ADMIN - 690)) | (1 << (MySqlParser.REPLICATION_APPLIER - 690)) | (1 << (MySqlParser.REPLICATION_SLAVE_ADMIN - 690)) | (1 << (MySqlParser.RESOURCE_GROUP_ADMIN - 690)) | (1 << (MySqlParser.RESOURCE_GROUP_USER - 690)) | (1 << (MySqlParser.ROLE_ADMIN - 690)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 690)) | (1 << (MySqlParser.SET_USER_ID - 690)) | (1 << (MySqlParser.SHOW_ROUTINE - 690)) | (1 << (MySqlParser.SYSTEM_VARIABLES_ADMIN - 690)) | (1 << (MySqlParser.TABLE_ENCRYPTION_ADMIN - 690)) | (1 << (MySqlParser.VERSION_TOKEN_ADMIN - 690)) | (1 << (MySqlParser.XA_RECOVER_ADMIN - 690)))) != 0) or _la==MySqlParser.MEMORY or _la==MySqlParser.CATALOG_NAME or _la==MySqlParser.ENGINE_ATTRIBUTE or _la==MySqlParser.SECONDARY_ENGINE_ATTRIBUTE or _la==MySqlParser.SCHEMA_NAME or ((((_la - 1083)) & ~0x3f) == 0 and ((1 << (_la - 1083)) & ((1 << (MySqlParser.VIA - 1083)) | (1 << (MySqlParser.LASTVAL - 1083)) | (1 << (MySqlParser.NEXTVAL - 1083)) | (1 << (MySqlParser.SETVAL - 1083)) | (1 << (MySqlParser.PREVIOUS - 1083)) | (1 << (MySqlParser.PERSISTENT - 1083)) | (1 << (MySqlParser.BINLOG_MONITOR - 1083)) | (1 << (MySqlParser.BINLOG_REPLAY - 1083)) | (1 << (MySqlParser.FEDERATED_ADMIN - 1083)) | (1 << (MySqlParser.READ_ONLY_ADMIN - 1083)) | (1 << (MySqlParser.REPLICA - 1083)) | (1 << (MySqlParser.REPLICATION_MASTER_ADMIN - 1083)))) != 0) or _la==MySqlParser.ENCRYPTED or _la==MySqlParser.ENCRYPTION_KEY_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(MySqlParser.ABS, 0)

        def ACOS(self):
            return self.getToken(MySqlParser.ACOS, 0)

        def ADDDATE(self):
            return self.getToken(MySqlParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(MySqlParser.ADDTIME, 0)

        def AES_DECRYPT(self):
            return self.getToken(MySqlParser.AES_DECRYPT, 0)

        def AES_ENCRYPT(self):
            return self.getToken(MySqlParser.AES_ENCRYPT, 0)

        def AREA(self):
            return self.getToken(MySqlParser.AREA, 0)

        def ASBINARY(self):
            return self.getToken(MySqlParser.ASBINARY, 0)

        def ASIN(self):
            return self.getToken(MySqlParser.ASIN, 0)

        def ASTEXT(self):
            return self.getToken(MySqlParser.ASTEXT, 0)

        def ASWKB(self):
            return self.getToken(MySqlParser.ASWKB, 0)

        def ASWKT(self):
            return self.getToken(MySqlParser.ASWKT, 0)

        def ASYMMETRIC_DECRYPT(self):
            return self.getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0)

        def ASYMMETRIC_DERIVE(self):
            return self.getToken(MySqlParser.ASYMMETRIC_DERIVE, 0)

        def ASYMMETRIC_ENCRYPT(self):
            return self.getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0)

        def ASYMMETRIC_SIGN(self):
            return self.getToken(MySqlParser.ASYMMETRIC_SIGN, 0)

        def ASYMMETRIC_VERIFY(self):
            return self.getToken(MySqlParser.ASYMMETRIC_VERIFY, 0)

        def ATAN(self):
            return self.getToken(MySqlParser.ATAN, 0)

        def ATAN2(self):
            return self.getToken(MySqlParser.ATAN2, 0)

        def BENCHMARK(self):
            return self.getToken(MySqlParser.BENCHMARK, 0)

        def BIN(self):
            return self.getToken(MySqlParser.BIN, 0)

        def BIT_COUNT(self):
            return self.getToken(MySqlParser.BIT_COUNT, 0)

        def BIT_LENGTH(self):
            return self.getToken(MySqlParser.BIT_LENGTH, 0)

        def BUFFER(self):
            return self.getToken(MySqlParser.BUFFER, 0)

        def CEIL(self):
            return self.getToken(MySqlParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(MySqlParser.CEILING, 0)

        def CENTROID(self):
            return self.getToken(MySqlParser.CENTROID, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(MySqlParser.CHARACTER_LENGTH, 0)

        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def CHAR_LENGTH(self):
            return self.getToken(MySqlParser.CHAR_LENGTH, 0)

        def COERCIBILITY(self):
            return self.getToken(MySqlParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(MySqlParser.COLLATION, 0)

        def COMPRESS(self):
            return self.getToken(MySqlParser.COMPRESS, 0)

        def CONCAT(self):
            return self.getToken(MySqlParser.CONCAT, 0)

        def CONCAT_WS(self):
            return self.getToken(MySqlParser.CONCAT_WS, 0)

        def CONNECTION_ID(self):
            return self.getToken(MySqlParser.CONNECTION_ID, 0)

        def CONV(self):
            return self.getToken(MySqlParser.CONV, 0)

        def CONVERT_TZ(self):
            return self.getToken(MySqlParser.CONVERT_TZ, 0)

        def COS(self):
            return self.getToken(MySqlParser.COS, 0)

        def COT(self):
            return self.getToken(MySqlParser.COT, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def CRC32(self):
            return self.getToken(MySqlParser.CRC32, 0)

        def CREATE_ASYMMETRIC_PRIV_KEY(self):
            return self.getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0)

        def CREATE_ASYMMETRIC_PUB_KEY(self):
            return self.getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0)

        def CREATE_DH_PARAMETERS(self):
            return self.getToken(MySqlParser.CREATE_DH_PARAMETERS, 0)

        def CREATE_DIGEST(self):
            return self.getToken(MySqlParser.CREATE_DIGEST, 0)

        def CROSSES(self):
            return self.getToken(MySqlParser.CROSSES, 0)

        def CUME_DIST(self):
            return self.getToken(MySqlParser.CUME_DIST, 0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def DATEDIFF(self):
            return self.getToken(MySqlParser.DATEDIFF, 0)

        def DATE_FORMAT(self):
            return self.getToken(MySqlParser.DATE_FORMAT, 0)

        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def DAYNAME(self):
            return self.getToken(MySqlParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(MySqlParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(MySqlParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(MySqlParser.DAYOFYEAR, 0)

        def DECODE(self):
            return self.getToken(MySqlParser.DECODE, 0)

        def DEGREES(self):
            return self.getToken(MySqlParser.DEGREES, 0)

        def DENSE_RANK(self):
            return self.getToken(MySqlParser.DENSE_RANK, 0)

        def DES_DECRYPT(self):
            return self.getToken(MySqlParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(MySqlParser.DES_ENCRYPT, 0)

        def DIMENSION(self):
            return self.getToken(MySqlParser.DIMENSION, 0)

        def DISJOINT(self):
            return self.getToken(MySqlParser.DISJOINT, 0)

        def ELT(self):
            return self.getToken(MySqlParser.ELT, 0)

        def ENCODE(self):
            return self.getToken(MySqlParser.ENCODE, 0)

        def ENCRYPT(self):
            return self.getToken(MySqlParser.ENCRYPT, 0)

        def ENDPOINT(self):
            return self.getToken(MySqlParser.ENDPOINT, 0)

        def ENVELOPE(self):
            return self.getToken(MySqlParser.ENVELOPE, 0)

        def EQUALS(self):
            return self.getToken(MySqlParser.EQUALS, 0)

        def EXP(self):
            return self.getToken(MySqlParser.EXP, 0)

        def EXPORT_SET(self):
            return self.getToken(MySqlParser.EXPORT_SET, 0)

        def EXTERIORRING(self):
            return self.getToken(MySqlParser.EXTERIORRING, 0)

        def EXTRACTVALUE(self):
            return self.getToken(MySqlParser.EXTRACTVALUE, 0)

        def FIELD(self):
            return self.getToken(MySqlParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(MySqlParser.FIND_IN_SET, 0)

        def FIRST_VALUE(self):
            return self.getToken(MySqlParser.FIRST_VALUE, 0)

        def FLOOR(self):
            return self.getToken(MySqlParser.FLOOR, 0)

        def FORMAT(self):
            return self.getToken(MySqlParser.FORMAT, 0)

        def FOUND_ROWS(self):
            return self.getToken(MySqlParser.FOUND_ROWS, 0)

        def FROM_BASE64(self):
            return self.getToken(MySqlParser.FROM_BASE64, 0)

        def FROM_DAYS(self):
            return self.getToken(MySqlParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(MySqlParser.FROM_UNIXTIME, 0)

        def GEOMCOLLFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMCOLLFROMTEXT, 0)

        def GEOMCOLLFROMWKB(self):
            return self.getToken(MySqlParser.GEOMCOLLFROMWKB, 0)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTION, 0)

        def GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0)

        def GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0)

        def GEOMETRYFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMETRYFROMTEXT, 0)

        def GEOMETRYFROMWKB(self):
            return self.getToken(MySqlParser.GEOMETRYFROMWKB, 0)

        def GEOMETRYN(self):
            return self.getToken(MySqlParser.GEOMETRYN, 0)

        def GEOMETRYTYPE(self):
            return self.getToken(MySqlParser.GEOMETRYTYPE, 0)

        def GEOMFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMFROMTEXT, 0)

        def GEOMFROMWKB(self):
            return self.getToken(MySqlParser.GEOMFROMWKB, 0)

        def GET_FORMAT(self):
            return self.getToken(MySqlParser.GET_FORMAT, 0)

        def GET_LOCK(self):
            return self.getToken(MySqlParser.GET_LOCK, 0)

        def GLENGTH(self):
            return self.getToken(MySqlParser.GLENGTH, 0)

        def GREATEST(self):
            return self.getToken(MySqlParser.GREATEST, 0)

        def GTID_SUBSET(self):
            return self.getToken(MySqlParser.GTID_SUBSET, 0)

        def GTID_SUBTRACT(self):
            return self.getToken(MySqlParser.GTID_SUBTRACT, 0)

        def HEX(self):
            return self.getToken(MySqlParser.HEX, 0)

        def HOUR(self):
            return self.getToken(MySqlParser.HOUR, 0)

        def IFNULL(self):
            return self.getToken(MySqlParser.IFNULL, 0)

        def INET6_ATON(self):
            return self.getToken(MySqlParser.INET6_ATON, 0)

        def INET6_NTOA(self):
            return self.getToken(MySqlParser.INET6_NTOA, 0)

        def INET_ATON(self):
            return self.getToken(MySqlParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(MySqlParser.INET_NTOA, 0)

        def INSTR(self):
            return self.getToken(MySqlParser.INSTR, 0)

        def INTERIORRINGN(self):
            return self.getToken(MySqlParser.INTERIORRINGN, 0)

        def INTERSECTS(self):
            return self.getToken(MySqlParser.INTERSECTS, 0)

        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def ISCLOSED(self):
            return self.getToken(MySqlParser.ISCLOSED, 0)

        def ISEMPTY(self):
            return self.getToken(MySqlParser.ISEMPTY, 0)

        def ISNULL(self):
            return self.getToken(MySqlParser.ISNULL, 0)

        def ISSIMPLE(self):
            return self.getToken(MySqlParser.ISSIMPLE, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(MySqlParser.IS_FREE_LOCK, 0)

        def IS_IPV4(self):
            return self.getToken(MySqlParser.IS_IPV4, 0)

        def IS_IPV4_COMPAT(self):
            return self.getToken(MySqlParser.IS_IPV4_COMPAT, 0)

        def IS_IPV4_MAPPED(self):
            return self.getToken(MySqlParser.IS_IPV4_MAPPED, 0)

        def IS_IPV6(self):
            return self.getToken(MySqlParser.IS_IPV6, 0)

        def IS_USED_LOCK(self):
            return self.getToken(MySqlParser.IS_USED_LOCK, 0)

        def LAG(self):
            return self.getToken(MySqlParser.LAG, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(MySqlParser.LAST_INSERT_ID, 0)

        def LAST_VALUE(self):
            return self.getToken(MySqlParser.LAST_VALUE, 0)

        def LCASE(self):
            return self.getToken(MySqlParser.LCASE, 0)

        def LEAD(self):
            return self.getToken(MySqlParser.LEAD, 0)

        def LEAST(self):
            return self.getToken(MySqlParser.LEAST, 0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(MySqlParser.LENGTH, 0)

        def LINEFROMTEXT(self):
            return self.getToken(MySqlParser.LINEFROMTEXT, 0)

        def LINEFROMWKB(self):
            return self.getToken(MySqlParser.LINEFROMWKB, 0)

        def LINESTRING(self):
            return self.getToken(MySqlParser.LINESTRING, 0)

        def LINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.LINESTRINGFROMTEXT, 0)

        def LINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.LINESTRINGFROMWKB, 0)

        def LN(self):
            return self.getToken(MySqlParser.LN, 0)

        def LOAD_FILE(self):
            return self.getToken(MySqlParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(MySqlParser.LOCATE, 0)

        def LOG(self):
            return self.getToken(MySqlParser.LOG, 0)

        def LOG10(self):
            return self.getToken(MySqlParser.LOG10, 0)

        def LOG2(self):
            return self.getToken(MySqlParser.LOG2, 0)

        def LOWER(self):
            return self.getToken(MySqlParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(MySqlParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(MySqlParser.LTRIM, 0)

        def MAKEDATE(self):
            return self.getToken(MySqlParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(MySqlParser.MAKETIME, 0)

        def MAKE_SET(self):
            return self.getToken(MySqlParser.MAKE_SET, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(MySqlParser.MASTER_POS_WAIT, 0)

        def MBRCONTAINS(self):
            return self.getToken(MySqlParser.MBRCONTAINS, 0)

        def MBRDISJOINT(self):
            return self.getToken(MySqlParser.MBRDISJOINT, 0)

        def MBREQUAL(self):
            return self.getToken(MySqlParser.MBREQUAL, 0)

        def MBRINTERSECTS(self):
            return self.getToken(MySqlParser.MBRINTERSECTS, 0)

        def MBROVERLAPS(self):
            return self.getToken(MySqlParser.MBROVERLAPS, 0)

        def MBRTOUCHES(self):
            return self.getToken(MySqlParser.MBRTOUCHES, 0)

        def MBRWITHIN(self):
            return self.getToken(MySqlParser.MBRWITHIN, 0)

        def MD5(self):
            return self.getToken(MySqlParser.MD5, 0)

        def MICROSECOND(self):
            return self.getToken(MySqlParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(MySqlParser.MINUTE, 0)

        def MLINEFROMTEXT(self):
            return self.getToken(MySqlParser.MLINEFROMTEXT, 0)

        def MLINEFROMWKB(self):
            return self.getToken(MySqlParser.MLINEFROMWKB, 0)

        def MOD(self):
            return self.getToken(MySqlParser.MOD, 0)

        def MONTH(self):
            return self.getToken(MySqlParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(MySqlParser.MONTHNAME, 0)

        def MPOINTFROMTEXT(self):
            return self.getToken(MySqlParser.MPOINTFROMTEXT, 0)

        def MPOINTFROMWKB(self):
            return self.getToken(MySqlParser.MPOINTFROMWKB, 0)

        def MPOLYFROMTEXT(self):
            return self.getToken(MySqlParser.MPOLYFROMTEXT, 0)

        def MPOLYFROMWKB(self):
            return self.getToken(MySqlParser.MPOLYFROMWKB, 0)

        def MULTILINESTRING(self):
            return self.getToken(MySqlParser.MULTILINESTRING, 0)

        def MULTILINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0)

        def MULTILINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0)

        def MULTIPOINT(self):
            return self.getToken(MySqlParser.MULTIPOINT, 0)

        def MULTIPOINTFROMTEXT(self):
            return self.getToken(MySqlParser.MULTIPOINTFROMTEXT, 0)

        def MULTIPOINTFROMWKB(self):
            return self.getToken(MySqlParser.MULTIPOINTFROMWKB, 0)

        def MULTIPOLYGON(self):
            return self.getToken(MySqlParser.MULTIPOLYGON, 0)

        def MULTIPOLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0)

        def MULTIPOLYGONFROMWKB(self):
            return self.getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0)

        def NAME_CONST(self):
            return self.getToken(MySqlParser.NAME_CONST, 0)

        def NTH_VALUE(self):
            return self.getToken(MySqlParser.NTH_VALUE, 0)

        def NTILE(self):
            return self.getToken(MySqlParser.NTILE, 0)

        def NULLIF(self):
            return self.getToken(MySqlParser.NULLIF, 0)

        def NUMGEOMETRIES(self):
            return self.getToken(MySqlParser.NUMGEOMETRIES, 0)

        def NUMINTERIORRINGS(self):
            return self.getToken(MySqlParser.NUMINTERIORRINGS, 0)

        def NUMPOINTS(self):
            return self.getToken(MySqlParser.NUMPOINTS, 0)

        def OCT(self):
            return self.getToken(MySqlParser.OCT, 0)

        def OCTET_LENGTH(self):
            return self.getToken(MySqlParser.OCTET_LENGTH, 0)

        def ORD(self):
            return self.getToken(MySqlParser.ORD, 0)

        def OVERLAPS(self):
            return self.getToken(MySqlParser.OVERLAPS, 0)

        def PERCENT_RANK(self):
            return self.getToken(MySqlParser.PERCENT_RANK, 0)

        def PERIOD_ADD(self):
            return self.getToken(MySqlParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(MySqlParser.PERIOD_DIFF, 0)

        def PI(self):
            return self.getToken(MySqlParser.PI, 0)

        def POINT(self):
            return self.getToken(MySqlParser.POINT, 0)

        def POINTFROMTEXT(self):
            return self.getToken(MySqlParser.POINTFROMTEXT, 0)

        def POINTFROMWKB(self):
            return self.getToken(MySqlParser.POINTFROMWKB, 0)

        def POINTN(self):
            return self.getToken(MySqlParser.POINTN, 0)

        def POLYFROMTEXT(self):
            return self.getToken(MySqlParser.POLYFROMTEXT, 0)

        def POLYFROMWKB(self):
            return self.getToken(MySqlParser.POLYFROMWKB, 0)

        def POLYGON(self):
            return self.getToken(MySqlParser.POLYGON, 0)

        def POLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.POLYGONFROMTEXT, 0)

        def POLYGONFROMWKB(self):
            return self.getToken(MySqlParser.POLYGONFROMWKB, 0)

        def POSITION(self):
            return self.getToken(MySqlParser.POSITION, 0)

        def POW(self):
            return self.getToken(MySqlParser.POW, 0)

        def POWER(self):
            return self.getToken(MySqlParser.POWER, 0)

        def QUARTER(self):
            return self.getToken(MySqlParser.QUARTER, 0)

        def QUOTE(self):
            return self.getToken(MySqlParser.QUOTE, 0)

        def RADIANS(self):
            return self.getToken(MySqlParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(MySqlParser.RAND, 0)

        def RANK(self):
            return self.getToken(MySqlParser.RANK, 0)

        def RANDOM_BYTES(self):
            return self.getToken(MySqlParser.RANDOM_BYTES, 0)

        def RELEASE_LOCK(self):
            return self.getToken(MySqlParser.RELEASE_LOCK, 0)

        def REVERSE(self):
            return self.getToken(MySqlParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)

        def ROUND(self):
            return self.getToken(MySqlParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(MySqlParser.ROW_COUNT, 0)

        def ROW_NUMBER(self):
            return self.getToken(MySqlParser.ROW_NUMBER, 0)

        def RPAD(self):
            return self.getToken(MySqlParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(MySqlParser.RTRIM, 0)

        def SECOND(self):
            return self.getToken(MySqlParser.SECOND, 0)

        def SEC_TO_TIME(self):
            return self.getToken(MySqlParser.SEC_TO_TIME, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def SESSION_USER(self):
            return self.getToken(MySqlParser.SESSION_USER, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0)

        def SHA(self):
            return self.getToken(MySqlParser.SHA, 0)

        def SHA1(self):
            return self.getToken(MySqlParser.SHA1, 0)

        def SHA2(self):
            return self.getToken(MySqlParser.SHA2, 0)

        def SIGN(self):
            return self.getToken(MySqlParser.SIGN, 0)

        def SIN(self):
            return self.getToken(MySqlParser.SIN, 0)

        def SLEEP(self):
            return self.getToken(MySqlParser.SLEEP, 0)

        def SOUNDEX(self):
            return self.getToken(MySqlParser.SOUNDEX, 0)

        def SQL_THREAD_WAIT_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0)

        def SQRT(self):
            return self.getToken(MySqlParser.SQRT, 0)

        def SRID(self):
            return self.getToken(MySqlParser.SRID, 0)

        def STARTPOINT(self):
            return self.getToken(MySqlParser.STARTPOINT, 0)

        def STRCMP(self):
            return self.getToken(MySqlParser.STRCMP, 0)

        def STR_TO_DATE(self):
            return self.getToken(MySqlParser.STR_TO_DATE, 0)

        def ST_AREA(self):
            return self.getToken(MySqlParser.ST_AREA, 0)

        def ST_ASBINARY(self):
            return self.getToken(MySqlParser.ST_ASBINARY, 0)

        def ST_ASTEXT(self):
            return self.getToken(MySqlParser.ST_ASTEXT, 0)

        def ST_ASWKB(self):
            return self.getToken(MySqlParser.ST_ASWKB, 0)

        def ST_ASWKT(self):
            return self.getToken(MySqlParser.ST_ASWKT, 0)

        def ST_BUFFER(self):
            return self.getToken(MySqlParser.ST_BUFFER, 0)

        def ST_CENTROID(self):
            return self.getToken(MySqlParser.ST_CENTROID, 0)

        def ST_CONTAINS(self):
            return self.getToken(MySqlParser.ST_CONTAINS, 0)

        def ST_CROSSES(self):
            return self.getToken(MySqlParser.ST_CROSSES, 0)

        def ST_DIFFERENCE(self):
            return self.getToken(MySqlParser.ST_DIFFERENCE, 0)

        def ST_DIMENSION(self):
            return self.getToken(MySqlParser.ST_DIMENSION, 0)

        def ST_DISJOINT(self):
            return self.getToken(MySqlParser.ST_DISJOINT, 0)

        def ST_DISTANCE(self):
            return self.getToken(MySqlParser.ST_DISTANCE, 0)

        def ST_ENDPOINT(self):
            return self.getToken(MySqlParser.ST_ENDPOINT, 0)

        def ST_ENVELOPE(self):
            return self.getToken(MySqlParser.ST_ENVELOPE, 0)

        def ST_EQUALS(self):
            return self.getToken(MySqlParser.ST_EQUALS, 0)

        def ST_EXTERIORRING(self):
            return self.getToken(MySqlParser.ST_EXTERIORRING, 0)

        def ST_GEOMCOLLFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0)

        def ST_GEOMCOLLFROMTXT(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0)

        def ST_GEOMCOLLFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0)

        def ST_GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0)

        def ST_GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0)

        def ST_GEOMETRYFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0)

        def ST_GEOMETRYFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0)

        def ST_GEOMETRYN(self):
            return self.getToken(MySqlParser.ST_GEOMETRYN, 0)

        def ST_GEOMETRYTYPE(self):
            return self.getToken(MySqlParser.ST_GEOMETRYTYPE, 0)

        def ST_GEOMFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMFROMTEXT, 0)

        def ST_GEOMFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMFROMWKB, 0)

        def ST_INTERIORRINGN(self):
            return self.getToken(MySqlParser.ST_INTERIORRINGN, 0)

        def ST_INTERSECTION(self):
            return self.getToken(MySqlParser.ST_INTERSECTION, 0)

        def ST_INTERSECTS(self):
            return self.getToken(MySqlParser.ST_INTERSECTS, 0)

        def ST_ISCLOSED(self):
            return self.getToken(MySqlParser.ST_ISCLOSED, 0)

        def ST_ISEMPTY(self):
            return self.getToken(MySqlParser.ST_ISEMPTY, 0)

        def ST_ISSIMPLE(self):
            return self.getToken(MySqlParser.ST_ISSIMPLE, 0)

        def ST_LINEFROMTEXT(self):
            return self.getToken(MySqlParser.ST_LINEFROMTEXT, 0)

        def ST_LINEFROMWKB(self):
            return self.getToken(MySqlParser.ST_LINEFROMWKB, 0)

        def ST_LINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0)

        def ST_LINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0)

        def ST_NUMGEOMETRIES(self):
            return self.getToken(MySqlParser.ST_NUMGEOMETRIES, 0)

        def ST_NUMINTERIORRING(self):
            return self.getToken(MySqlParser.ST_NUMINTERIORRING, 0)

        def ST_NUMINTERIORRINGS(self):
            return self.getToken(MySqlParser.ST_NUMINTERIORRINGS, 0)

        def ST_NUMPOINTS(self):
            return self.getToken(MySqlParser.ST_NUMPOINTS, 0)

        def ST_OVERLAPS(self):
            return self.getToken(MySqlParser.ST_OVERLAPS, 0)

        def ST_POINTFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POINTFROMTEXT, 0)

        def ST_POINTFROMWKB(self):
            return self.getToken(MySqlParser.ST_POINTFROMWKB, 0)

        def ST_POINTN(self):
            return self.getToken(MySqlParser.ST_POINTN, 0)

        def ST_POLYFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POLYFROMTEXT, 0)

        def ST_POLYFROMWKB(self):
            return self.getToken(MySqlParser.ST_POLYFROMWKB, 0)

        def ST_POLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POLYGONFROMTEXT, 0)

        def ST_POLYGONFROMWKB(self):
            return self.getToken(MySqlParser.ST_POLYGONFROMWKB, 0)

        def ST_SRID(self):
            return self.getToken(MySqlParser.ST_SRID, 0)

        def ST_STARTPOINT(self):
            return self.getToken(MySqlParser.ST_STARTPOINT, 0)

        def ST_SYMDIFFERENCE(self):
            return self.getToken(MySqlParser.ST_SYMDIFFERENCE, 0)

        def ST_TOUCHES(self):
            return self.getToken(MySqlParser.ST_TOUCHES, 0)

        def ST_UNION(self):
            return self.getToken(MySqlParser.ST_UNION, 0)

        def ST_WITHIN(self):
            return self.getToken(MySqlParser.ST_WITHIN, 0)

        def ST_X(self):
            return self.getToken(MySqlParser.ST_X, 0)

        def ST_Y(self):
            return self.getToken(MySqlParser.ST_Y, 0)

        def SUBDATE(self):
            return self.getToken(MySqlParser.SUBDATE, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(MySqlParser.SUBSTRING_INDEX, 0)

        def SUBTIME(self):
            return self.getToken(MySqlParser.SUBTIME, 0)

        def SYSTEM_USER(self):
            return self.getToken(MySqlParser.SYSTEM_USER, 0)

        def TAN(self):
            return self.getToken(MySqlParser.TAN, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def TIMEDIFF(self):
            return self.getToken(MySqlParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(MySqlParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(MySqlParser.TIMESTAMPDIFF, 0)

        def TIME_FORMAT(self):
            return self.getToken(MySqlParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(MySqlParser.TIME_TO_SEC, 0)

        def TOUCHES(self):
            return self.getToken(MySqlParser.TOUCHES, 0)

        def TO_BASE64(self):
            return self.getToken(MySqlParser.TO_BASE64, 0)

        def TO_DAYS(self):
            return self.getToken(MySqlParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(MySqlParser.TO_SECONDS, 0)

        def UCASE(self):
            return self.getToken(MySqlParser.UCASE, 0)

        def UNCOMPRESS(self):
            return self.getToken(MySqlParser.UNCOMPRESS, 0)

        def UNCOMPRESSED_LENGTH(self):
            return self.getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0)

        def UNHEX(self):
            return self.getToken(MySqlParser.UNHEX, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(MySqlParser.UNIX_TIMESTAMP, 0)

        def UPDATEXML(self):
            return self.getToken(MySqlParser.UPDATEXML, 0)

        def UPPER(self):
            return self.getToken(MySqlParser.UPPER, 0)

        def UUID(self):
            return self.getToken(MySqlParser.UUID, 0)

        def UUID_SHORT(self):
            return self.getToken(MySqlParser.UUID_SHORT, 0)

        def VALIDATE_PASSWORD_STRENGTH(self):
            return self.getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0)

        def VERSION(self):
            return self.getToken(MySqlParser.VERSION, 0)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)

        def WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)

        def WEEK(self):
            return self.getToken(MySqlParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(MySqlParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(MySqlParser.WEEKOFYEAR, 0)

        def WEIGHT_STRING(self):
            return self.getToken(MySqlParser.WEIGHT_STRING, 0)

        def WITHIN(self):
            return self.getToken(MySqlParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(MySqlParser.YEARWEEK, 0)

        def Y_FUNCTION(self):
            return self.getToken(MySqlParser.Y_FUNCTION, 0)

        def X_FUNCTION(self):
            return self.getToken(MySqlParser.X_FUNCTION, 0)

        def JSON_ARRAY(self):
            return self.getToken(MySqlParser.JSON_ARRAY, 0)

        def JSON_OBJECT(self):
            return self.getToken(MySqlParser.JSON_OBJECT, 0)

        def JSON_QUOTE(self):
            return self.getToken(MySqlParser.JSON_QUOTE, 0)

        def JSON_CONTAINS(self):
            return self.getToken(MySqlParser.JSON_CONTAINS, 0)

        def JSON_CONTAINS_PATH(self):
            return self.getToken(MySqlParser.JSON_CONTAINS_PATH, 0)

        def JSON_EXTRACT(self):
            return self.getToken(MySqlParser.JSON_EXTRACT, 0)

        def JSON_KEYS(self):
            return self.getToken(MySqlParser.JSON_KEYS, 0)

        def JSON_OVERLAPS(self):
            return self.getToken(MySqlParser.JSON_OVERLAPS, 0)

        def JSON_SEARCH(self):
            return self.getToken(MySqlParser.JSON_SEARCH, 0)

        def JSON_VALUE(self):
            return self.getToken(MySqlParser.JSON_VALUE, 0)

        def JSON_ARRAY_APPEND(self):
            return self.getToken(MySqlParser.JSON_ARRAY_APPEND, 0)

        def JSON_ARRAY_INSERT(self):
            return self.getToken(MySqlParser.JSON_ARRAY_INSERT, 0)

        def JSON_INSERT(self):
            return self.getToken(MySqlParser.JSON_INSERT, 0)

        def JSON_MERGE(self):
            return self.getToken(MySqlParser.JSON_MERGE, 0)

        def JSON_MERGE_PATCH(self):
            return self.getToken(MySqlParser.JSON_MERGE_PATCH, 0)

        def JSON_MERGE_PRESERVE(self):
            return self.getToken(MySqlParser.JSON_MERGE_PRESERVE, 0)

        def JSON_REMOVE(self):
            return self.getToken(MySqlParser.JSON_REMOVE, 0)

        def JSON_REPLACE(self):
            return self.getToken(MySqlParser.JSON_REPLACE, 0)

        def JSON_SET(self):
            return self.getToken(MySqlParser.JSON_SET, 0)

        def JSON_UNQUOTE(self):
            return self.getToken(MySqlParser.JSON_UNQUOTE, 0)

        def JSON_DEPTH(self):
            return self.getToken(MySqlParser.JSON_DEPTH, 0)

        def JSON_LENGTH(self):
            return self.getToken(MySqlParser.JSON_LENGTH, 0)

        def JSON_TYPE(self):
            return self.getToken(MySqlParser.JSON_TYPE, 0)

        def JSON_VALID(self):
            return self.getToken(MySqlParser.JSON_VALID, 0)

        def JSON_TABLE(self):
            return self.getToken(MySqlParser.JSON_TABLE, 0)

        def JSON_SCHEMA_VALID(self):
            return self.getToken(MySqlParser.JSON_SCHEMA_VALID, 0)

        def JSON_SCHEMA_VALIDATION_REPORT(self):
            return self.getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0)

        def JSON_PRETTY(self):
            return self.getToken(MySqlParser.JSON_PRETTY, 0)

        def JSON_STORAGE_FREE(self):
            return self.getToken(MySqlParser.JSON_STORAGE_FREE, 0)

        def JSON_STORAGE_SIZE(self):
            return self.getToken(MySqlParser.JSON_STORAGE_SIZE, 0)

        def JSON_ARRAYAGG(self):
            return self.getToken(MySqlParser.JSON_ARRAYAGG, 0)

        def JSON_OBJECTAGG(self):
            return self.getToken(MySqlParser.JSON_OBJECTAGG, 0)

        def LASTVAL(self):
            return self.getToken(MySqlParser.LASTVAL, 0)

        def NEXTVAL(self):
            return self.getToken(MySqlParser.NEXTVAL, 0)

        def SETVAL(self):
            return self.getToken(MySqlParser.SETVAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_functionNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionNameBase" ):
                listener.enterFunctionNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionNameBase" ):
                listener.exitFunctionNameBase(self)




    def functionNameBase(self):

        localctx = MySqlParser.FunctionNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_functionNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7182
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DATABASE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (MySqlParser.LEFT - 93)) | (1 << (MySqlParser.RIGHT - 93)) | (1 << (MySqlParser.SCHEMA - 93)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (MySqlParser.DATE - 211)) | (1 << (MySqlParser.TIME - 211)) | (1 << (MySqlParser.TIMESTAMP - 211)) | (1 << (MySqlParser.YEAR - 211)) | (1 << (MySqlParser.JSON_ARRAY - 211)) | (1 << (MySqlParser.JSON_OBJECT - 211)) | (1 << (MySqlParser.JSON_QUOTE - 211)) | (1 << (MySqlParser.JSON_CONTAINS - 211)) | (1 << (MySqlParser.JSON_CONTAINS_PATH - 211)) | (1 << (MySqlParser.JSON_EXTRACT - 211)) | (1 << (MySqlParser.JSON_KEYS - 211)) | (1 << (MySqlParser.JSON_OVERLAPS - 211)) | (1 << (MySqlParser.JSON_SEARCH - 211)) | (1 << (MySqlParser.JSON_VALUE - 211)) | (1 << (MySqlParser.JSON_ARRAY_APPEND - 211)) | (1 << (MySqlParser.JSON_ARRAY_INSERT - 211)) | (1 << (MySqlParser.JSON_INSERT - 211)) | (1 << (MySqlParser.JSON_MERGE - 211)) | (1 << (MySqlParser.JSON_MERGE_PATCH - 211)) | (1 << (MySqlParser.JSON_MERGE_PRESERVE - 211)) | (1 << (MySqlParser.JSON_REMOVE - 211)) | (1 << (MySqlParser.JSON_REPLACE - 211)) | (1 << (MySqlParser.JSON_SET - 211)) | (1 << (MySqlParser.JSON_UNQUOTE - 211)) | (1 << (MySqlParser.JSON_DEPTH - 211)) | (1 << (MySqlParser.JSON_LENGTH - 211)) | (1 << (MySqlParser.JSON_TYPE - 211)) | (1 << (MySqlParser.JSON_VALID - 211)) | (1 << (MySqlParser.JSON_TABLE - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALID - 211)) | (1 << (MySqlParser.JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1 << (MySqlParser.JSON_PRETTY - 211)) | (1 << (MySqlParser.JSON_STORAGE_FREE - 211)) | (1 << (MySqlParser.JSON_STORAGE_SIZE - 211)))) != 0) or ((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (MySqlParser.JSON_ARRAYAGG - 275)) | (1 << (MySqlParser.JSON_OBJECTAGG - 275)) | (1 << (MySqlParser.COUNT - 275)) | (1 << (MySqlParser.CUME_DIST - 275)) | (1 << (MySqlParser.DENSE_RANK - 275)) | (1 << (MySqlParser.FIRST_VALUE - 275)) | (1 << (MySqlParser.LAG - 275)) | (1 << (MySqlParser.LAST_VALUE - 275)) | (1 << (MySqlParser.LEAD - 275)) | (1 << (MySqlParser.NTILE - 275)) | (1 << (MySqlParser.NTH_VALUE - 275)) | (1 << (MySqlParser.PERCENT_RANK - 275)) | (1 << (MySqlParser.RANK - 275)) | (1 << (MySqlParser.ROW_NUMBER - 275)) | (1 << (MySqlParser.POSITION - 275)))) != 0) or _la==MySqlParser.INVISIBLE or ((((_la - 656)) & ~0x3f) == 0 and ((1 << (_la - 656)) & ((1 << (MySqlParser.VISIBLE - 656)) | (1 << (MySqlParser.QUARTER - 656)) | (1 << (MySqlParser.MONTH - 656)) | (1 << (MySqlParser.DAY - 656)) | (1 << (MySqlParser.HOUR - 656)) | (1 << (MySqlParser.MINUTE - 656)) | (1 << (MySqlParser.WEEK - 656)) | (1 << (MySqlParser.SECOND - 656)) | (1 << (MySqlParser.MICROSECOND - 656)) | (1 << (MySqlParser.SESSION_VARIABLES_ADMIN - 656)))) != 0) or ((((_la - 780)) & ~0x3f) == 0 and ((1 << (_la - 780)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 780)) | (1 << (MySqlParser.LINESTRING - 780)) | (1 << (MySqlParser.MULTILINESTRING - 780)) | (1 << (MySqlParser.MULTIPOINT - 780)) | (1 << (MySqlParser.MULTIPOLYGON - 780)) | (1 << (MySqlParser.POINT - 780)) | (1 << (MySqlParser.POLYGON - 780)) | (1 << (MySqlParser.ABS - 780)) | (1 << (MySqlParser.ACOS - 780)) | (1 << (MySqlParser.ADDDATE - 780)) | (1 << (MySqlParser.ADDTIME - 780)) | (1 << (MySqlParser.AES_DECRYPT - 780)) | (1 << (MySqlParser.AES_ENCRYPT - 780)) | (1 << (MySqlParser.AREA - 780)) | (1 << (MySqlParser.ASBINARY - 780)) | (1 << (MySqlParser.ASIN - 780)) | (1 << (MySqlParser.ASTEXT - 780)) | (1 << (MySqlParser.ASWKB - 780)) | (1 << (MySqlParser.ASWKT - 780)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 780)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 780)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 780)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 780)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 780)) | (1 << (MySqlParser.ATAN - 780)) | (1 << (MySqlParser.ATAN2 - 780)) | (1 << (MySqlParser.BENCHMARK - 780)) | (1 << (MySqlParser.BIN - 780)) | (1 << (MySqlParser.BIT_COUNT - 780)) | (1 << (MySqlParser.BIT_LENGTH - 780)) | (1 << (MySqlParser.BUFFER - 780)) | (1 << (MySqlParser.CEIL - 780)) | (1 << (MySqlParser.CEILING - 780)) | (1 << (MySqlParser.CENTROID - 780)) | (1 << (MySqlParser.CHARACTER_LENGTH - 780)) | (1 << (MySqlParser.CHARSET - 780)) | (1 << (MySqlParser.CHAR_LENGTH - 780)) | (1 << (MySqlParser.COERCIBILITY - 780)) | (1 << (MySqlParser.COLLATION - 780)) | (1 << (MySqlParser.COMPRESS - 780)) | (1 << (MySqlParser.CONCAT - 780)) | (1 << (MySqlParser.CONCAT_WS - 780)) | (1 << (MySqlParser.CONNECTION_ID - 780)) | (1 << (MySqlParser.CONV - 780)) | (1 << (MySqlParser.CONVERT_TZ - 780)) | (1 << (MySqlParser.COS - 780)) | (1 << (MySqlParser.COT - 780)) | (1 << (MySqlParser.CRC32 - 780)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 780)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 780)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 780)) | (1 << (MySqlParser.CREATE_DIGEST - 780)) | (1 << (MySqlParser.CROSSES - 780)) | (1 << (MySqlParser.DATEDIFF - 780)) | (1 << (MySqlParser.DATE_FORMAT - 780)) | (1 << (MySqlParser.DAYNAME - 780)) | (1 << (MySqlParser.DAYOFMONTH - 780)) | (1 << (MySqlParser.DAYOFWEEK - 780)) | (1 << (MySqlParser.DAYOFYEAR - 780)) | (1 << (MySqlParser.DECODE - 780)) | (1 << (MySqlParser.DEGREES - 780)))) != 0) or ((((_la - 844)) & ~0x3f) == 0 and ((1 << (_la - 844)) & ((1 << (MySqlParser.DES_DECRYPT - 844)) | (1 << (MySqlParser.DES_ENCRYPT - 844)) | (1 << (MySqlParser.DIMENSION - 844)) | (1 << (MySqlParser.DISJOINT - 844)) | (1 << (MySqlParser.ELT - 844)) | (1 << (MySqlParser.ENCODE - 844)) | (1 << (MySqlParser.ENCRYPT - 844)) | (1 << (MySqlParser.ENDPOINT - 844)) | (1 << (MySqlParser.ENVELOPE - 844)) | (1 << (MySqlParser.EQUALS - 844)) | (1 << (MySqlParser.EXP - 844)) | (1 << (MySqlParser.EXPORT_SET - 844)) | (1 << (MySqlParser.EXTERIORRING - 844)) | (1 << (MySqlParser.EXTRACTVALUE - 844)) | (1 << (MySqlParser.FIELD - 844)) | (1 << (MySqlParser.FIND_IN_SET - 844)) | (1 << (MySqlParser.FLOOR - 844)) | (1 << (MySqlParser.FORMAT - 844)) | (1 << (MySqlParser.FOUND_ROWS - 844)) | (1 << (MySqlParser.FROM_BASE64 - 844)) | (1 << (MySqlParser.FROM_DAYS - 844)) | (1 << (MySqlParser.FROM_UNIXTIME - 844)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 844)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 844)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 844)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 844)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 844)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 844)) | (1 << (MySqlParser.GEOMETRYN - 844)) | (1 << (MySqlParser.GEOMETRYTYPE - 844)) | (1 << (MySqlParser.GEOMFROMTEXT - 844)) | (1 << (MySqlParser.GEOMFROMWKB - 844)) | (1 << (MySqlParser.GET_FORMAT - 844)) | (1 << (MySqlParser.GET_LOCK - 844)) | (1 << (MySqlParser.GLENGTH - 844)) | (1 << (MySqlParser.GREATEST - 844)) | (1 << (MySqlParser.GTID_SUBSET - 844)) | (1 << (MySqlParser.GTID_SUBTRACT - 844)) | (1 << (MySqlParser.HEX - 844)) | (1 << (MySqlParser.IFNULL - 844)) | (1 << (MySqlParser.INET6_ATON - 844)) | (1 << (MySqlParser.INET6_NTOA - 844)) | (1 << (MySqlParser.INET_ATON - 844)) | (1 << (MySqlParser.INET_NTOA - 844)) | (1 << (MySqlParser.INSTR - 844)) | (1 << (MySqlParser.INTERIORRINGN - 844)) | (1 << (MySqlParser.INTERSECTS - 844)) | (1 << (MySqlParser.ISCLOSED - 844)) | (1 << (MySqlParser.ISEMPTY - 844)) | (1 << (MySqlParser.ISNULL - 844)) | (1 << (MySqlParser.ISSIMPLE - 844)) | (1 << (MySqlParser.IS_FREE_LOCK - 844)) | (1 << (MySqlParser.IS_IPV4 - 844)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 844)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 844)) | (1 << (MySqlParser.IS_IPV6 - 844)) | (1 << (MySqlParser.IS_USED_LOCK - 844)) | (1 << (MySqlParser.LAST_INSERT_ID - 844)) | (1 << (MySqlParser.LCASE - 844)) | (1 << (MySqlParser.LEAST - 844)) | (1 << (MySqlParser.LENGTH - 844)) | (1 << (MySqlParser.LINEFROMTEXT - 844)) | (1 << (MySqlParser.LINEFROMWKB - 844)))) != 0) or ((((_la - 908)) & ~0x3f) == 0 and ((1 << (_la - 908)) & ((1 << (MySqlParser.LINESTRINGFROMTEXT - 908)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 908)) | (1 << (MySqlParser.LN - 908)) | (1 << (MySqlParser.LOAD_FILE - 908)) | (1 << (MySqlParser.LOCATE - 908)) | (1 << (MySqlParser.LOG - 908)) | (1 << (MySqlParser.LOG10 - 908)) | (1 << (MySqlParser.LOG2 - 908)) | (1 << (MySqlParser.LOWER - 908)) | (1 << (MySqlParser.LPAD - 908)) | (1 << (MySqlParser.LTRIM - 908)) | (1 << (MySqlParser.MAKEDATE - 908)) | (1 << (MySqlParser.MAKETIME - 908)) | (1 << (MySqlParser.MAKE_SET - 908)) | (1 << (MySqlParser.MASTER_POS_WAIT - 908)) | (1 << (MySqlParser.MBRCONTAINS - 908)) | (1 << (MySqlParser.MBRDISJOINT - 908)) | (1 << (MySqlParser.MBREQUAL - 908)) | (1 << (MySqlParser.MBRINTERSECTS - 908)) | (1 << (MySqlParser.MBROVERLAPS - 908)) | (1 << (MySqlParser.MBRTOUCHES - 908)) | (1 << (MySqlParser.MBRWITHIN - 908)) | (1 << (MySqlParser.MD5 - 908)) | (1 << (MySqlParser.MLINEFROMTEXT - 908)) | (1 << (MySqlParser.MLINEFROMWKB - 908)) | (1 << (MySqlParser.MONTHNAME - 908)) | (1 << (MySqlParser.MPOINTFROMTEXT - 908)) | (1 << (MySqlParser.MPOINTFROMWKB - 908)) | (1 << (MySqlParser.MPOLYFROMTEXT - 908)) | (1 << (MySqlParser.MPOLYFROMWKB - 908)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 908)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 908)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 908)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 908)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 908)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 908)) | (1 << (MySqlParser.NAME_CONST - 908)) | (1 << (MySqlParser.NULLIF - 908)) | (1 << (MySqlParser.NUMGEOMETRIES - 908)) | (1 << (MySqlParser.NUMINTERIORRINGS - 908)) | (1 << (MySqlParser.NUMPOINTS - 908)) | (1 << (MySqlParser.OCT - 908)) | (1 << (MySqlParser.OCTET_LENGTH - 908)) | (1 << (MySqlParser.ORD - 908)) | (1 << (MySqlParser.OVERLAPS - 908)) | (1 << (MySqlParser.PERIOD_ADD - 908)) | (1 << (MySqlParser.PERIOD_DIFF - 908)) | (1 << (MySqlParser.PI - 908)) | (1 << (MySqlParser.POINTFROMTEXT - 908)) | (1 << (MySqlParser.POINTFROMWKB - 908)) | (1 << (MySqlParser.POINTN - 908)) | (1 << (MySqlParser.POLYFROMTEXT - 908)) | (1 << (MySqlParser.POLYFROMWKB - 908)) | (1 << (MySqlParser.POLYGONFROMTEXT - 908)) | (1 << (MySqlParser.POLYGONFROMWKB - 908)) | (1 << (MySqlParser.POW - 908)) | (1 << (MySqlParser.POWER - 908)) | (1 << (MySqlParser.QUOTE - 908)) | (1 << (MySqlParser.RADIANS - 908)) | (1 << (MySqlParser.RAND - 908)) | (1 << (MySqlParser.RANDOM_BYTES - 908)) | (1 << (MySqlParser.RELEASE_LOCK - 908)) | (1 << (MySqlParser.REVERSE - 908)) | (1 << (MySqlParser.ROUND - 908)))) != 0) or ((((_la - 972)) & ~0x3f) == 0 and ((1 << (_la - 972)) & ((1 << (MySqlParser.ROW_COUNT - 972)) | (1 << (MySqlParser.RPAD - 972)) | (1 << (MySqlParser.RTRIM - 972)) | (1 << (MySqlParser.SEC_TO_TIME - 972)) | (1 << (MySqlParser.SESSION_USER - 972)) | (1 << (MySqlParser.SHA - 972)) | (1 << (MySqlParser.SHA1 - 972)) | (1 << (MySqlParser.SHA2 - 972)) | (1 << (MySqlParser.SIGN - 972)) | (1 << (MySqlParser.SIN - 972)) | (1 << (MySqlParser.SLEEP - 972)) | (1 << (MySqlParser.SOUNDEX - 972)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 972)) | (1 << (MySqlParser.SQRT - 972)) | (1 << (MySqlParser.SRID - 972)) | (1 << (MySqlParser.STARTPOINT - 972)) | (1 << (MySqlParser.STRCMP - 972)) | (1 << (MySqlParser.STR_TO_DATE - 972)) | (1 << (MySqlParser.ST_AREA - 972)) | (1 << (MySqlParser.ST_ASBINARY - 972)) | (1 << (MySqlParser.ST_ASTEXT - 972)) | (1 << (MySqlParser.ST_ASWKB - 972)) | (1 << (MySqlParser.ST_ASWKT - 972)) | (1 << (MySqlParser.ST_BUFFER - 972)) | (1 << (MySqlParser.ST_CENTROID - 972)) | (1 << (MySqlParser.ST_CONTAINS - 972)) | (1 << (MySqlParser.ST_CROSSES - 972)) | (1 << (MySqlParser.ST_DIFFERENCE - 972)) | (1 << (MySqlParser.ST_DIMENSION - 972)) | (1 << (MySqlParser.ST_DISJOINT - 972)) | (1 << (MySqlParser.ST_DISTANCE - 972)) | (1 << (MySqlParser.ST_ENDPOINT - 972)) | (1 << (MySqlParser.ST_ENVELOPE - 972)) | (1 << (MySqlParser.ST_EQUALS - 972)) | (1 << (MySqlParser.ST_EXTERIORRING - 972)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 972)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 972)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 972)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 972)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 972)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 972)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 972)) | (1 << (MySqlParser.ST_GEOMETRYN - 972)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 972)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 972)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 972)) | (1 << (MySqlParser.ST_INTERIORRINGN - 972)) | (1 << (MySqlParser.ST_INTERSECTION - 972)) | (1 << (MySqlParser.ST_INTERSECTS - 972)) | (1 << (MySqlParser.ST_ISCLOSED - 972)) | (1 << (MySqlParser.ST_ISEMPTY - 972)) | (1 << (MySqlParser.ST_ISSIMPLE - 972)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 972)) | (1 << (MySqlParser.ST_LINEFROMWKB - 972)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 972)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 972)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 972)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 972)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 972)) | (1 << (MySqlParser.ST_NUMPOINTS - 972)) | (1 << (MySqlParser.ST_OVERLAPS - 972)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 972)))) != 0) or ((((_la - 1036)) & ~0x3f) == 0 and ((1 << (_la - 1036)) & ((1 << (MySqlParser.ST_POINTFROMWKB - 1036)) | (1 << (MySqlParser.ST_POINTN - 1036)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 1036)) | (1 << (MySqlParser.ST_POLYFROMWKB - 1036)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 1036)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 1036)) | (1 << (MySqlParser.ST_SRID - 1036)) | (1 << (MySqlParser.ST_STARTPOINT - 1036)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 1036)) | (1 << (MySqlParser.ST_TOUCHES - 1036)) | (1 << (MySqlParser.ST_UNION - 1036)) | (1 << (MySqlParser.ST_WITHIN - 1036)) | (1 << (MySqlParser.ST_X - 1036)) | (1 << (MySqlParser.ST_Y - 1036)) | (1 << (MySqlParser.SUBDATE - 1036)) | (1 << (MySqlParser.SUBSTRING_INDEX - 1036)) | (1 << (MySqlParser.SUBTIME - 1036)) | (1 << (MySqlParser.SYSTEM_USER - 1036)) | (1 << (MySqlParser.TAN - 1036)) | (1 << (MySqlParser.TIMEDIFF - 1036)) | (1 << (MySqlParser.TIMESTAMPADD - 1036)) | (1 << (MySqlParser.TIMESTAMPDIFF - 1036)) | (1 << (MySqlParser.TIME_FORMAT - 1036)) | (1 << (MySqlParser.TIME_TO_SEC - 1036)) | (1 << (MySqlParser.TOUCHES - 1036)) | (1 << (MySqlParser.TO_BASE64 - 1036)) | (1 << (MySqlParser.TO_DAYS - 1036)) | (1 << (MySqlParser.TO_SECONDS - 1036)) | (1 << (MySqlParser.UCASE - 1036)) | (1 << (MySqlParser.UNCOMPRESS - 1036)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 1036)) | (1 << (MySqlParser.UNHEX - 1036)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 1036)) | (1 << (MySqlParser.UPDATEXML - 1036)) | (1 << (MySqlParser.UPPER - 1036)) | (1 << (MySqlParser.UUID - 1036)) | (1 << (MySqlParser.UUID_SHORT - 1036)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 1036)) | (1 << (MySqlParser.VERSION - 1036)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1036)) | (1 << (MySqlParser.WEEKDAY - 1036)) | (1 << (MySqlParser.WEEKOFYEAR - 1036)) | (1 << (MySqlParser.WEIGHT_STRING - 1036)) | (1 << (MySqlParser.WITHIN - 1036)) | (1 << (MySqlParser.YEARWEEK - 1036)) | (1 << (MySqlParser.Y_FUNCTION - 1036)) | (1 << (MySqlParser.X_FUNCTION - 1036)) | (1 << (MySqlParser.LASTVAL - 1036)) | (1 << (MySqlParser.NEXTVAL - 1036)) | (1 << (MySqlParser.SETVAL - 1036)))) != 0) or _la==MySqlParser.MOD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[330] = self.expression_sempred
        self._predicates[331] = self.predicate_sempred
        self._predicates[332] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 12)
         




